com.google.common.annotations.Beta -> com.google.common.annotations.Beta:
com.google.common.annotations.GwtCompatible -> com.google.common.annotations.GwtCompatible:
    boolean serializable() -> serializable
    boolean emulated() -> emulated
com.google.common.annotations.GwtIncompatible -> com.google.common.annotations.GwtIncompatible:
    java.lang.String value() -> value
com.google.common.annotations.VisibleForTesting -> com.google.common.annotations.VisibleForTesting:
com.google.common.base.Absent -> com.google.common.base.a:
    com.google.common.base.Absent INSTANCE -> a
    long serialVersionUID -> serialVersionUID
    31:31:com.google.common.base.Optional withType() -> a
    34:34:void <init>() -> <init>
    38:38:boolean isPresent() -> isPresent
    43:43:java.lang.Object get() -> get
    48:48:java.lang.Object or(java.lang.Object) -> or
    54:54:com.google.common.base.Optional or(com.google.common.base.Optional) -> or
    59:60:java.lang.Object or(com.google.common.base.Supplier) -> or
    65:65:java.lang.Object orNull() -> orNull
    70:70:java.util.Set asSet() -> asSet
    75:76:com.google.common.base.Optional transform(com.google.common.base.Function) -> transform
    81:81:boolean equals(java.lang.Object) -> equals
    86:86:int hashCode() -> hashCode
    91:91:java.lang.String toString() -> toString
    95:95:java.lang.Object readResolve() -> readResolve
    27:27:void <clinit>() -> <clinit>
com.google.common.base.AbstractIterator -> com.google.common.base.b:
    int state$3a9f268 -> a
    java.lang.Object next -> b
    31:33:void <init>() -> <init>
    java.lang.Object computeNext() -> a
    48:49:java.lang.Object endOfData() -> b
    54:62:boolean hasNext() -> hasNext
    66:72:boolean tryToComputeNext() -> c
    77:83:java.lang.Object next() -> next
    88:88:void remove() -> remove
com.google.common.base.AbstractIterator$1 -> com.google.common.base.c:
    int[] $SwitchMap$com$google$common$base$AbstractIterator$State -> a
    55:55:void <clinit>() -> <clinit>
com.google.common.base.AbstractIterator$State -> com.google.common.base.d:
    int READY$3a9f268 -> a
    int NOT_READY$3a9f268 -> b
    int DONE$3a9f268 -> c
    int FAILED$3a9f268 -> d
    int[] $VALUES$714e8353 -> e
    35:35:int[] values$3e3d1bae() -> a
    35:39:void <clinit>() -> <clinit>
com.google.common.base.Ascii -> com.google.common.base.Ascii:
    byte NUL -> NUL
    byte SOH -> SOH
    byte STX -> STX
    byte ETX -> ETX
    byte EOT -> EOT
    byte ENQ -> ENQ
    byte ACK -> ACK
    byte BEL -> BEL
    byte BS -> BS
    byte HT -> HT
    byte LF -> LF
    byte NL -> NL
    byte VT -> VT
    byte FF -> FF
    byte CR -> CR
    byte SO -> SO
    byte SI -> SI
    byte DLE -> DLE
    byte DC1 -> DC1
    byte XON -> XON
    byte DC2 -> DC2
    byte DC3 -> DC3
    byte XOFF -> XOFF
    byte DC4 -> DC4
    byte NAK -> NAK
    byte SYN -> SYN
    byte ETB -> ETB
    byte CAN -> CAN
    byte EM -> EM
    byte SUB -> SUB
    byte ESC -> ESC
    byte FS -> FS
    byte GS -> GS
    byte RS -> RS
    byte US -> US
    byte SP -> SP
    byte SPACE -> SPACE
    byte DEL -> DEL
    char MIN -> MIN
    char MAX -> MAX
    42:42:void <init>() -> <init>
    407:420:java.lang.String toLowerCase(java.lang.String) -> toLowerCase
    431:438:java.lang.String toLowerCase(java.lang.CharSequence) -> toLowerCase
    446:446:char toLowerCase(char) -> toLowerCase
    455:468:java.lang.String toUpperCase(java.lang.String) -> toUpperCase
    479:486:java.lang.String toUpperCase(java.lang.CharSequence) -> toUpperCase
    494:494:char toUpperCase(char) -> toUpperCase
    505:505:boolean isLowerCase(char) -> isLowerCase
    514:514:boolean isUpperCase(char) -> isUpperCase
    551:576:java.lang.String truncate(java.lang.CharSequence,int,java.lang.String) -> truncate
    603:624:boolean equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence) -> equalsIgnoreCase
    633:633:int getAlphaIndex(char) -> a
com.google.common.base.CaseFormat -> com.google.common.base.CaseFormat:
    com.google.common.base.CaseFormat LOWER_HYPHEN -> LOWER_HYPHEN
    com.google.common.base.CaseFormat LOWER_UNDERSCORE -> LOWER_UNDERSCORE
    com.google.common.base.CaseFormat LOWER_CAMEL -> LOWER_CAMEL
    com.google.common.base.CaseFormat UPPER_CAMEL -> UPPER_CAMEL
    com.google.common.base.CaseFormat UPPER_UNDERSCORE -> UPPER_UNDERSCORE
    com.google.common.base.CharMatcher wordBoundary -> a
    java.lang.String wordSeparator -> b
    com.google.common.base.CaseFormat[] $VALUES -> c
    30:30:com.google.common.base.CaseFormat[] values() -> values
    30:30:com.google.common.base.CaseFormat valueOf(java.lang.String) -> valueOf
    113:116:void <init>(java.lang.String,int,com.google.common.base.CharMatcher,java.lang.String) -> <init>
    124:126:java.lang.String to(com.google.common.base.CaseFormat,java.lang.String) -> to
    132:148:java.lang.String convert(com.google.common.base.CaseFormat,java.lang.String) -> a
    157:157:com.google.common.base.Converter converterTo(com.google.common.base.CaseFormat) -> converterTo
    java.lang.String normalizeWord(java.lang.String) -> a
    206:206:java.lang.String normalizeFirstWord(java.lang.String) -> b
    210:212:java.lang.String firstCharOnlyToUpper(java.lang.String) -> d
    31:31:void <init>(java.lang.String,int,com.google.common.base.CharMatcher,java.lang.String,byte) -> <init>
    31:31:java.lang.String access$100(java.lang.String) -> c
    30:92:void <clinit>() -> <clinit>
com.google.common.base.CaseFormat$1 -> com.google.common.base.e:
    33:33:void <init>(java.lang.String,int,com.google.common.base.CharMatcher,java.lang.String) -> <init>
    36:36:java.lang.String normalizeWord(java.lang.String) -> a
    41:47:java.lang.String convert(com.google.common.base.CaseFormat,java.lang.String) -> a
com.google.common.base.CaseFormat$2 -> com.google.common.base.f:
    52:52:void <init>(java.lang.String,int,com.google.common.base.CharMatcher,java.lang.String) -> <init>
    55:55:java.lang.String normalizeWord(java.lang.String) -> a
    60:66:java.lang.String convert(com.google.common.base.CaseFormat,java.lang.String) -> a
com.google.common.base.CaseFormat$3 -> com.google.common.base.g:
    71:71:void <init>(java.lang.String,int,com.google.common.base.CharMatcher,java.lang.String) -> <init>
    74:74:java.lang.String normalizeWord(java.lang.String) -> a
    79:79:java.lang.String normalizeFirstWord(java.lang.String) -> b
com.google.common.base.CaseFormat$4 -> com.google.common.base.h:
    84:84:void <init>(java.lang.String,int,com.google.common.base.CharMatcher,java.lang.String) -> <init>
    87:87:java.lang.String normalizeWord(java.lang.String) -> a
com.google.common.base.CaseFormat$5 -> com.google.common.base.i:
    92:92:void <init>(java.lang.String,int,com.google.common.base.CharMatcher,java.lang.String) -> <init>
    95:95:java.lang.String normalizeWord(java.lang.String) -> a
    100:106:java.lang.String convert(com.google.common.base.CaseFormat,java.lang.String) -> a
com.google.common.base.CaseFormat$StringConverter -> com.google.common.base.j:
    com.google.common.base.CaseFormat sourceFormat -> a
    com.google.common.base.CaseFormat targetFormat -> b
    long serialVersionUID -> serialVersionUID
    166:169:void <init>(com.google.common.base.CaseFormat,com.google.common.base.CaseFormat) -> <init>
    173:173:java.lang.String doForward(java.lang.String) -> a
    178:178:java.lang.String doBackward(java.lang.String) -> b
    183:187:boolean equals(java.lang.Object) -> equals
    192:192:int hashCode() -> hashCode
    197:197:java.lang.String toString() -> toString
    160:160:java.lang.Object doBackward(java.lang.Object) -> doBackward
    160:160:java.lang.Object doForward(java.lang.Object) -> doForward
com.google.common.base.CharMatcher -> com.google.common.base.CharMatcher:
    118:118:com.google.common.base.CharMatcher any() -> any
    127:127:com.google.common.base.CharMatcher none() -> none
    145:145:com.google.common.base.CharMatcher whitespace() -> whitespace
    156:156:com.google.common.base.CharMatcher breakingWhitespace() -> breakingWhitespace
    165:165:com.google.common.base.CharMatcher ascii() -> ascii
    178:178:com.google.common.base.CharMatcher digit() -> digit
    191:191:com.google.common.base.CharMatcher javaDigit() -> javaDigit
    204:204:com.google.common.base.CharMatcher javaLetter() -> javaLetter
    216:216:com.google.common.base.CharMatcher javaLetterOrDigit() -> javaLetterOrDigit
    229:229:com.google.common.base.CharMatcher javaUpperCase() -> javaUpperCase
    242:242:com.google.common.base.CharMatcher javaLowerCase() -> javaLowerCase
    254:254:com.google.common.base.CharMatcher javaIsoControl() -> javaIsoControl
    270:270:com.google.common.base.CharMatcher invisible() -> invisible
    288:288:com.google.common.base.CharMatcher singleWidth() -> singleWidth
    295:295:com.google.common.base.CharMatcher is(char) -> is
    304:304:com.google.common.base.CharMatcher isNot(char) -> isNot
    312:322:com.google.common.base.CharMatcher anyOf(java.lang.CharSequence) -> anyOf
    331:331:com.google.common.base.CharMatcher noneOf(java.lang.CharSequence) -> noneOf
    342:342:com.google.common.base.CharMatcher inRange(char,char) -> inRange
    350:350:com.google.common.base.CharMatcher forPredicate(com.google.common.base.Predicate) -> forPredicate
    359:359:void <init>() -> <init>
    boolean matches(char) -> matches
    372:372:com.google.common.base.CharMatcher negate() -> negate
    379:379:com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    386:386:com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    399:399:com.google.common.base.CharMatcher precomputed() -> precomputed
    416:432:com.google.common.base.CharMatcher precomputedInternal() -> a
    447:458:com.google.common.base.CharMatcher precomputedPositive(int,java.util.BitSet,java.lang.String) -> a
    465:465:boolean isSmall(int,int) -> a
    473:478:void setBits(java.util.BitSet) -> a
    494:494:boolean matchesAnyOf(java.lang.CharSequence) -> matchesAnyOf
    508:513:boolean matchesAllOf(java.lang.CharSequence) -> matchesAllOf
    528:528:boolean matchesNoneOf(java.lang.CharSequence) -> matchesNoneOf
    542:542:int indexIn(java.lang.CharSequence) -> indexIn
    561:568:int indexIn(java.lang.CharSequence,int) -> indexIn
    582:587:int lastIndexIn(java.lang.CharSequence) -> lastIndexIn
    596:602:int countIn(java.lang.CharSequence) -> countIn
    616:641:java.lang.String removeFrom(java.lang.CharSequence) -> removeFrom
    655:655:java.lang.String retainFrom(java.lang.CharSequence) -> retainFrom
    678:690:java.lang.String replaceFrom(java.lang.CharSequence,char) -> replaceFrom
    712:738:java.lang.String replaceFrom(java.lang.CharSequence,java.lang.CharSequence) -> replaceFrom
    760:775:java.lang.String trimFrom(java.lang.CharSequence) -> trimFrom
    789:795:java.lang.String trimLeadingFrom(java.lang.CharSequence) -> trimLeadingFrom
    809:815:java.lang.String trimTrailingFrom(java.lang.CharSequence) -> trimTrailingFrom
    839:853:java.lang.String collapseFrom(java.lang.CharSequence,char) -> collapseFrom
    863:877:java.lang.String trimAndCollapseFrom(java.lang.CharSequence,char) -> trimAndCollapseFrom
    888:900:java.lang.String finishCollapseFrom(java.lang.CharSequence,int,int,char,java.lang.StringBuilder,boolean) -> a
    910:910:boolean apply(java.lang.Character) -> apply
    919:919:java.lang.String toString() -> toString
    927:933:java.lang.String showCharacter(char) -> b
    1694:1694:com.google.common.base.CharMatcher$IsEither isEither(char,char) -> a
    63:63:boolean apply(java.lang.Object) -> apply
    63:63:java.util.function.Predicate negate() -> negate
    64:64:java.lang.String access$100(char) -> a
com.google.common.base.CharMatcher$1 -> com.google.common.base.k:
    java.lang.String val$description -> a
    432:432:void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher,java.lang.String) -> <init>
    435:435:java.lang.String toString() -> toString
com.google.common.base.CharMatcher$And -> com.google.common.base.l:
    com.google.common.base.CharMatcher first -> a
    com.google.common.base.CharMatcher second -> b
    1547:1550:void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher) -> <init>
    1554:1554:boolean matches(char) -> matches
    1560:1566:void setBits(java.util.BitSet) -> a
    1570:1570:java.lang.String toString() -> toString
    1542:1542:boolean apply(java.lang.Object) -> apply
    1542:1542:java.util.function.Predicate negate() -> negate
com.google.common.base.CharMatcher$Any -> com.google.common.base.m:
    com.google.common.base.CharMatcher$Any INSTANCE -> a
    1014:1015:void <init>() -> <init>
    1019:1019:boolean matches(char) -> matches
    1024:1024:int indexIn(java.lang.CharSequence) -> indexIn
    1029:1031:int indexIn(java.lang.CharSequence,int) -> indexIn
    1036:1036:int lastIndexIn(java.lang.CharSequence) -> lastIndexIn
    1041:1042:boolean matchesAllOf(java.lang.CharSequence) -> matchesAllOf
    1047:1047:boolean matchesNoneOf(java.lang.CharSequence) -> matchesNoneOf
    1052:1053:java.lang.String removeFrom(java.lang.CharSequence) -> removeFrom
    1058:1060:java.lang.String replaceFrom(java.lang.CharSequence,char) -> replaceFrom
    1065:1069:java.lang.String replaceFrom(java.lang.CharSequence,java.lang.CharSequence) -> replaceFrom
    1074:1074:java.lang.String collapseFrom(java.lang.CharSequence,char) -> collapseFrom
    1079:1080:java.lang.String trimFrom(java.lang.CharSequence) -> trimFrom
    1085:1085:int countIn(java.lang.CharSequence) -> countIn
    1090:1090:com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    1095:1096:com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    1101:1101:com.google.common.base.CharMatcher negate() -> negate
    1009:1009:java.util.function.Predicate negate() -> negate
    1011:1011:void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$AnyOf -> com.google.common.base.n:
    char[] chars -> a
    1731:1734:void <init>(java.lang.CharSequence) -> <init>
    1738:1738:boolean matches(char) -> matches
    1744:1747:void setBits(java.util.BitSet) -> a
    1751:1756:java.lang.String toString() -> toString
    1727:1727:boolean apply(java.lang.Object) -> apply
    1727:1727:java.util.function.Predicate negate() -> negate
com.google.common.base.CharMatcher$Ascii -> com.google.common.base.o:
    com.google.common.base.CharMatcher$Ascii INSTANCE -> a
    1284:1285:void <init>() -> <init>
    1289:1289:boolean matches(char) -> matches
    1281:1281:void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$BitSetMatcher -> com.google.common.base.p:
    java.util.BitSet table -> a
    987:993:void <init>(java.util.BitSet,java.lang.String) -> <init>
    997:997:boolean matches(char) -> matches
    1002:1003:void setBits(java.util.BitSet) -> a
    982:982:void <init>(java.util.BitSet,java.lang.String,byte) -> <init>
com.google.common.base.CharMatcher$BreakingWhitespace -> com.google.common.base.q:
    com.google.common.base.CharMatcher INSTANCE -> a
    1245:1245:void <init>() -> <init>
    1251:1268:boolean matches(char) -> matches
    1274:1274:java.lang.String toString() -> toString
    1245:1245:boolean apply(java.lang.Object) -> apply
    1245:1245:java.util.function.Predicate negate() -> negate
    1247:1247:void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$Digit -> com.google.common.base.r:
    com.google.common.base.CharMatcher$Digit INSTANCE -> a
    1344:1344:char[] zeroes() -> b
    1348:1352:char[] nines() -> c
    1358:1359:void <init>() -> <init>
    1355:1355:void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$FastMatcher -> com.google.common.base.s:
    939:939:void <init>() -> <init>
    943:943:com.google.common.base.CharMatcher precomputed() -> precomputed
    948:948:com.google.common.base.CharMatcher negate() -> negate
    939:939:boolean apply(java.lang.Object) -> apply
    939:939:java.util.function.Predicate negate() -> negate
com.google.common.base.CharMatcher$ForPredicate -> com.google.common.base.t:
    com.google.common.base.Predicate predicate -> a
    1798:1800:void <init>(com.google.common.base.Predicate) -> <init>
    1804:1804:boolean matches(char) -> matches
    1810:1810:boolean apply(java.lang.Character) -> apply
    1815:1815:java.lang.String toString() -> toString
    1794:1794:boolean apply(java.lang.Object) -> apply
    1794:1794:java.util.function.Predicate negate() -> negate
com.google.common.base.CharMatcher$InRange -> com.google.common.base.u:
    char startInclusive -> a
    char endInclusive -> b
    1766:1770:void <init>(char,char) -> <init>
    1774:1774:boolean matches(char) -> matches
    1780:1781:void setBits(java.util.BitSet) -> a
    1785:1788:java.lang.String toString() -> toString
com.google.common.base.CharMatcher$Invisible -> com.google.common.base.v:
    com.google.common.base.CharMatcher$Invisible INSTANCE -> a
    1473:1474:void <init>() -> <init>
    1470:1470:void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$Is -> com.google.common.base.w:
    char match -> a
    1610:1612:void <init>(char) -> <init>
    1616:1616:boolean matches(char) -> matches
    1621:1621:java.lang.String replaceFrom(java.lang.CharSequence,char) -> replaceFrom
    1626:1626:com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    1631:1631:com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    1636:1636:com.google.common.base.CharMatcher negate() -> negate
    1642:1643:void setBits(java.util.BitSet) -> a
    1647:1647:java.lang.String toString() -> toString
    1606:1606:java.util.function.Predicate negate() -> negate
com.google.common.base.CharMatcher$IsEither -> com.google.common.base.x:
    char match1 -> a
    char match2 -> b
    1703:1706:void <init>(char,char) -> <init>
    1710:1710:boolean matches(char) -> matches
    1716:1718:void setBits(java.util.BitSet) -> a
    1722:1722:java.lang.String toString() -> toString
com.google.common.base.CharMatcher$IsNot -> com.google.common.base.y:
    char match -> a
    1656:1658:void <init>(char) -> <init>
    1662:1662:boolean matches(char) -> matches
    1667:1667:com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    1672:1672:com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    1678:1680:void setBits(java.util.BitSet) -> a
    1684:1684:com.google.common.base.CharMatcher negate() -> negate
    1689:1689:java.lang.String toString() -> toString
    1652:1652:java.util.function.Predicate negate() -> negate
com.google.common.base.CharMatcher$JavaDigit -> com.google.common.base.z:
    com.google.common.base.CharMatcher$JavaDigit INSTANCE -> a
    1363:1363:void <init>() -> <init>
    1369:1369:boolean matches(char) -> matches
    1374:1374:java.lang.String toString() -> toString
    1363:1363:boolean apply(java.lang.Object) -> apply
    1363:1363:java.util.function.Predicate negate() -> negate
    1365:1365:void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$JavaIsoControl -> com.google.common.base.A:
    com.google.common.base.CharMatcher$JavaIsoControl INSTANCE -> a
    1448:1449:void <init>() -> <init>
    1453:1453:boolean matches(char) -> matches
    1445:1445:void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$JavaLetter -> com.google.common.base.B:
    com.google.common.base.CharMatcher$JavaLetter INSTANCE -> a
    1379:1379:void <init>() -> <init>
    1385:1385:boolean matches(char) -> matches
    1390:1390:java.lang.String toString() -> toString
    1379:1379:boolean apply(java.lang.Object) -> apply
    1379:1379:java.util.function.Predicate negate() -> negate
    1381:1381:void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$JavaLetterOrDigit -> com.google.common.base.C:
    com.google.common.base.CharMatcher$JavaLetterOrDigit INSTANCE -> a
    1395:1395:void <init>() -> <init>
    1401:1401:boolean matches(char) -> matches
    1406:1406:java.lang.String toString() -> toString
    1395:1395:boolean apply(java.lang.Object) -> apply
    1395:1395:java.util.function.Predicate negate() -> negate
    1397:1397:void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$JavaLowerCase -> com.google.common.base.D:
    com.google.common.base.CharMatcher$JavaLowerCase INSTANCE -> a
    1427:1427:void <init>() -> <init>
    1433:1433:boolean matches(char) -> matches
    1438:1438:java.lang.String toString() -> toString
    1427:1427:boolean apply(java.lang.Object) -> apply
    1427:1427:java.util.function.Predicate negate() -> negate
    1429:1429:void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$JavaUpperCase -> com.google.common.base.E:
    com.google.common.base.CharMatcher$JavaUpperCase INSTANCE -> a
    1411:1411:void <init>() -> <init>
    1417:1417:boolean matches(char) -> matches
    1422:1422:java.lang.String toString() -> toString
    1411:1411:boolean apply(java.lang.Object) -> apply
    1411:1411:java.util.function.Predicate negate() -> negate
    1413:1413:void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$NamedFastMatcher -> com.google.common.base.F:
    java.lang.String description -> a
    957:959:void <init>(java.lang.String) -> <init>
    963:963:java.lang.String toString() -> toString
com.google.common.base.CharMatcher$Negated -> com.google.common.base.G:
    com.google.common.base.CharMatcher original -> a
    1497:1499:void <init>(com.google.common.base.CharMatcher) -> <init>
    1503:1503:boolean matches(char) -> matches
    1508:1508:boolean matchesAllOf(java.lang.CharSequence) -> matchesAllOf
    1513:1513:boolean matchesNoneOf(java.lang.CharSequence) -> matchesNoneOf
    1518:1518:int countIn(java.lang.CharSequence) -> countIn
    1524:1528:void setBits(java.util.BitSet) -> a
    1532:1532:com.google.common.base.CharMatcher negate() -> negate
    1537:1537:java.lang.String toString() -> toString
    1493:1493:boolean apply(java.lang.Object) -> apply
    1493:1493:java.util.function.Predicate negate() -> negate
com.google.common.base.CharMatcher$NegatedFastMatcher -> com.google.common.base.H:
    971:972:void <init>(com.google.common.base.CharMatcher) -> <init>
    976:976:com.google.common.base.CharMatcher precomputed() -> precomputed
com.google.common.base.CharMatcher$None -> com.google.common.base.I:
    com.google.common.base.CharMatcher$None INSTANCE -> a
    1111:1112:void <init>() -> <init>
    1116:1116:boolean matches(char) -> matches
    1121:1122:int indexIn(java.lang.CharSequence) -> indexIn
    1127:1129:int indexIn(java.lang.CharSequence,int) -> indexIn
    1134:1135:int lastIndexIn(java.lang.CharSequence) -> lastIndexIn
    1140:1140:boolean matchesAllOf(java.lang.CharSequence) -> matchesAllOf
    1145:1146:boolean matchesNoneOf(java.lang.CharSequence) -> matchesNoneOf
    1151:1151:java.lang.String removeFrom(java.lang.CharSequence) -> removeFrom
    1156:1156:java.lang.String replaceFrom(java.lang.CharSequence,char) -> replaceFrom
    1161:1162:java.lang.String replaceFrom(java.lang.CharSequence,java.lang.CharSequence) -> replaceFrom
    1167:1167:java.lang.String collapseFrom(java.lang.CharSequence,char) -> collapseFrom
    1172:1172:java.lang.String trimFrom(java.lang.CharSequence) -> trimFrom
    1177:1177:java.lang.String trimLeadingFrom(java.lang.CharSequence) -> trimLeadingFrom
    1182:1182:java.lang.String trimTrailingFrom(java.lang.CharSequence) -> trimTrailingFrom
    1187:1188:int countIn(java.lang.CharSequence) -> countIn
    1193:1194:com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    1199:1199:com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    1204:1204:com.google.common.base.CharMatcher negate() -> negate
    1106:1106:java.util.function.Predicate negate() -> negate
    1108:1108:void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$Or -> com.google.common.base.J:
    com.google.common.base.CharMatcher first -> a
    com.google.common.base.CharMatcher second -> b
    1580:1583:void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher) -> <init>
    1588:1590:void setBits(java.util.BitSet) -> a
    1594:1594:boolean matches(char) -> matches
    1599:1599:java.lang.String toString() -> toString
    1575:1575:boolean apply(java.lang.Object) -> apply
    1575:1575:java.util.function.Predicate negate() -> negate
com.google.common.base.CharMatcher$RangesMatcher -> com.google.common.base.K:
    java.lang.String description -> a
    char[] rangeStarts -> b
    char[] rangeEnds -> c
    1300:1311:void <init>(java.lang.String,char[],char[]) -> <init>
    1315:1320:boolean matches(char) -> matches
    1326:1326:java.lang.String toString() -> toString
    1294:1294:boolean apply(java.lang.Object) -> apply
    1294:1294:java.util.function.Predicate negate() -> negate
com.google.common.base.CharMatcher$SingleWidth -> com.google.common.base.L:
    com.google.common.base.CharMatcher$SingleWidth INSTANCE -> a
    1483:1487:void <init>() -> <init>
    1480:1480:void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$Whitespace -> com.google.common.base.M:
    int SHIFT -> b
    com.google.common.base.CharMatcher$Whitespace INSTANCE -> a
    1227:1228:void <init>() -> <init>
    1232:1232:boolean matches(char) -> matches
    1238:1241:void setBits(java.util.BitSet) -> a
    1222:1224:void <clinit>() -> <clinit>
com.google.common.base.Charsets -> com.google.common.base.Charsets:
    java.nio.charset.Charset US_ASCII -> US_ASCII
    java.nio.charset.Charset ISO_8859_1 -> ISO_8859_1
    java.nio.charset.Charset UTF_8 -> UTF_8
    java.nio.charset.Charset UTF_16BE -> UTF_16BE
    java.nio.charset.Charset UTF_16LE -> UTF_16LE
    java.nio.charset.Charset UTF_16 -> UTF_16
    35:35:void <init>() -> <init>
    45:94:void <clinit>() -> <clinit>
com.google.common.base.CommonMatcher -> com.google.common.base.N:
    25:25:void <init>() -> <init>
    boolean matches() -> a
    boolean find() -> b
    boolean find(int) -> a
    int end() -> c
    int start() -> d
com.google.common.base.CommonPattern -> com.google.common.base.O:
    25:25:void <init>() -> <init>
    com.google.common.base.CommonMatcher matcher(java.lang.CharSequence) -> a
    java.lang.String pattern() -> a
    int flags() -> b
com.google.common.base.Converter -> com.google.common.base.Converter:
    boolean handleNullAutomatically -> a
    com.google.common.base.Converter reverse -> b
    125:126:void <init>() -> <init>
    129:131:void <init>(boolean) -> <init>
    java.lang.Object doForward(java.lang.Object) -> doForward
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    169:169:java.lang.Object convert(java.lang.Object) -> convert
    174:178:java.lang.Object correctedDoForward(java.lang.Object) -> a
    184:188:java.lang.Object correctedDoBackward(java.lang.Object) -> b
    202:203:java.lang.Iterable convertAll(java.lang.Iterable) -> convertAll
    238:239:com.google.common.base.Converter reverse() -> reverse
    314:314:com.google.common.base.Converter andThen(com.google.common.base.Converter) -> andThen
    319:319:com.google.common.base.Converter doAndThen(com.google.common.base.Converter) -> a
    390:390:java.lang.Object apply(java.lang.Object) -> apply
    406:406:boolean equals(java.lang.Object) -> equals
    428:428:com.google.common.base.Converter from(com.google.common.base.Function,com.google.common.base.Function) -> from
    477:477:com.google.common.base.Converter identity() -> identity
com.google.common.base.Converter$1 -> com.google.common.base.P:
    java.lang.Iterable val$fromIterable -> a
    com.google.common.base.Converter this$0 -> b
    203:203:void <init>(com.google.common.base.Converter,java.lang.Iterable) -> <init>
    206:206:java.util.Iterator iterator() -> iterator
com.google.common.base.Converter$1$1 -> com.google.common.base.Q:
    java.util.Iterator fromIterator -> a
    com.google.common.base.Converter$1 this$1 -> b
    206:207:void <init>(com.google.common.base.Converter$1) -> <init>
    211:211:boolean hasNext() -> hasNext
    216:216:java.lang.Object next() -> next
    221:222:void remove() -> remove
com.google.common.base.Converter$ConverterComposition -> com.google.common.base.R:
    com.google.common.base.Converter first -> a
    com.google.common.base.Converter second -> b
    long serialVersionUID -> serialVersionUID
    327:330:void <init>(com.google.common.base.Converter,com.google.common.base.Converter) -> <init>
    341:341:java.lang.Object doForward(java.lang.Object) -> doForward
    346:346:java.lang.Object doBackward(java.lang.Object) -> doBackward
    352:352:java.lang.Object correctedDoForward(java.lang.Object) -> a
    358:358:java.lang.Object correctedDoBackward(java.lang.Object) -> b
    363:367:boolean equals(java.lang.Object) -> equals
    372:372:int hashCode() -> hashCode
    377:377:java.lang.String toString() -> toString
com.google.common.base.Converter$FunctionBasedConverter -> com.google.common.base.S:
    com.google.common.base.Function forwardFunction -> a
    com.google.common.base.Function backwardFunction -> b
    438:441:void <init>(com.google.common.base.Function,com.google.common.base.Function) -> <init>
    445:445:java.lang.Object doForward(java.lang.Object) -> doForward
    450:450:java.lang.Object doBackward(java.lang.Object) -> doBackward
    455:460:boolean equals(java.lang.Object) -> equals
    465:465:int hashCode() -> hashCode
    470:470:java.lang.String toString() -> toString
    431:431:void <init>(com.google.common.base.Function,com.google.common.base.Function,byte) -> <init>
com.google.common.base.Converter$IdentityConverter -> com.google.common.base.T:
    com.google.common.base.Converter$IdentityConverter INSTANCE -> a
    long serialVersionUID -> serialVersionUID
    484:484:void <init>() -> <init>
    489:489:java.lang.Object doForward(java.lang.Object) -> doForward
    494:494:java.lang.Object doBackward(java.lang.Object) -> doBackward
    499:499:com.google.common.base.Converter$IdentityConverter reverse() -> a
    504:504:com.google.common.base.Converter doAndThen(com.google.common.base.Converter) -> a
    514:514:java.lang.String toString() -> toString
    518:518:java.lang.Object readResolve() -> readResolve
    484:484:com.google.common.base.Converter reverse() -> reverse
    485:485:void <clinit>() -> <clinit>
com.google.common.base.Converter$ReverseConverter -> com.google.common.base.U:
    com.google.common.base.Converter original -> a
    long serialVersionUID -> serialVersionUID
    246:248:void <init>(com.google.common.base.Converter) -> <init>
    259:259:java.lang.Object doForward(java.lang.Object) -> doForward
    264:264:java.lang.Object doBackward(java.lang.Object) -> doBackward
    270:270:java.lang.Object correctedDoForward(java.lang.Object) -> a
    276:276:java.lang.Object correctedDoBackward(java.lang.Object) -> b
    281:281:com.google.common.base.Converter reverse() -> reverse
    286:290:boolean equals(java.lang.Object) -> equals
    295:295:int hashCode() -> hashCode
    300:300:java.lang.String toString() -> toString
com.google.common.base.Defaults -> com.google.common.base.Defaults:
    java.lang.Double DOUBLE_DEFAULT -> a
    java.lang.Float FLOAT_DEFAULT -> b
    30:30:void <init>() -> <init>
    42:60:java.lang.Object defaultValue(java.lang.Class) -> defaultValue
    32:33:void <clinit>() -> <clinit>
com.google.common.base.Enums -> com.google.common.base.Enums:
    java.util.Map enumConstantCache -> a
    39:39:void <init>() -> <init>
    50:54:java.lang.reflect.Field getField(java.lang.Enum) -> getField
    67:69:com.google.common.base.Optional getIfPresent(java.lang.Class,java.lang.String) -> getIfPresent
    79:84:java.util.Map populateCache(java.lang.Class) -> b
    90:96:java.util.Map getEnumConstants(java.lang.Class) -> a
    108:108:com.google.common.base.Converter stringConverter(java.lang.Class) -> stringConverter
    74:74:void <clinit>() -> <clinit>
com.google.common.base.Enums$StringConverter -> com.google.common.base.V:
    java.lang.Class enumClass -> a
    long serialVersionUID -> serialVersionUID
    116:118:void <init>(java.lang.Class) -> <init>
    122:122:java.lang.Enum doForward(java.lang.String) -> a
    127:127:java.lang.String doBackward(java.lang.Enum) -> a
    132:136:boolean equals(java.lang.Object) -> equals
    141:141:int hashCode() -> hashCode
    146:146:java.lang.String toString() -> toString
    111:111:java.lang.Object doBackward(java.lang.Object) -> doBackward
    111:111:java.lang.Object doForward(java.lang.Object) -> doForward
com.google.common.base.Equivalence -> com.google.common.base.Equivalence:
    39:39:void <init>() -> <init>
    59:65:boolean equivalent(java.lang.Object,java.lang.Object) -> equivalent
    76:76:boolean test(java.lang.Object,java.lang.Object) -> test
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
    109:112:int hash(java.lang.Object) -> hash
    int doHash(java.lang.Object) -> doHash
    151:151:com.google.common.base.Equivalence onResultOf(com.google.common.base.Function) -> onResultOf
    162:162:com.google.common.base.Equivalence$Wrapper wrap(java.lang.Object) -> wrap
    258:258:com.google.common.base.Equivalence pairwise() -> pairwise
    268:268:com.google.common.base.Predicate equivalentTo(java.lang.Object) -> equivalentTo
    322:322:com.google.common.base.Equivalence equals() -> equals
    334:334:com.google.common.base.Equivalence identity() -> identity
com.google.common.base.Equivalence$Equals -> com.google.common.base.W:
    com.google.common.base.Equivalence$Equals INSTANCE -> a
    long serialVersionUID -> serialVersionUID
    337:337:void <init>() -> <init>
    343:343:boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
    348:348:int doHash(java.lang.Object) -> doHash
    352:352:java.lang.Object readResolve() -> readResolve
    339:339:void <clinit>() -> <clinit>
com.google.common.base.Equivalence$EquivalentToPredicate -> com.google.common.base.X:
    com.google.common.base.Equivalence equivalence -> a
    java.lang.Object target -> b
    long serialVersionUID -> serialVersionUID
    276:279:void <init>(com.google.common.base.Equivalence,java.lang.Object) -> <init>
    283:283:boolean apply(java.lang.Object) -> apply
    288:295:boolean equals(java.lang.Object) -> equals
    300:300:int hashCode() -> hashCode
    305:305:java.lang.String toString() -> toString
com.google.common.base.Equivalence$Identity -> com.google.common.base.Y:
    com.google.common.base.Equivalence$Identity INSTANCE -> a
    long serialVersionUID -> serialVersionUID
    358:358:void <init>() -> <init>
    364:364:boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
    369:369:int doHash(java.lang.Object) -> doHash
    373:373:java.lang.Object readResolve() -> readResolve
    360:360:void <clinit>() -> <clinit>
com.google.common.base.Equivalence$Wrapper -> com.google.common.base.Equivalence$Wrapper:
    com.google.common.base.Equivalence equivalence -> a
    java.lang.Object reference -> b
    long serialVersionUID -> serialVersionUID
    189:192:void <init>(com.google.common.base.Equivalence,java.lang.Object) -> <init>
    196:196:java.lang.Object get() -> get
    206:222:boolean equals(java.lang.Object) -> equals
    228:228:int hashCode() -> hashCode
    237:237:java.lang.String toString() -> toString
    185:185:void <init>(com.google.common.base.Equivalence,java.lang.Object,byte) -> <init>
com.google.common.base.ExtraObjectsMethodsForWeb -> com.google.common.base.Z:
    24:24:void <init>() -> <init>
com.google.common.base.FinalizablePhantomReference -> com.google.common.base.FinalizablePhantomReference:
    41:43:void <init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue) -> <init>
com.google.common.base.FinalizableReference -> com.google.common.base.FinalizableReference:
    void finalizeReferent() -> finalizeReferent
com.google.common.base.FinalizableReferenceQueue -> com.google.common.base.FinalizableReferenceQueue:
    java.util.logging.Logger logger -> b
    java.lang.reflect.Method startFinalizer -> c
    java.lang.ref.ReferenceQueue queue -> a
    java.lang.ref.PhantomReference frqRef -> d
    boolean threadStarted -> e
    155:174:void <init>() -> <init>
    178:180:void close() -> close
    188:205:void cleanUp() -> a
    213:220:java.lang.Class loadFinalizer(com.google.common.base.FinalizableReferenceQueue$FinalizerLoader[]) -> a
    346:349:java.lang.reflect.Method getStartFinalizer(java.lang.Class) -> a
    92:92:java.util.logging.Logger access$000() -> b
    133:144:void <clinit>() -> <clinit>
com.google.common.base.FinalizableReferenceQueue$DecoupledLoader -> com.google.common.base.aa:
    274:274:void <init>() -> <init>
    293:297:java.lang.Class loadFinalizer() -> a
    304:316:java.net.URL getBaseUrl() -> b
    324:324:java.net.URLClassLoader newLoader(java.net.URL) -> a
com.google.common.base.FinalizableReferenceQueue$DirectLoader -> com.google.common.base.ab:
    332:332:void <init>() -> <init>
    336:338:java.lang.Class loadFinalizer() -> a
com.google.common.base.FinalizableReferenceQueue$FinalizerLoader -> com.google.common.base.ac:
    java.lang.Class loadFinalizer() -> a
com.google.common.base.FinalizableReferenceQueue$SystemLoader -> com.google.common.base.ad:
    239:239:void <init>() -> <init>
    246:264:java.lang.Class loadFinalizer() -> a
com.google.common.base.FinalizableSoftReference -> com.google.common.base.FinalizableSoftReference:
    39:41:void <init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue) -> <init>
com.google.common.base.FinalizableWeakReference -> com.google.common.base.FinalizableWeakReference:
    39:41:void <init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue) -> <init>
com.google.common.base.Function -> com.google.common.base.Function:
    java.lang.Object apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
com.google.common.base.FunctionalEquivalence -> com.google.common.base.ae:
    long serialVersionUID -> serialVersionUID
    com.google.common.base.Function function -> a
    com.google.common.base.Equivalence resultEquivalence -> b
    39:42:void <init>(com.google.common.base.Function,com.google.common.base.Equivalence) -> <init>
    46:46:boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
    51:51:int doHash(java.lang.Object) -> doHash
    56:63:boolean equals(java.lang.Object) -> equals
    68:68:int hashCode() -> hashCode
    73:73:java.lang.String toString() -> toString
com.google.common.base.Functions -> com.google.common.base.Functions:
    40:40:void <init>() -> <init>
    60:60:com.google.common.base.Function toStringFunction() -> toStringFunction
    83:83:com.google.common.base.Function identity() -> identity
    115:115:com.google.common.base.Function forMap(java.util.Map) -> forMap
    132:132:com.google.common.base.Function forMap(java.util.Map,java.lang.Object) -> forMap
    222:222:com.google.common.base.Function compose(com.google.common.base.Function,com.google.common.base.Function) -> compose
    271:271:com.google.common.base.Function forPredicate(com.google.common.base.Predicate) -> forPredicate
    318:318:com.google.common.base.Function constant(java.lang.Object) -> constant
    363:363:com.google.common.base.Function forSupplier(com.google.common.base.Supplier) -> forSupplier
com.google.common.base.Functions$ConstantFunction -> com.google.common.base.af:
    java.lang.Object value -> a
    long serialVersionUID -> serialVersionUID
    324:326:void <init>(java.lang.Object) -> <init>
    330:330:java.lang.Object apply(java.lang.Object) -> apply
    335:339:boolean equals(java.lang.Object) -> equals
    344:344:int hashCode() -> hashCode
    349:349:java.lang.String toString() -> toString
com.google.common.base.Functions$ForMapWithDefault -> com.google.common.base.ag:
    java.util.Map map -> a
    java.lang.Object defaultValue -> b
    long serialVersionUID -> serialVersionUID
    175:178:void <init>(java.util.Map,java.lang.Object) -> <init>
    182:183:java.lang.Object apply(java.lang.Object) -> apply
    188:192:boolean equals(java.lang.Object) -> equals
    197:197:int hashCode() -> hashCode
    203:203:java.lang.String toString() -> toString
com.google.common.base.Functions$FunctionComposition -> com.google.common.base.ah:
    com.google.common.base.Function g -> a
    com.google.common.base.Function f -> b
    long serialVersionUID -> serialVersionUID
    229:232:void <init>(com.google.common.base.Function,com.google.common.base.Function) -> <init>
    236:236:java.lang.Object apply(java.lang.Object) -> apply
    241:245:boolean equals(java.lang.Object) -> equals
    250:250:int hashCode() -> hashCode
    256:256:java.lang.String toString() -> toString
com.google.common.base.Functions$FunctionForMapNoDefault -> com.google.common.base.ai:
    java.util.Map map -> a
    long serialVersionUID -> serialVersionUID
    138:140:void <init>(java.util.Map) -> <init>
    144:146:java.lang.Object apply(java.lang.Object) -> apply
    151:155:boolean equals(java.lang.Object) -> equals
    160:160:int hashCode() -> hashCode
    165:165:java.lang.String toString() -> toString
com.google.common.base.Functions$IdentityFunction -> com.google.common.base.aj:
    com.google.common.base.Functions$IdentityFunction INSTANCE -> a
    com.google.common.base.Functions$IdentityFunction[] $VALUES -> b
    87:87:com.google.common.base.Functions$IdentityFunction[] values() -> values
    87:87:com.google.common.base.Functions$IdentityFunction valueOf(java.lang.String) -> valueOf
    87:87:void <init>(java.lang.String,int) -> <init>
    92:92:java.lang.Object apply(java.lang.Object) -> apply
    97:97:java.lang.String toString() -> toString
    87:88:void <clinit>() -> <clinit>
com.google.common.base.Functions$PredicateFunction -> com.google.common.base.ak:
    com.google.common.base.Predicate predicate -> a
    long serialVersionUID -> serialVersionUID
    278:280:void <init>(com.google.common.base.Predicate) -> <init>
    284:284:java.lang.Boolean apply(java.lang.Object) -> a
    289:293:boolean equals(java.lang.Object) -> equals
    298:298:int hashCode() -> hashCode
    303:303:java.lang.String toString() -> toString
    275:275:java.lang.Object apply(java.lang.Object) -> apply
    275:275:void <init>(com.google.common.base.Predicate,byte) -> <init>
com.google.common.base.Functions$SupplierFunction -> com.google.common.base.al:
    com.google.common.base.Supplier supplier -> a
    long serialVersionUID -> serialVersionUID
    371:373:void <init>(com.google.common.base.Supplier) -> <init>
    377:377:java.lang.Object apply(java.lang.Object) -> apply
    382:386:boolean equals(java.lang.Object) -> equals
    391:391:int hashCode() -> hashCode
    396:396:java.lang.String toString() -> toString
    367:367:void <init>(com.google.common.base.Supplier,byte) -> <init>
com.google.common.base.Functions$ToStringFunction -> com.google.common.base.am:
    com.google.common.base.Functions$ToStringFunction INSTANCE -> a
    com.google.common.base.Functions$ToStringFunction[] $VALUES -> b
    64:64:com.google.common.base.Functions$ToStringFunction[] values() -> values
    64:64:com.google.common.base.Functions$ToStringFunction valueOf(java.lang.String) -> valueOf
    64:64:void <init>(java.lang.String,int) -> <init>
    69:70:java.lang.String apply(java.lang.Object) -> a
    75:75:java.lang.String toString() -> toString
    64:64:java.lang.Object apply(java.lang.Object) -> apply
    64:65:void <clinit>() -> <clinit>
com.google.common.base.JdkPattern -> com.google.common.base.an:
    java.util.regex.Pattern pattern -> a
    long serialVersionUID -> serialVersionUID
    27:29:void <init>(java.util.regex.Pattern) -> <init>
    33:33:com.google.common.base.CommonMatcher matcher(java.lang.CharSequence) -> a
    38:38:java.lang.String pattern() -> a
    43:43:int flags() -> b
    48:48:java.lang.String toString() -> toString
com.google.common.base.JdkPattern$JdkMatcher -> com.google.common.base.ao:
    java.util.regex.Matcher matcher -> a
    54:56:void <init>(java.util.regex.Matcher) -> <init>
    60:60:boolean matches() -> a
    65:65:boolean find() -> b
    70:70:boolean find(int) -> a
    80:80:int end() -> c
    85:85:int start() -> d
com.google.common.base.Joiner -> com.google.common.base.Joiner:
    java.lang.String separator -> a
    69:69:com.google.common.base.Joiner on(java.lang.String) -> on
    74:74:com.google.common.base.Joiner on(char) -> on
    79:81:void <init>(java.lang.String) -> <init>
    83:85:void <init>(com.google.common.base.Joiner) -> <init>
    93:93:java.lang.Appendable appendTo(java.lang.Appendable,java.lang.Iterable) -> appendTo
    104:112:java.lang.Appendable appendTo(java.lang.Appendable,java.util.Iterator) -> appendTo
    121:121:java.lang.Appendable appendTo(java.lang.Appendable,java.lang.Object[]) -> appendTo
    129:129:java.lang.Appendable appendTo(java.lang.Appendable,java.lang.Object,java.lang.Object,java.lang.Object[]) -> appendTo
    139:139:java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Iterable) -> appendTo
    152:156:java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Iterator) -> appendTo
    166:166:java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Object[]) -> appendTo
    177:177:java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Object,java.lang.Object,java.lang.Object[]) -> appendTo
    185:185:java.lang.String join(java.lang.Iterable) -> join
    195:195:java.lang.String join(java.util.Iterator) -> join
    203:203:java.lang.String join(java.lang.Object[]) -> join
    211:211:java.lang.String join(java.lang.Object,java.lang.Object,java.lang.Object[]) -> join
    219:220:com.google.common.base.Joiner useForNull(java.lang.String) -> useForNull
    243:243:com.google.common.base.Joiner skipNulls() -> skipNulls
    284:284:com.google.common.base.Joiner$MapJoiner withKeyValueSeparator(char) -> withKeyValueSeparator
    292:292:com.google.common.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String) -> withKeyValueSeparator
    452:453:java.lang.CharSequence toString(java.lang.Object) -> a
    458:459:java.lang.Iterable iterable(java.lang.Object,java.lang.Object,java.lang.Object[]) -> a
    66:66:void <init>(com.google.common.base.Joiner,byte) -> <init>
    66:66:java.lang.String access$100(com.google.common.base.Joiner) -> a
com.google.common.base.Joiner$1 -> com.google.common.base.ap:
    java.lang.String val$nullText -> a
    com.google.common.base.Joiner this$0 -> b
    220:220:void <init>(com.google.common.base.Joiner,com.google.common.base.Joiner,java.lang.String) -> <init>
    223:223:java.lang.CharSequence toString(java.lang.Object) -> a
    228:228:com.google.common.base.Joiner useForNull(java.lang.String) -> useForNull
    233:233:com.google.common.base.Joiner skipNulls() -> skipNulls
com.google.common.base.Joiner$2 -> com.google.common.base.aq:
    com.google.common.base.Joiner this$0 -> a
    243:243:void <init>(com.google.common.base.Joiner,com.google.common.base.Joiner) -> <init>
    246:262:java.lang.Appendable appendTo(java.lang.Appendable,java.util.Iterator) -> appendTo
    267:267:com.google.common.base.Joiner useForNull(java.lang.String) -> useForNull
    272:272:com.google.common.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String) -> withKeyValueSeparator
com.google.common.base.Joiner$3 -> com.google.common.base.ar:
    java.lang.Object[] val$rest -> a
    java.lang.Object val$first -> b
    java.lang.Object val$second -> c
    459:459:void <init>(java.lang.Object[],java.lang.Object,java.lang.Object) -> <init>
    462:462:int size() -> size
    467:473:java.lang.Object get(int) -> get
com.google.common.base.Joiner$MapJoiner -> com.google.common.base.Joiner$MapJoiner:
    com.google.common.base.Joiner joiner -> a
    java.lang.String keyValueSeparator -> b
    317:320:void <init>(com.google.common.base.Joiner,java.lang.String) -> <init>
    328:328:java.lang.Appendable appendTo(java.lang.Appendable,java.util.Map) -> appendTo
    338:338:java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Map) -> appendTo
    351:351:java.lang.Appendable appendTo(java.lang.Appendable,java.lang.Iterable) -> appendTo
    364:378:java.lang.Appendable appendTo(java.lang.Appendable,java.util.Iterator) -> appendTo
    391:391:java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Iterable) -> appendTo
    405:409:java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Iterator) -> appendTo
    417:417:java.lang.String join(java.util.Map) -> join
    428:428:java.lang.String join(java.lang.Iterable) -> join
    439:439:java.lang.String join(java.util.Iterator) -> join
    447:447:com.google.common.base.Joiner$MapJoiner useForNull(java.lang.String) -> useForNull
    313:313:void <init>(com.google.common.base.Joiner,java.lang.String,byte) -> <init>
com.google.common.base.MoreObjects -> com.google.common.base.MoreObjects:
    58:64:java.lang.Object firstNonNull(java.lang.Object,java.lang.Object) -> firstNonNull
    108:108:com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.Object) -> toStringHelper
    122:122:com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.Class) -> toStringHelper
    134:134:com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.String) -> toStringHelper
    389:389:void <init>() -> <init>
com.google.common.base.MoreObjects$ToStringHelper -> com.google.common.base.MoreObjects$ToStringHelper:
    java.lang.String className -> a
    com.google.common.base.MoreObjects$ToStringHelper$ValueHolder holderHead -> b
    com.google.common.base.MoreObjects$ToStringHelper$ValueHolder holderTail -> c
    boolean omitNullValues -> d
    145:152:void <init>(java.lang.String) -> <init>
    163:164:com.google.common.base.MoreObjects$ToStringHelper omitNullValues() -> omitNullValues
    174:174:com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,java.lang.Object) -> add
    184:184:com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,boolean) -> add
    194:194:com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,char) -> add
    204:204:com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,double) -> add
    214:214:com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,float) -> add
    224:224:com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,int) -> add
    234:234:com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,long) -> add
    245:245:com.google.common.base.MoreObjects$ToStringHelper addValue(java.lang.Object) -> addValue
    258:258:com.google.common.base.MoreObjects$ToStringHelper addValue(boolean) -> addValue
    271:271:com.google.common.base.MoreObjects$ToStringHelper addValue(char) -> addValue
    284:284:com.google.common.base.MoreObjects$ToStringHelper addValue(double) -> addValue
    297:297:com.google.common.base.MoreObjects$ToStringHelper addValue(float) -> addValue
    310:310:com.google.common.base.MoreObjects$ToStringHelper addValue(int) -> addValue
    323:323:com.google.common.base.MoreObjects$ToStringHelper addValue(long) -> addValue
    337:360:java.lang.String toString() -> toString
    364:366:com.google.common.base.MoreObjects$ToStringHelper$ValueHolder addHolder() -> a
    370:372:com.google.common.base.MoreObjects$ToStringHelper addHolder(java.lang.Object) -> a
    376:379:com.google.common.base.MoreObjects$ToStringHelper addHolder(java.lang.String,java.lang.Object) -> a
    143:143:void <init>(java.lang.String,byte) -> <init>
com.google.common.base.MoreObjects$ToStringHelper$ValueHolder -> com.google.common.base.as:
    java.lang.String name -> a
    java.lang.Object value -> b
    com.google.common.base.MoreObjects$ToStringHelper$ValueHolder next -> c
    382:382:void <init>() -> <init>
    382:382:void <init>(byte) -> <init>
com.google.common.base.Objects -> com.google.common.base.Objects:
    33:33:void <init>() -> <init>
    52:52:boolean equal(java.lang.Object,java.lang.Object) -> equal
    77:77:int hashCode(java.lang.Object[]) -> hashCode
com.google.common.base.Optional -> com.google.common.base.Optional:
    long serialVersionUID -> serialVersionUID
    93:93:com.google.common.base.Optional absent() -> absent
    105:105:com.google.common.base.Optional of(java.lang.Object) -> of
    116:116:com.google.common.base.Optional fromNullable(java.lang.Object) -> fromNullable
    127:127:com.google.common.base.Optional fromJavaUtil(java.util.Optional) -> fromJavaUtil
    145:145:java.util.Optional toJavaUtil(com.google.common.base.Optional) -> toJavaUtil
    158:158:java.util.Optional toJavaUtil() -> toJavaUtil
    161:161:void <init>() -> <init>
    boolean isPresent() -> isPresent
    java.lang.Object get() -> get
    java.lang.Object or(java.lang.Object) -> or
    com.google.common.base.Optional or(com.google.common.base.Optional) -> or
    java.lang.Object or(com.google.common.base.Supplier) -> or
    java.lang.Object orNull() -> orNull
    java.util.Set asSet() -> asSet
    com.google.common.base.Optional transform(com.google.common.base.Function) -> transform
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    335:336:java.lang.Iterable presentInstances(java.lang.Iterable) -> presentInstances
com.google.common.base.Optional$1 -> com.google.common.base.at:
    java.lang.Iterable val$optionals -> a
    336:336:void <init>(java.lang.Iterable) -> <init>
    339:339:java.util.Iterator iterator() -> iterator
com.google.common.base.Optional$1$1 -> com.google.common.base.au:
    java.util.Iterator iterator -> a
    com.google.common.base.Optional$1 this$0 -> b
    339:341:void <init>(com.google.common.base.Optional$1) -> <init>
    345:351:java.lang.Object computeNext() -> a
com.google.common.base.PairwiseEquivalence -> com.google.common.base.av:
    com.google.common.base.Equivalence elementEquivalence -> a
    long serialVersionUID -> serialVersionUID
    27:29:void <init>(com.google.common.base.Equivalence) -> <init>
    33:42:boolean doEquivalent(java.lang.Iterable,java.lang.Iterable) -> a
    47:51:int doHash(java.lang.Iterable) -> a
    56:61:boolean equals(java.lang.Object) -> equals
    66:66:int hashCode() -> hashCode
    71:71:java.lang.String toString() -> toString
    22:22:int doHash(java.lang.Object) -> doHash
    22:22:boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
com.google.common.base.PatternCompiler -> com.google.common.base.aw:
    com.google.common.base.CommonPattern compile(java.lang.String) -> a
com.google.common.base.Platform -> com.google.common.base.ax:
    com.google.common.base.PatternCompiler patternCompiler -> a
    39:39:void <init>() -> <init>
    44:44:long systemNanoTime() -> a
    48:48:com.google.common.base.CharMatcher precomputeCharMatcher(com.google.common.base.CharMatcher) -> a
    52:53:com.google.common.base.Optional getEnumIfPresent(java.lang.Class,java.lang.String) -> a
    57:57:java.lang.String formatCompact4Digits(double) -> a
    61:61:boolean stringIsNullOrEmpty(java.lang.String) -> a
    65:65:java.lang.String nullToEmpty(java.lang.String) -> b
    69:69:java.lang.String emptyToNull(java.lang.String) -> c
    73:74:com.google.common.base.CommonPattern compilePattern(java.lang.String) -> d
    82:82:com.google.common.base.PatternCompiler loadPatternCompiler() -> b
    36:37:void <clinit>() -> <clinit>
com.google.common.base.Platform$JdkPatternCompiler -> com.google.common.base.ay:
    89:89:void <init>() -> <init>
    92:92:com.google.common.base.CommonPattern compile(java.lang.String) -> a
    89:89:void <init>(byte) -> <init>
com.google.common.base.Preconditions -> com.google.common.base.Preconditions:
    118:118:void <init>() -> <init>
    127:130:void checkArgument(boolean) -> checkArgument
    141:144:void checkArgument(boolean,java.lang.Object) -> checkArgument
    163:166:void checkArgument(boolean,java.lang.String,java.lang.Object[]) -> checkArgument
    176:179:void checkArgument(boolean,java.lang.String,char) -> checkArgument
    189:192:void checkArgument(boolean,java.lang.String,int) -> checkArgument
    202:205:void checkArgument(boolean,java.lang.String,long) -> checkArgument
    216:219:void checkArgument(boolean,java.lang.String,java.lang.Object) -> checkArgument
    230:233:void checkArgument(boolean,java.lang.String,char,char) -> checkArgument
    244:247:void checkArgument(boolean,java.lang.String,char,int) -> checkArgument
    258:261:void checkArgument(boolean,java.lang.String,char,long) -> checkArgument
    272:275:void checkArgument(boolean,java.lang.String,char,java.lang.Object) -> checkArgument
    286:289:void checkArgument(boolean,java.lang.String,int,char) -> checkArgument
    300:303:void checkArgument(boolean,java.lang.String,int,int) -> checkArgument
    314:317:void checkArgument(boolean,java.lang.String,int,long) -> checkArgument
    328:331:void checkArgument(boolean,java.lang.String,int,java.lang.Object) -> checkArgument
    342:345:void checkArgument(boolean,java.lang.String,long,char) -> checkArgument
    356:359:void checkArgument(boolean,java.lang.String,long,int) -> checkArgument
    370:373:void checkArgument(boolean,java.lang.String,long,long) -> checkArgument
    384:387:void checkArgument(boolean,java.lang.String,long,java.lang.Object) -> checkArgument
    398:401:void checkArgument(boolean,java.lang.String,java.lang.Object,char) -> checkArgument
    412:415:void checkArgument(boolean,java.lang.String,java.lang.Object,int) -> checkArgument
    426:429:void checkArgument(boolean,java.lang.String,java.lang.Object,long) -> checkArgument
    440:443:void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object) -> checkArgument
    458:461:void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> checkArgument
    477:480:void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> checkArgument
    491:494:void checkState(boolean) -> checkState
    507:510:void checkState(boolean,java.lang.Object) -> checkState
    531:534:void checkState(boolean,java.lang.String,java.lang.Object[]) -> checkState
    545:548:void checkState(boolean,java.lang.String,char) -> checkState
    559:562:void checkState(boolean,java.lang.String,int) -> checkState
    573:576:void checkState(boolean,java.lang.String,long) -> checkState
    588:591:void checkState(boolean,java.lang.String,java.lang.Object) -> checkState
    603:606:void checkState(boolean,java.lang.String,char,char) -> checkState
    617:620:void checkState(boolean,java.lang.String,char,int) -> checkState
    632:635:void checkState(boolean,java.lang.String,char,long) -> checkState
    647:650:void checkState(boolean,java.lang.String,char,java.lang.Object) -> checkState
    661:664:void checkState(boolean,java.lang.String,int,char) -> checkState
    675:678:void checkState(boolean,java.lang.String,int,int) -> checkState
    689:692:void checkState(boolean,java.lang.String,int,long) -> checkState
    704:707:void checkState(boolean,java.lang.String,int,java.lang.Object) -> checkState
    719:722:void checkState(boolean,java.lang.String,long,char) -> checkState
    733:736:void checkState(boolean,java.lang.String,long,int) -> checkState
    748:751:void checkState(boolean,java.lang.String,long,long) -> checkState
    763:766:void checkState(boolean,java.lang.String,long,java.lang.Object) -> checkState
    778:781:void checkState(boolean,java.lang.String,java.lang.Object,char) -> checkState
    793:796:void checkState(boolean,java.lang.String,java.lang.Object,int) -> checkState
    808:811:void checkState(boolean,java.lang.String,java.lang.Object,long) -> checkState
    823:826:void checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object) -> checkState
    842:845:void checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> checkState
    862:865:void checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> checkState
    877:880:java.lang.Object checkNotNull(java.lang.Object) -> checkNotNull
    896:899:java.lang.Object checkNotNull(java.lang.Object,java.lang.Object) -> checkNotNull
    922:925:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[]) -> checkNotNull
    938:941:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,char) -> checkNotNull
    954:957:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,int) -> checkNotNull
    970:973:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,long) -> checkNotNull
    986:989:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object) -> checkNotNull
    1002:1005:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,char,char) -> checkNotNull
    1018:1021:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,char,int) -> checkNotNull
    1034:1037:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,char,long) -> checkNotNull
    1050:1053:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,char,java.lang.Object) -> checkNotNull
    1066:1069:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,int,char) -> checkNotNull
    1082:1085:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,int,int) -> checkNotNull
    1098:1101:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,int,long) -> checkNotNull
    1114:1117:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,int,java.lang.Object) -> checkNotNull
    1130:1133:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,long,char) -> checkNotNull
    1146:1149:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,long,int) -> checkNotNull
    1162:1165:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,long,long) -> checkNotNull
    1178:1181:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,long,java.lang.Object) -> checkNotNull
    1194:1197:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,char) -> checkNotNull
    1210:1213:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,int) -> checkNotNull
    1226:1229:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,long) -> checkNotNull
    1242:1245:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object) -> checkNotNull
    1262:1265:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> checkNotNull
    1283:1286:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> checkNotNull
    1327:1327:int checkElementIndex(int,int) -> checkElementIndex
    1344:1347:int checkElementIndex(int,int,java.lang.String) -> checkElementIndex
    1351:1356:java.lang.String badElementIndex(int,int,java.lang.String) -> a
    1372:1372:int checkPositionIndex(int,int) -> checkPositionIndex
    1389:1392:int checkPositionIndex(int,int,java.lang.String) -> checkPositionIndex
    1396:1401:java.lang.String badPositionIndex(int,int,java.lang.String) -> b
    1419:1422:void checkPositionIndexes(int,int,int) -> checkPositionIndexes
    1425:1432:java.lang.String badPositionIndexes(int,int,int) -> a
com.google.common.base.Predicate -> com.google.common.base.Predicate:
    boolean apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    79:79:boolean test(java.lang.Object) -> test
com.google.common.base.Predicates -> com.google.common.base.Predicates:
    43:43:void <init>() -> <init>
    51:51:com.google.common.base.Predicate alwaysTrue() -> alwaysTrue
    57:57:com.google.common.base.Predicate alwaysFalse() -> alwaysFalse
    66:66:com.google.common.base.Predicate isNull() -> isNull
    75:75:com.google.common.base.Predicate notNull() -> notNull
    83:83:com.google.common.base.Predicate not(com.google.common.base.Predicate) -> not
    94:94:com.google.common.base.Predicate and(java.lang.Iterable) -> and
    106:106:com.google.common.base.Predicate and(com.google.common.base.Predicate[]) -> and
    115:115:com.google.common.base.Predicate and(com.google.common.base.Predicate,com.google.common.base.Predicate) -> and
    126:126:com.google.common.base.Predicate or(java.lang.Iterable) -> or
    138:138:com.google.common.base.Predicate or(com.google.common.base.Predicate[]) -> or
    147:147:com.google.common.base.Predicate or(com.google.common.base.Predicate,com.google.common.base.Predicate) -> or
    155:155:com.google.common.base.Predicate equalTo(java.lang.Object) -> equalTo
    173:173:com.google.common.base.Predicate instanceOf(java.lang.Class) -> instanceOf
    193:193:com.google.common.base.Predicate subtypeOf(java.lang.Class) -> subtypeOf
    208:208:com.google.common.base.Predicate in(java.util.Collection) -> in
    219:219:com.google.common.base.Predicate compose(com.google.common.base.Predicate,com.google.common.base.Function) -> compose
    232:232:com.google.common.base.Predicate containsPattern(java.lang.String) -> containsPattern
    244:244:com.google.common.base.Predicate contains(java.util.regex.Pattern) -> contains
    426:435:java.lang.String toStringHelper(java.lang.String,java.lang.Iterable) -> b
    689:689:java.util.List asList(com.google.common.base.Predicate,com.google.common.base.Predicate) -> a
    693:693:java.util.List defensiveCopy(java.lang.Object[]) -> a
    697:701:java.util.List defensiveCopy(java.lang.Iterable) -> a
    42:42:java.lang.String access$800(java.lang.String,java.lang.Iterable) -> a
com.google.common.base.Predicates$AndPredicate -> com.google.common.base.az:
    java.util.List components -> a
    long serialVersionUID -> serialVersionUID
    345:347:void <init>(java.util.List) -> <init>
    352:357:boolean apply(java.lang.Object) -> apply
    363:363:int hashCode() -> hashCode
    368:372:boolean equals(java.lang.Object) -> equals
    377:377:java.lang.String toString() -> toString
    342:342:void <init>(java.util.List,byte) -> <init>
com.google.common.base.Predicates$CompositionPredicate -> com.google.common.base.aA:
    com.google.common.base.Predicate p -> a
    com.google.common.base.Function f -> b
    long serialVersionUID -> serialVersionUID
    589:592:void <init>(com.google.common.base.Predicate,com.google.common.base.Function) -> <init>
    596:596:boolean apply(java.lang.Object) -> apply
    601:605:boolean equals(java.lang.Object) -> equals
    610:610:int hashCode() -> hashCode
    616:616:java.lang.String toString() -> toString
    585:585:void <init>(com.google.common.base.Predicate,com.google.common.base.Function,byte) -> <init>
com.google.common.base.Predicates$ContainsPatternFromStringPredicate -> com.google.common.base.aB:
    long serialVersionUID -> serialVersionUID
    675:676:void <init>(java.lang.String) -> <init>
    680:680:java.lang.String toString() -> toString
com.google.common.base.Predicates$ContainsPatternPredicate -> com.google.common.base.aC:
    com.google.common.base.CommonPattern pattern -> a
    long serialVersionUID -> serialVersionUID
    627:629:void <init>(com.google.common.base.CommonPattern) -> <init>
    633:633:boolean apply(java.lang.CharSequence) -> a
    641:641:int hashCode() -> hashCode
    646:654:boolean equals(java.lang.Object) -> equals
    659:664:java.lang.String toString() -> toString
    623:623:boolean apply(java.lang.Object) -> apply
com.google.common.base.Predicates$InPredicate -> com.google.common.base.aD:
    java.util.Collection target -> a
    long serialVersionUID -> serialVersionUID
    549:551:void <init>(java.util.Collection) -> <init>
    556:558:boolean apply(java.lang.Object) -> apply
    564:568:boolean equals(java.lang.Object) -> equals
    573:573:int hashCode() -> hashCode
    578:578:java.lang.String toString() -> toString
    546:546:void <init>(java.util.Collection,byte) -> <init>
com.google.common.base.Predicates$InstanceOfPredicate -> com.google.common.base.aE:
    java.lang.Class clazz -> a
    long serialVersionUID -> serialVersionUID
    478:480:void <init>(java.lang.Class) -> <init>
    484:484:boolean apply(java.lang.Object) -> apply
    489:489:int hashCode() -> hashCode
    494:498:boolean equals(java.lang.Object) -> equals
    503:503:java.lang.String toString() -> toString
    475:475:void <init>(java.lang.Class,byte) -> <init>
com.google.common.base.Predicates$IsEqualToPredicate -> com.google.common.base.aF:
    java.lang.Object target -> a
    long serialVersionUID -> serialVersionUID
    442:444:void <init>(java.lang.Object) -> <init>
    448:448:boolean apply(java.lang.Object) -> apply
    453:453:int hashCode() -> hashCode
    458:462:boolean equals(java.lang.Object) -> equals
    467:467:java.lang.String toString() -> toString
    439:439:void <init>(java.lang.Object,byte) -> <init>
com.google.common.base.Predicates$NotPredicate -> com.google.common.base.aG:
    com.google.common.base.Predicate predicate -> a
    long serialVersionUID -> serialVersionUID
    310:312:void <init>(com.google.common.base.Predicate) -> <init>
    316:316:boolean apply(java.lang.Object) -> apply
    321:321:int hashCode() -> hashCode
    326:330:boolean equals(java.lang.Object) -> equals
    335:335:java.lang.String toString() -> toString
com.google.common.base.Predicates$ObjectPredicate -> com.google.common.base.aH:
    com.google.common.base.Predicates$ObjectPredicate ALWAYS_TRUE -> a
    com.google.common.base.Predicates$ObjectPredicate ALWAYS_FALSE -> b
    com.google.common.base.Predicates$ObjectPredicate IS_NULL -> c
    com.google.common.base.Predicates$ObjectPredicate NOT_NULL -> d
    com.google.common.base.Predicates$ObjectPredicate[] $VALUES -> e
    250:250:com.google.common.base.Predicates$ObjectPredicate[] values() -> values
    250:250:com.google.common.base.Predicates$ObjectPredicate valueOf(java.lang.String) -> valueOf
    250:250:void <init>(java.lang.String,int) -> <init>
    302:302:com.google.common.base.Predicate withNarrowedType() -> a
    250:250:void <init>(java.lang.String,int,byte) -> <init>
    250:288:void <clinit>() -> <clinit>
com.google.common.base.Predicates$ObjectPredicate$1 -> com.google.common.base.aI:
    252:252:void <init>(java.lang.String,int) -> <init>
    255:255:boolean apply(java.lang.Object) -> apply
    260:260:java.lang.String toString() -> toString
com.google.common.base.Predicates$ObjectPredicate$2 -> com.google.common.base.aJ:
    264:264:void <init>(java.lang.String,int) -> <init>
    267:267:boolean apply(java.lang.Object) -> apply
    272:272:java.lang.String toString() -> toString
com.google.common.base.Predicates$ObjectPredicate$3 -> com.google.common.base.aK:
    276:276:void <init>(java.lang.String,int) -> <init>
    279:279:boolean apply(java.lang.Object) -> apply
    284:284:java.lang.String toString() -> toString
com.google.common.base.Predicates$ObjectPredicate$4 -> com.google.common.base.aL:
    288:288:void <init>(java.lang.String,int) -> <init>
    291:291:boolean apply(java.lang.Object) -> apply
    296:296:java.lang.String toString() -> toString
com.google.common.base.Predicates$OrPredicate -> com.google.common.base.aM:
    java.util.List components -> a
    long serialVersionUID -> serialVersionUID
    387:389:void <init>(java.util.List) -> <init>
    394:399:boolean apply(java.lang.Object) -> apply
    405:405:int hashCode() -> hashCode
    410:414:boolean equals(java.lang.Object) -> equals
    419:419:java.lang.String toString() -> toString
    384:384:void <init>(java.util.List,byte) -> <init>
com.google.common.base.Predicates$SubtypeOfPredicate -> com.google.common.base.aN:
    java.lang.Class clazz -> a
    long serialVersionUID -> serialVersionUID
    514:516:void <init>(java.lang.Class) -> <init>
    520:520:boolean apply(java.lang.Class) -> a
    525:525:int hashCode() -> hashCode
    530:534:boolean equals(java.lang.Object) -> equals
    539:539:java.lang.String toString() -> toString
    510:510:boolean apply(java.lang.Object) -> apply
    511:511:void <init>(java.lang.Class,byte) -> <init>
com.google.common.base.Present -> com.google.common.base.aO:
    java.lang.Object reference -> a
    long serialVersionUID -> serialVersionUID
    29:31:void <init>(java.lang.Object) -> <init>
    35:35:boolean isPresent() -> isPresent
    40:40:java.lang.Object get() -> get
    45:46:java.lang.Object or(java.lang.Object) -> or
    51:52:com.google.common.base.Optional or(com.google.common.base.Optional) -> or
    57:58:java.lang.Object or(com.google.common.base.Supplier) -> or
    63:63:java.lang.Object orNull() -> orNull
    68:68:java.util.Set asSet() -> asSet
    73:75:com.google.common.base.Optional transform(com.google.common.base.Function) -> transform
    81:85:boolean equals(java.lang.Object) -> equals
    90:90:int hashCode() -> hashCode
    95:95:java.lang.String toString() -> toString
com.google.common.base.SmallCharMatcher -> com.google.common.base.aP:
    char[] table -> a
    boolean containsZero -> b
    long filter -> c
    36:40:void <init>(char[],long,boolean,java.lang.String) -> <init>
    54:54:int smear(int) -> a
    58:58:boolean checkFilter(int) -> b
    74:83:int chooseTableSize(int) -> c
    88:108:com.google.common.base.CharMatcher from(java.util.BitSet,java.lang.String) -> a
    113:132:boolean matches(char) -> matches
    137:145:void setBits(java.util.BitSet) -> a
com.google.common.base.Splitter -> com.google.common.base.Splitter:
    com.google.common.base.CharMatcher trimmer -> a
    boolean omitEmptyStrings -> b
    com.google.common.base.Splitter$Strategy strategy -> c
    int limit -> d
    109:110:void <init>(com.google.common.base.Splitter$Strategy) -> <init>
    112:117:void <init>(com.google.common.base.Splitter$Strategy,boolean,com.google.common.base.CharMatcher,int) -> <init>
    127:127:com.google.common.base.Splitter on(char) -> on
    141:143:com.google.common.base.Splitter on(com.google.common.base.CharMatcher) -> on
    171:175:com.google.common.base.Splitter on(java.lang.String) -> on
    217:217:com.google.common.base.Splitter on(java.util.regex.Pattern) -> on
    221:226:com.google.common.base.Splitter on(com.google.common.base.CommonPattern) -> a
    260:260:com.google.common.base.Splitter onPattern(java.lang.String) -> onPattern
    282:284:com.google.common.base.Splitter fixedLength(int) -> fixedLength
    321:321:com.google.common.base.Splitter omitEmptyStrings() -> omitEmptyStrings
    341:342:com.google.common.base.Splitter limit(int) -> limit
    355:355:com.google.common.base.Splitter trimResults() -> trimResults
    370:371:com.google.common.base.Splitter trimResults(com.google.common.base.CharMatcher) -> trimResults
    383:385:java.lang.Iterable split(java.lang.CharSequence) -> split
    402:402:java.util.Iterator splittingIterator(java.lang.CharSequence) -> a
    414:423:java.util.List splitToList(java.lang.CharSequence) -> splitToList
    438:438:java.util.stream.Stream splitToStream(java.lang.CharSequence) -> splitToStream
    449:449:com.google.common.base.Splitter$MapSplitter withKeyValueSeparator(java.lang.String) -> withKeyValueSeparator
    460:460:com.google.common.base.Splitter$MapSplitter withKeyValueSeparator(char) -> withKeyValueSeparator
    484:484:com.google.common.base.Splitter$MapSplitter withKeyValueSeparator(com.google.common.base.Splitter) -> withKeyValueSeparator
    102:102:java.util.Iterator access$000(com.google.common.base.Splitter,java.lang.CharSequence) -> a
    102:102:com.google.common.base.CharMatcher access$200(com.google.common.base.Splitter) -> a
    102:102:boolean access$300(com.google.common.base.Splitter) -> b
    102:102:int access$400(com.google.common.base.Splitter) -> c
com.google.common.base.Splitter$1 -> com.google.common.base.aQ:
    com.google.common.base.CharMatcher val$separatorMatcher -> a
    144:144:void <init>(com.google.common.base.CharMatcher) -> <init>
    147:147:com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> b
    144:144:java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> a
com.google.common.base.Splitter$1$1 -> com.google.common.base.aR:
    com.google.common.base.Splitter$1 this$0 -> b
    147:147:void <init>(com.google.common.base.Splitter$1,com.google.common.base.Splitter,java.lang.CharSequence) -> <init>
    150:150:int separatorStart(int) -> a
    155:155:int separatorEnd(int) -> b
com.google.common.base.Splitter$2 -> com.google.common.base.aS:
    java.lang.String val$separator -> a
    176:176:void <init>(java.lang.String) -> <init>
    179:179:com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> b
    176:176:java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> a
com.google.common.base.Splitter$2$1 -> com.google.common.base.aT:
    com.google.common.base.Splitter$2 this$0 -> b
    179:179:void <init>(com.google.common.base.Splitter$2,com.google.common.base.Splitter,java.lang.CharSequence) -> <init>
    182:193:int separatorStart(int) -> a
    198:198:int separatorEnd(int) -> b
com.google.common.base.Splitter$3 -> com.google.common.base.aU:
    com.google.common.base.CommonPattern val$separatorPattern -> a
    227:227:void <init>(com.google.common.base.CommonPattern) -> <init>
    230:231:com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> b
    227:227:java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> a
com.google.common.base.Splitter$3$1 -> com.google.common.base.aV:
    com.google.common.base.CommonMatcher val$matcher -> b
    231:231:void <init>(com.google.common.base.Splitter$3,com.google.common.base.Splitter,java.lang.CharSequence,com.google.common.base.CommonMatcher) -> <init>
    234:234:int separatorStart(int) -> a
    239:239:int separatorEnd(int) -> b
com.google.common.base.Splitter$4 -> com.google.common.base.aW:
    int val$length -> a
    285:285:void <init>(int) -> <init>
    288:288:com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> b
    285:285:java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> a
com.google.common.base.Splitter$4$1 -> com.google.common.base.aX:
    com.google.common.base.Splitter$4 this$0 -> b
    288:288:void <init>(com.google.common.base.Splitter$4,com.google.common.base.Splitter,java.lang.CharSequence) -> <init>
    291:292:int separatorStart(int) -> a
    297:297:int separatorEnd(int) -> b
com.google.common.base.Splitter$5 -> com.google.common.base.aY:
    java.lang.CharSequence val$sequence -> a
    com.google.common.base.Splitter this$0 -> b
    385:385:void <init>(com.google.common.base.Splitter,java.lang.CharSequence) -> <init>
    388:388:java.util.Iterator iterator() -> iterator
    393:396:java.lang.String toString() -> toString
com.google.common.base.Splitter$MapSplitter -> com.google.common.base.Splitter$MapSplitter:
    com.google.common.base.Splitter outerSplitter -> a
    com.google.common.base.Splitter entrySplitter -> b
    501:504:void <init>(com.google.common.base.Splitter,com.google.common.base.Splitter) -> <init>
    518:532:java.util.Map split(java.lang.CharSequence) -> split
    496:496:void <init>(com.google.common.base.Splitter,com.google.common.base.Splitter,byte) -> <init>
com.google.common.base.Splitter$SplittingIterator -> com.google.common.base.aZ:
    java.lang.CharSequence toSplit -> a
    com.google.common.base.CharMatcher trimmer -> b
    boolean omitEmptyStrings -> c
    int offset -> d
    int limit -> e
    int separatorStart(int) -> a
    int separatorEnd(int) -> b
    557:565:void <init>(com.google.common.base.Splitter,java.lang.CharSequence) -> <init>
    574:630:java.lang.String computeNext() -> c
    540:540:java.lang.Object computeNext() -> a
com.google.common.base.Splitter$Strategy -> com.google.common.base.ba:
    java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> a
com.google.common.base.StandardSystemProperty -> com.google.common.base.StandardSystemProperty:
    com.google.common.base.StandardSystemProperty JAVA_VERSION -> JAVA_VERSION
    com.google.common.base.StandardSystemProperty JAVA_VENDOR -> JAVA_VENDOR
    com.google.common.base.StandardSystemProperty JAVA_VENDOR_URL -> JAVA_VENDOR_URL
    com.google.common.base.StandardSystemProperty JAVA_HOME -> JAVA_HOME
    com.google.common.base.StandardSystemProperty JAVA_VM_SPECIFICATION_VERSION -> JAVA_VM_SPECIFICATION_VERSION
    com.google.common.base.StandardSystemProperty JAVA_VM_SPECIFICATION_VENDOR -> JAVA_VM_SPECIFICATION_VENDOR
    com.google.common.base.StandardSystemProperty JAVA_VM_SPECIFICATION_NAME -> JAVA_VM_SPECIFICATION_NAME
    com.google.common.base.StandardSystemProperty JAVA_VM_VERSION -> JAVA_VM_VERSION
    com.google.common.base.StandardSystemProperty JAVA_VM_VENDOR -> JAVA_VM_VENDOR
    com.google.common.base.StandardSystemProperty JAVA_VM_NAME -> JAVA_VM_NAME
    com.google.common.base.StandardSystemProperty JAVA_SPECIFICATION_VERSION -> JAVA_SPECIFICATION_VERSION
    com.google.common.base.StandardSystemProperty JAVA_SPECIFICATION_VENDOR -> JAVA_SPECIFICATION_VENDOR
    com.google.common.base.StandardSystemProperty JAVA_SPECIFICATION_NAME -> JAVA_SPECIFICATION_NAME
    com.google.common.base.StandardSystemProperty JAVA_CLASS_VERSION -> JAVA_CLASS_VERSION
    com.google.common.base.StandardSystemProperty JAVA_CLASS_PATH -> JAVA_CLASS_PATH
    com.google.common.base.StandardSystemProperty JAVA_LIBRARY_PATH -> JAVA_LIBRARY_PATH
    com.google.common.base.StandardSystemProperty JAVA_IO_TMPDIR -> JAVA_IO_TMPDIR
    com.google.common.base.StandardSystemProperty JAVA_COMPILER -> JAVA_COMPILER
    com.google.common.base.StandardSystemProperty JAVA_EXT_DIRS -> JAVA_EXT_DIRS
    com.google.common.base.StandardSystemProperty OS_NAME -> OS_NAME
    com.google.common.base.StandardSystemProperty OS_ARCH -> OS_ARCH
    com.google.common.base.StandardSystemProperty OS_VERSION -> OS_VERSION
    com.google.common.base.StandardSystemProperty FILE_SEPARATOR -> FILE_SEPARATOR
    com.google.common.base.StandardSystemProperty PATH_SEPARATOR -> PATH_SEPARATOR
    com.google.common.base.StandardSystemProperty LINE_SEPARATOR -> LINE_SEPARATOR
    com.google.common.base.StandardSystemProperty USER_NAME -> USER_NAME
    com.google.common.base.StandardSystemProperty USER_HOME -> USER_HOME
    com.google.common.base.StandardSystemProperty USER_DIR -> USER_DIR
    java.lang.String key -> a
    com.google.common.base.StandardSystemProperty[] $VALUES -> b
    26:26:com.google.common.base.StandardSystemProperty[] values() -> values
    26:26:com.google.common.base.StandardSystemProperty valueOf(java.lang.String) -> valueOf
    115:117:void <init>(java.lang.String,int,java.lang.String) -> <init>
    121:121:java.lang.String key() -> key
    129:129:java.lang.String value() -> value
    135:135:java.lang.String toString() -> toString
    26:111:void <clinit>() -> <clinit>
com.google.common.base.Stopwatch -> com.google.common.base.Stopwatch:
    com.google.common.base.Ticker ticker -> a
    boolean isRunning -> b
    long elapsedNanos -> c
    long startTick -> d
    96:96:com.google.common.base.Stopwatch createUnstarted() -> createUnstarted
    105:105:com.google.common.base.Stopwatch createUnstarted(com.google.common.base.Ticker) -> createUnstarted
    114:114:com.google.common.base.Stopwatch createStarted() -> createStarted
    123:123:com.google.common.base.Stopwatch createStarted(com.google.common.base.Ticker) -> createStarted
    126:128:void <init>() -> <init>
    130:132:void <init>(com.google.common.base.Ticker) -> <init>
    139:139:boolean isRunning() -> isRunning
    150:153:com.google.common.base.Stopwatch start() -> start
    165:169:com.google.common.base.Stopwatch stop() -> stop
    179:181:com.google.common.base.Stopwatch reset() -> reset
    185:185:long elapsedNanos() -> a
    202:202:long elapsed(java.util.concurrent.TimeUnit) -> elapsed
    214:214:java.time.Duration elapsed() -> elapsed
    220:226:java.lang.String toString() -> toString
    230:248:java.util.concurrent.TimeUnit chooseUnit(long) -> a
    252:268:java.lang.String abbreviate(java.util.concurrent.TimeUnit) -> a
com.google.common.base.Stopwatch$1 -> com.google.common.base.bb:
    int[] $SwitchMap$java$util$concurrent$TimeUnit -> a
    252:252:void <clinit>() -> <clinit>
com.google.common.base.Strings -> com.google.common.base.Strings:
    34:34:void <init>() -> <init>
    43:43:java.lang.String nullToEmpty(java.lang.String) -> nullToEmpty
    53:53:java.lang.String emptyToNull(java.lang.String) -> emptyToNull
    68:68:boolean isNullOrEmpty(java.lang.String) -> isNullOrEmpty
    90:99:java.lang.String padStart(java.lang.String,int,char) -> padStart
    121:130:java.lang.String padEnd(java.lang.String,int,char) -> padEnd
    144:166:java.lang.String repeat(java.lang.String,int) -> repeat
    177:188:java.lang.String commonPrefix(java.lang.CharSequence,java.lang.CharSequence) -> commonPrefix
    199:211:java.lang.String commonSuffix(java.lang.CharSequence,java.lang.CharSequence) -> commonSuffix
    220:223:boolean validSurrogatePairAt(java.lang.CharSequence,int) -> a
    261:297:java.lang.String lenientFormat(java.lang.String,java.lang.Object[]) -> lenientFormat
    302:310:java.lang.String lenientToString(java.lang.Object) -> a
com.google.common.base.Supplier -> com.google.common.base.Supplier:
    java.lang.Object get() -> get
com.google.common.base.Suppliers -> com.google.common.base.Suppliers:
    37:37:void <init>() -> <init>
    46:46:com.google.common.base.Supplier compose(com.google.common.base.Function,com.google.common.base.Supplier) -> compose
    102:106:com.google.common.base.Supplier memoize(com.google.common.base.Supplier) -> memoize
    212:212:com.google.common.base.Supplier memoizeWithExpiration(com.google.common.base.Supplier,long,java.util.concurrent.TimeUnit) -> memoizeWithExpiration
    268:268:com.google.common.base.Supplier ofInstance(java.lang.Object) -> ofInstance
    310:310:com.google.common.base.Supplier synchronizedSupplier(com.google.common.base.Supplier) -> synchronizedSupplier
    345:346:com.google.common.base.Function supplierFunction() -> supplierFunction
com.google.common.base.Suppliers$ExpiringMemoizingSupplier -> com.google.common.base.bc:
    com.google.common.base.Supplier delegate -> a
    long durationNanos -> b
    java.lang.Object value -> c
    long expirationNanos -> d
    long serialVersionUID -> serialVersionUID
    224:228:void <init>(com.google.common.base.Supplier,long,java.util.concurrent.TimeUnit) -> <init>
    238:253:java.lang.Object get() -> get
    260:260:java.lang.String toString() -> toString
com.google.common.base.Suppliers$MemoizingSupplier -> com.google.common.base.bd:
    com.google.common.base.Supplier delegate -> a
    boolean initialized -> b
    java.lang.Object value -> c
    long serialVersionUID -> serialVersionUID
    119:121:void <init>(com.google.common.base.Supplier) -> <init>
    126:136:java.lang.Object get() -> get
    141:141:java.lang.String toString() -> toString
com.google.common.base.Suppliers$NonSerializableMemoizingSupplier -> com.google.common.base.be:
    com.google.common.base.Supplier delegate -> a
    boolean initialized -> b
    java.lang.Object value -> c
    157:159:void <init>(com.google.common.base.Supplier) -> <init>
    164:176:java.lang.Object get() -> get
    181:182:java.lang.String toString() -> toString
com.google.common.base.Suppliers$SupplierComposition -> com.google.common.base.bf:
    com.google.common.base.Function function -> a
    com.google.common.base.Supplier supplier -> b
    long serialVersionUID -> serialVersionUID
    53:56:void <init>(com.google.common.base.Function,com.google.common.base.Supplier) -> <init>
    60:60:java.lang.Object get() -> get
    65:69:boolean equals(java.lang.Object) -> equals
    74:74:int hashCode() -> hashCode
    79:79:java.lang.String toString() -> toString
com.google.common.base.Suppliers$SupplierFunction -> com.google.common.base.bg:
com.google.common.base.Suppliers$SupplierFunctionImpl -> com.google.common.base.bh:
    com.google.common.base.Suppliers$SupplierFunctionImpl INSTANCE -> a
    com.google.common.base.Suppliers$SupplierFunctionImpl[] $VALUES -> b
    351:351:com.google.common.base.Suppliers$SupplierFunctionImpl[] values() -> values
    351:351:com.google.common.base.Suppliers$SupplierFunctionImpl valueOf(java.lang.String) -> valueOf
    351:351:void <init>(java.lang.String,int) -> <init>
    357:357:java.lang.Object apply(com.google.common.base.Supplier) -> a
    362:362:java.lang.String toString() -> toString
    351:351:java.lang.Object apply(java.lang.Object) -> apply
    351:352:void <clinit>() -> <clinit>
com.google.common.base.Suppliers$SupplierOfInstance -> com.google.common.base.bi:
    java.lang.Object instance -> a
    long serialVersionUID -> serialVersionUID
    274:276:void <init>(java.lang.Object) -> <init>
    280:280:java.lang.Object get() -> get
    285:289:boolean equals(java.lang.Object) -> equals
    294:294:int hashCode() -> hashCode
    299:299:java.lang.String toString() -> toString
com.google.common.base.Suppliers$ThreadSafeSupplier -> com.google.common.base.bj:
    com.google.common.base.Supplier delegate -> a
    long serialVersionUID -> serialVersionUID
    316:318:void <init>(com.google.common.base.Supplier) -> <init>
    322:324:java.lang.Object get() -> get
    329:329:java.lang.String toString() -> toString
com.google.common.base.Throwables -> com.google.common.base.Throwables:
    java.lang.Object jla -> a
    java.lang.reflect.Method getStackTraceElementMethod -> b
    java.lang.reflect.Method getStackTraceDepthMethod -> c
    49:49:void <init>() -> <init>
    74:78:void throwIfInstanceOf(java.lang.Throwable,java.lang.Class) -> throwIfInstanceOf
    103:106:void propagateIfInstanceOf(java.lang.Throwable,java.lang.Class) -> propagateIfInstanceOf
    128:135:void throwIfUnchecked(java.lang.Throwable) -> throwIfUnchecked
    158:161:void propagateIfPossible(java.lang.Throwable) -> propagateIfPossible
    184:186:void propagateIfPossible(java.lang.Throwable,java.lang.Class) -> propagateIfPossible
    203:206:void propagateIfPossible(java.lang.Throwable,java.lang.Class,java.lang.Class) -> propagateIfPossible
    240:241:java.lang.RuntimeException propagate(java.lang.Throwable) -> propagate
    257:272:java.lang.Throwable getRootCause(java.lang.Throwable) -> getRootCause
    293:315:java.util.List getCausalChain(java.lang.Throwable) -> getCausalChain
    336:339:java.lang.Throwable getCauseAs(java.lang.Throwable,java.lang.Class) -> getCauseAs
    351:353:java.lang.String getStackTraceAsString(java.lang.Throwable) -> getStackTraceAsString
    388:390:java.util.List lazyStackTrace(java.lang.Throwable) -> lazyStackTrace
    402:402:boolean lazyStackTraceIsLazy() -> lazyStackTraceIsLazy
    407:414:java.util.List jlaStackTrace(java.lang.Throwable) -> a
    432:436:java.lang.Object invokeAccessibleNonThrowingMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]) -> b
    480:490:java.lang.Object getJLA() -> d
    500:500:java.lang.reflect.Method getGetMethod() -> e
    515:522:java.lang.reflect.Method getSizeMethod() -> f
    530:538:java.lang.reflect.Method getJlaMethod(java.lang.String,java.lang.Class[]) -> a
    48:48:java.lang.reflect.Method access$000() -> a
    48:48:java.lang.Object access$100() -> b
    48:48:java.lang.Object access$200(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]) -> a
    48:48:java.lang.reflect.Method access$300() -> c
    451:467:void <clinit>() -> <clinit>
com.google.common.base.Throwables$1 -> com.google.common.base.bk:
    java.lang.Throwable val$t -> a
    414:414:void <init>(java.lang.Throwable) -> <init>
    417:418:java.lang.StackTraceElement get(int) -> a
    423:423:int size() -> size
    414:414:java.lang.Object get(int) -> get
com.google.common.base.Ticker -> com.google.common.base.Ticker:
    com.google.common.base.Ticker SYSTEM_TICKER -> a
    33:33:void <init>() -> <init>
    long read() -> read
    44:44:com.google.common.base.Ticker systemTicker() -> systemTicker
    47:47:void <clinit>() -> <clinit>
com.google.common.base.Ticker$1 -> com.google.common.base.bl:
    48:48:void <init>() -> <init>
    51:51:long read() -> read
com.google.common.base.Utf8 -> com.google.common.base.Utf8:
    52:77:int encodedLength(java.lang.CharSequence) -> encodedLength
    81:99:int encodedLengthGeneral(java.lang.CharSequence,int) -> a
    113:113:boolean isWellFormed(byte[]) -> isWellFormed
    126:134:boolean isWellFormed(byte[],int,int) -> isWellFormed
    138:193:boolean isWellFormedSlowPath(byte[],int,int) -> a
    197:197:java.lang.String unpairedSurrogateMsg(int) -> a
    200:200:void <init>() -> <init>
com.google.common.base.Verify -> com.google.common.base.Verify:
    99:102:void verify(boolean) -> verify
    123:126:void verify(boolean,java.lang.String,java.lang.Object[]) -> verify
    137:140:void verify(boolean,java.lang.String,char) -> verify
    151:154:void verify(boolean,java.lang.String,int) -> verify
    165:168:void verify(boolean,java.lang.String,long) -> verify
    180:183:void verify(boolean,java.lang.String,java.lang.Object) -> verify
    195:198:void verify(boolean,java.lang.String,char,char) -> verify
    210:213:void verify(boolean,java.lang.String,int,char) -> verify
    225:228:void verify(boolean,java.lang.String,long,char) -> verify
    240:243:void verify(boolean,java.lang.String,java.lang.Object,char) -> verify
    255:258:void verify(boolean,java.lang.String,char,int) -> verify
    270:273:void verify(boolean,java.lang.String,int,int) -> verify
    285:288:void verify(boolean,java.lang.String,long,int) -> verify
    300:303:void verify(boolean,java.lang.String,java.lang.Object,int) -> verify
    315:318:void verify(boolean,java.lang.String,char,long) -> verify
    330:333:void verify(boolean,java.lang.String,int,long) -> verify
    345:348:void verify(boolean,java.lang.String,long,long) -> verify
    360:363:void verify(boolean,java.lang.String,java.lang.Object,long) -> verify
    375:378:void verify(boolean,java.lang.String,char,java.lang.Object) -> verify
    390:393:void verify(boolean,java.lang.String,int,java.lang.Object) -> verify
    405:408:void verify(boolean,java.lang.String,long,java.lang.Object) -> verify
    423:426:void verify(boolean,java.lang.String,java.lang.Object,java.lang.Object) -> verify
    442:445:void verify(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> verify
    462:465:void verify(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> verify
    477:477:java.lang.Object verifyNotNull(java.lang.Object) -> verifyNotNull
    500:501:java.lang.Object verifyNotNull(java.lang.Object,java.lang.String,java.lang.Object[]) -> verifyNotNull
    507:507:void <init>() -> <init>
com.google.common.base.VerifyException -> com.google.common.base.VerifyException:
    30:30:void <init>() -> <init>
    34:35:void <init>(java.lang.String) -> <init>
    44:45:void <init>(java.lang.Throwable) -> <init>
    54:55:void <init>(java.lang.String,java.lang.Throwable) -> <init>
com.google.common.base.internal.Finalizer -> com.google.common.base.internal.Finalizer:
    java.util.logging.Logger logger -> a
    java.lang.ref.WeakReference finalizableReferenceClassReference -> b
    java.lang.ref.PhantomReference frqReference -> c
    java.lang.ref.ReferenceQueue queue -> d
    java.lang.reflect.Constructor bigThreadConstructor -> e
    java.lang.reflect.Field inheritableThreadLocals -> f
    74:110:void startFinalizer(java.lang.Class,java.lang.ref.ReferenceQueue,java.lang.ref.PhantomReference) -> startFinalizer
    129:137:void <init>(java.lang.Class,java.lang.ref.ReferenceQueue,java.lang.ref.PhantomReference) -> <init>
    145:152:void run() -> run
    161:190:boolean cleanUp(java.lang.ref.Reference) -> a
    195:208:java.lang.reflect.Method getFinalizeReferentMethod() -> a
    214:222:java.lang.reflect.Field getInheritableThreadLocalsField() -> b
    228:232:java.lang.reflect.Constructor getBigThreadConstructor() -> c
    48:123:void <clinit>() -> <clinit>
com.google.common.cache.AbstractCache -> com.google.common.cache.AbstractCache:
    44:44:void <init>() -> <init>
    49:49:java.lang.Object get(java.lang.Object,java.util.concurrent.Callable) -> get
    63:74:com.google.common.collect.ImmutableMap getAllPresent(java.lang.Iterable) -> getAllPresent
    80:80:void put(java.lang.Object,java.lang.Object) -> put
    86:89:void putAll(java.util.Map) -> putAll
    92:92:void cleanUp() -> cleanUp
    96:96:long size() -> size
    101:101:void invalidate(java.lang.Object) -> invalidate
    107:110:void invalidateAll(java.lang.Iterable) -> invalidateAll
    114:114:void invalidateAll() -> invalidateAll
    119:119:com.google.common.cache.CacheStats stats() -> stats
    124:124:java.util.concurrent.ConcurrentMap asMap() -> asMap
com.google.common.cache.AbstractCache$SimpleStatsCounter -> com.google.common.cache.AbstractCache$SimpleStatsCounter:
    com.google.common.cache.LongAddable hitCount -> a
    com.google.common.cache.LongAddable missCount -> b
    com.google.common.cache.LongAddable loadSuccessCount -> c
    com.google.common.cache.LongAddable loadExceptionCount -> d
    com.google.common.cache.LongAddable totalLoadTime -> e
    com.google.common.cache.LongAddable evictionCount -> f
    197:205:void <init>() -> <init>
    210:211:void recordHits(int) -> recordHits
    216:217:void recordMisses(int) -> recordMisses
    222:224:void recordLoadSuccess(long) -> recordLoadSuccess
    229:231:void recordLoadException(long) -> recordLoadException
    235:236:void recordEviction() -> recordEviction
    240:246:com.google.common.cache.CacheStats snapshot() -> snapshot
    251:251:long negativeToMaxValue(long) -> a
    256:263:void incrementBy(com.google.common.cache.AbstractCache$StatsCounter) -> incrementBy
com.google.common.cache.AbstractCache$StatsCounter -> com.google.common.cache.AbstractCache$StatsCounter:
    void recordHits(int) -> recordHits
    void recordMisses(int) -> recordMisses
    void recordLoadSuccess(long) -> recordLoadSuccess
    void recordLoadException(long) -> recordLoadException
    void recordEviction() -> recordEviction
    com.google.common.cache.CacheStats snapshot() -> snapshot
com.google.common.cache.AbstractLoadingCache -> com.google.common.cache.AbstractLoadingCache:
    45:45:void <init>() -> <init>
    50:52:java.lang.Object getUnchecked(java.lang.Object) -> getUnchecked
    58:64:com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) -> getAll
    69:69:java.lang.Object apply(java.lang.Object) -> apply
    74:74:void refresh(java.lang.Object) -> refresh
com.google.common.cache.Cache -> com.google.common.cache.Cache:
    java.lang.Object getIfPresent(java.lang.Object) -> getIfPresent
    java.lang.Object get(java.lang.Object,java.util.concurrent.Callable) -> get
    com.google.common.collect.ImmutableMap getAllPresent(java.lang.Iterable) -> getAllPresent
    void put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    void invalidate(java.lang.Object) -> invalidate
    void invalidateAll(java.lang.Iterable) -> invalidateAll
    void invalidateAll() -> invalidateAll
    long size() -> size
    com.google.common.cache.CacheStats stats() -> stats
    java.util.concurrent.ConcurrentMap asMap() -> asMap
    void cleanUp() -> cleanUp
com.google.common.cache.CacheBuilder -> com.google.common.cache.CacheBuilder:
    com.google.common.base.Supplier NULL_STATS_COUNTER -> d
    com.google.common.cache.CacheStats EMPTY_STATS -> a
    com.google.common.base.Supplier CACHE_STATS_COUNTER -> e
    com.google.common.base.Ticker NULL_TICKER -> b
    java.util.logging.Logger logger -> f
    boolean strictParsing -> c
    int initialCapacity -> g
    int concurrencyLevel -> h
    long maximumSize -> i
    long maximumWeight -> j
    com.google.common.cache.Weigher weigher -> k
    com.google.common.cache.LocalCache$Strength keyStrength -> l
    com.google.common.cache.LocalCache$Strength valueStrength -> m
    long expireAfterWriteNanos -> n
    long expireAfterAccessNanos -> o
    long refreshNanos -> p
    com.google.common.base.Equivalence keyEquivalence -> q
    com.google.common.base.Equivalence valueEquivalence -> r
    com.google.common.cache.RemovalListener removalListener -> s
    com.google.common.base.Ticker ticker -> t
    com.google.common.base.Supplier statsCounterSupplier -> u
    230:258:void <init>() -> <init>
    268:268:com.google.common.cache.CacheBuilder newBuilder() -> newBuilder
    278:278:com.google.common.cache.CacheBuilder from(com.google.common.cache.CacheBuilderSpec) -> from
    290:290:com.google.common.cache.CacheBuilder from(java.lang.String) -> from
    300:301:com.google.common.cache.CacheBuilder lenientParsing() -> n
    314:316:com.google.common.cache.CacheBuilder keyEquivalence(com.google.common.base.Equivalence) -> a
    320:320:com.google.common.base.Equivalence getKeyEquivalence() -> a
    334:337:com.google.common.cache.CacheBuilder valueEquivalence(com.google.common.base.Equivalence) -> b
    341:341:com.google.common.base.Equivalence getValueEquivalence() -> b
    356:362:com.google.common.cache.CacheBuilder initialCapacity(int) -> initialCapacity
    366:366:int getInitialCapacity() -> c
    401:407:com.google.common.cache.CacheBuilder concurrencyLevel(int) -> concurrencyLevel
    411:411:int getConcurrencyLevel() -> d
    436:445:com.google.common.cache.CacheBuilder maximumSize(long) -> maximumSize
    477:485:com.google.common.cache.CacheBuilder maximumWeight(long) -> maximumWeight
    520:532:com.google.common.cache.CacheBuilder weigher(com.google.common.cache.Weigher) -> weigher
    536:539:long getMaximumWeight() -> e
    545:545:com.google.common.cache.Weigher getWeigher() -> f
    566:566:com.google.common.cache.CacheBuilder weakKeys() -> weakKeys
    570:572:com.google.common.cache.CacheBuilder setKeyStrength(com.google.common.cache.LocalCache$Strength) -> a
    576:576:com.google.common.cache.LocalCache$Strength getKeyStrength() -> g
    598:598:com.google.common.cache.CacheBuilder weakValues() -> weakValues
    623:623:com.google.common.cache.CacheBuilder softValues() -> softValues
    627:629:com.google.common.cache.CacheBuilder setValueStrength(com.google.common.cache.LocalCache$Strength) -> b
    633:633:com.google.common.cache.LocalCache$Strength getValueStrength() -> h
    660:660:com.google.common.cache.CacheBuilder expireAfterWrite(java.time.Duration) -> expireAfterWrite
    687:693:com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit) -> expireAfterWrite
    698:698:long getExpireAfterWriteNanos() -> i
    730:730:com.google.common.cache.CacheBuilder expireAfterAccess(java.time.Duration) -> expireAfterAccess
    762:768:com.google.common.cache.CacheBuilder expireAfterAccess(long,java.util.concurrent.TimeUnit) -> expireAfterAccess
    773:773:long getExpireAfterAccessNanos() -> j
    808:808:com.google.common.cache.CacheBuilder refreshAfterWrite(java.time.Duration) -> refreshAfterWrite
    843:847:com.google.common.cache.CacheBuilder refreshAfterWrite(long,java.util.concurrent.TimeUnit) -> refreshAfterWrite
    852:852:long getRefreshNanos() -> k
    866:868:com.google.common.cache.CacheBuilder ticker(com.google.common.base.Ticker) -> ticker
    872:875:com.google.common.base.Ticker getTicker(boolean) -> a
    902:908:com.google.common.cache.CacheBuilder removalListener(com.google.common.cache.RemovalListener) -> removalListener
    914:915:com.google.common.cache.RemovalListener getRemovalListener() -> l
    928:929:com.google.common.cache.CacheBuilder recordStats() -> recordStats
    937:937:com.google.common.base.Supplier getStatsCounterSupplier() -> m
    954:955:com.google.common.cache.LoadingCache build(com.google.common.cache.CacheLoader) -> build
    971:973:com.google.common.cache.Cache build() -> build
    977:978:void checkNonLoadingCache() -> o
    981:992:void checkWeightWithWeigher() -> p
    1000:1034:java.lang.String toString() -> toString
    1050:1052:long toNanosSaturated(java.time.Duration) -> a
    167:226:void <clinit>() -> <clinit>
com.google.common.cache.CacheBuilder$1 -> com.google.common.cache.a:
    169:169:void <init>() -> <init>
    171:171:void recordHits(int) -> recordHits
    174:174:void recordMisses(int) -> recordMisses
    178:178:void recordLoadSuccess(long) -> recordLoadSuccess
    182:182:void recordLoadException(long) -> recordLoadException
    185:185:void recordEviction() -> recordEviction
    189:189:com.google.common.cache.CacheStats snapshot() -> snapshot
com.google.common.cache.CacheBuilder$2 -> com.google.common.cache.b:
    195:195:void <init>() -> <init>
    198:198:com.google.common.cache.AbstractCache$StatsCounter get() -> a
    195:195:java.lang.Object get() -> get
com.google.common.cache.CacheBuilder$3 -> com.google.common.cache.c:
    219:219:void <init>() -> <init>
    222:222:long read() -> read
com.google.common.cache.CacheBuilder$NullListener -> com.google.common.cache.d:
    com.google.common.cache.CacheBuilder$NullListener INSTANCE -> a
    com.google.common.cache.CacheBuilder$NullListener[] $VALUES -> b
    202:202:com.google.common.cache.CacheBuilder$NullListener[] values() -> values
    202:202:com.google.common.cache.CacheBuilder$NullListener valueOf(java.lang.String) -> valueOf
    202:202:void <init>(java.lang.String,int) -> <init>
    206:206:void onRemoval(com.google.common.cache.RemovalNotification) -> onRemoval
    202:203:void <clinit>() -> <clinit>
com.google.common.cache.CacheBuilder$OneWeigher -> com.google.common.cache.e:
    com.google.common.cache.CacheBuilder$OneWeigher INSTANCE -> a
    com.google.common.cache.CacheBuilder$OneWeigher[] $VALUES -> b
    209:209:com.google.common.cache.CacheBuilder$OneWeigher[] values() -> values
    209:209:com.google.common.cache.CacheBuilder$OneWeigher valueOf(java.lang.String) -> valueOf
    209:209:void <init>(java.lang.String,int) -> <init>
    214:214:int weigh(java.lang.Object,java.lang.Object) -> weigh
    209:210:void <clinit>() -> <clinit>
com.google.common.cache.CacheBuilderSpec -> com.google.common.cache.CacheBuilderSpec:
    com.google.common.base.Splitter KEYS_SPLITTER -> n
    com.google.common.base.Splitter KEY_VALUE_SPLITTER -> o
    com.google.common.collect.ImmutableMap VALUE_PARSERS -> p
    java.lang.Integer initialCapacity -> a
    java.lang.Long maximumSize -> b
    java.lang.Long maximumWeight -> c
    java.lang.Integer concurrencyLevel -> d
    com.google.common.cache.LocalCache$Strength keyStrength -> e
    com.google.common.cache.LocalCache$Strength valueStrength -> f
    java.lang.Boolean recordStats -> g
    long writeExpirationDuration -> h
    java.util.concurrent.TimeUnit writeExpirationTimeUnit -> i
    long accessExpirationDuration -> j
    java.util.concurrent.TimeUnit accessExpirationTimeUnit -> k
    long refreshDuration -> l
    java.util.concurrent.TimeUnit refreshTimeUnit -> m
    java.lang.String specification -> q
    127:129:void <init>(java.lang.String) -> <init>
    137:157:com.google.common.cache.CacheBuilderSpec parse(java.lang.String) -> parse
    163:163:com.google.common.cache.CacheBuilderSpec disableCaching() -> disableCaching
    168:215:com.google.common.cache.CacheBuilder toCacheBuilder() -> a
    224:224:java.lang.String toParsableString() -> toParsableString
    233:233:java.lang.String toString() -> toString
    238:248:int hashCode() -> hashCode
    253:275:boolean equals(java.lang.Object) -> equals
    283:283:java.lang.Long durationInNanos(long,java.util.concurrent.TimeUnit) -> a
    478:478:java.lang.String format(java.lang.String,java.lang.Object[]) -> b
    82:82:java.lang.String access$000(java.lang.String,java.lang.Object[]) -> a
    89:109:void <clinit>() -> <clinit>
com.google.common.cache.CacheBuilderSpec$1 -> com.google.common.cache.f:
    int[] $SwitchMap$com$google$common$cache$LocalCache$Strength -> a
    182:182:void <clinit>() -> <clinit>
com.google.common.cache.CacheBuilderSpec$AccessDurationParser -> com.google.common.cache.g:
    448:448:void <init>() -> <init>
    451:454:void parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit) -> a
com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser -> com.google.common.cache.h:
    353:353:void <init>() -> <init>
    356:361:void parseInteger(com.google.common.cache.CacheBuilderSpec,int) -> a
com.google.common.cache.CacheBuilderSpec$DurationParser -> com.google.common.cache.i:
    410:410:void <init>() -> <init>
    void parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit) -> a
    415:444:void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> a
com.google.common.cache.CacheBuilderSpec$InitialCapacityParser -> com.google.common.cache.j:
    319:319:void <init>() -> <init>
    322:327:void parseInteger(com.google.common.cache.CacheBuilderSpec,int) -> a
com.google.common.cache.CacheBuilderSpec$IntegerParser -> com.google.common.cache.k:
    287:287:void <init>() -> <init>
    void parseInteger(com.google.common.cache.CacheBuilderSpec,int) -> a
    292:299:void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> a
com.google.common.cache.CacheBuilderSpec$KeyStrengthParser -> com.google.common.cache.l:
    com.google.common.cache.LocalCache$Strength strength -> a
    368:370:void <init>(com.google.common.cache.LocalCache$Strength) -> <init>
    374:377:void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> a
com.google.common.cache.CacheBuilderSpec$LongParser -> com.google.common.cache.m:
    303:303:void <init>() -> <init>
    void parseLong(com.google.common.cache.CacheBuilderSpec,long) -> a
    308:315:void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> a
com.google.common.cache.CacheBuilderSpec$MaximumSizeParser -> com.google.common.cache.n:
    331:331:void <init>() -> <init>
    334:338:void parseLong(com.google.common.cache.CacheBuilderSpec,long) -> a
com.google.common.cache.CacheBuilderSpec$MaximumWeightParser -> com.google.common.cache.o:
    342:342:void <init>() -> <init>
    345:349:void parseLong(com.google.common.cache.CacheBuilderSpec,long) -> a
com.google.common.cache.CacheBuilderSpec$RecordStatsParser -> com.google.common.cache.p:
    399:399:void <init>() -> <init>
    403:406:void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> a
com.google.common.cache.CacheBuilderSpec$RefreshDurationParser -> com.google.common.cache.q:
    468:468:void <init>() -> <init>
    471:474:void parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit) -> a
com.google.common.cache.CacheBuilderSpec$ValueParser -> com.google.common.cache.r:
    void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> a
com.google.common.cache.CacheBuilderSpec$ValueStrengthParser -> com.google.common.cache.s:
    com.google.common.cache.LocalCache$Strength strength -> a
    384:386:void <init>(com.google.common.cache.LocalCache$Strength) -> <init>
    390:395:void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> a
com.google.common.cache.CacheBuilderSpec$WriteDurationParser -> com.google.common.cache.t:
    458:458:void <init>() -> <init>
    461:464:void parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit) -> a
com.google.common.cache.CacheLoader -> com.google.common.cache.CacheLoader:
    61:61:void <init>() -> <init>
    java.lang.Object load(java.lang.Object) -> load
    98:100:com.google.common.util.concurrent.ListenableFuture reload(java.lang.Object,java.lang.Object) -> reload
    128:128:java.util.Map loadAll(java.lang.Iterable) -> loadAll
    139:139:com.google.common.cache.CacheLoader from(com.google.common.base.Function) -> from
    152:152:com.google.common.cache.CacheLoader from(com.google.common.base.Supplier) -> from
    183:185:com.google.common.cache.CacheLoader asyncReloading(com.google.common.cache.CacheLoader,java.util.concurrent.Executor) -> asyncReloading
com.google.common.cache.CacheLoader$1 -> com.google.common.cache.u:
    com.google.common.cache.CacheLoader val$loader -> a
    java.util.concurrent.Executor val$executor -> b
    185:185:void <init>(com.google.common.cache.CacheLoader,java.util.concurrent.Executor) -> <init>
    188:188:java.lang.Object load(java.lang.Object) -> load
    193:202:com.google.common.util.concurrent.ListenableFuture reload(java.lang.Object,java.lang.Object) -> reload
    207:207:java.util.Map loadAll(java.lang.Iterable) -> loadAll
com.google.common.cache.CacheLoader$1$1 -> com.google.common.cache.v:
    java.lang.Object val$key -> a
    java.lang.Object val$oldValue -> b
    com.google.common.cache.CacheLoader$1 this$0 -> c
    195:195:void <init>(com.google.common.cache.CacheLoader$1,java.lang.Object,java.lang.Object) -> <init>
    198:198:java.lang.Object call() -> call
com.google.common.cache.CacheLoader$FunctionToCacheLoader -> com.google.common.cache.w:
    com.google.common.base.Function computingFunction -> a
    long serialVersionUID -> serialVersionUID
    159:161:void <init>(com.google.common.base.Function) -> <init>
    165:165:java.lang.Object load(java.lang.Object) -> load
com.google.common.cache.CacheLoader$InvalidCacheLoadException -> com.google.common.cache.CacheLoader$InvalidCacheLoadException:
    248:249:void <init>(java.lang.String) -> <init>
com.google.common.cache.CacheLoader$SupplierToCacheLoader -> com.google.common.cache.x:
    com.google.common.base.Supplier computingSupplier -> a
    long serialVersionUID -> serialVersionUID
    216:218:void <init>(com.google.common.base.Supplier) -> <init>
    222:223:java.lang.Object load(java.lang.Object) -> load
com.google.common.cache.CacheLoader$UnsupportedLoadingOperationException -> com.google.common.cache.CacheLoader$UnsupportedLoadingOperationException:
    238:238:void <init>() -> <init>
com.google.common.cache.CacheStats -> com.google.common.cache.CacheStats:
    long hitCount -> a
    long missCount -> b
    long loadSuccessCount -> c
    long loadExceptionCount -> d
    long totalLoadTime -> e
    long evictionCount -> f
    84:98:void <init>(long,long,long,long,long,long) -> <init>
    109:109:long requestCount() -> requestCount
    114:114:long hitCount() -> hitCount
    123:124:double hitRate() -> hitRate
    134:134:long missCount() -> missCount
    147:148:double missRate() -> missRate
    161:161:long loadCount() -> loadCount
    175:175:long loadSuccessCount() -> loadSuccessCount
    189:189:long loadExceptionCount() -> loadExceptionCount
    202:203:double loadExceptionRate() -> loadExceptionRate
    213:213:long totalLoadTime() -> totalLoadTime
    225:226:double averageLoadPenalty() -> averageLoadPenalty
    234:234:long evictionCount() -> evictionCount
    243:249:com.google.common.cache.CacheStats minus(com.google.common.cache.CacheStats) -> minus
    263:269:com.google.common.cache.CacheStats plus(com.google.common.cache.CacheStats) -> plus
    274:275:int hashCode() -> hashCode
    280:289:boolean equals(java.lang.Object) -> equals
    294:301:java.lang.String toString() -> toString
com.google.common.cache.ForwardingCache -> com.google.common.cache.ForwardingCache:
    39:39:void <init>() -> <init>
    com.google.common.cache.Cache delegate() -> delegate
    47:47:java.lang.Object getIfPresent(java.lang.Object) -> getIfPresent
    53:53:java.lang.Object get(java.lang.Object,java.util.concurrent.Callable) -> get
    59:59:com.google.common.collect.ImmutableMap getAllPresent(java.lang.Iterable) -> getAllPresent
    65:66:void put(java.lang.Object,java.lang.Object) -> put
    71:72:void putAll(java.util.Map) -> putAll
    76:77:void invalidate(java.lang.Object) -> invalidate
    82:83:void invalidateAll(java.lang.Iterable) -> invalidateAll
    87:88:void invalidateAll() -> invalidateAll
    92:92:long size() -> size
    97:97:com.google.common.cache.CacheStats stats() -> stats
    102:102:java.util.concurrent.ConcurrentMap asMap() -> asMap
    107:108:void cleanUp() -> cleanUp
    35:35:java.lang.Object delegate() -> delegate
com.google.common.cache.ForwardingCache$SimpleForwardingCache -> com.google.common.cache.ForwardingCache$SimpleForwardingCache:
    com.google.common.cache.Cache delegate -> a
    119:121:void <init>(com.google.common.cache.Cache) -> <init>
    125:125:com.google.common.cache.Cache delegate() -> delegate
    116:116:java.lang.Object delegate() -> delegate
com.google.common.cache.ForwardingLoadingCache -> com.google.common.cache.ForwardingLoadingCache:
    38:38:void <init>() -> <init>
    com.google.common.cache.LoadingCache delegate() -> delegate
    45:45:java.lang.Object get(java.lang.Object) -> get
    50:50:java.lang.Object getUnchecked(java.lang.Object) -> getUnchecked
    55:55:com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) -> getAll
    60:60:java.lang.Object apply(java.lang.Object) -> apply
    65:66:void refresh(java.lang.Object) -> refresh
    33:33:com.google.common.cache.Cache delegate() -> delegate
    33:33:java.lang.Object delegate() -> delegate
com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache -> com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache:
    com.google.common.cache.LoadingCache delegate -> a
    78:80:void <init>(com.google.common.cache.LoadingCache) -> <init>
    84:84:com.google.common.cache.LoadingCache delegate() -> delegate
    74:74:com.google.common.cache.Cache delegate() -> delegate
    74:74:java.lang.Object delegate() -> delegate
com.google.common.cache.LoadingCache -> com.google.common.cache.LoadingCache:
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getUnchecked(java.lang.Object) -> getUnchecked
    com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) -> getAll
    java.lang.Object apply(java.lang.Object) -> apply
    void refresh(java.lang.Object) -> refresh
    java.util.concurrent.ConcurrentMap asMap() -> asMap
com.google.common.cache.LocalCache -> com.google.common.cache.y:
    java.util.logging.Logger logger -> a
    int segmentMask -> u
    int segmentShift -> v
    com.google.common.cache.LocalCache$Segment[] segments -> b
    int concurrencyLevel -> c
    com.google.common.base.Equivalence keyEquivalence -> d
    com.google.common.base.Equivalence valueEquivalence -> e
    com.google.common.cache.LocalCache$Strength keyStrength -> f
    com.google.common.cache.LocalCache$Strength valueStrength -> g
    long maxWeight -> h
    com.google.common.cache.Weigher weigher -> i
    long expireAfterAccessNanos -> j
    long expireAfterWriteNanos -> k
    long refreshNanos -> l
    java.util.Queue removalNotificationQueue -> m
    com.google.common.cache.RemovalListener removalListener -> n
    com.google.common.base.Ticker ticker -> o
    com.google.common.cache.LocalCache$EntryFactory entryFactory -> p
    com.google.common.cache.AbstractCache$StatsCounter globalStatsCounter -> q
    com.google.common.cache.CacheLoader defaultLoader -> r
    com.google.common.cache.LocalCache$ValueReference UNSET -> s
    java.util.Queue DISCARDING_QUEUE -> t
    java.util.Set keySet -> w
    java.util.Collection values -> x
    java.util.Set entrySet -> y
    240:314:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader) -> <init>
    317:317:boolean evictsBySize() -> a
    321:321:boolean customWeigher() -> b
    329:329:boolean expiresAfterWrite() -> p
    333:333:boolean expiresAfterAccess() -> q
    337:337:boolean refreshes() -> c
    341:341:boolean usesAccessQueue() -> d
    345:345:boolean usesWriteQueue() -> e
    349:349:boolean recordsWrite() -> f
    353:353:boolean recordsAccess() -> g
    357:357:boolean recordsTime() -> r
    361:361:boolean usesWriteEntries() -> s
    365:365:boolean usesAccessEntries() -> t
    369:369:boolean usesKeyReferences() -> h
    373:373:boolean usesValueReferences() -> i
    727:727:com.google.common.cache.LocalCache$ValueReference unset() -> j
    894:894:com.google.common.cache.ReferenceEntry nullEntry() -> k
    928:928:java.util.Queue discardingQueue() -> l
    1654:1659:int rehash(int) -> a
    1697:1698:int hash(java.lang.Object) -> d
    1702:1705:void reclaimValue(com.google.common.cache.LocalCache$ValueReference) -> a
    1708:1710:void reclaimKey(com.google.common.cache.ReferenceEntry) -> a
    1729:1729:com.google.common.cache.LocalCache$Segment segmentFor(int) -> b
    1734:1734:com.google.common.cache.LocalCache$Segment createSegment(int,long,com.google.common.cache.AbstractCache$StatsCounter) -> a
    1745:1756:java.lang.Object getLiveValue(com.google.common.cache.ReferenceEntry,long) -> a
    1763:1770:boolean isExpired(com.google.common.cache.ReferenceEntry,long) -> b
    1777:1779:void connectAccessOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> a
    1783:1786:void nullifyAccessOrder(com.google.common.cache.ReferenceEntry) -> b
    1790:1792:void connectWriteOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> b
    1796:1799:void nullifyWriteOrder(com.google.common.cache.ReferenceEntry) -> c
    1808:1815:void processPendingNotifications() -> m
    1819:1819:com.google.common.cache.LocalCache$Segment[] newSegmentArray(int) -> c
    3889:3892:void cleanUp() -> n
    3905:3923:boolean isEmpty() -> isEmpty
    3927:3932:long longSize() -> o
    3937:3937:int size() -> size
    3942:3946:java.lang.Object get(java.lang.Object) -> get
    3950:3951:java.lang.Object get(java.lang.Object,com.google.common.cache.CacheLoader) -> a
    3955:3962:java.lang.Object getIfPresent(java.lang.Object) -> a
    3969:3970:java.lang.Object getOrDefault(java.lang.Object,java.lang.Object) -> getOrDefault
    3974:3974:java.lang.Object getOrLoad(java.lang.Object) -> b
    3978:3996:com.google.common.collect.ImmutableMap getAllPresent(java.lang.Iterable) -> a
    4000:4041:com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) -> b
    4051:4105:java.util.Map loadAll(java.util.Set,com.google.common.cache.CacheLoader) -> a
    4122:4124:void refresh(java.lang.Object) -> c
    4129:4133:boolean containsKey(java.lang.Object) -> containsKey
    4139:4173:boolean containsValue(java.lang.Object) -> containsValue
    4178:4181:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    4186:4189:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    4194:4197:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction) -> compute
    4202:4204:java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function) -> computeIfAbsent
    4209:4211:java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction) -> computeIfPresent
    4216:4219:java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction) -> merge
    4225:4228:void putAll(java.util.Map) -> putAll
    4232:4236:java.lang.Object remove(java.lang.Object) -> remove
    4241:4245:boolean remove(java.lang.Object,java.lang.Object) -> remove
    4250:4256:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    4261:4264:java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    4269:4272:void clear() -> clear
    4276:4279:void invalidateAll(java.lang.Iterable) -> c
    4286:4287:java.util.Set keySet() -> keySet
    4295:4296:java.util.Collection values() -> values
    4305:4306:java.util.Set entrySet() -> entrySet
    4534:4536:java.util.ArrayList toArrayList(java.util.Collection) -> b
    4540:4553:boolean removeIf(java.util.function.BiPredicate) -> a
    4220:4220:java.lang.Object lambda$merge$2(java.lang.Object,java.util.function.BiFunction,java.lang.Object,java.lang.Object) -> a
    4211:4211:java.lang.Object lambda$computeIfPresent$1(java.util.function.BiFunction,java.lang.Object,java.lang.Object) -> a
    4204:4204:java.lang.Object lambda$computeIfAbsent$0(java.util.function.Function,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    103:103:java.util.ArrayList access$200(java.util.Collection) -> a
    164:897:void <clinit>() -> <clinit>
com.google.common.cache.LocalCache$1 -> com.google.common.cache.z:
    681:681:void <init>() -> <init>
    684:684:java.lang.Object get() -> get
    689:689:int getWeight() -> a
    694:694:com.google.common.cache.ReferenceEntry getEntry() -> b
    702:702:com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> a
    707:707:boolean isLoading() -> c
    712:712:boolean isActive() -> d
    717:717:java.lang.Object waitForValue() -> e
    721:721:void notifyNewValue(java.lang.Object) -> a
com.google.common.cache.LocalCache$2 -> com.google.common.cache.A:
    898:898:void <init>() -> <init>
    901:901:boolean offer(java.lang.Object) -> offer
    906:906:java.lang.Object peek() -> peek
    911:911:java.lang.Object poll() -> poll
    916:916:int size() -> size
    921:921:java.util.Iterator iterator() -> iterator
com.google.common.cache.LocalCache$AbstractCacheSet -> com.google.common.cache.B:
    java.util.concurrent.ConcurrentMap map -> a
    4499:4501:void <init>(com.google.common.cache.LocalCache,java.util.concurrent.ConcurrentMap) -> <init>
    4505:4505:int size() -> size
    4510:4510:boolean isEmpty() -> isEmpty
    4515:4516:void clear() -> clear
    4523:4523:java.lang.Object[] toArray() -> toArray
    4528:4528:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
com.google.common.cache.LocalCache$AbstractReferenceEntry -> com.google.common.cache.C:
    805:805:void <init>() -> <init>
    808:808:com.google.common.cache.LocalCache$ValueReference getValueReference() -> a
    813:813:void setValueReference(com.google.common.cache.LocalCache$ValueReference) -> a
    818:818:com.google.common.cache.ReferenceEntry getNext() -> b
    823:823:int getHash() -> c
    828:828:java.lang.Object getKey() -> d
    833:833:long getAccessTime() -> e
    838:838:void setAccessTime(long) -> a
    843:843:com.google.common.cache.ReferenceEntry getNextInAccessQueue() -> f
    848:848:void setNextInAccessQueue(com.google.common.cache.ReferenceEntry) -> a
    853:853:com.google.common.cache.ReferenceEntry getPreviousInAccessQueue() -> g
    858:858:void setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry) -> b
    863:863:long getWriteTime() -> h
    868:868:void setWriteTime(long) -> b
    873:873:com.google.common.cache.ReferenceEntry getNextInWriteQueue() -> i
    878:878:void setNextInWriteQueue(com.google.common.cache.ReferenceEntry) -> c
    883:883:com.google.common.cache.ReferenceEntry getPreviousInWriteQueue() -> j
    888:888:void setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry) -> d
com.google.common.cache.LocalCache$AccessQueue -> com.google.common.cache.D:
    com.google.common.cache.ReferenceEntry head -> a
    3758:3759:void <init>() -> <init>
    3800:3806:boolean offer(com.google.common.cache.ReferenceEntry) -> a
    3811:3812:com.google.common.cache.ReferenceEntry peek() -> a
    3817:3823:com.google.common.cache.ReferenceEntry poll() -> b
    3829:3835:boolean remove(java.lang.Object) -> remove
    3841:3842:boolean contains(java.lang.Object) -> contains
    3847:3847:boolean isEmpty() -> isEmpty
    3852:3858:int size() -> size
    3863:3872:void clear() -> clear
    3876:3876:java.util.Iterator iterator() -> iterator
    3758:3758:java.lang.Object peek() -> peek
    3758:3758:java.lang.Object poll() -> poll
    3758:3758:boolean offer(java.lang.Object) -> offer
com.google.common.cache.LocalCache$AccessQueue$1 -> com.google.common.cache.E:
    com.google.common.cache.ReferenceEntry nextAccess -> a
    com.google.common.cache.ReferenceEntry previousAccess -> b
    3760:3782:void <init>(com.google.common.cache.LocalCache$AccessQueue) -> <init>
    3764:3764:long getAccessTime() -> e
    3768:3768:void setAccessTime(long) -> a
    3774:3774:com.google.common.cache.ReferenceEntry getNextInAccessQueue() -> f
    3779:3780:void setNextInAccessQueue(com.google.common.cache.ReferenceEntry) -> a
    3786:3786:com.google.common.cache.ReferenceEntry getPreviousInAccessQueue() -> g
    3791:3792:void setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry) -> b
com.google.common.cache.LocalCache$AccessQueue$2 -> com.google.common.cache.F:
    com.google.common.cache.LocalCache$AccessQueue this$0 -> a
    3876:3876:void <init>(com.google.common.cache.LocalCache$AccessQueue,com.google.common.cache.ReferenceEntry) -> <init>
    3879:3880:com.google.common.cache.ReferenceEntry computeNext(com.google.common.cache.ReferenceEntry) -> a
    3876:3876:java.lang.Object computeNext(java.lang.Object) -> computeNext
com.google.common.cache.LocalCache$EntryFactory -> com.google.common.cache.G:
    com.google.common.cache.LocalCache$EntryFactory STRONG -> a
    com.google.common.cache.LocalCache$EntryFactory STRONG_ACCESS -> b
    com.google.common.cache.LocalCache$EntryFactory STRONG_WRITE -> c
    com.google.common.cache.LocalCache$EntryFactory STRONG_ACCESS_WRITE -> d
    com.google.common.cache.LocalCache$EntryFactory WEAK -> e
    com.google.common.cache.LocalCache$EntryFactory WEAK_ACCESS -> f
    com.google.common.cache.LocalCache$EntryFactory WEAK_WRITE -> g
    com.google.common.cache.LocalCache$EntryFactory WEAK_ACCESS_WRITE -> h
    com.google.common.cache.LocalCache$EntryFactory[] factories -> i
    com.google.common.cache.LocalCache$EntryFactory[] $VALUES -> j
    440:440:com.google.common.cache.LocalCache$EntryFactory[] values() -> values
    440:440:com.google.common.cache.LocalCache$EntryFactory valueOf(java.lang.String) -> valueOf
    440:440:void <init>(java.lang.String,int) -> <init>
    568:572:com.google.common.cache.LocalCache$EntryFactory getFactory(com.google.common.cache.LocalCache$Strength,boolean,boolean) -> a
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> a
    595:595:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> a
    602:608:void copyAccessEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> a
    614:620:void copyWriteEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> b
    440:440:void <init>(java.lang.String,int,byte) -> <init>
    440:555:void <clinit>() -> <clinit>
com.google.common.cache.LocalCache$EntryFactory$1 -> com.google.common.cache.H:
    441:441:void <init>(java.lang.String,int) -> <init>
    445:445:com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> a
com.google.common.cache.LocalCache$EntryFactory$2 -> com.google.common.cache.I:
    448:448:void <init>(java.lang.String,int) -> <init>
    452:452:com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> a
    458:460:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> a
com.google.common.cache.LocalCache$EntryFactory$3 -> com.google.common.cache.J:
    463:463:void <init>(java.lang.String,int) -> <init>
    467:467:com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> a
    473:475:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> a
com.google.common.cache.LocalCache$EntryFactory$4 -> com.google.common.cache.K:
    478:478:void <init>(java.lang.String,int) -> <init>
    482:482:com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> a
    488:491:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> a
com.google.common.cache.LocalCache$EntryFactory$5 -> com.google.common.cache.L:
    494:494:void <init>(java.lang.String,int) -> <init>
    498:498:com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> a
com.google.common.cache.LocalCache$EntryFactory$6 -> com.google.common.cache.M:
    501:501:void <init>(java.lang.String,int) -> <init>
    505:505:com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> a
    511:513:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> a
com.google.common.cache.LocalCache$EntryFactory$7 -> com.google.common.cache.N:
    516:516:void <init>(java.lang.String,int) -> <init>
    520:520:com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> a
    526:528:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> a
com.google.common.cache.LocalCache$EntryFactory$8 -> com.google.common.cache.O:
    531:531:void <init>(java.lang.String,int) -> <init>
    535:535:com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> a
    541:544:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> a
com.google.common.cache.LocalCache$EntryIterator -> com.google.common.cache.P:
    4488:4488:void <init>(com.google.common.cache.LocalCache) -> <init>
    4492:4492:java.util.Map$Entry next() -> b
    4488:4488:java.lang.Object next() -> next
com.google.common.cache.LocalCache$EntrySet -> com.google.common.cache.Q:
    com.google.common.cache.LocalCache this$0 -> b
    4635:4637:void <init>(com.google.common.cache.LocalCache,java.util.concurrent.ConcurrentMap) -> <init>
    4641:4641:java.util.Iterator iterator() -> iterator
    4646:4647:boolean removeIf(java.util.function.Predicate) -> removeIf
    4652:4662:boolean contains(java.lang.Object) -> contains
    4667:4672:boolean remove(java.lang.Object) -> remove
    4647:4647:boolean lambda$removeIf$0(java.util.function.Predicate,java.lang.Object,java.lang.Object) -> a
com.google.common.cache.LocalCache$HashIterator -> com.google.common.cache.R:
    int nextSegmentIndex -> a
    int nextTableIndex -> b
    com.google.common.cache.LocalCache$Segment currentSegment -> c
    java.util.concurrent.atomic.AtomicReferenceArray currentTable -> d
    com.google.common.cache.ReferenceEntry nextEntry -> e
    com.google.common.cache.LocalCache$WriteThroughEntry nextExternal -> f
    com.google.common.cache.LocalCache$WriteThroughEntry lastReturned -> g
    com.google.common.cache.LocalCache this$0 -> h
    4321:4325:void <init>(com.google.common.cache.LocalCache) -> <init>
    4331:4351:void advance() -> b
    4355:4362:boolean nextInChain() -> c
    4367:4374:boolean nextInTable() -> d
    4383:4395:boolean advanceTo(com.google.common.cache.ReferenceEntry) -> a
    4400:4400:boolean hasNext() -> hasNext
    4404:4409:com.google.common.cache.LocalCache$WriteThroughEntry nextEntry() -> a
    4414:4417:void remove() -> remove
com.google.common.cache.LocalCache$KeyIterator -> com.google.common.cache.S:
    4420:4420:void <init>(com.google.common.cache.LocalCache) -> <init>
    4424:4424:java.lang.Object next() -> next
com.google.common.cache.LocalCache$KeySet -> com.google.common.cache.T:
    com.google.common.cache.LocalCache this$0 -> b
    4559:4561:void <init>(com.google.common.cache.LocalCache,java.util.concurrent.ConcurrentMap) -> <init>
    4565:4565:java.util.Iterator iterator() -> iterator
    4570:4570:boolean contains(java.lang.Object) -> contains
    4575:4575:boolean remove(java.lang.Object) -> remove
com.google.common.cache.LocalCache$LoadingSerializationProxy -> com.google.common.cache.U:
    long serialVersionUID -> serialVersionUID
    com.google.common.cache.LoadingCache autoDelegate -> b
    4811:4812:void <init>(com.google.common.cache.LocalCache) -> <init>
    4815:4818:void readObject(java.io.ObjectInputStream) -> readObject
    4822:4822:java.lang.Object get(java.lang.Object) -> get
    4827:4827:java.lang.Object getUnchecked(java.lang.Object) -> getUnchecked
    4832:4832:com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) -> getAll
    4837:4837:java.lang.Object apply(java.lang.Object) -> apply
    4842:4843:void refresh(java.lang.Object) -> refresh
    4846:4846:java.lang.Object readResolve() -> readResolve
com.google.common.cache.LocalCache$LoadingValueReference -> com.google.common.cache.V:
    com.google.common.cache.LocalCache$ValueReference oldValue -> a
    com.google.common.util.concurrent.SettableFuture futureValue -> b
    com.google.common.base.Stopwatch stopwatch -> c
    3476:3477:void <init>() -> <init>
    3472:3481:void <init>(com.google.common.cache.LocalCache$ValueReference) -> <init>
    3485:3485:boolean isLoading() -> c
    3490:3490:boolean isActive() -> d
    3495:3495:int getWeight() -> a
    3499:3499:boolean set(java.lang.Object) -> b
    3503:3503:boolean setException(java.lang.Throwable) -> a
    3507:3507:com.google.common.util.concurrent.ListenableFuture fullyFailedFuture(java.lang.Throwable) -> b
    3512:3522:void notifyNewValue(java.lang.Object) -> a
    3526:3553:com.google.common.util.concurrent.ListenableFuture loadFuture(java.lang.Object,com.google.common.cache.CacheLoader) -> a
    3558:3573:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction) -> a
    3577:3577:long elapsedNanos() -> f
    3582:3582:java.lang.Object waitForValue() -> e
    3587:3587:java.lang.Object get() -> get
    3591:3591:com.google.common.cache.LocalCache$ValueReference getOldValue() -> g
    3596:3596:com.google.common.cache.ReferenceEntry getEntry() -> b
    3602:3602:com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> a
com.google.common.cache.LocalCache$LoadingValueReference$1 -> com.google.common.cache.W:
    com.google.common.cache.LocalCache$LoadingValueReference this$0 -> a
    3540:3540:void <init>(com.google.common.cache.LocalCache$LoadingValueReference) -> <init>
    3543:3544:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.cache.LocalCache$LocalLoadingCache -> com.google.common.cache.X:
    long serialVersionUID -> serialVersionUID
    4951:4952:void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader) -> <init>
    4958:4958:java.lang.Object get(java.lang.Object) -> get
    4964:4966:java.lang.Object getUnchecked(java.lang.Object) -> getUnchecked
    4972:4972:com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) -> getAll
    4977:4978:void refresh(java.lang.Object) -> refresh
    4982:4982:java.lang.Object apply(java.lang.Object) -> apply
    4991:4991:java.lang.Object writeReplace() -> writeReplace
com.google.common.cache.LocalCache$LocalManualCache -> com.google.common.cache.Y:
    com.google.common.cache.LocalCache localCache -> a
    long serialVersionUID -> serialVersionUID
    4854:4855:void <init>(com.google.common.cache.CacheBuilder) -> <init>
    4857:4859:void <init>(com.google.common.cache.LocalCache) -> <init>
    4865:4865:java.lang.Object getIfPresent(java.lang.Object) -> getIfPresent
    4870:4871:java.lang.Object get(java.lang.Object,java.util.concurrent.Callable) -> get
    4883:4883:com.google.common.collect.ImmutableMap getAllPresent(java.lang.Iterable) -> getAllPresent
    4888:4889:void put(java.lang.Object,java.lang.Object) -> put
    4893:4894:void putAll(java.util.Map) -> putAll
    4898:4900:void invalidate(java.lang.Object) -> invalidate
    4904:4905:void invalidateAll(java.lang.Iterable) -> invalidateAll
    4909:4910:void invalidateAll() -> invalidateAll
    4914:4914:long size() -> size
    4919:4919:java.util.concurrent.ConcurrentMap asMap() -> asMap
    4924:4929:com.google.common.cache.CacheStats stats() -> stats
    4934:4935:void cleanUp() -> cleanUp
    4942:4942:java.lang.Object writeReplace() -> writeReplace
    4850:4850:void <init>(com.google.common.cache.LocalCache,byte) -> <init>
com.google.common.cache.LocalCache$LocalManualCache$1 -> com.google.common.cache.Z:
    java.util.concurrent.Callable val$valueLoader -> a
    4873:4873:void <init>(com.google.common.cache.LocalCache$LocalManualCache,java.util.concurrent.Callable) -> <init>
    4876:4876:java.lang.Object load(java.lang.Object) -> load
com.google.common.cache.LocalCache$ManualSerializationProxy -> com.google.common.cache.aa:
    long serialVersionUID -> serialVersionUID
    com.google.common.cache.LocalCache$Strength keyStrength -> b
    com.google.common.cache.LocalCache$Strength valueStrength -> c
    com.google.common.base.Equivalence keyEquivalence -> d
    com.google.common.base.Equivalence valueEquivalence -> e
    long expireAfterWriteNanos -> f
    long expireAfterAccessNanos -> g
    long maxWeight -> h
    com.google.common.cache.Weigher weigher -> i
    int concurrencyLevel -> j
    com.google.common.cache.RemovalListener removalListener -> k
    com.google.common.base.Ticker ticker -> l
    com.google.common.cache.CacheLoader loader -> a
    com.google.common.cache.Cache delegate -> m
    4706:4719:void <init>(com.google.common.cache.LocalCache) -> <init>
    4733:4746:void <init>(com.google.common.cache.LocalCache$Strength,com.google.common.cache.LocalCache$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,long,long,long,com.google.common.cache.Weigher,int,com.google.common.cache.RemovalListener,com.google.common.base.Ticker,com.google.common.cache.CacheLoader) -> <init>
    4750:4777:com.google.common.cache.CacheBuilder recreateCacheBuilder() -> a
    4781:4784:void readObject(java.io.ObjectInputStream) -> readObject
    4787:4787:java.lang.Object readResolve() -> readResolve
    4792:4792:com.google.common.cache.Cache delegate() -> delegate
    4686:4686:java.lang.Object delegate() -> delegate
com.google.common.cache.LocalCache$NullEntry -> com.google.common.cache.ab:
    com.google.common.cache.LocalCache$NullEntry INSTANCE -> a
    com.google.common.cache.LocalCache$NullEntry[] $VALUES -> b
    730:730:com.google.common.cache.LocalCache$NullEntry[] values() -> values
    730:730:com.google.common.cache.LocalCache$NullEntry valueOf(java.lang.String) -> valueOf
    730:730:void <init>(java.lang.String,int) -> <init>
    735:735:com.google.common.cache.LocalCache$ValueReference getValueReference() -> a
    739:739:void setValueReference(com.google.common.cache.LocalCache$ValueReference) -> a
    743:743:com.google.common.cache.ReferenceEntry getNext() -> b
    748:748:int getHash() -> c
    753:753:java.lang.Object getKey() -> d
    758:758:long getAccessTime() -> e
    762:762:void setAccessTime(long) -> a
    766:766:com.google.common.cache.ReferenceEntry getNextInAccessQueue() -> f
    770:770:void setNextInAccessQueue(com.google.common.cache.ReferenceEntry) -> a
    774:774:com.google.common.cache.ReferenceEntry getPreviousInAccessQueue() -> g
    778:778:void setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry) -> b
    782:782:long getWriteTime() -> h
    786:786:void setWriteTime(long) -> b
    790:790:com.google.common.cache.ReferenceEntry getNextInWriteQueue() -> i
    794:794:void setNextInWriteQueue(com.google.common.cache.ReferenceEntry) -> c
    798:798:com.google.common.cache.ReferenceEntry getPreviousInWriteQueue() -> j
    802:802:void setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry) -> d
    730:731:void <clinit>() -> <clinit>
com.google.common.cache.LocalCache$Segment -> com.google.common.cache.ac:
    com.google.common.cache.LocalCache map -> g
    int count -> a
    long totalWeight -> h
    int modCount -> b
    int threshold -> i
    java.util.concurrent.atomic.AtomicReferenceArray table -> c
    long maxSegmentWeight -> j
    java.lang.ref.ReferenceQueue keyReferenceQueue -> d
    java.lang.ref.ReferenceQueue valueReferenceQueue -> e
    java.util.Queue recencyQueue -> k
    java.util.concurrent.atomic.AtomicInteger readCount -> l
    java.util.Queue writeQueue -> m
    java.util.Queue accessQueue -> n
    com.google.common.cache.AbstractCache$StatsCounter statsCounter -> f
    1916:1963:void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter) -> <init>
    1966:1966:java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int) -> a
    1970:1976:void initTable(java.util.concurrent.atomic.AtomicReferenceArray) -> a
    1980:1980:com.google.common.cache.ReferenceEntry newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> a
    1989:2003:com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> a
    2009:2018:void setValue(com.google.common.cache.ReferenceEntry,java.lang.Object,java.lang.Object,long) -> a
    2023:2056:java.lang.Object get(java.lang.Object,int,com.google.common.cache.CacheLoader) -> a
    2062:2079:java.lang.Object get(java.lang.Object,int) -> a
    2084:2162:java.lang.Object lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader) -> b
    2168:2185:java.lang.Object waitForLoadingValue(com.google.common.cache.ReferenceEntry,java.lang.Object,com.google.common.cache.LocalCache$ValueReference) -> a
    2190:2267:java.lang.Object compute(java.lang.Object,int,java.util.function.BiFunction) -> a
    2278:2279:java.lang.Object loadSync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader) -> a
    2287:2301:com.google.common.util.concurrent.ListenableFuture loadAsync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader) -> b
    2311:2325:java.lang.Object getAndRecordStats(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.util.concurrent.ListenableFuture) -> a
    2335:2343:java.lang.Object scheduleRefresh(com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,long,com.google.common.cache.CacheLoader) -> a
    2354:2368:java.lang.Object refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean) -> a
    2378:2423:com.google.common.cache.LocalCache$LoadingValueReference insertLoadingValueReference(java.lang.Object,int,boolean) -> a
    2430:2437:void tryDrainReferenceQueues() -> d
    2445:2451:void drainReferenceQueues() -> e
    2456:2465:void drainKeyReferenceQueue() -> f
    2470:2479:void drainValueReferenceQueue() -> g
    2483:2489:void clearReferenceQueues() -> h
    2492:2493:void clearKeyReferenceQueue() -> i
    2496:2497:void clearValueReferenceQueue() -> j
    2509:2513:void recordRead(com.google.common.cache.ReferenceEntry,long) -> b
    2524:2528:void recordLockedRead(com.google.common.cache.ReferenceEntry,long) -> c
    2537:2548:void recordWrite(com.google.common.cache.ReferenceEntry,int,long) -> a
    2559:2568:void drainRecencyQueue() -> k
    2574:2582:void tryExpireEntries(long) -> a
    2586:2599:void expireEntries(long) -> b
    2606:2614:void enqueueNotification$54dbe642(java.lang.Object,java.lang.Object,int,com.google.common.cache.RemovalCause) -> a
    2624:2644:void evictEntries(com.google.common.cache.ReferenceEntry) -> a
    2649:2655:com.google.common.cache.ReferenceEntry getNextEvictable() -> l
    2661:2662:com.google.common.cache.ReferenceEntry getFirst(int) -> b
    2669:2685:com.google.common.cache.ReferenceEntry getEntry(java.lang.Object,int) -> d
    2690:2697:com.google.common.cache.ReferenceEntry getLiveEntry(java.lang.Object,int,long) -> a
    2705:2719:java.lang.Object getLiveValue(com.google.common.cache.ReferenceEntry,long) -> a
    2724:2736:boolean containsKey(java.lang.Object,int) -> b
    2771:2841:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean) -> a
    2847:2912:void expand() -> m
    2915:2972:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object) -> a
    2977:3027:java.lang.Object replace(java.lang.Object,int,java.lang.Object) -> a
    3032:3074:java.lang.Object remove(java.lang.Object,int) -> c
    3078:3120:boolean remove(java.lang.Object,int,java.lang.Object) -> b
    3125:3180:boolean storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object) -> a
    3184:3219:void clear() -> a
    3231:3239:com.google.common.cache.ReferenceEntry removeValueFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,com.google.common.cache.LocalCache$ValueReference,com.google.common.cache.RemovalCause) -> a
    3247:3259:com.google.common.cache.ReferenceEntry removeEntryFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> b
    3264:3272:void removeCollectedEntry(com.google.common.cache.ReferenceEntry) -> b
    3276:3306:boolean reclaimKey(com.google.common.cache.ReferenceEntry,int) -> a
    3311:3350:boolean reclaimValue(java.lang.Object,int,com.google.common.cache.LocalCache$ValueReference) -> a
    3354:3383:boolean removeLoadingValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference) -> a
    3389:3413:boolean removeEntry(com.google.common.cache.ReferenceEntry,int,com.google.common.cache.RemovalCause) -> a
    3421:3424:void postReadCleanup() -> b
    3434:3435:void preWriteCleanup(long) -> c
    3439:3440:void postWriteCleanup() -> n
    3443:3446:void cleanUp() -> c
    3449:3458:void runLockedCleanup(long) -> d
    3462:3465:void runUnlockedCleanup() -> o
com.google.common.cache.LocalCache$Segment$1 -> com.google.common.cache.ad:
    java.lang.Object val$key -> a
    int val$hash -> b
    com.google.common.cache.LocalCache$LoadingValueReference val$loadingValueReference -> c
    com.google.common.util.concurrent.ListenableFuture val$loadingFuture -> d
    com.google.common.cache.LocalCache$Segment this$0 -> e
    2289:2289:void <init>(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.util.concurrent.ListenableFuture) -> <init>
    2293:2298:void run() -> run
com.google.common.cache.LocalCache$SoftValueReference -> com.google.common.cache.ae:
    com.google.common.cache.ReferenceEntry entry -> a
    1496:1498:void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> <init>
    1502:1502:int getWeight() -> a
    1507:1507:com.google.common.cache.ReferenceEntry getEntry() -> b
    1511:1511:void notifyNewValue(java.lang.Object) -> a
    1516:1516:com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> a
    1521:1521:boolean isLoading() -> c
    1526:1526:boolean isActive() -> d
    1531:1531:java.lang.Object waitForValue() -> e
com.google.common.cache.LocalCache$Strength -> com.google.common.cache.af:
    com.google.common.cache.LocalCache$Strength STRONG -> a
    com.google.common.cache.LocalCache$Strength SOFT -> b
    com.google.common.cache.LocalCache$Strength WEAK -> c
    com.google.common.cache.LocalCache$Strength[] $VALUES -> d
    376:376:com.google.common.cache.LocalCache$Strength[] values() -> values
    376:376:com.google.common.cache.LocalCache$Strength valueOf(java.lang.String) -> valueOf
    376:376:void <init>(java.lang.String,int) -> <init>
    com.google.common.cache.LocalCache$ValueReference referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int) -> a
    com.google.common.base.Equivalence defaultEquivalence() -> a
    376:376:void <init>(java.lang.String,int,byte) -> <init>
    376:411:void <clinit>() -> <clinit>
com.google.common.cache.LocalCache$Strength$1 -> com.google.common.cache.ag:
    382:382:void <init>(java.lang.String,int) -> <init>
    386:386:com.google.common.cache.LocalCache$ValueReference referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int) -> a
    393:393:com.google.common.base.Equivalence defaultEquivalence() -> a
com.google.common.cache.LocalCache$Strength$2 -> com.google.common.cache.ah:
    396:396:void <init>(java.lang.String,int) -> <init>
    400:400:com.google.common.cache.LocalCache$ValueReference referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int) -> a
    408:408:com.google.common.base.Equivalence defaultEquivalence() -> a
com.google.common.cache.LocalCache$Strength$3 -> com.google.common.cache.ai:
    411:411:void <init>(java.lang.String,int) -> <init>
    415:415:com.google.common.cache.LocalCache$ValueReference referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int) -> a
    423:423:com.google.common.base.Equivalence defaultEquivalence() -> a
com.google.common.cache.LocalCache$StrongAccessEntry -> com.google.common.cache.aj:
    long accessTime -> a
    com.google.common.cache.ReferenceEntry nextAccess -> b
    com.google.common.cache.ReferenceEntry previousAccess -> c
    983:1014:void <init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> <init>
    992:992:long getAccessTime() -> e
    997:998:void setAccessTime(long) -> a
    1005:1005:com.google.common.cache.ReferenceEntry getNextInAccessQueue() -> f
    1010:1011:void setNextInAccessQueue(com.google.common.cache.ReferenceEntry) -> a
    1018:1018:com.google.common.cache.ReferenceEntry getPreviousInAccessQueue() -> g
    1023:1024:void setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry) -> b
com.google.common.cache.LocalCache$StrongAccessWriteEntry -> com.google.common.cache.ak:
    long accessTime -> a
    com.google.common.cache.ReferenceEntry nextAccess -> b
    com.google.common.cache.ReferenceEntry previousAccess -> c
    long writeTime -> d
    com.google.common.cache.ReferenceEntry nextWrite -> e
    com.google.common.cache.ReferenceEntry previousWrite -> f
    1075:1146:void <init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> <init>
    1084:1084:long getAccessTime() -> e
    1089:1090:void setAccessTime(long) -> a
    1097:1097:com.google.common.cache.ReferenceEntry getNextInAccessQueue() -> f
    1102:1103:void setNextInAccessQueue(com.google.common.cache.ReferenceEntry) -> a
    1110:1110:com.google.common.cache.ReferenceEntry getPreviousInAccessQueue() -> g
    1115:1116:void setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry) -> b
    1124:1124:long getWriteTime() -> h
    1129:1130:void setWriteTime(long) -> b
    1137:1137:com.google.common.cache.ReferenceEntry getNextInWriteQueue() -> i
    1142:1143:void setNextInWriteQueue(com.google.common.cache.ReferenceEntry) -> c
    1150:1150:com.google.common.cache.ReferenceEntry getPreviousInWriteQueue() -> j
    1155:1156:void setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry) -> d
com.google.common.cache.LocalCache$StrongEntry -> com.google.common.cache.al:
    java.lang.Object key -> a
    int hash -> b
    com.google.common.cache.ReferenceEntry next -> c
    com.google.common.cache.LocalCache$ValueReference valueReference -> d
    943:958:void <init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> <init>
    951:951:java.lang.Object getKey() -> d
    962:962:com.google.common.cache.LocalCache$ValueReference getValueReference() -> a
    967:968:void setValueReference(com.google.common.cache.LocalCache$ValueReference) -> a
    972:972:int getHash() -> c
    977:977:com.google.common.cache.ReferenceEntry getNext() -> b
com.google.common.cache.LocalCache$StrongValueReference -> com.google.common.cache.am:
    java.lang.Object referent -> a
    1539:1541:void <init>(java.lang.Object) -> <init>
    1545:1545:java.lang.Object get() -> get
    1550:1550:int getWeight() -> a
    1555:1555:com.google.common.cache.ReferenceEntry getEntry() -> b
    1561:1561:com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> a
    1566:1566:boolean isLoading() -> c
    1571:1571:boolean isActive() -> d
    1576:1576:java.lang.Object waitForValue() -> e
    1580:1580:void notifyNewValue(java.lang.Object) -> a
com.google.common.cache.LocalCache$StrongWriteEntry -> com.google.common.cache.an:
    long writeTime -> a
    com.google.common.cache.ReferenceEntry nextWrite -> b
    com.google.common.cache.ReferenceEntry previousWrite -> c
    1029:1060:void <init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> <init>
    1038:1038:long getWriteTime() -> h
    1043:1044:void setWriteTime(long) -> b
    1051:1051:com.google.common.cache.ReferenceEntry getNextInWriteQueue() -> i
    1056:1057:void setNextInWriteQueue(com.google.common.cache.ReferenceEntry) -> c
    1064:1064:com.google.common.cache.ReferenceEntry getPreviousInWriteQueue() -> j
    1069:1070:void setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry) -> d
com.google.common.cache.LocalCache$ValueIterator -> com.google.common.cache.ao:
    4428:4428:void <init>(com.google.common.cache.LocalCache) -> <init>
    4432:4432:java.lang.Object next() -> next
com.google.common.cache.LocalCache$ValueReference -> com.google.common.cache.ap:
    java.lang.Object get() -> get
    java.lang.Object waitForValue() -> e
    int getWeight() -> a
    com.google.common.cache.ReferenceEntry getEntry() -> b
    com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> a
    void notifyNewValue(java.lang.Object) -> a
    boolean isLoading() -> c
    boolean isActive() -> d
com.google.common.cache.LocalCache$Values -> com.google.common.cache.aq:
    java.util.concurrent.ConcurrentMap map -> a
    com.google.common.cache.LocalCache this$0 -> b
    4583:4585:void <init>(com.google.common.cache.LocalCache,java.util.concurrent.ConcurrentMap) -> <init>
    4589:4589:int size() -> size
    4594:4594:boolean isEmpty() -> isEmpty
    4599:4600:void clear() -> clear
    4604:4604:java.util.Iterator iterator() -> iterator
    4609:4610:boolean removeIf(java.util.function.Predicate) -> removeIf
    4615:4615:boolean contains(java.lang.Object) -> contains
    4623:4623:java.lang.Object[] toArray() -> toArray
    4628:4628:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    4610:4610:boolean lambda$removeIf$0(java.util.function.Predicate,java.lang.Object,java.lang.Object) -> a
com.google.common.cache.LocalCache$WeakAccessEntry -> com.google.common.cache.ar:
    long accessTime -> a
    com.google.common.cache.ReferenceEntry nextAccess -> b
    com.google.common.cache.ReferenceEntry previousAccess -> c
    1270:1301:void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> <init>
    1279:1279:long getAccessTime() -> e
    1284:1285:void setAccessTime(long) -> a
    1292:1292:com.google.common.cache.ReferenceEntry getNextInAccessQueue() -> f
    1297:1298:void setNextInAccessQueue(com.google.common.cache.ReferenceEntry) -> a
    1305:1305:com.google.common.cache.ReferenceEntry getPreviousInAccessQueue() -> g
    1310:1311:void setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry) -> b
com.google.common.cache.LocalCache$WeakAccessWriteEntry -> com.google.common.cache.as:
    long accessTime -> a
    com.google.common.cache.ReferenceEntry nextAccess -> b
    com.google.common.cache.ReferenceEntry previousAccess -> c
    long writeTime -> d
    com.google.common.cache.ReferenceEntry nextWrite -> e
    com.google.common.cache.ReferenceEntry previousWrite -> f
    1363:1434:void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> <init>
    1372:1372:long getAccessTime() -> e
    1377:1378:void setAccessTime(long) -> a
    1385:1385:com.google.common.cache.ReferenceEntry getNextInAccessQueue() -> f
    1390:1391:void setNextInAccessQueue(com.google.common.cache.ReferenceEntry) -> a
    1398:1398:com.google.common.cache.ReferenceEntry getPreviousInAccessQueue() -> g
    1403:1404:void setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry) -> b
    1412:1412:long getWriteTime() -> h
    1417:1418:void setWriteTime(long) -> b
    1425:1425:com.google.common.cache.ReferenceEntry getNextInWriteQueue() -> i
    1430:1431:void setNextInWriteQueue(com.google.common.cache.ReferenceEntry) -> c
    1438:1438:com.google.common.cache.ReferenceEntry getPreviousInWriteQueue() -> j
    1443:1444:void setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry) -> d
com.google.common.cache.LocalCache$WeakEntry -> com.google.common.cache.at:
    int hash -> a
    com.google.common.cache.ReferenceEntry next -> b
    com.google.common.cache.LocalCache$ValueReference valueReference -> c
    1162:1245:void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> <init>
    1169:1169:java.lang.Object getKey() -> d
    1181:1181:long getAccessTime() -> e
    1186:1186:void setAccessTime(long) -> a
    1191:1191:com.google.common.cache.ReferenceEntry getNextInAccessQueue() -> f
    1196:1196:void setNextInAccessQueue(com.google.common.cache.ReferenceEntry) -> a
    1201:1201:com.google.common.cache.ReferenceEntry getPreviousInAccessQueue() -> g
    1206:1206:void setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry) -> b
    1213:1213:long getWriteTime() -> h
    1218:1218:void setWriteTime(long) -> b
    1223:1223:com.google.common.cache.ReferenceEntry getNextInWriteQueue() -> i
    1228:1228:void setNextInWriteQueue(com.google.common.cache.ReferenceEntry) -> c
    1233:1233:com.google.common.cache.ReferenceEntry getPreviousInWriteQueue() -> j
    1238:1238:void setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry) -> d
    1249:1249:com.google.common.cache.LocalCache$ValueReference getValueReference() -> a
    1254:1255:void setValueReference(com.google.common.cache.LocalCache$ValueReference) -> a
    1259:1259:int getHash() -> c
    1264:1264:com.google.common.cache.ReferenceEntry getNext() -> b
com.google.common.cache.LocalCache$WeakValueReference -> com.google.common.cache.au:
    com.google.common.cache.ReferenceEntry entry -> a
    1452:1454:void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> <init>
    1458:1458:int getWeight() -> a
    1463:1463:com.google.common.cache.ReferenceEntry getEntry() -> b
    1467:1467:void notifyNewValue(java.lang.Object) -> a
    1472:1472:com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> a
    1477:1477:boolean isLoading() -> c
    1482:1482:boolean isActive() -> d
    1487:1487:java.lang.Object waitForValue() -> e
com.google.common.cache.LocalCache$WeakWriteEntry -> com.google.common.cache.av:
    long writeTime -> a
    com.google.common.cache.ReferenceEntry nextWrite -> b
    com.google.common.cache.ReferenceEntry previousWrite -> c
    1316:1347:void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> <init>
    1325:1325:long getWriteTime() -> h
    1330:1331:void setWriteTime(long) -> b
    1338:1338:com.google.common.cache.ReferenceEntry getNextInWriteQueue() -> i
    1343:1344:void setNextInWriteQueue(com.google.common.cache.ReferenceEntry) -> c
    1351:1351:com.google.common.cache.ReferenceEntry getPreviousInWriteQueue() -> j
    1356:1357:void setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry) -> d
com.google.common.cache.LocalCache$WeightedSoftValueReference -> com.google.common.cache.aw:
    int weight -> a
    1611:1613:void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry,int) -> <init>
    1617:1617:int getWeight() -> a
    1623:1623:com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> a
com.google.common.cache.LocalCache$WeightedStrongValueReference -> com.google.common.cache.ax:
    int weight -> a
    1632:1634:void <init>(java.lang.Object,int) -> <init>
    1638:1638:int getWeight() -> a
com.google.common.cache.LocalCache$WeightedWeakValueReference -> com.google.common.cache.ay:
    int weight -> a
    1589:1591:void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry,int) -> <init>
    1595:1595:int getWeight() -> a
    1601:1601:com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> a
com.google.common.cache.LocalCache$WriteQueue -> com.google.common.cache.az:
    com.google.common.cache.ReferenceEntry head -> a
    3619:3620:void <init>() -> <init>
    3661:3667:boolean offer(com.google.common.cache.ReferenceEntry) -> a
    3672:3673:com.google.common.cache.ReferenceEntry peek() -> a
    3678:3684:com.google.common.cache.ReferenceEntry poll() -> b
    3690:3696:boolean remove(java.lang.Object) -> remove
    3702:3703:boolean contains(java.lang.Object) -> contains
    3708:3708:boolean isEmpty() -> isEmpty
    3713:3719:int size() -> size
    3724:3733:void clear() -> clear
    3737:3737:java.util.Iterator iterator() -> iterator
    3619:3619:java.lang.Object peek() -> peek
    3619:3619:java.lang.Object poll() -> poll
    3619:3619:boolean offer(java.lang.Object) -> offer
com.google.common.cache.LocalCache$WriteQueue$1 -> com.google.common.cache.aA:
    com.google.common.cache.ReferenceEntry nextWrite -> a
    com.google.common.cache.ReferenceEntry previousWrite -> b
    3621:3643:void <init>(com.google.common.cache.LocalCache$WriteQueue) -> <init>
    3625:3625:long getWriteTime() -> h
    3629:3629:void setWriteTime(long) -> b
    3635:3635:com.google.common.cache.ReferenceEntry getNextInWriteQueue() -> i
    3640:3641:void setNextInWriteQueue(com.google.common.cache.ReferenceEntry) -> c
    3647:3647:com.google.common.cache.ReferenceEntry getPreviousInWriteQueue() -> j
    3652:3653:void setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry) -> d
com.google.common.cache.LocalCache$WriteQueue$2 -> com.google.common.cache.aB:
    com.google.common.cache.LocalCache$WriteQueue this$0 -> a
    3737:3737:void <init>(com.google.common.cache.LocalCache$WriteQueue,com.google.common.cache.ReferenceEntry) -> <init>
    3740:3741:com.google.common.cache.ReferenceEntry computeNext(com.google.common.cache.ReferenceEntry) -> a
    3737:3737:java.lang.Object computeNext(java.lang.Object) -> computeNext
com.google.common.cache.LocalCache$WriteThroughEntry -> com.google.common.cache.aC:
    java.lang.Object key -> a
    java.lang.Object value -> b
    com.google.common.cache.LocalCache this$0 -> c
    4444:4447:void <init>(com.google.common.cache.LocalCache,java.lang.Object,java.lang.Object) -> <init>
    4451:4451:java.lang.Object getKey() -> getKey
    4456:4456:java.lang.Object getValue() -> getValue
    4462:4466:boolean equals(java.lang.Object) -> equals
    4472:4472:int hashCode() -> hashCode
    4477:4479:java.lang.Object setValue(java.lang.Object) -> setValue
    4484:4484:java.lang.String toString() -> toString
com.google.common.cache.LongAddable -> com.google.common.cache.aD:
    void increment() -> a
    void add(long) -> a
    long sum() -> b
com.google.common.cache.LongAddables -> com.google.common.cache.aE:
    com.google.common.base.Supplier SUPPLIER -> a
    54:54:com.google.common.cache.LongAddable create() -> a
    33:51:void <clinit>() -> <clinit>
com.google.common.cache.LongAddables$1 -> com.google.common.cache.aF:
    35:35:void <init>() -> <init>
    38:38:com.google.common.cache.LongAddable get() -> a
    35:35:java.lang.Object get() -> get
com.google.common.cache.LongAddables$2 -> com.google.common.cache.aG:
    43:43:void <init>() -> <init>
    46:46:com.google.common.cache.LongAddable get() -> a
    43:43:java.lang.Object get() -> get
com.google.common.cache.LongAddables$PureJavaLongAddable -> com.google.common.cache.aH:
    57:57:void <init>() -> <init>
    60:61:void increment() -> a
    65:66:void add(long) -> a
    70:70:long sum() -> b
    57:57:void <init>(byte) -> <init>
com.google.common.cache.LongAdder -> com.google.common.cache.aI:
    long serialVersionUID -> serialVersionUID
    49:49:long fn(long,long) -> a
    53:53:void <init>() -> <init>
    67:75:void add(long) -> a
    80:81:void increment() -> a
    97:106:long sum() -> b
    151:151:java.lang.String toString() -> toString
    161:161:long longValue() -> longValue
    167:167:int intValue() -> intValue
    173:173:float floatValue() -> floatValue
    179:179:double doubleValue() -> doubleValue
    183:185:void writeObject(java.io.ObjectOutputStream) -> writeObject
    188:192:void readObject(java.io.ObjectInputStream) -> readObject
com.google.common.cache.ReferenceEntry -> com.google.common.cache.aJ:
    com.google.common.cache.LocalCache$ValueReference getValueReference() -> a
    void setValueReference(com.google.common.cache.LocalCache$ValueReference) -> a
    com.google.common.cache.ReferenceEntry getNext() -> b
    int getHash() -> c
    java.lang.Object getKey() -> d
    long getAccessTime() -> e
    void setAccessTime(long) -> a
    com.google.common.cache.ReferenceEntry getNextInAccessQueue() -> f
    void setNextInAccessQueue(com.google.common.cache.ReferenceEntry) -> a
    com.google.common.cache.ReferenceEntry getPreviousInAccessQueue() -> g
    void setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry) -> b
    long getWriteTime() -> h
    void setWriteTime(long) -> b
    com.google.common.cache.ReferenceEntry getNextInWriteQueue() -> i
    void setNextInWriteQueue(com.google.common.cache.ReferenceEntry) -> c
    com.google.common.cache.ReferenceEntry getPreviousInWriteQueue() -> j
    void setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry) -> d
com.google.common.cache.RemovalCause -> com.google.common.cache.RemovalCause:
    com.google.common.cache.RemovalCause EXPLICIT -> EXPLICIT
    com.google.common.cache.RemovalCause REPLACED -> REPLACED
    com.google.common.cache.RemovalCause COLLECTED -> COLLECTED
    com.google.common.cache.RemovalCause EXPIRED -> EXPIRED
    com.google.common.cache.RemovalCause SIZE -> SIZE
    com.google.common.cache.RemovalCause[] $VALUES -> a
    28:28:com.google.common.cache.RemovalCause[] values() -> values
    28:28:com.google.common.cache.RemovalCause valueOf(java.lang.String) -> valueOf
    29:29:void <init>(java.lang.String,int) -> <init>
    boolean wasEvicted() -> a
    29:29:void <init>(java.lang.String,int,byte) -> <init>
    28:82:void <clinit>() -> <clinit>
com.google.common.cache.RemovalCause$1 -> com.google.common.cache.aK:
    35:35:void <init>(java.lang.String,int) -> <init>
    38:38:boolean wasEvicted() -> a
com.google.common.cache.RemovalCause$2 -> com.google.common.cache.aL:
    48:48:void <init>(java.lang.String,int) -> <init>
    51:51:boolean wasEvicted() -> a
com.google.common.cache.RemovalCause$3 -> com.google.common.cache.aM:
    60:60:void <init>(java.lang.String,int) -> <init>
    63:63:boolean wasEvicted() -> a
com.google.common.cache.RemovalCause$4 -> com.google.common.cache.aN:
    71:71:void <init>(java.lang.String,int) -> <init>
    74:74:boolean wasEvicted() -> a
com.google.common.cache.RemovalCause$5 -> com.google.common.cache.aO:
    82:82:void <init>(java.lang.String,int) -> <init>
    85:85:boolean wasEvicted() -> a
com.google.common.cache.RemovalListener -> com.google.common.cache.RemovalListener:
    void onRemoval(com.google.common.cache.RemovalNotification) -> onRemoval
com.google.common.cache.RemovalListeners -> com.google.common.cache.RemovalListeners:
    31:31:void <init>() -> <init>
    42:44:com.google.common.cache.RemovalListener asynchronous(com.google.common.cache.RemovalListener,java.util.concurrent.Executor) -> asynchronous
com.google.common.cache.RemovalListeners$1 -> com.google.common.cache.aP:
    java.util.concurrent.Executor val$executor -> b
    com.google.common.cache.RemovalListener val$listener -> a
    44:44:void <init>(java.util.concurrent.Executor,com.google.common.cache.RemovalListener) -> <init>
    47:54:void onRemoval(com.google.common.cache.RemovalNotification) -> onRemoval
com.google.common.cache.RemovalListeners$1$1 -> com.google.common.cache.aQ:
    com.google.common.cache.RemovalNotification val$notification -> a
    com.google.common.cache.RemovalListeners$1 this$0 -> b
    48:48:void <init>(com.google.common.cache.RemovalListeners$1,com.google.common.cache.RemovalNotification) -> <init>
    51:52:void run() -> run
com.google.common.cache.RemovalNotification -> com.google.common.cache.RemovalNotification:
    com.google.common.cache.RemovalCause cause -> a
    long serialVersionUID -> serialVersionUID
    47:47:com.google.common.cache.RemovalNotification create(java.lang.Object,java.lang.Object,com.google.common.cache.RemovalCause) -> create
    51:53:void <init>(java.lang.Object,java.lang.Object,com.google.common.cache.RemovalCause) -> <init>
    57:57:com.google.common.cache.RemovalCause getCause() -> getCause
    65:65:boolean wasEvicted() -> wasEvicted
com.google.common.cache.Striped64 -> com.google.common.cache.aR:
    java.lang.ThreadLocal threadHashCode -> a
    java.util.Random rng -> e
    int NCPU -> f
    com.google.common.cache.Striped64$Cell[] cells -> b
    long base -> c
    int busy -> d
    sun.misc.Unsafe UNSAFE -> g
    long baseOffset -> h
    long busyOffset -> i
    149:149:void <init>() -> <init>
    153:153:boolean casBase(long,long) -> b
    158:158:boolean casBusy() -> a
    long fn(long,long) -> a
    182:251:void retryUpdate(long,int[],boolean) -> a
    290:308:sun.misc.Unsafe getUnsafe() -> b
    24:24:sun.misc.Unsafe access$000() -> c
    128:280:void <clinit>() -> <clinit>
com.google.common.cache.Striped64$1 -> com.google.common.cache.aS:
    295:295:void <init>() -> <init>
    298:304:sun.misc.Unsafe run() -> a
    295:295:java.lang.Object run() -> run
com.google.common.cache.Striped64$Cell -> com.google.common.cache.aT:
    long value -> a
    sun.misc.Unsafe UNSAFE -> b
    long valueOffset -> c
    100:102:void <init>(long) -> <init>
    105:105:boolean cas(long,long) -> a
    114:120:void <clinit>() -> <clinit>
com.google.common.cache.Weigher -> com.google.common.cache.Weigher:
    int weigh(java.lang.Object,java.lang.Object) -> weigh
com.google.common.collect.AbstractBiMap -> com.google.common.collect.a:
    java.util.Map delegate -> b
    com.google.common.collect.AbstractBiMap inverse -> a
    java.util.Set keySet -> c
    java.util.Set valueSet -> d
    java.util.Set entrySet -> e
    long serialVersionUID -> serialVersionUID
    58:60:void <init>(java.util.Map,java.util.Map) -> <init>
    63:66:void <init>(java.util.Map,com.google.common.collect.AbstractBiMap) -> <init>
    70:70:java.util.Map delegate() -> delegate
    76:76:java.lang.Object checkKey(java.lang.Object) -> a
    82:82:java.lang.Object checkValue(java.lang.Object) -> b
    90:97:void setDelegates(java.util.Map,java.util.Map) -> a
    100:100:com.google.common.collect.AbstractBiMap makeInverse(java.util.Map) -> a
    104:105:void setInverse(com.google.common.collect.AbstractBiMap) -> a
    111:111:boolean containsValue(java.lang.Object) -> containsValue
    119:119:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    125:125:java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    129:142:java.lang.Object putInBothMaps(java.lang.Object,java.lang.Object,boolean) -> a
    146:150:void updateInverseMap(java.lang.Object,boolean,java.lang.Object,java.lang.Object) -> a
    155:155:java.lang.Object remove(java.lang.Object) -> remove
    160:162:java.lang.Object removeFromBothMaps(java.lang.Object) -> c
    166:167:void removeFromInverseMap(java.lang.Object) -> d
    173:176:void putAll(java.util.Map) -> putAll
    180:199:void replaceAll(java.util.function.BiFunction) -> replaceAll
    203:205:void clear() -> clear
    211:211:com.google.common.collect.BiMap inverse() -> inverse
    218:219:java.util.Set keySet() -> keySet
    267:268:java.util.Set values() -> values
    305:306:java.util.Set entrySet() -> entrySet
    339:340:java.util.Iterator entrySetIterator() -> a
    50:50:java.util.Collection values() -> values
    50:50:java.lang.Object delegate() -> delegate
    51:51:java.util.Map access$100(com.google.common.collect.AbstractBiMap) -> b
    51:51:java.lang.Object access$200(com.google.common.collect.AbstractBiMap,java.lang.Object) -> a
    51:51:void access$500(com.google.common.collect.AbstractBiMap,java.lang.Object,boolean,java.lang.Object,java.lang.Object) -> a
    51:51:void access$600(com.google.common.collect.AbstractBiMap,java.lang.Object) -> b
    51:51:void <init>(java.util.Map,com.google.common.collect.AbstractBiMap,byte) -> <init>
com.google.common.collect.AbstractBiMap$1 -> com.google.common.collect.b:
    java.util.Map$Entry entry -> a
    java.util.Iterator val$iterator -> b
    com.google.common.collect.AbstractBiMap this$0 -> c
    340:340:void <init>(com.google.common.collect.AbstractBiMap,java.util.Iterator) -> <init>
    345:345:boolean hasNext() -> hasNext
    350:351:java.util.Map$Entry next() -> a
    356:361:void remove() -> remove
    340:340:java.lang.Object next() -> next
com.google.common.collect.AbstractBiMap$BiMapEntry -> com.google.common.collect.c:
    java.util.Map$Entry delegate -> a
    com.google.common.collect.AbstractBiMap this$0 -> b
    312:314:void <init>(com.google.common.collect.AbstractBiMap,java.util.Map$Entry) -> <init>
    318:318:java.util.Map$Entry delegate() -> delegate
    323:334:java.lang.Object setValue(java.lang.Object) -> setValue
    309:309:java.lang.Object delegate() -> delegate
com.google.common.collect.AbstractBiMap$EntrySet -> com.google.common.collect.d:
    java.util.Set esDelegate -> a
    com.google.common.collect.AbstractBiMap this$0 -> b
    366:367:void <init>(com.google.common.collect.AbstractBiMap) -> <init>
    371:371:java.util.Set delegate() -> delegate
    376:377:void clear() -> clear
    381:394:boolean remove(java.lang.Object) -> remove
    399:399:java.util.Iterator iterator() -> iterator
    406:406:java.lang.Object[] toArray() -> toArray
    411:411:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    416:416:boolean contains(java.lang.Object) -> contains
    421:421:boolean containsAll(java.util.Collection) -> containsAll
    426:426:boolean removeAll(java.util.Collection) -> removeAll
    431:431:boolean retainAll(java.util.Collection) -> retainAll
    365:365:java.util.Collection delegate() -> delegate
    365:365:java.lang.Object delegate() -> delegate
    366:366:void <init>(com.google.common.collect.AbstractBiMap,byte) -> <init>
com.google.common.collect.AbstractBiMap$Inverse -> com.google.common.collect.e:
    long serialVersionUID -> serialVersionUID
    438:439:void <init>(java.util.Map,com.google.common.collect.AbstractBiMap) -> <init>
    452:452:java.lang.Object checkKey(java.lang.Object) -> a
    457:457:java.lang.Object checkValue(java.lang.Object) -> b
    463:465:void writeObject(java.io.ObjectOutputStream) -> writeObject
    470:472:void readObject(java.io.ObjectInputStream) -> readObject
    476:476:java.lang.Object readResolve() -> readResolve
    436:436:java.util.Collection values() -> values
    436:436:java.lang.Object delegate() -> delegate
com.google.common.collect.AbstractBiMap$KeySet -> com.google.common.collect.f:
    com.google.common.collect.AbstractBiMap this$0 -> a
    223:223:void <init>(com.google.common.collect.AbstractBiMap) -> <init>
    226:226:java.util.Set delegate() -> delegate
    231:232:void clear() -> clear
    236:240:boolean remove(java.lang.Object) -> remove
    245:245:boolean removeAll(java.util.Collection) -> removeAll
    250:250:boolean retainAll(java.util.Collection) -> retainAll
    255:255:java.util.Iterator iterator() -> iterator
    222:222:java.util.Collection delegate() -> delegate
    222:222:java.lang.Object delegate() -> delegate
    223:223:void <init>(com.google.common.collect.AbstractBiMap,byte) -> <init>
com.google.common.collect.AbstractBiMap$ValueSet -> com.google.common.collect.g:
    java.util.Set valuesDelegate -> a
    com.google.common.collect.AbstractBiMap this$0 -> b
    272:273:void <init>(com.google.common.collect.AbstractBiMap) -> <init>
    277:277:java.util.Set delegate() -> delegate
    282:282:java.util.Iterator iterator() -> iterator
    287:287:java.lang.Object[] toArray() -> toArray
    292:292:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    297:297:java.lang.String toString() -> toString
    271:271:java.util.Collection delegate() -> delegate
    271:271:java.lang.Object delegate() -> delegate
    272:272:void <init>(com.google.common.collect.AbstractBiMap,byte) -> <init>
com.google.common.collect.AbstractIndexedListIterator -> com.google.common.collect.h:
    int size -> a
    int position -> b
    java.lang.Object get(int) -> a
    48:49:void <init>(int) -> <init>
    61:65:void <init>(int,int) -> <init>
    69:69:boolean hasNext() -> hasNext
    74:77:java.lang.Object next() -> next
    82:82:int nextIndex() -> nextIndex
    87:87:boolean hasPrevious() -> hasPrevious
    92:95:java.lang.Object previous() -> previous
    100:100:int previousIndex() -> previousIndex
com.google.common.collect.AbstractIterator -> com.google.common.collect.AbstractIterator:
    int state$1572a20f -> a
    java.lang.Object next -> b
    65:68:void <init>() -> <init>
    java.lang.Object computeNext() -> computeNext
    121:122:java.lang.Object endOfData() -> endOfData
    128:136:boolean hasNext() -> hasNext
    140:146:boolean tryToComputeNext() -> a
    152:158:java.lang.Object next() -> next
    169:172:java.lang.Object peek() -> peek
com.google.common.collect.AbstractIterator$1 -> com.google.common.collect.i:
    int[] $SwitchMap$com$google$common$collect$AbstractIterator$State -> a
    129:129:void <clinit>() -> <clinit>
com.google.common.collect.AbstractIterator$State -> com.google.common.collect.j:
    int READY$1572a20f -> a
    int NOT_READY$1572a20f -> b
    int DONE$1572a20f -> c
    int FAILED$1572a20f -> d
    int[] $VALUES$12ff0e74 -> e
    70:70:int[] values$55dd66eb() -> a
    70:81:void <clinit>() -> <clinit>
com.google.common.collect.AbstractListMultimap -> com.google.common.collect.k:
    long serialVersionUID -> serialVersionUID
    44:45:void <init>(java.util.Map) -> <init>
    java.util.List createCollection() -> a
    52:52:java.util.List createUnmodifiableEmptyCollection() -> p
    57:57:java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> a
    62:62:java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> a
    76:76:java.util.List get(java.lang.Object) -> get
    89:89:java.util.List removeAll(java.lang.Object) -> removeAll
    102:102:java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    115:115:boolean put(java.lang.Object,java.lang.Object) -> put
    126:126:java.util.Map asMap() -> asMap
    137:137:boolean equals(java.lang.Object) -> equals
    35:35:java.util.Collection get(java.lang.Object) -> get
    35:35:java.util.Collection removeAll(java.lang.Object) -> removeAll
    35:35:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    35:35:java.util.Collection createCollection() -> b
    35:35:java.util.Collection createUnmodifiableEmptyCollection() -> c
com.google.common.collect.AbstractMapBasedMultimap -> com.google.common.collect.l:
    java.util.Map map -> a
    int totalSize -> b
    long serialVersionUID -> serialVersionUID
    117:120:void <init>(java.util.Map) -> <init>
    124:130:void setMap(java.util.Map) -> a
    138:138:java.util.Collection createUnmodifiableEmptyCollection() -> c
    java.util.Collection createCollection() -> b
    162:162:java.util.Collection createCollection(java.lang.Object) -> a
    166:166:java.util.Map backingMap() -> d
    173:173:int size() -> size
    178:178:boolean containsKey(java.lang.Object) -> containsKey
    185:199:boolean put(java.lang.Object,java.lang.Object) -> put
    204:209:java.util.Collection getOrCreateCollection(java.lang.Object) -> b
    221:240:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    250:261:java.util.Collection removeAll(java.lang.Object) -> removeAll
    265:265:java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> a
    271:276:void clear() -> clear
    287:291:java.util.Collection get(java.lang.Object) -> get
    299:299:java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> a
    303:303:java.util.List wrapList(java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> a
    581:583:java.util.Iterator iteratorOrListIterator(java.util.Collection) -> c
    898:898:java.util.Set createKeySet() -> e
    902:907:java.util.Set createMaybeNavigableKeySet() -> f
    1114:1121:void removeValuesForKey(java.lang.Object) -> c
    1172:1172:java.util.Collection values() -> values
    1177:1177:java.util.Collection createValues() -> g
    1182:1182:java.util.Iterator valueIterator() -> h
    1192:1193:java.util.Spliterator valueSpliterator() -> i
    1204:1204:com.google.common.collect.Multiset createKeys() -> j
    1218:1218:java.util.Collection entries() -> entries
    1223:1226:java.util.Collection createEntries() -> k
    1240:1240:java.util.Iterator entryIterator() -> l
    1250:1259:java.util.Spliterator entrySpliterator() -> m
    1264:1267:void forEach(java.util.function.BiConsumer) -> forEach
    1271:1271:java.util.Map createAsMap() -> n
    1275:1280:java.util.Map createMaybeNavigableAsMap() -> o
    1266:1266:void lambda$forEach$3(java.util.function.BiConsumer,java.lang.Object,java.util.Collection) -> a
    1266:1266:void lambda$null$2(java.util.function.BiConsumer,java.lang.Object,java.lang.Object) -> a
    1253:1256:java.util.Spliterator lambda$entrySpliterator$1(java.util.Map$Entry) -> a
    1256:1256:java.util.Map$Entry lambda$null$0(java.lang.Object,java.lang.Object) -> a
    87:87:java.util.Map access$000(com.google.common.collect.AbstractMapBasedMultimap) -> a
    87:87:java.util.Iterator access$100(java.util.Collection) -> b
    87:87:int access$210(com.google.common.collect.AbstractMapBasedMultimap) -> b
    87:87:int access$208(com.google.common.collect.AbstractMapBasedMultimap) -> c
    87:87:int access$200(com.google.common.collect.AbstractMapBasedMultimap) -> d
    87:87:int access$202(com.google.common.collect.AbstractMapBasedMultimap,int) -> a
    87:87:void access$300(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object) -> a
com.google.common.collect.AbstractMapBasedMultimap$1 -> com.google.common.collect.m:
    1182:1182:void <init>(com.google.common.collect.AbstractMapBasedMultimap) -> <init>
    1185:1185:java.lang.Object output(java.lang.Object,java.lang.Object) -> a
com.google.common.collect.AbstractMapBasedMultimap$2 -> com.google.common.collect.n:
    1240:1240:void <init>(com.google.common.collect.AbstractMapBasedMultimap) -> <init>
    1243:1243:java.util.Map$Entry output(java.lang.Object,java.lang.Object) -> b
    1240:1240:java.lang.Object output(java.lang.Object,java.lang.Object) -> a
com.google.common.collect.AbstractMapBasedMultimap$AsMap -> com.google.common.collect.o:
    java.util.Map submap -> a
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> b
    1292:1294:void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map) -> <init>
    1298:1298:java.util.Set createEntrySet() -> a
    1305:1305:boolean containsKey(java.lang.Object) -> containsKey
    1310:1316:java.util.Collection get(java.lang.Object) -> a
    1321:1321:java.util.Set keySet() -> keySet
    1326:1326:int size() -> size
    1331:1340:java.util.Collection remove(java.lang.Object) -> b
    1345:1345:boolean equals(java.lang.Object) -> equals
    1350:1350:int hashCode() -> hashCode
    1355:1355:java.lang.String toString() -> toString
    1360:1365:void clear() -> clear
    1368:1369:java.util.Map$Entry wrapEntry(java.util.Map$Entry) -> a
    1284:1284:java.lang.Object remove(java.lang.Object) -> remove
    1284:1284:java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries -> com.google.common.collect.p:
    com.google.common.collect.AbstractMapBasedMultimap$AsMap this$1 -> a
    1373:1373:void <init>(com.google.common.collect.AbstractMapBasedMultimap$AsMap) -> <init>
    1376:1376:java.util.Map map() -> a
    1381:1381:java.util.Iterator iterator() -> iterator
    1386:1386:java.util.Spliterator spliterator() -> spliterator
    1393:1393:boolean contains(java.lang.Object) -> contains
    1398:1403:boolean remove(java.lang.Object) -> remove
com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator -> com.google.common.collect.q:
    java.util.Iterator delegateIterator -> a
    java.util.Collection collection -> b
    com.google.common.collect.AbstractMapBasedMultimap$AsMap this$1 -> c
    1408:1409:void <init>(com.google.common.collect.AbstractMapBasedMultimap$AsMap) -> <init>
    1414:1414:boolean hasNext() -> hasNext
    1419:1421:java.util.Map$Entry next() -> a
    1426:1431:void remove() -> remove
    1408:1408:java.lang.Object next() -> next
com.google.common.collect.AbstractMapBasedMultimap$Itr -> com.google.common.collect.r:
    java.util.Iterator keyIterator -> a
    java.lang.Object key -> b
    java.util.Collection collection -> c
    java.util.Iterator valueIterator -> d
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> e
    1129:1134:void <init>(com.google.common.collect.AbstractMapBasedMultimap) -> <init>
    java.lang.Object output(java.lang.Object,java.lang.Object) -> a
    1140:1140:boolean hasNext() -> hasNext
    1145:1151:java.lang.Object next() -> next
    1156:1161:void remove() -> remove
com.google.common.collect.AbstractMapBasedMultimap$KeySet -> com.google.common.collect.s:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> a
    913:915:void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map) -> <init>
    919:920:java.util.Iterator iterator() -> iterator
    950:950:java.util.Spliterator spliterator() -> spliterator
    955:962:boolean remove(java.lang.Object) -> remove
    967:968:void clear() -> clear
    972:972:boolean containsAll(java.util.Collection) -> containsAll
    977:977:boolean equals(java.lang.Object) -> equals
    982:982:int hashCode() -> hashCode
com.google.common.collect.AbstractMapBasedMultimap$KeySet$1 -> com.google.common.collect.t:
    java.util.Map$Entry entry -> a
    java.util.Iterator val$entryIterator -> b
    com.google.common.collect.AbstractMapBasedMultimap$KeySet this$1 -> c
    920:920:void <init>(com.google.common.collect.AbstractMapBasedMultimap$KeySet,java.util.Iterator) -> <init>
    925:925:boolean hasNext() -> hasNext
    930:931:java.lang.Object next() -> next
    936:942:void remove() -> remove
com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap -> com.google.common.collect.u:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> c
    1493:1495:void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.NavigableMap) -> <init>
    1499:1499:java.util.NavigableMap sortedMap() -> f
    1504:1505:java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    1510:1510:java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    1515:1516:java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    1521:1521:java.lang.Object floorKey(java.lang.Object) -> floorKey
    1526:1527:java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    1532:1532:java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    1537:1538:java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    1543:1543:java.lang.Object higherKey(java.lang.Object) -> higherKey
    1548:1549:java.util.Map$Entry firstEntry() -> firstEntry
    1554:1555:java.util.Map$Entry lastEntry() -> lastEntry
    1560:1560:java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    1565:1565:java.util.Map$Entry pollLastEntry() -> pollLastEntry
    1569:1576:java.util.Map$Entry pollAsMapEntry(java.util.Iterator) -> a
    1581:1581:java.util.NavigableMap descendingMap() -> descendingMap
    1586:1586:java.util.NavigableSet keySet() -> g
    1591:1591:java.util.NavigableSet createKeySet() -> h
    1596:1596:java.util.NavigableSet navigableKeySet() -> navigableKeySet
    1601:1601:java.util.NavigableSet descendingKeySet() -> descendingKeySet
    1606:1606:java.util.NavigableMap subMap(java.lang.Object,java.lang.Object) -> a
    1612:1612:java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    1617:1617:java.util.NavigableMap headMap(java.lang.Object) -> a
    1622:1622:java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    1627:1627:java.util.NavigableMap tailMap(java.lang.Object) -> b
    1632:1632:java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    1491:1491:java.util.SortedSet createKeySet() -> b
    1491:1491:java.util.SortedSet keySet() -> c
    1491:1491:java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    1491:1491:java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    1491:1491:java.util.SortedMap headMap(java.lang.Object) -> headMap
    1491:1491:java.util.SortedMap sortedMap() -> d
    1491:1491:java.util.Set keySet() -> keySet
    1491:1491:java.util.Set createKeySet() -> e
com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet -> com.google.common.collect.v:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> c
    1030:1032:void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.NavigableMap) -> <init>
    1036:1036:java.util.NavigableMap sortedMap() -> c
    1041:1041:java.lang.Object lower(java.lang.Object) -> lower
    1046:1046:java.lang.Object floor(java.lang.Object) -> floor
    1051:1051:java.lang.Object ceiling(java.lang.Object) -> ceiling
    1056:1056:java.lang.Object higher(java.lang.Object) -> higher
    1061:1061:java.lang.Object pollFirst() -> pollFirst
    1066:1066:java.lang.Object pollLast() -> pollLast
    1071:1071:java.util.NavigableSet descendingSet() -> descendingSet
    1076:1076:java.util.Iterator descendingIterator() -> descendingIterator
    1081:1081:java.util.NavigableSet headSet(java.lang.Object) -> a
    1086:1086:java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    1091:1091:java.util.NavigableSet subSet(java.lang.Object,java.lang.Object) -> a
    1097:1098:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    1103:1103:java.util.NavigableSet tailSet(java.lang.Object) -> b
    1108:1108:java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    1028:1028:java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    1028:1028:java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    1028:1028:java.util.SortedSet headSet(java.lang.Object) -> headSet
    1028:1028:java.util.SortedMap sortedMap() -> a
com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList -> com.google.common.collect.w:
    891:893:void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap -> com.google.common.collect.x:
    java.util.SortedSet sortedKeySet -> c
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> d
    1437:1439:void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.SortedMap) -> <init>
    1442:1442:java.util.SortedMap sortedMap() -> d
    1447:1447:java.util.Comparator comparator() -> comparator
    1452:1452:java.lang.Object firstKey() -> firstKey
    1457:1457:java.lang.Object lastKey() -> lastKey
    1462:1462:java.util.SortedMap headMap(java.lang.Object) -> headMap
    1467:1467:java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    1472:1472:java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    1481:1482:java.util.SortedSet keySet() -> c
    1487:1487:java.util.SortedSet createKeySet() -> b
    1435:1435:java.util.Set keySet() -> keySet
    1435:1435:java.util.Set createKeySet() -> e
com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet -> com.google.common.collect.y:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> c
    989:991:void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.SortedMap) -> <init>
    994:994:java.util.SortedMap sortedMap() -> a
    999:999:java.util.Comparator comparator() -> comparator
    1004:1004:java.lang.Object first() -> first
    1009:1009:java.util.SortedSet headSet(java.lang.Object) -> headSet
    1014:1014:java.lang.Object last() -> last
    1019:1019:java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    1024:1024:java.util.SortedSet tailSet(java.lang.Object) -> tailSet
com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection -> com.google.common.collect.z:
    java.lang.Object key -> a
    java.util.Collection delegate -> b
    com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection ancestor -> d
    java.util.Collection ancestorDelegate -> e
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> c
    331:336:void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
    346:357:void refreshIfEmpty() -> a
    364:369:void removeIfEmpty() -> b
    372:372:java.lang.Object getKey() -> c
    382:387:void addToMap() -> d
    391:392:int size() -> size
    397:401:boolean equals(java.lang.Object) -> equals
    406:407:int hashCode() -> hashCode
    412:413:java.lang.String toString() -> toString
    417:417:java.util.Collection getDelegate() -> e
    422:423:java.util.Iterator iterator() -> iterator
    428:429:java.util.Spliterator spliterator() -> spliterator
    482:491:boolean add(java.lang.Object) -> add
    495:495:com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection getAncestor() -> f
    502:514:boolean addAll(java.util.Collection) -> addAll
    519:520:boolean contains(java.lang.Object) -> contains
    525:526:boolean containsAll(java.util.Collection) -> containsAll
    531:538:void clear() -> clear
    542:548:boolean remove(java.lang.Object) -> remove
    553:563:boolean removeAll(java.util.Collection) -> removeAll
    568:576:boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator -> com.google.common.collect.A:
    java.util.Iterator delegateIterator -> a
    java.util.Collection originalDelegate -> b
    com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection this$1 -> c
    435:439:void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
    435:443:void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection,java.util.Iterator) -> <init>
    449:453:void validateIterator() -> b
    457:458:boolean hasNext() -> hasNext
    463:464:java.lang.Object next() -> next
    469:472:void remove() -> remove
    475:476:java.util.Iterator getDelegateIterator() -> a
com.google.common.collect.AbstractMapBasedMultimap$WrappedList -> com.google.common.collect.B:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> d
    746:748:void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
    751:751:java.util.List getListDelegate() -> g
    756:768:boolean addAll(int,java.util.Collection) -> addAll
    773:774:java.lang.Object get(int) -> get
    779:780:java.lang.Object set(int,java.lang.Object) -> set
    785:792:void add(int,java.lang.Object) -> add
    796:800:java.lang.Object remove(int) -> remove
    805:806:int indexOf(java.lang.Object) -> indexOf
    811:812:int lastIndexOf(java.lang.Object) -> lastIndexOf
    817:818:java.util.ListIterator listIterator() -> listIterator
    823:824:java.util.ListIterator listIterator(int) -> listIterator
    829:833:java.util.List subList(int,int) -> subList
com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator -> com.google.common.collect.C:
    com.google.common.collect.AbstractMapBasedMultimap$WrappedList this$1 -> a
    838:838:void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedList) -> <init>
    840:842:void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedList,int) -> <init>
    845:845:java.util.ListIterator getDelegateListIterator() -> b
    850:850:boolean hasPrevious() -> hasPrevious
    855:855:java.lang.Object previous() -> previous
    860:860:int nextIndex() -> nextIndex
    865:865:int previousIndex() -> previousIndex
    870:871:void set(java.lang.Object) -> set
    875:881:void add(java.lang.Object) -> add
com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet -> com.google.common.collect.D:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> d
    672:674:void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.NavigableSet,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
    678:678:java.util.NavigableSet getSortedSetDelegate() -> h
    683:683:java.lang.Object lower(java.lang.Object) -> lower
    688:688:java.lang.Object floor(java.lang.Object) -> floor
    693:693:java.lang.Object ceiling(java.lang.Object) -> ceiling
    698:698:java.lang.Object higher(java.lang.Object) -> higher
    703:703:java.lang.Object pollFirst() -> pollFirst
    708:708:java.lang.Object pollLast() -> pollLast
    712:712:java.util.NavigableSet wrap(java.util.NavigableSet) -> a
    717:717:java.util.NavigableSet descendingSet() -> descendingSet
    722:722:java.util.Iterator descendingIterator() -> descendingIterator
    728:729:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    734:734:java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    739:739:java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    669:669:java.util.SortedSet getSortedSetDelegate() -> g
com.google.common.collect.AbstractMapBasedMultimap$WrappedSet -> com.google.common.collect.E:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> d
    589:591:void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Set) -> <init>
    595:609:boolean removeAll(java.util.Collection) -> removeAll
com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet -> com.google.common.collect.F:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> d
    616:618:void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.SortedSet,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
    621:621:java.util.SortedSet getSortedSetDelegate() -> g
    626:626:java.util.Comparator comparator() -> comparator
    631:632:java.lang.Object first() -> first
    637:638:java.lang.Object last() -> last
    643:647:java.util.SortedSet headSet(java.lang.Object) -> headSet
    652:656:java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    661:665:java.util.SortedSet tailSet(java.lang.Object) -> tailSet
com.google.common.collect.AbstractMapBasedMultiset -> com.google.common.collect.G:
    java.util.Map backingMap -> a
    long size -> b
    long serialVersionUID -> serialVersionUID
    60:63:void <init>(java.util.Map) -> <init>
    67:68:void setBackingMap(java.util.Map) -> a
    81:81:java.util.Set entrySet() -> entrySet
    86:87:java.util.Iterator elementIterator() -> a
    114:115:java.util.Iterator entryIterator() -> b
    159:161:void forEachEntry(java.util.function.ObjIntConsumer) -> forEachEntry
    165:170:void clear() -> clear
    174:174:int distinctElements() -> c
    181:181:int size() -> size
    186:186:java.util.Iterator iterator() -> iterator
    237:238:int count(java.lang.Object) -> count
    252:268:int add(java.lang.Object,int) -> add
    274:295:int remove(java.lang.Object,int) -> remove
    302:319:int setCount(java.lang.Object,int) -> setCount
    323:327:int getAndSet(com.google.common.collect.Count,int) -> a
    160:160:void lambda$forEachEntry$0(java.util.function.ObjIntConsumer,java.lang.Object,com.google.common.collect.Count) -> a
    48:48:long access$000(com.google.common.collect.AbstractMapBasedMultiset) -> a
    48:48:long access$002(com.google.common.collect.AbstractMapBasedMultiset,long) -> a
    48:48:java.util.Map access$100(com.google.common.collect.AbstractMapBasedMultiset) -> b
    48:48:long access$010(com.google.common.collect.AbstractMapBasedMultiset) -> c
com.google.common.collect.AbstractMapBasedMultiset$1 -> com.google.common.collect.H:
    java.util.Map$Entry toRemove -> a
    java.util.Iterator val$backingEntries -> b
    com.google.common.collect.AbstractMapBasedMultiset this$0 -> c
    87:87:void <init>(com.google.common.collect.AbstractMapBasedMultiset,java.util.Iterator) -> <init>
    92:92:boolean hasNext() -> hasNext
    97:99:java.lang.Object next() -> next
    104:108:void remove() -> remove
com.google.common.collect.AbstractMapBasedMultiset$2 -> com.google.common.collect.I:
    java.util.Map$Entry toRemove -> b
    java.util.Iterator val$backingEntries -> c
    com.google.common.collect.AbstractMapBasedMultiset this$0 -> a
    115:115:void <init>(com.google.common.collect.AbstractMapBasedMultiset,java.util.Iterator) -> <init>
    120:120:boolean hasNext() -> hasNext
    125:127:com.google.common.collect.Multiset$Entry next() -> a
    149:153:void remove() -> remove
    115:115:java.lang.Object next() -> next
com.google.common.collect.AbstractMapBasedMultiset$2$1 -> com.google.common.collect.J:
    java.util.Map$Entry val$mapEntry -> a
    com.google.common.collect.AbstractMapBasedMultiset$2 this$1 -> b
    127:127:void <init>(com.google.common.collect.AbstractMapBasedMultiset$2,java.util.Map$Entry) -> <init>
    130:130:java.lang.Object getElement() -> getElement
    135:142:int getCount() -> getCount
com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator -> com.google.common.collect.K:
    java.util.Iterator entryIterator -> a
    java.util.Map$Entry currentEntry -> b
    int occurrencesLeft -> c
    boolean canRemove -> d
    com.google.common.collect.AbstractMapBasedMultiset this$0 -> e
    200:202:void <init>(com.google.common.collect.AbstractMapBasedMultiset) -> <init>
    206:206:boolean hasNext() -> hasNext
    211:217:java.lang.Object next() -> next
    222:232:void remove() -> remove
com.google.common.collect.AbstractMapEntry -> com.google.common.collect.L:
    31:31:void <init>() -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    41:41:java.lang.Object setValue(java.lang.Object) -> setValue
    46:51:boolean equals(java.lang.Object) -> equals
    56:58:int hashCode() -> hashCode
    64:64:java.lang.String toString() -> toString
com.google.common.collect.AbstractMultimap -> com.google.common.collect.M:
    java.util.Collection entries -> a
    java.util.Set keySet -> b
    com.google.common.collect.Multiset keys -> c
    java.util.Collection values -> d
    java.util.Map asMap -> e
    41:41:void <init>() -> <init>
    44:44:boolean isEmpty() -> isEmpty
    49:55:boolean containsValue(java.lang.Object) -> containsValue
    60:61:boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    67:68:boolean remove(java.lang.Object,java.lang.Object) -> remove
    74:74:boolean put(java.lang.Object,java.lang.Object) -> put
    80:88:boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    95:99:boolean putAll(com.google.common.collect.Multimap) -> putAll
    105:108:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    115:116:java.util.Collection entries() -> entries
    java.util.Collection createEntries() -> k
    java.util.Iterator entryIterator() -> l
    155:156:java.util.Spliterator entrySpliterator() -> m
    163:164:java.util.Set keySet() -> keySet
    java.util.Set createKeySet() -> e
    173:174:com.google.common.collect.Multiset keys() -> keys
    com.google.common.collect.Multiset createKeys() -> j
    183:184:java.util.Collection values() -> values
    java.util.Collection createValues() -> g
    218:218:java.util.Iterator valueIterator() -> h
    222:222:java.util.Spliterator valueSpliterator() -> i
    229:230:java.util.Map asMap() -> asMap
    java.util.Map createAsMap() -> n
    239:239:boolean equals(java.lang.Object) -> equals
    252:252:int hashCode() -> hashCode
    263:263:java.lang.String toString() -> toString
com.google.common.collect.AbstractMultimap$Entries -> com.google.common.collect.N:
    com.google.common.collect.AbstractMultimap this$0 -> a
    122:122:void <init>(com.google.common.collect.AbstractMultimap) -> <init>
    125:125:com.google.common.collect.Multimap multimap() -> a
    130:130:java.util.Iterator iterator() -> iterator
    135:135:java.util.Spliterator spliterator() -> spliterator
com.google.common.collect.AbstractMultimap$EntrySet -> com.google.common.collect.O:
    140:140:void <init>(com.google.common.collect.AbstractMultimap) -> <init>
    143:143:int hashCode() -> hashCode
    148:148:boolean equals(java.lang.Object) -> equals
com.google.common.collect.AbstractMultimap$Values -> com.google.common.collect.P:
    com.google.common.collect.AbstractMultimap this$0 -> a
    190:190:void <init>(com.google.common.collect.AbstractMultimap) -> <init>
    193:193:java.util.Iterator iterator() -> iterator
    198:198:java.util.Spliterator spliterator() -> spliterator
    203:203:int size() -> size
    208:208:boolean contains(java.lang.Object) -> contains
    213:214:void clear() -> clear
com.google.common.collect.AbstractMultiset -> com.google.common.collect.Q:
    java.util.Set elementSet -> a
    java.util.Set entrySet -> b
    46:46:void <init>() -> <init>
    51:51:boolean isEmpty() -> isEmpty
    56:56:boolean contains(java.lang.Object) -> contains
    63:64:boolean add(java.lang.Object) -> add
    70:70:int add(java.lang.Object,int) -> add
    76:76:boolean remove(java.lang.Object) -> remove
    82:82:int remove(java.lang.Object,int) -> remove
    88:88:int setCount(java.lang.Object,int) -> setCount
    94:94:boolean setCount(java.lang.Object,int,int) -> setCount
    108:108:boolean addAll(java.util.Collection) -> addAll
    114:114:boolean removeAll(java.util.Collection) -> removeAll
    120:120:boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    132:136:java.util.Set elementSet() -> elementSet
    144:144:java.util.Set createElementSet() -> d
    java.util.Iterator elementIterator() -> a
    166:170:java.util.Set entrySet() -> entrySet
    192:192:java.util.Set createEntrySet() -> createEntrySet
    java.util.Iterator entryIterator() -> b
    int distinctElements() -> c
    209:209:boolean equals(java.lang.Object) -> equals
    219:219:int hashCode() -> hashCode
    230:230:java.lang.String toString() -> toString
com.google.common.collect.AbstractMultiset$ElementSet -> com.google.common.collect.R:
    com.google.common.collect.AbstractMultiset this$0 -> a
    148:148:void <init>(com.google.common.collect.AbstractMultiset) -> <init>
    151:151:com.google.common.collect.Multiset multiset() -> a
    156:156:java.util.Iterator iterator() -> iterator
com.google.common.collect.AbstractMultiset$EntrySet -> com.google.common.collect.S:
    com.google.common.collect.AbstractMultiset this$0 -> a
    174:174:void <init>(com.google.common.collect.AbstractMultiset) -> <init>
    177:177:com.google.common.collect.Multiset multiset() -> a
    182:182:java.util.Iterator iterator() -> iterator
    187:187:int size() -> size
com.google.common.collect.AbstractNavigableMap -> com.google.common.collect.T:
    35:35:void <init>() -> <init>
    43:43:java.util.Map$Entry firstEntry() -> firstEntry
    48:48:java.util.Map$Entry lastEntry() -> lastEntry
    53:53:java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    58:58:java.util.Map$Entry pollLastEntry() -> pollLastEntry
    63:67:java.lang.Object firstKey() -> firstKey
    73:77:java.lang.Object lastKey() -> lastKey
    83:83:java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    88:88:java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    93:93:java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    98:98:java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    103:103:java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    108:108:java.lang.Object floorKey(java.lang.Object) -> floorKey
    113:113:java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    118:118:java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Iterator descendingEntryIterator() -> a
    125:125:java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    130:130:java.util.SortedMap headMap(java.lang.Object) -> headMap
    135:135:java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    140:140:java.util.NavigableSet navigableKeySet() -> navigableKeySet
    145:145:java.util.Set keySet() -> keySet
    150:150:java.util.NavigableSet descendingKeySet() -> descendingKeySet
    155:155:java.util.NavigableMap descendingMap() -> descendingMap
com.google.common.collect.AbstractNavigableMap$1 -> com.google.common.collect.U:
    1029:1034:void com.google.common.collect.CollectPreconditions.checkEntryNotNull(java.lang.Object,java.lang.Object):29:34 -> a
    1038:1041:int com.google.common.collect.CollectPreconditions.checkNonnegative(int,java.lang.String):38:41 -> a
    1046:1049:long com.google.common.collect.CollectPreconditions.checkNonnegative(long,java.lang.String):46:49 -> a
    1053:1056:void com.google.common.collect.CollectPreconditions.checkPositive(int,java.lang.String):53:56 -> b
    1063:1064:void com.google.common.collect.CollectPreconditions.checkRemove(boolean):63:64 -> a
    2050:2050:int com.google.common.collect.Hashing.smear(int):50:50 -> a
    2054:2054:int com.google.common.collect.Hashing.smearedHash(java.lang.Object):54:54 -> a
    2062:2069:int com.google.common.collect.Hashing.closedTableSize(int,double):62:69 -> a
    2073:2073:boolean com.google.common.collect.Hashing.needsResizing(int,int,double):73:73 -> a
    3037:3047:boolean com.google.common.collect.SortedIterables.hasSameComparator(java.util.Comparator,java.lang.Iterable):37:47 -> a
    3053:3057:java.util.Comparator com.google.common.collect.SortedIterables.comparator(java.util.SortedSet):53:57 -> a
com.google.common.collect.AbstractNavigableMap$DescendingMap -> com.google.common.collect.V:
    com.google.common.collect.AbstractNavigableMap this$0 -> a
    158:158:void <init>(com.google.common.collect.AbstractNavigableMap) -> <init>
    161:161:java.util.NavigableMap forward() -> a
    166:166:java.util.Iterator entryIterator() -> entryIterator
    158:158:void <init>(com.google.common.collect.AbstractNavigableMap,byte) -> <init>
com.google.common.collect.AbstractRangeSet -> com.google.common.collect.W:
    27:27:void <init>() -> <init>
    31:31:boolean contains(java.lang.Comparable) -> contains
    com.google.common.collect.Range rangeContaining(java.lang.Comparable) -> rangeContaining
    39:39:boolean isEmpty() -> isEmpty
    44:44:void add(com.google.common.collect.Range) -> add
    49:49:void remove(com.google.common.collect.Range) -> remove
    54:55:void clear() -> clear
    59:59:boolean enclosesAll(com.google.common.collect.RangeSet) -> enclosesAll
    64:65:void addAll(com.google.common.collect.RangeSet) -> addAll
    69:70:void removeAll(com.google.common.collect.RangeSet) -> removeAll
    74:74:boolean intersects(com.google.common.collect.Range) -> intersects
    boolean encloses(com.google.common.collect.Range) -> encloses
    82:88:boolean equals(java.lang.Object) -> equals
    93:93:int hashCode() -> hashCode
    98:98:java.lang.String toString() -> toString
com.google.common.collect.AbstractSequentialIterator -> com.google.common.collect.AbstractSequentialIterator:
    java.lang.Object nextOrNull -> a
    50:52:void <init>(java.lang.Object) -> <init>
    java.lang.Object computeNext(java.lang.Object) -> computeNext
    64:64:boolean hasNext() -> hasNext
    69:76:java.lang.Object next() -> next
com.google.common.collect.AbstractSetMultimap -> com.google.common.collect.X:
    long serialVersionUID -> serialVersionUID
    44:45:void <init>(java.util.Map) -> <init>
    java.util.Set createCollection() -> a
    52:52:java.util.Set createUnmodifiableEmptyCollection() -> p
    57:57:java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> a
    62:62:java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> a
    75:75:java.util.Set get(java.lang.Object) -> get
    86:86:java.util.Set entries() -> entries
    98:98:java.util.Set removeAll(java.lang.Object) -> removeAll
    112:112:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    123:123:java.util.Map asMap() -> asMap
    137:137:boolean put(java.lang.Object,java.lang.Object) -> put
    148:148:boolean equals(java.lang.Object) -> equals
    35:35:java.util.Collection entries() -> entries
    35:35:java.util.Collection get(java.lang.Object) -> get
    35:35:java.util.Collection removeAll(java.lang.Object) -> removeAll
    35:35:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    35:35:java.util.Collection createCollection() -> b
    35:35:java.util.Collection createUnmodifiableEmptyCollection() -> c
com.google.common.collect.AbstractSortedKeySortedSetMultimap -> com.google.common.collect.Y:
    37:38:void <init>(java.util.SortedMap) -> <init>
    42:42:java.util.SortedMap asMap() -> asMap
    47:47:java.util.SortedMap backingMap() -> r
    52:52:java.util.SortedSet keySet() -> keySet
    57:57:java.util.Set createKeySet() -> e
    33:33:java.util.Map asMap() -> asMap
    33:33:java.util.Set keySet() -> keySet
    33:33:java.util.Map backingMap() -> d
com.google.common.collect.AbstractSortedMultiset -> com.google.common.collect.Z:
    java.util.Comparator comparator -> a
    com.google.common.collect.SortedMultiset descendingMultiset -> b
    43:44:void <init>() -> <init>
    46:48:void <init>(java.util.Comparator) -> <init>
    52:52:java.util.NavigableSet elementSet() -> elementSet
    57:57:java.util.NavigableSet createElementSet() -> g
    62:62:java.util.Comparator comparator() -> comparator
    67:68:com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    73:74:com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    79:86:com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    91:98:com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    108:110:com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    java.util.Iterator descendingEntryIterator() -> e
    116:116:java.util.Iterator descendingIterator() -> f
    123:124:com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    145:145:com.google.common.collect.SortedMultiset createDescendingMultiset() -> h
    36:36:java.util.Set createElementSet() -> d
    36:36:java.util.Set elementSet() -> elementSet
    36:36:java.util.SortedSet elementSet() -> elementSet
com.google.common.collect.AbstractSortedMultiset$1DescendingMultisetImpl -> com.google.common.collect.aa:
    com.google.common.collect.AbstractSortedMultiset this$0 -> a
    129:129:void <init>(com.google.common.collect.AbstractSortedMultiset) -> <init>
    132:132:com.google.common.collect.SortedMultiset forwardMultiset() -> a
    137:137:java.util.Iterator entryIterator() -> b
    142:142:java.util.Iterator iterator() -> iterator
com.google.common.collect.AbstractSortedSetMultimap -> com.google.common.collect.ab:
    long serialVersionUID -> serialVersionUID
    44:45:void <init>(java.util.Map) -> <init>
    java.util.SortedSet createCollection() -> q
    52:52:java.util.SortedSet createUnmodifiableEmptyCollection() -> r
    57:60:java.util.SortedSet unmodifiableCollectionSubclass(java.util.Collection) -> c
    66:69:java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> a
    87:87:java.util.SortedSet get(java.lang.Object) -> get
    100:100:java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    116:116:java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    133:133:java.util.Map asMap() -> asMap
    144:144:java.util.Collection values() -> values
    35:35:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    35:35:java.util.Set removeAll(java.lang.Object) -> removeAll
    35:35:java.util.Set get(java.lang.Object) -> get
    35:35:java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> a
    35:35:java.util.Set createUnmodifiableEmptyCollection() -> p
    35:35:java.util.Set createCollection() -> a
    35:35:java.util.Collection get(java.lang.Object) -> get
    35:35:java.util.Collection removeAll(java.lang.Object) -> removeAll
    35:35:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    35:35:java.util.Collection createCollection() -> b
    35:35:java.util.Collection createUnmodifiableEmptyCollection() -> c
com.google.common.collect.AbstractTable -> com.google.common.collect.ac:
    java.util.Set cellSet -> a
    java.util.Collection values -> b
    37:37:void <init>() -> <init>
    41:41:boolean containsRow(java.lang.Object) -> containsRow
    46:46:boolean containsColumn(java.lang.Object) -> containsColumn
    51:51:java.util.Set rowKeySet() -> rowKeySet
    56:56:java.util.Set columnKeySet() -> columnKeySet
    61:66:boolean containsValue(java.lang.Object) -> containsValue
    71:72:boolean contains(java.lang.Object,java.lang.Object) -> contains
    77:78:java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    83:83:boolean isEmpty() -> isEmpty
    88:89:void clear() -> clear
    94:95:java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    101:101:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    106:109:void putAll(com.google.common.collect.Table) -> putAll
    115:116:java.util.Set cellSet() -> cellSet
    120:120:java.util.Set createCellSet() -> a
    java.util.Iterator cellIterator() -> b
    java.util.Spliterator cellSpliterator() -> c
    178:179:java.util.Collection values() -> values
    183:183:java.util.Collection createValues() -> d
    187:187:java.util.Iterator valuesIterator() -> e
    196:196:java.util.Spliterator valuesSpliterator() -> f
    229:229:boolean equals(java.lang.Object) -> equals
    234:234:int hashCode() -> hashCode
    240:240:java.lang.String toString() -> toString
com.google.common.collect.AbstractTable$1 -> com.google.common.collect.ad:
    187:187:void <init>(com.google.common.collect.AbstractTable,java.util.Iterator) -> <init>
    190:190:java.lang.Object transform(com.google.common.collect.Table$Cell) -> a
    187:187:java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.AbstractTable$CellSet -> com.google.common.collect.ae:
    com.google.common.collect.AbstractTable this$0 -> a
    128:128:void <init>(com.google.common.collect.AbstractTable) -> <init>
    131:138:boolean contains(java.lang.Object) -> contains
    143:150:boolean remove(java.lang.Object) -> remove
    155:156:void clear() -> clear
    160:160:java.util.Iterator iterator() -> iterator
    165:165:java.util.Spliterator spliterator() -> spliterator
    170:170:int size() -> size
com.google.common.collect.AbstractTable$Values -> com.google.common.collect.af:
    com.google.common.collect.AbstractTable this$0 -> a
    200:200:void <init>(com.google.common.collect.AbstractTable) -> <init>
    203:203:java.util.Iterator iterator() -> iterator
    208:208:java.util.Spliterator spliterator() -> spliterator
    213:213:boolean contains(java.lang.Object) -> contains
    218:219:void clear() -> clear
    223:223:int size() -> size
com.google.common.collect.AllEqualOrdering -> com.google.common.collect.ag:
    com.google.common.collect.AllEqualOrdering INSTANCE -> a
    long serialVersionUID -> serialVersionUID
    30:30:void <init>() -> <init>
    35:35:int compare(java.lang.Object,java.lang.Object) -> compare
    40:40:java.util.List sortedCopy(java.lang.Iterable) -> sortedCopy
    45:45:com.google.common.collect.ImmutableList immutableSortedCopy(java.lang.Iterable) -> immutableSortedCopy
    51:51:com.google.common.collect.Ordering reverse() -> reverse
    55:55:java.lang.Object readResolve() -> readResolve
    60:60:java.lang.String toString() -> toString
    31:31:void <clinit>() -> <clinit>
com.google.common.collect.ArrayListMultimap -> com.google.common.collect.ArrayListMultimap:
    int expectedValuesPerKey -> a
    long serialVersionUID -> serialVersionUID
    76:76:com.google.common.collect.ArrayListMultimap create() -> create
    92:92:com.google.common.collect.ArrayListMultimap create(int,int) -> create
    104:104:com.google.common.collect.ArrayListMultimap create(com.google.common.collect.Multimap) -> create
    108:109:void <init>() -> <init>
    112:115:void <init>(int,int) -> <init>
    118:124:void <init>(com.google.common.collect.Multimap) -> <init>
    131:131:java.util.List createCollection() -> a
    143:147:void trimToSize() -> trimToSize
    155:157:void writeObject(java.io.ObjectOutputStream) -> writeObject
    161:167:void readObject(java.io.ObjectInputStream) -> readObject
    61:61:boolean equals(java.lang.Object) -> equals
    61:61:java.util.Map asMap() -> asMap
    61:61:boolean put(java.lang.Object,java.lang.Object) -> put
    61:61:java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    61:61:java.util.List removeAll(java.lang.Object) -> removeAll
    61:61:java.util.List get(java.lang.Object) -> get
    61:61:void forEach(java.util.function.BiConsumer) -> forEach
    61:61:java.util.Collection entries() -> entries
    61:61:java.util.Collection values() -> values
    61:61:void clear() -> clear
    61:61:boolean containsKey(java.lang.Object) -> containsKey
    61:61:int size() -> size
    61:61:java.util.Collection createCollection() -> b
    61:61:java.lang.String toString() -> toString
    61:61:int hashCode() -> hashCode
    61:61:com.google.common.collect.Multiset keys() -> keys
    61:61:java.util.Set keySet() -> keySet
    61:61:boolean putAll(com.google.common.collect.Multimap) -> putAll
    61:61:boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    61:61:boolean remove(java.lang.Object,java.lang.Object) -> remove
    61:61:boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    61:61:boolean containsValue(java.lang.Object) -> containsValue
    61:61:boolean isEmpty() -> isEmpty
com.google.common.collect.ArrayListMultimapGwtSerializationDependencies -> com.google.common.collect.ah:
    36:37:void <init>(java.util.Map) -> <init>
com.google.common.collect.ArrayTable -> com.google.common.collect.ArrayTable:
    com.google.common.collect.ImmutableList rowList -> a
    com.google.common.collect.ImmutableList columnList -> b
    com.google.common.collect.ImmutableMap rowKeyToIndex -> c
    com.google.common.collect.ImmutableMap columnKeyToIndex -> d
    java.lang.Object[][] array -> e
    com.google.common.collect.ArrayTable$ColumnMap columnMap -> f
    com.google.common.collect.ArrayTable$RowMap rowMap -> g
    long serialVersionUID -> serialVersionUID
    95:95:com.google.common.collect.ArrayTable create(java.lang.Iterable,java.lang.Iterable) -> create
    123:123:com.google.common.collect.ArrayTable create(com.google.common.collect.Table) -> create
    136:155:void <init>(java.lang.Iterable,java.lang.Iterable) -> <init>
    158:160:void <init>(com.google.common.collect.Table) -> <init>
    162:173:void <init>(com.google.common.collect.ArrayTable) -> <init>
    285:285:com.google.common.collect.ImmutableList rowKeyList() -> rowKeyList
    293:293:com.google.common.collect.ImmutableList columnKeyList() -> columnKeyList
    310:312:java.lang.Object at(int,int) -> at
    331:335:java.lang.Object set(int,int,java.lang.Object) -> set
    350:354:java.lang.Object[][] toArray(java.lang.Class) -> toArray
    366:366:void clear() -> clear
    371:374:void eraseAll() -> eraseAll
    382:382:boolean contains(java.lang.Object,java.lang.Object) -> contains
    391:391:boolean containsColumn(java.lang.Object) -> containsColumn
    400:400:boolean containsRow(java.lang.Object) -> containsRow
    405:412:boolean containsValue(java.lang.Object) -> containsValue
    417:419:java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    427:427:boolean isEmpty() -> isEmpty
    439:445:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    465:466:void putAll(com.google.common.collect.Table) -> putAll
    478:478:java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    496:501:java.lang.Object erase(java.lang.Object,java.lang.Object) -> erase
    508:508:int size() -> size
    524:524:java.util.Set cellSet() -> cellSet
    529:529:java.util.Iterator cellIterator() -> b
    539:540:java.util.Spliterator cellSpliterator() -> c
    544:544:com.google.common.collect.Table$Cell getCell(int) -> a
    566:568:java.lang.Object getValue(int) -> b
    584:586:java.util.Map column(java.lang.Object) -> column
    621:621:com.google.common.collect.ImmutableSet columnKeySet() -> columnKeySet
    628:629:java.util.Map columnMap() -> columnMap
    672:674:java.util.Map row(java.lang.Object) -> row
    709:709:com.google.common.collect.ImmutableSet rowKeySet() -> rowKeySet
    716:717:java.util.Map rowMap() -> rowMap
    758:758:java.util.Collection values() -> values
    763:763:java.util.Iterator valuesIterator() -> e
    773:773:java.util.Spliterator valuesSpliterator() -> f
    80:80:java.lang.String toString() -> toString
    80:80:int hashCode() -> hashCode
    80:80:boolean equals(java.lang.Object) -> equals
    80:80:java.util.Set columnKeySet() -> columnKeySet
    80:80:java.util.Set rowKeySet() -> rowKeySet
    82:82:com.google.common.collect.Table$Cell access$000(com.google.common.collect.ArrayTable,int) -> a
    82:82:com.google.common.collect.ImmutableList access$100(com.google.common.collect.ArrayTable) -> a
    82:82:com.google.common.collect.ImmutableList access$200(com.google.common.collect.ArrayTable) -> b
    82:82:com.google.common.collect.ImmutableMap access$300(com.google.common.collect.ArrayTable) -> c
    82:82:com.google.common.collect.ImmutableMap access$600(com.google.common.collect.ArrayTable) -> d
    82:82:java.lang.Object access$800(com.google.common.collect.ArrayTable,int) -> b
com.google.common.collect.ArrayTable$1 -> com.google.common.collect.ai:
    com.google.common.collect.ArrayTable this$0 -> a
    529:529:void <init>(com.google.common.collect.ArrayTable,int) -> <init>
    532:532:com.google.common.collect.Table$Cell get(int) -> b
    529:529:java.lang.Object get(int) -> a
com.google.common.collect.ArrayTable$2 -> com.google.common.collect.aj:
    int rowIndex -> a
    int columnIndex -> b
    int val$index -> c
    com.google.common.collect.ArrayTable this$0 -> d
    544:546:void <init>(com.google.common.collect.ArrayTable,int) -> <init>
    550:550:java.lang.Object getRowKey() -> getRowKey
    555:555:java.lang.Object getColumnKey() -> getColumnKey
    560:560:java.lang.Object getValue() -> getValue
com.google.common.collect.ArrayTable$3 -> com.google.common.collect.ak:
    com.google.common.collect.ArrayTable this$0 -> a
    763:763:void <init>(com.google.common.collect.ArrayTable,int) -> <init>
    766:766:java.lang.Object get(int) -> a
com.google.common.collect.ArrayTable$ArrayMap -> com.google.common.collect.al:
    com.google.common.collect.ImmutableMap keyIndex -> a
    178:180:void <init>(com.google.common.collect.ImmutableMap) -> <init>
    184:184:java.util.Set keySet() -> keySet
    188:188:java.lang.Object getKey(int) -> a
    java.lang.String getKeyRole() -> a
    java.lang.Object getValue(int) -> b
    java.lang.Object setValue(int,java.lang.Object) -> a
    199:199:int size() -> size
    204:204:boolean isEmpty() -> isEmpty
    208:209:java.util.Map$Entry getEntry(int) -> c
    229:229:java.util.Iterator entryIterator() -> b
    239:239:java.util.Spliterator entrySpliterator() -> c
    246:246:boolean containsKey(java.lang.Object) -> containsKey
    251:255:java.lang.Object get(java.lang.Object) -> get
    261:266:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    271:271:java.lang.Object remove(java.lang.Object) -> remove
    276:276:void clear() -> clear
    175:175:void <init>(com.google.common.collect.ImmutableMap,byte) -> <init>
com.google.common.collect.ArrayTable$ArrayMap$1 -> com.google.common.collect.am:
    int val$index -> a
    com.google.common.collect.ArrayTable$ArrayMap this$0 -> b
    209:209:void <init>(com.google.common.collect.ArrayTable$ArrayMap,int) -> <init>
    212:212:java.lang.Object getKey() -> getKey
    217:217:java.lang.Object getValue() -> getValue
    222:222:java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.ArrayTable$ArrayMap$2 -> com.google.common.collect.an:
    com.google.common.collect.ArrayTable$ArrayMap this$0 -> a
    229:229:void <init>(com.google.common.collect.ArrayTable$ArrayMap,int) -> <init>
    232:232:java.util.Map$Entry get(int) -> b
    229:229:java.lang.Object get(int) -> a
com.google.common.collect.ArrayTable$Column -> com.google.common.collect.ao:
    int columnIndex -> a
    com.google.common.collect.ArrayTable this$0 -> b
    592:595:void <init>(com.google.common.collect.ArrayTable,int) -> <init>
    599:599:java.lang.String getKeyRole() -> a
    604:604:java.lang.Object getValue(int) -> b
    609:609:java.lang.Object setValue(int,java.lang.Object) -> a
com.google.common.collect.ArrayTable$ColumnMap -> com.google.common.collect.ap:
    com.google.common.collect.ArrayTable this$0 -> a
    634:636:void <init>(com.google.common.collect.ArrayTable) -> <init>
    640:640:java.lang.String getKeyRole() -> a
    645:645:java.util.Map getValue(int) -> d
    650:650:java.util.Map setValue$3e17ce74() -> d
    655:655:java.util.Map put$66fece89() -> e
    632:632:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    632:632:java.lang.Object setValue(int,java.lang.Object) -> a
    632:632:java.lang.Object getValue(int) -> b
    633:633:void <init>(com.google.common.collect.ArrayTable,byte) -> <init>
com.google.common.collect.ArrayTable$Row -> com.google.common.collect.aq:
    int rowIndex -> a
    com.google.common.collect.ArrayTable this$0 -> b
    680:683:void <init>(com.google.common.collect.ArrayTable,int) -> <init>
    687:687:java.lang.String getKeyRole() -> a
    692:692:java.lang.Object getValue(int) -> b
    697:697:java.lang.Object setValue(int,java.lang.Object) -> a
com.google.common.collect.ArrayTable$RowMap -> com.google.common.collect.ar:
    com.google.common.collect.ArrayTable this$0 -> a
    722:724:void <init>(com.google.common.collect.ArrayTable) -> <init>
    728:728:java.lang.String getKeyRole() -> a
    733:733:java.util.Map getValue(int) -> d
    738:738:java.util.Map setValue$3e17ce74() -> d
    743:743:java.util.Map put$66fece89() -> e
    720:720:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    720:720:java.lang.Object setValue(int,java.lang.Object) -> a
    720:720:java.lang.Object getValue(int) -> b
    721:721:void <init>(com.google.common.collect.ArrayTable,byte) -> <init>
com.google.common.collect.BaseImmutableMultimap -> com.google.common.collect.as:
    25:25:void <init>() -> <init>
com.google.common.collect.BiMap -> com.google.common.collect.BiMap:
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    void putAll(java.util.Map) -> putAll
    java.util.Set values() -> values
    com.google.common.collect.BiMap inverse() -> inverse
    36:36:java.util.Collection values() -> values
com.google.common.collect.BoundType -> com.google.common.collect.BoundType:
    com.google.common.collect.BoundType OPEN -> OPEN
    com.google.common.collect.BoundType CLOSED -> CLOSED
    com.google.common.collect.BoundType[] $VALUES -> a
    26:26:com.google.common.collect.BoundType[] values() -> values
    26:26:com.google.common.collect.BoundType valueOf(java.lang.String) -> valueOf
    34:36:void <init>(java.lang.String,int,boolean) -> <init>
    40:40:com.google.common.collect.BoundType forBoolean(boolean) -> a
    26:30:void <clinit>() -> <clinit>
com.google.common.collect.ByFunctionOrdering -> com.google.common.collect.at:
    com.google.common.base.Function function -> a
    com.google.common.collect.Ordering ordering -> b
    long serialVersionUID -> serialVersionUID
    36:39:void <init>(com.google.common.base.Function,com.google.common.collect.Ordering) -> <init>
    43:43:int compare(java.lang.Object,java.lang.Object) -> compare
    48:55:boolean equals(java.lang.Object) -> equals
    60:60:int hashCode() -> hashCode
    65:65:java.lang.String toString() -> toString
com.google.common.collect.CartesianList -> com.google.common.collect.au:
    com.google.common.collect.ImmutableList axes -> a
    int[] axesSizeProduct -> b
    39:47:java.util.List create(java.util.List) -> a
    50:63:void <init>(com.google.common.collect.ImmutableList) -> <init>
    66:66:int getAxisIndexForProductIndex(int,int) -> a
    71:88:int indexOf(java.lang.Object) -> indexOf
    93:94:com.google.common.collect.ImmutableList get(int) -> a
    117:117:int size() -> size
    122:122:boolean contains(java.lang.Object) -> contains
    32:32:java.lang.Object get(int) -> get
    33:33:com.google.common.collect.ImmutableList access$000(com.google.common.collect.CartesianList) -> a
    33:33:int access$100(com.google.common.collect.CartesianList,int,int) -> a
com.google.common.collect.CartesianList$1 -> com.google.common.collect.av:
    int val$index -> a
    com.google.common.collect.CartesianList this$0 -> b
    94:94:void <init>(com.google.common.collect.CartesianList,int) -> <init>
    98:98:int size() -> size
    103:105:java.lang.Object get(int) -> get
    110:110:boolean isPartialView() -> a
com.google.common.collect.ClassToInstanceMap -> com.google.common.collect.ClassToInstanceMap:
    java.lang.Object getInstance(java.lang.Class) -> getInstance
    java.lang.Object putInstance(java.lang.Class,java.lang.Object) -> putInstance
com.google.common.collect.CollectCollectors -> com.google.common.collect.aw:
    java.util.stream.Collector TO_IMMUTABLE_LIST -> a
    java.util.stream.Collector TO_IMMUTABLE_SET -> b
    java.util.stream.Collector TO_IMMUTABLE_RANGE_SET -> c
    33:35:java.util.stream.Collector toImmutableBiMap(java.util.function.Function,java.util.function.Function) -> a
    51:51:java.util.stream.Collector toImmutableList() -> a
    57:59:java.util.stream.Collector toImmutableMap(java.util.function.Function,java.util.function.Function) -> b
    74:74:java.util.stream.Collector toImmutableSet() -> b
    81:88:java.util.stream.Collector toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function) -> a
    98:99:java.util.stream.Collector toImmutableSortedSet(java.util.Comparator) -> a
    118:118:java.util.stream.Collector toImmutableRangeSet() -> c
    126:128:java.util.stream.Collector toImmutableRangeMap(java.util.function.Function,java.util.function.Function) -> c
    130:130:void lambda$toImmutableRangeMap$5(java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableRangeMap$Builder,java.lang.Object) -> a
    100:100:com.google.common.collect.ImmutableSortedSet$Builder lambda$toImmutableSortedSet$4(java.util.Comparator) -> b
    90:90:void lambda$toImmutableSortedMap$3(java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableSortedMap$Builder,java.lang.Object) -> a
    89:89:com.google.common.collect.ImmutableSortedMap$Builder lambda$toImmutableSortedMap$2(java.util.Comparator) -> c
    61:61:void lambda$toImmutableMap$1(java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableMap$Builder,java.lang.Object) -> a
    37:37:void lambda$toImmutableBiMap$0(java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableBiMap$Builder,java.lang.Object) -> a
    43:109:void <clinit>() -> <clinit>
com.google.common.collect.CollectSpliterators -> com.google.common.collect.ax:
    42:42:java.util.Spliterator indexed(int,int,java.util.function.IntFunction) -> a
    50:98:java.util.Spliterator indexed(int,int,java.util.function.IntFunction,java.util.Comparator) -> a
    108:110:java.util.Spliterator map(java.util.Spliterator,java.util.function.Function) -> a
    144:194:java.util.Spliterator filter(java.util.Spliterator,java.util.function.Predicate) -> a
    206:214:java.util.Spliterator flatMap(java.util.Spliterator,java.util.function.Function,int,long) -> a
    228:236:java.util.Spliterator$OfInt flatMapToInt(java.util.Spliterator,java.util.function.Function,int,long) -> b
    250:258:java.util.Spliterator$OfLong flatMapToLong(java.util.Spliterator,java.util.function.Function,int,long) -> c
    272:280:java.util.Spliterator$OfDouble flatMapToDouble(java.util.Spliterator,java.util.function.Function,int,long) -> d
com.google.common.collect.CollectSpliterators$1 -> com.google.common.collect.ay:
    java.util.Spliterator val$fromSpliterator -> a
    java.util.function.Function val$function -> b
    110:110:void <init>(java.util.Spliterator,java.util.function.Function) -> <init>
    114:114:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    120:121:void forEachRemaining(java.util.function.Consumer) -> forEachRemaining
    125:126:java.util.Spliterator trySplit() -> trySplit
    131:131:long estimateSize() -> estimateSize
    136:136:int characteristics() -> characteristics
    120:120:void lambda$forEachRemaining$1(java.util.function.Consumer,java.util.function.Function,java.lang.Object) -> a
    115:115:void lambda$tryAdvance$0(java.util.function.Consumer,java.util.function.Function,java.lang.Object) -> b
com.google.common.collect.CollectSpliterators$1Splitr -> com.google.common.collect.az:
    java.lang.Object holder -> a
    java.util.Spliterator val$fromSpliterator -> b
    java.util.function.Predicate val$predicate -> c
    146:147:void <init>(java.util.Spliterator,java.util.function.Predicate) -> <init>
    151:152:void accept(java.lang.Object) -> accept
    156:166:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    171:172:java.util.Spliterator trySplit() -> trySplit
    177:177:long estimateSize() -> estimateSize
    182:182:java.util.Comparator getComparator() -> getComparator
    187:187:int characteristics() -> characteristics
com.google.common.collect.CollectSpliterators$1WithCharacteristics -> com.google.common.collect.aA:
    java.util.Spliterator$OfInt delegate -> a
    java.util.function.IntFunction val$function -> b
    int val$extraCharacteristics -> c
    java.util.Comparator val$comparator -> d
    56:58:void <init>(java.util.Spliterator$OfInt,java.util.function.IntFunction,int,java.util.Comparator) -> <init>
    62:62:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    67:68:void forEachRemaining(java.util.function.Consumer) -> forEachRemaining
    72:73:java.util.Spliterator trySplit() -> trySplit
    78:78:long estimateSize() -> estimateSize
    83:83:int characteristics() -> characteristics
    91:94:java.util.Comparator getComparator() -> getComparator
    67:67:void lambda$forEachRemaining$1(java.util.function.Consumer,java.util.function.IntFunction,int) -> a
    62:62:void lambda$tryAdvance$0(java.util.function.Consumer,java.util.function.IntFunction,int) -> b
com.google.common.collect.CollectSpliterators$FlatMapSpliterator -> com.google.common.collect.aB:
    java.util.Spliterator prefix -> a
    java.util.Spliterator from -> b
    java.util.function.Function function -> c
    com.google.common.collect.CollectSpliterators$FlatMapSpliterator$Factory factory -> e
    int characteristics -> f
    long estimatedSize -> d
    318:325:void <init>(java.util.Spliterator,java.util.Spliterator,java.util.function.Function,com.google.common.collect.CollectSpliterators$FlatMapSpliterator$Factory,int,long) -> <init>
    337:346:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    353:365:void forEachRemaining(java.util.function.Consumer) -> forEachRemaining
    369:388:java.util.Spliterator trySplit() -> trySplit
    394:397:long estimateSize() -> estimateSize
    402:402:int characteristics() -> characteristics
    359:363:void lambda$forEachRemaining$1(java.util.function.Consumer,java.lang.Object) -> a
    345:345:void lambda$tryAdvance$0(java.lang.Object) -> a
com.google.common.collect.CollectSpliterators$FlatMapSpliterator$Factory -> com.google.common.collect.aC:
    java.util.Spliterator newFlatMapSpliterator(java.util.Spliterator,java.util.Spliterator,java.util.function.Function,int,long) -> newFlatMapSpliterator
com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfDouble -> com.google.common.collect.aD:
    530:532:void <init>(java.util.Spliterator$OfDouble,java.util.Spliterator,java.util.function.Function,int,long) -> <init>
    520:520:void forEachRemaining(java.util.function.DoubleConsumer) -> forEachRemaining
    520:520:boolean tryAdvance(java.util.function.DoubleConsumer) -> tryAdvance
    520:520:java.util.Spliterator$OfDouble trySplit() -> trySplit
com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfInt -> com.google.common.collect.aE:
    501:502:void <init>(java.util.Spliterator$OfInt,java.util.Spliterator,java.util.function.Function,int,long) -> <init>
    492:492:void forEachRemaining(java.util.function.IntConsumer) -> forEachRemaining
    492:492:boolean tryAdvance(java.util.function.IntConsumer) -> tryAdvance
    492:492:java.util.Spliterator$OfInt trySplit() -> trySplit
com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfLong -> com.google.common.collect.aF:
    515:516:void <init>(java.util.Spliterator$OfLong,java.util.Spliterator,java.util.function.Function,int,long) -> <init>
    506:506:void forEachRemaining(java.util.function.LongConsumer) -> forEachRemaining
    506:506:boolean tryAdvance(java.util.function.LongConsumer) -> tryAdvance
    506:506:java.util.Spliterator$OfLong trySplit() -> trySplit
com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfObject -> com.google.common.collect.aG:
    425:427:void <init>(java.util.Spliterator,java.util.Spliterator,java.util.function.Function,int,long) -> <init>
com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive -> com.google.common.collect.aH:
    454:455:void <init>(java.util.Spliterator$OfPrimitive,java.util.Spliterator,java.util.function.Function,com.google.common.collect.CollectSpliterators$FlatMapSpliterator$Factory,int,long) -> <init>
    460:469:boolean tryAdvance(java.lang.Object) -> tryAdvance
    476:488:void forEachRemaining(java.lang.Object) -> forEachRemaining
    438:438:java.util.Spliterator$OfPrimitive trySplit() -> trySplit
    482:486:void lambda$forEachRemaining$1(java.lang.Object,java.lang.Object) -> a
    468:468:void lambda$tryAdvance$0(java.lang.Object) -> a
com.google.common.collect.Collections2 -> com.google.common.collect.Collections2:
    57:57:void <init>() -> <init>
    87:93:java.util.Collection filter(java.util.Collection,com.google.common.base.Predicate) -> filter
    101:105:boolean safeContains(java.util.Collection,java.lang.Object) -> a
    114:118:boolean safeRemove(java.util.Collection,java.lang.Object) -> b
    261:261:java.util.Collection transform(java.util.Collection,com.google.common.base.Function) -> transform
    323:328:boolean containsAllImpl(java.util.Collection,java.util.Collection) -> a
    333:346:java.lang.String toStringImpl(java.util.Collection) -> a
    351:352:java.lang.StringBuilder newStringBuilderForCollection(int) -> a
    357:357:java.util.Collection cast(java.lang.Iterable) -> a
    385:385:java.util.Collection orderedPermutations(java.lang.Iterable) -> orderedPermutations
    437:437:java.util.Collection orderedPermutations(java.lang.Iterable,java.util.Comparator) -> orderedPermutations
    582:582:java.util.Collection permutations(java.util.Collection) -> permutations
    687:692:boolean isPermutation(java.util.List,java.util.List) -> b
    56:56:boolean access$000(java.util.List,java.util.List) -> a
com.google.common.collect.Collections2$FilteredCollection -> com.google.common.collect.aI:
    java.util.Collection unfiltered -> a
    com.google.common.base.Predicate predicate -> b
    126:129:void <init>(java.util.Collection,com.google.common.base.Predicate) -> <init>
    132:132:com.google.common.collect.Collections2$FilteredCollection createCombined(com.google.common.base.Predicate) -> a
    138:139:boolean add(java.lang.Object) -> add
    144:147:boolean addAll(java.util.Collection) -> addAll
    152:153:void clear() -> clear
    157:162:boolean contains(java.lang.Object) -> contains
    167:167:boolean containsAll(java.util.Collection) -> containsAll
    172:172:boolean isEmpty() -> isEmpty
    177:177:java.util.Iterator iterator() -> iterator
    182:182:java.util.Spliterator spliterator() -> spliterator
    187:194:void forEach(java.util.function.Consumer) -> forEach
    198:198:boolean remove(java.lang.Object) -> remove
    203:203:boolean removeAll(java.util.Collection) -> removeAll
    208:208:boolean retainAll(java.util.Collection) -> retainAll
    213:214:boolean removeIf(java.util.function.Predicate) -> removeIf
    219:225:int size() -> size
    231:231:java.lang.Object[] toArray() -> toArray
    236:236:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    214:214:boolean lambda$removeIf$2(java.util.function.Predicate,java.lang.Object) -> a
    208:208:boolean lambda$retainAll$1(java.util.Collection,java.lang.Object) -> a
    190:193:void lambda$forEach$0(java.util.function.Consumer,java.lang.Object) -> a
com.google.common.collect.Collections2$OrderedPermutationCollection -> com.google.common.collect.aJ:
    com.google.common.collect.ImmutableList inputList -> a
    java.util.Comparator comparator -> b
    int size -> c
    445:449:void <init>(java.lang.Iterable,java.util.Comparator) -> <init>
    462:478:int calculateSize(java.util.List,java.util.Comparator) -> a
    483:483:int size() -> size
    488:488:boolean isEmpty() -> isEmpty
    493:493:java.util.Iterator iterator() -> iterator
    498:502:boolean contains(java.lang.Object) -> contains
    507:507:java.lang.String toString() -> toString
com.google.common.collect.Collections2$OrderedPermutationIterator -> com.google.common.collect.aK:
    java.util.List nextPermutation -> a
    java.util.Comparator comparator -> b
    515:518:void <init>(java.util.List,java.util.Comparator) -> <init>
    522:527:java.util.List computeNext() -> a
    531:541:void calculateNextPermutation() -> b
    544:549:int findNextJ() -> c
    553:559:int findNextL(int) -> a
    511:511:java.lang.Object computeNext() -> computeNext
com.google.common.collect.Collections2$PermutationCollection -> com.google.common.collect.aL:
    com.google.common.collect.ImmutableList inputList -> a
    588:590:void <init>(com.google.common.collect.ImmutableList) -> <init>
    594:594:int size() -> size
    599:599:boolean isEmpty() -> isEmpty
    604:604:java.util.Iterator iterator() -> iterator
    609:613:boolean contains(java.lang.Object) -> contains
    618:618:java.lang.String toString() -> toString
com.google.common.collect.Collections2$PermutationIterator -> com.google.common.collect.aM:
    java.util.List list -> a
    int[] c -> b
    int[] o -> c
    int j -> d
    628:636:void <init>(java.util.List) -> <init>
    640:645:java.util.List computeNext() -> a
    649:677:void calculateNextPermutation() -> b
    680:682:void switchDirection() -> c
    622:622:java.lang.Object computeNext() -> computeNext
com.google.common.collect.Collections2$TransformedCollection -> com.google.common.collect.aN:
    java.util.Collection fromCollection -> a
    com.google.common.base.Function function -> b
    268:271:void <init>(java.util.Collection,com.google.common.base.Function) -> <init>
    275:276:void clear() -> clear
    280:280:boolean isEmpty() -> isEmpty
    285:285:java.util.Iterator iterator() -> iterator
    290:290:java.util.Spliterator spliterator() -> spliterator
    295:297:void forEach(java.util.function.Consumer) -> forEach
    301:302:boolean removeIf(java.util.function.Predicate) -> removeIf
    307:307:int size() -> size
    302:302:boolean lambda$removeIf$1(java.util.function.Predicate,java.lang.Object) -> a
    296:296:void lambda$forEach$0(java.util.function.Consumer,java.lang.Object) -> a
com.google.common.collect.ComparatorOrdering -> com.google.common.collect.aO:
    java.util.Comparator comparator -> a
    long serialVersionUID -> serialVersionUID
    31:33:void <init>(java.util.Comparator) -> <init>
    37:37:int compare(java.lang.Object,java.lang.Object) -> compare
    42:49:boolean equals(java.lang.Object) -> equals
    54:54:int hashCode() -> hashCode
    59:59:java.lang.String toString() -> toString
com.google.common.collect.Comparators -> com.google.common.collect.Comparators:
    47:47:void <init>() -> <init>
    65:65:java.util.Comparator lexicographical(java.util.Comparator) -> lexicographical
    75:87:boolean isInOrder(java.lang.Iterable,java.util.Comparator) -> isInOrder
    98:110:boolean isInStrictOrder(java.lang.Iterable,java.util.Comparator) -> isInStrictOrder
    134:136:java.util.stream.Collector least(int,java.util.Comparator) -> least
    165:165:java.util.stream.Collector greatest(int,java.util.Comparator) -> greatest
    177:178:java.util.Comparator emptiesFirst(java.util.Comparator) -> emptiesFirst
    190:191:java.util.Comparator emptiesLast(java.util.Comparator) -> emptiesLast
    191:191:java.lang.Object lambda$emptiesLast$2(java.util.Optional) -> a
    178:178:java.lang.Object lambda$emptiesFirst$1(java.util.Optional) -> b
    137:137:com.google.common.collect.TopKSelector lambda$least$0(int,java.util.Comparator) -> a
com.google.common.collect.ComparisonChain -> com.google.common.collect.ComparisonChain:
    com.google.common.collect.ComparisonChain ACTIVE -> a
    com.google.common.collect.ComparisonChain LESS -> b
    com.google.common.collect.ComparisonChain GREATER -> c
    61:61:void <init>() -> <init>
    65:65:com.google.common.collect.ComparisonChain start() -> start
    com.google.common.collect.ComparisonChain compare(java.lang.Comparable,java.lang.Comparable) -> compare
    com.google.common.collect.ComparisonChain compare(java.lang.Object,java.lang.Object,java.util.Comparator) -> compare
    com.google.common.collect.ComparisonChain compare(int,int) -> compare
    com.google.common.collect.ComparisonChain compare(long,long) -> compare
    com.google.common.collect.ComparisonChain compare(float,float) -> compare
    com.google.common.collect.ComparisonChain compare(double,double) -> compare
    226:226:com.google.common.collect.ComparisonChain compare(java.lang.Boolean,java.lang.Boolean) -> compare
    com.google.common.collect.ComparisonChain compareTrueFirst(boolean,boolean) -> compareTrueFirst
    com.google.common.collect.ComparisonChain compareFalseFirst(boolean,boolean) -> compareFalseFirst
    int result() -> result
    60:60:void <init>(byte) -> <init>
    60:60:com.google.common.collect.ComparisonChain access$100() -> a
    60:60:com.google.common.collect.ComparisonChain access$200() -> b
    60:60:com.google.common.collect.ComparisonChain access$300() -> c
    68:124:void <clinit>() -> <clinit>
com.google.common.collect.ComparisonChain$1 -> com.google.common.collect.aP:
    69:69:void <init>() -> <init>
    73:73:com.google.common.collect.ComparisonChain compare(java.lang.Comparable,java.lang.Comparable) -> compare
    79:79:com.google.common.collect.ComparisonChain compare(java.lang.Object,java.lang.Object,java.util.Comparator) -> compare
    84:84:com.google.common.collect.ComparisonChain compare(int,int) -> compare
    89:89:com.google.common.collect.ComparisonChain compare(long,long) -> compare
    94:94:com.google.common.collect.ComparisonChain compare(float,float) -> compare
    99:99:com.google.common.collect.ComparisonChain compare(double,double) -> compare
    104:104:com.google.common.collect.ComparisonChain compareTrueFirst(boolean,boolean) -> compareTrueFirst
    109:109:com.google.common.collect.ComparisonChain compareFalseFirst(boolean,boolean) -> compareFalseFirst
    113:113:com.google.common.collect.ComparisonChain classify(int) -> a
    118:118:int result() -> result
com.google.common.collect.ComparisonChain$InactiveComparisonChain -> com.google.common.collect.aQ:
    int result -> a
    129:131:void <init>(int) -> <init>
    135:135:com.google.common.collect.ComparisonChain compare(java.lang.Comparable,java.lang.Comparable) -> compare
    141:141:com.google.common.collect.ComparisonChain compare(java.lang.Object,java.lang.Object,java.util.Comparator) -> compare
    146:146:com.google.common.collect.ComparisonChain compare(int,int) -> compare
    151:151:com.google.common.collect.ComparisonChain compare(long,long) -> compare
    156:156:com.google.common.collect.ComparisonChain compare(float,float) -> compare
    161:161:com.google.common.collect.ComparisonChain compare(double,double) -> compare
    166:166:com.google.common.collect.ComparisonChain compareTrueFirst(boolean,boolean) -> compareTrueFirst
    171:171:com.google.common.collect.ComparisonChain compareFalseFirst(boolean,boolean) -> compareFalseFirst
    176:176:int result() -> result
com.google.common.collect.CompoundOrdering -> com.google.common.collect.aR:
    java.util.Comparator[] comparators -> a
    long serialVersionUID -> serialVersionUID
    29:31:void <init>(java.util.Comparator,java.util.Comparator) -> <init>
    33:35:void <init>(java.lang.Iterable) -> <init>
    39:45:int compare(java.lang.Object,java.lang.Object) -> compare
    50:57:boolean equals(java.lang.Object) -> equals
    62:62:int hashCode() -> hashCode
    67:67:java.lang.String toString() -> toString
com.google.common.collect.ComputationException -> com.google.common.collect.ComputationException:
    long serialVersionUID -> serialVersionUID
    40:41:void <init>(java.lang.Throwable) -> <init>
com.google.common.collect.ConcurrentHashMultiset -> com.google.common.collect.ConcurrentHashMultiset:
    java.util.concurrent.ConcurrentMap countMap -> a
    long serialVersionUID -> serialVersionUID
    89:89:com.google.common.collect.ConcurrentHashMultiset create() -> create
    101:103:com.google.common.collect.ConcurrentHashMultiset create(java.lang.Iterable) -> create
    122:122:com.google.common.collect.ConcurrentHashMultiset create(java.util.concurrent.ConcurrentMap) -> create
    126:129:void <init>(java.util.concurrent.ConcurrentMap) -> <init>
    141:142:int count(java.lang.Object) -> count
    153:157:int size() -> size
    167:167:java.lang.Object[] toArray() -> toArray
    172:172:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    180:187:java.util.List snapshot() -> e
    204:247:int add(java.lang.Object,int) -> add
    271:295:int remove(java.lang.Object,int) -> remove
    312:335:boolean removeExactly(java.lang.Object,int) -> removeExactly
    348:388:int setCount(java.lang.Object,int) -> setCount
    404:442:boolean setCount(java.lang.Object,int,int) -> setCount
    449:450:java.util.Set createElementSet() -> d
    480:480:java.util.Iterator elementIterator() -> a
    487:487:java.util.Set createEntrySet() -> createEntrySet
    492:492:int distinctElements() -> c
    497:497:boolean isEmpty() -> isEmpty
    504:524:java.util.Iterator entryIterator() -> b
    549:549:java.util.Iterator iterator() -> iterator
    554:555:void clear() -> clear
    589:591:void writeObject(java.io.ObjectOutputStream) -> writeObject
    594:599:void readObject(java.io.ObjectInputStream) -> readObject
    58:58:java.util.Set entrySet() -> entrySet
    58:58:java.util.Set elementSet() -> elementSet
    58:58:boolean contains(java.lang.Object) -> contains
    59:59:java.util.concurrent.ConcurrentMap access$100(com.google.common.collect.ConcurrentHashMultiset) -> a
com.google.common.collect.ConcurrentHashMultiset$1 -> com.google.common.collect.aS:
    java.util.Set val$delegate -> a
    450:450:void <init>(com.google.common.collect.ConcurrentHashMultiset,java.util.Set) -> <init>
    453:453:java.util.Set delegate() -> delegate
    458:458:boolean contains(java.lang.Object) -> contains
    463:463:boolean containsAll(java.util.Collection) -> containsAll
    468:468:boolean remove(java.lang.Object) -> remove
    473:473:boolean removeAll(java.util.Collection) -> removeAll
    450:450:java.util.Collection delegate() -> delegate
    450:450:java.lang.Object delegate() -> delegate
com.google.common.collect.ConcurrentHashMultiset$2 -> com.google.common.collect.aT:
    java.util.Iterator mapEntries -> a
    com.google.common.collect.ConcurrentHashMultiset this$0 -> b
    505:507:void <init>(com.google.common.collect.ConcurrentHashMultiset) -> <init>
    512:520:com.google.common.collect.Multiset$Entry computeNext() -> a
    505:505:java.lang.Object computeNext() -> computeNext
com.google.common.collect.ConcurrentHashMultiset$3 -> com.google.common.collect.aU:
    com.google.common.collect.Multiset$Entry last -> a
    java.util.Iterator val$readOnlyIterator -> b
    com.google.common.collect.ConcurrentHashMultiset this$0 -> c
    524:524:void <init>(com.google.common.collect.ConcurrentHashMultiset,java.util.Iterator) -> <init>
    529:529:java.util.Iterator delegate() -> delegate
    534:535:com.google.common.collect.Multiset$Entry next() -> a
    540:543:void remove() -> remove
    524:524:java.lang.Object next() -> next
    524:524:java.lang.Object delegate() -> delegate
com.google.common.collect.ConcurrentHashMultiset$EntrySet -> com.google.common.collect.aV:
    com.google.common.collect.ConcurrentHashMultiset this$0 -> a
    558:558:void <init>(com.google.common.collect.ConcurrentHashMultiset) -> <init>
    561:561:com.google.common.collect.ConcurrentHashMultiset multiset() -> b
    571:571:java.lang.Object[] toArray() -> toArray
    576:576:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    580:583:java.util.List snapshot() -> c
    557:557:com.google.common.collect.Multiset multiset() -> a
    558:558:void <init>(com.google.common.collect.ConcurrentHashMultiset,byte) -> <init>
com.google.common.collect.ConcurrentHashMultiset$FieldSettersHolder -> com.google.common.collect.aW:
    com.google.common.collect.Serialization$FieldSetter COUNT_MAP_FIELD_SETTER -> a
    77:78:void <clinit>() -> <clinit>
com.google.common.collect.ConsumingQueueIterator -> com.google.common.collect.aX:
    java.util.Queue queue -> a
    37:39:void <init>(java.util.Queue) -> <init>
    43:43:java.lang.Object computeNext() -> computeNext
com.google.common.collect.ContiguousSet -> com.google.common.collect.ContiguousSet:
    com.google.common.collect.DiscreteDomain domain -> a
    62:84:com.google.common.collect.ContiguousSet create(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain) -> create
    99:99:com.google.common.collect.ContiguousSet closed(int,int) -> closed
    112:112:com.google.common.collect.ContiguousSet closed(long,long) -> closed
    125:125:com.google.common.collect.ContiguousSet closedOpen(int,int) -> closedOpen
    138:138:com.google.common.collect.ContiguousSet closedOpen(long,long) -> closedOpen
    144:146:void <init>(com.google.common.collect.DiscreteDomain) -> <init>
    150:150:com.google.common.collect.ContiguousSet headSet(java.lang.Comparable) -> headSet
    157:157:com.google.common.collect.ContiguousSet headSet(java.lang.Comparable,boolean) -> headSet
    162:165:com.google.common.collect.ContiguousSet subSet(java.lang.Comparable,java.lang.Comparable) -> subSet
    173:176:com.google.common.collect.ContiguousSet subSet(java.lang.Comparable,boolean,java.lang.Comparable,boolean) -> subSet
    181:181:com.google.common.collect.ContiguousSet tailSet(java.lang.Comparable) -> tailSet
    188:188:com.google.common.collect.ContiguousSet tailSet(java.lang.Comparable,boolean) -> tailSet
    com.google.common.collect.ContiguousSet headSetImpl(java.lang.Comparable,boolean) -> a
    com.google.common.collect.ContiguousSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean) -> a
    com.google.common.collect.ContiguousSet tailSetImpl(java.lang.Comparable,boolean) -> b
    com.google.common.collect.ContiguousSet intersection(com.google.common.collect.ContiguousSet) -> intersection
    com.google.common.collect.Range range() -> range
    com.google.common.collect.Range range(com.google.common.collect.BoundType,com.google.common.collect.BoundType) -> range
    237:237:com.google.common.collect.ImmutableSortedSet createDescendingSet() -> b
    243:243:java.lang.String toString() -> toString
    256:256:com.google.common.collect.ImmutableSortedSet$Builder builder() -> builder
    49:49:com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> a
    49:49:com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> a
    49:49:com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> b
    49:49:com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object,boolean) -> tailSet
    49:49:com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object) -> tailSet
    49:49:com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    49:49:com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    49:49:com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object,boolean) -> headSet
    49:49:com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object) -> headSet
    49:49:java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    49:49:java.util.SortedSet headSet(java.lang.Object) -> headSet
    49:49:java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    49:49:java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    49:49:java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    49:49:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
com.google.common.collect.Count -> com.google.common.collect.aY:
    int value -> a
    30:32:void <init>(int) -> <init>
    35:35:int get() -> a
    39:40:void add(int) -> a
    43:43:int addAndGet(int) -> b
    47:48:void set(int) -> c
    51:53:int getAndSet(int) -> d
    58:58:int hashCode() -> hashCode
    63:63:boolean equals(java.lang.Object) -> equals
    68:68:java.lang.String toString() -> toString
com.google.common.collect.Cut -> com.google.common.collect.aZ:
    java.lang.Comparable endpoint -> a
    long serialVersionUID -> serialVersionUID
    38:40:void <init>(java.lang.Comparable) -> <init>
    boolean isLessThan(java.lang.Comparable) -> a
    com.google.common.collect.BoundType typeAsLowerBound() -> a
    com.google.common.collect.BoundType typeAsUpperBound() -> b
    com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> a
    com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> b
    void describeAsLowerBound(java.lang.StringBuilder) -> a
    void describeAsUpperBound(java.lang.StringBuilder) -> b
    java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> a
    java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> b
    65:65:com.google.common.collect.Cut canonical(com.google.common.collect.DiscreteDomain) -> c
    71:82:int compareTo(com.google.common.collect.Cut) -> a
    86:86:java.lang.Comparable endpoint() -> c
    92:101:boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    114:114:com.google.common.collect.Cut belowAll() -> d
    215:215:com.google.common.collect.Cut aboveAll() -> e
    300:300:com.google.common.collect.Cut belowValue(java.lang.Comparable) -> b
    383:383:com.google.common.collect.Cut aboveValue(java.lang.Comparable) -> c
    34:34:int compareTo(java.lang.Object) -> compareTo
com.google.common.collect.Cut$1 -> com.google.common.collect.ba:
    int[] $SwitchMap$com$google$common$collect$BoundType -> a
    325:325:void <clinit>() -> <clinit>
com.google.common.collect.Cut$AboveAll -> com.google.common.collect.bb:
    com.google.common.collect.Cut$AboveAll INSTANCE -> b
    long serialVersionUID -> serialVersionUID
    222:223:void <init>() -> <init>
    227:227:java.lang.Comparable endpoint() -> c
    232:232:boolean isLessThan(java.lang.Comparable) -> a
    237:237:com.google.common.collect.BoundType typeAsLowerBound() -> a
    242:242:com.google.common.collect.BoundType typeAsUpperBound() -> b
    248:248:com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> a
    254:254:com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> b
    259:259:void describeAsLowerBound(java.lang.StringBuilder) -> a
    264:265:void describeAsUpperBound(java.lang.StringBuilder) -> b
    269:269:java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> a
    274:274:java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> b
    279:279:int compareTo(com.google.common.collect.Cut) -> a
    284:284:int hashCode() -> hashCode
    289:289:java.lang.String toString() -> toString
    293:293:java.lang.Object readResolve() -> readResolve
    218:218:int compareTo(java.lang.Object) -> compareTo
    218:218:com.google.common.collect.Cut$AboveAll access$100() -> f
    219:219:void <clinit>() -> <clinit>
com.google.common.collect.Cut$AboveValue -> com.google.common.collect.bc:
    long serialVersionUID -> serialVersionUID
    388:389:void <init>(java.lang.Comparable) -> <init>
    393:393:boolean isLessThan(java.lang.Comparable) -> a
    398:398:com.google.common.collect.BoundType typeAsLowerBound() -> a
    403:403:com.google.common.collect.BoundType typeAsUpperBound() -> b
    408:415:com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> a
    421:428:com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> b
    434:435:void describeAsLowerBound(java.lang.StringBuilder) -> a
    439:440:void describeAsUpperBound(java.lang.StringBuilder) -> b
    444:444:java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> a
    449:449:java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> b
    454:455:com.google.common.collect.Cut canonical(com.google.common.collect.DiscreteDomain) -> c
    460:460:int hashCode() -> hashCode
    465:465:java.lang.String toString() -> toString
    386:386:int compareTo(java.lang.Object) -> compareTo
com.google.common.collect.Cut$BelowAll -> com.google.common.collect.bd:
    com.google.common.collect.Cut$BelowAll INSTANCE -> b
    long serialVersionUID -> serialVersionUID
    123:124:void <init>() -> <init>
    128:128:java.lang.Comparable endpoint() -> c
    133:133:boolean isLessThan(java.lang.Comparable) -> a
    138:138:com.google.common.collect.BoundType typeAsLowerBound() -> a
    143:143:com.google.common.collect.BoundType typeAsUpperBound() -> b
    149:149:com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> a
    155:155:com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> b
    160:161:void describeAsLowerBound(java.lang.StringBuilder) -> a
    165:165:void describeAsUpperBound(java.lang.StringBuilder) -> b
    170:170:java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> a
    175:175:java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> b
    181:183:com.google.common.collect.Cut canonical(com.google.common.collect.DiscreteDomain) -> c
    189:189:int compareTo(com.google.common.collect.Cut) -> a
    194:194:int hashCode() -> hashCode
    199:199:java.lang.String toString() -> toString
    203:203:java.lang.Object readResolve() -> readResolve
    119:119:int compareTo(java.lang.Object) -> compareTo
    119:119:com.google.common.collect.Cut$BelowAll access$000() -> f
    120:120:void <clinit>() -> <clinit>
com.google.common.collect.Cut$BelowValue -> com.google.common.collect.be:
    long serialVersionUID -> serialVersionUID
    305:306:void <init>(java.lang.Comparable) -> <init>
    310:310:boolean isLessThan(java.lang.Comparable) -> a
    315:315:com.google.common.collect.BoundType typeAsLowerBound() -> a
    320:320:com.google.common.collect.BoundType typeAsUpperBound() -> b
    325:332:com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> a
    338:345:com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> b
    351:352:void describeAsLowerBound(java.lang.StringBuilder) -> a
    356:357:void describeAsUpperBound(java.lang.StringBuilder) -> b
    361:361:java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> a
    366:366:java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> b
    371:371:int hashCode() -> hashCode
    376:376:java.lang.String toString() -> toString
    303:303:int compareTo(java.lang.Object) -> compareTo
com.google.common.collect.DenseImmutableTable -> com.google.common.collect.bf:
    com.google.common.collect.ImmutableMap rowKeyToIndex -> a
    com.google.common.collect.ImmutableMap columnKeyToIndex -> b
    com.google.common.collect.ImmutableMap rowMap -> c
    com.google.common.collect.ImmutableMap columnMap -> d
    int[] rowCounts -> e
    int[] columnCounts -> f
    java.lang.Object[][] values -> g
    int[] cellRowIndices -> h
    int[] cellColumnIndices -> i
    53:81:void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet) -> <init>
    235:236:com.google.common.collect.ImmutableMap columnMap() -> columnMap
    242:243:com.google.common.collect.ImmutableMap rowMap() -> rowMap
    248:250:java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    255:255:int size() -> size
    260:265:com.google.common.collect.Table$Cell getCell(int) -> a
    270:270:java.lang.Object getValue(int) -> b
    275:275:com.google.common.collect.ImmutableTable$SerializedForm createSerializedForm() -> g
    25:25:java.util.Map columnMap() -> columnMap
    25:25:java.util.Map rowMap() -> rowMap
    27:27:int[] access$200(com.google.common.collect.DenseImmutableTable) -> a
    27:27:com.google.common.collect.ImmutableMap access$300(com.google.common.collect.DenseImmutableTable) -> b
    27:27:java.lang.Object[][] access$400(com.google.common.collect.DenseImmutableTable) -> c
    27:27:int[] access$500(com.google.common.collect.DenseImmutableTable) -> d
    27:27:com.google.common.collect.ImmutableMap access$600(com.google.common.collect.DenseImmutableTable) -> e
com.google.common.collect.DenseImmutableTable$Column -> com.google.common.collect.bg:
    int columnIndex -> b
    com.google.common.collect.DenseImmutableTable this$0 -> c
    167:170:void <init>(com.google.common.collect.DenseImmutableTable,int) -> <init>
    174:174:com.google.common.collect.ImmutableMap keyToIndex() -> b_
    179:179:java.lang.Object getValue(int) -> a
    184:184:boolean isPartialView() -> b
com.google.common.collect.DenseImmutableTable$ColumnMap -> com.google.common.collect.bh:
    com.google.common.collect.DenseImmutableTable this$0 -> b
    212:214:void <init>(com.google.common.collect.DenseImmutableTable) -> <init>
    218:218:com.google.common.collect.ImmutableMap keyToIndex() -> b_
    223:223:com.google.common.collect.ImmutableMap getValue(int) -> c
    228:228:boolean isPartialView() -> b
    210:210:java.lang.Object getValue(int) -> a
    211:211:void <init>(com.google.common.collect.DenseImmutableTable,byte) -> <init>
com.google.common.collect.DenseImmutableTable$ImmutableArrayMap -> com.google.common.collect.bi:
    int size -> b
    87:89:void <init>(int) -> <init>
    com.google.common.collect.ImmutableMap keyToIndex() -> b_
    95:95:boolean isFull() -> i
    99:99:java.lang.Object getKey(int) -> b
    java.lang.Object getValue(int) -> a
    106:106:com.google.common.collect.ImmutableSet createKeySet() -> c
    111:111:int size() -> size
    116:117:java.lang.Object get(java.lang.Object) -> get
    122:122:com.google.common.collect.UnmodifiableIterator entryIterator() -> d
com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1 -> com.google.common.collect.bj:
    int index -> a
    int maxIndex -> b
    com.google.common.collect.DenseImmutableTable$ImmutableArrayMap this$0 -> c
    122:124:void <init>(com.google.common.collect.DenseImmutableTable$ImmutableArrayMap) -> <init>
    128:134:java.util.Map$Entry computeNext() -> a
    122:122:java.lang.Object computeNext() -> computeNext
com.google.common.collect.DenseImmutableTable$Row -> com.google.common.collect.bk:
    int rowIndex -> b
    com.google.common.collect.DenseImmutableTable this$0 -> c
    143:146:void <init>(com.google.common.collect.DenseImmutableTable,int) -> <init>
    150:150:com.google.common.collect.ImmutableMap keyToIndex() -> b_
    155:155:java.lang.Object getValue(int) -> a
    160:160:boolean isPartialView() -> b
com.google.common.collect.DenseImmutableTable$RowMap -> com.google.common.collect.bl:
    com.google.common.collect.DenseImmutableTable this$0 -> b
    190:192:void <init>(com.google.common.collect.DenseImmutableTable) -> <init>
    196:196:com.google.common.collect.ImmutableMap keyToIndex() -> b_
    201:201:com.google.common.collect.ImmutableMap getValue(int) -> c
    206:206:boolean isPartialView() -> b
    188:188:java.lang.Object getValue(int) -> a
    189:189:void <init>(com.google.common.collect.DenseImmutableTable,byte) -> <init>
com.google.common.collect.DescendingImmutableSortedMultiset -> com.google.common.collect.bm:
    com.google.common.collect.ImmutableSortedMultiset forward -> a
    30:32:void <init>(com.google.common.collect.ImmutableSortedMultiset) -> <init>
    36:36:int count(java.lang.Object) -> count
    41:41:com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    46:46:com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    51:51:int size() -> size
    56:56:com.google.common.collect.ImmutableSortedSet elementSet() -> elementSet
    61:61:com.google.common.collect.Multiset$Entry getEntry(int) -> a
    66:66:com.google.common.collect.ImmutableSortedMultiset descendingMultiset() -> descendingMultiset
    71:71:com.google.common.collect.ImmutableSortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    76:76:com.google.common.collect.ImmutableSortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    81:81:boolean isPartialView() -> a
    25:25:com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    25:25:com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    25:25:com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    25:25:java.util.NavigableSet elementSet() -> elementSet
    25:25:java.util.SortedSet elementSet() -> elementSet
    25:25:java.util.Set elementSet() -> elementSet
    25:25:com.google.common.collect.ImmutableSet elementSet() -> elementSet
com.google.common.collect.DescendingImmutableSortedSet -> com.google.common.collect.bn:
    com.google.common.collect.ImmutableSortedSet forward -> a
    32:34:void <init>(com.google.common.collect.ImmutableSortedSet) -> <init>
    38:38:boolean contains(java.lang.Object) -> contains
    43:43:int size() -> size
    48:48:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    53:53:com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> b
    59:59:com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> a
    64:64:com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> a
    70:70:com.google.common.collect.ImmutableSortedSet descendingSet() -> descendingSet
    76:76:com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    82:82:com.google.common.collect.ImmutableSortedSet createDescendingSet() -> b
    87:87:java.lang.Object lower(java.lang.Object) -> lower
    92:92:java.lang.Object floor(java.lang.Object) -> floor
    97:97:java.lang.Object ceiling(java.lang.Object) -> ceiling
    102:102:java.lang.Object higher(java.lang.Object) -> higher
    107:111:int indexOf(java.lang.Object) -> a
    117:117:boolean isPartialView() -> a
    27:27:java.util.Iterator descendingIterator() -> descendingIterator
    27:27:java.util.NavigableSet descendingSet() -> descendingSet
    27:27:java.util.Iterator iterator() -> iterator
com.google.common.collect.DescendingMultiset -> com.google.common.collect.bo:
    java.util.Comparator comparator -> a
    java.util.NavigableSet elementSet -> b
    java.util.Set entrySet -> c
    34:34:void <init>() -> <init>
    com.google.common.collect.SortedMultiset forwardMultiset() -> a
    41:45:java.util.Comparator comparator() -> comparator
    52:56:java.util.NavigableSet elementSet() -> elementSet
    61:61:com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    66:66:com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    71:71:com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    77:79:com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    84:84:com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    89:89:com.google.common.collect.Multiset delegate() -> delegate
    94:94:com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    99:99:com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    104:104:com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    java.util.Iterator entryIterator() -> b
    113:114:java.util.Set entrySet() -> entrySet
    135:135:java.util.Set createEntrySet() -> c
    140:140:java.util.Iterator iterator() -> iterator
    145:145:java.lang.Object[] toArray() -> toArray
    150:150:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    155:155:java.lang.String toString() -> toString
    33:33:java.util.Set elementSet() -> elementSet
    33:33:java.util.Collection delegate() -> delegate
    33:33:java.lang.Object delegate() -> delegate
    33:33:java.util.SortedSet elementSet() -> elementSet
com.google.common.collect.DescendingMultiset$1EntrySetImpl -> com.google.common.collect.bp:
    com.google.common.collect.DescendingMultiset this$0 -> a
    119:119:void <init>(com.google.common.collect.DescendingMultiset) -> <init>
    122:122:com.google.common.collect.Multiset multiset() -> a
    127:127:java.util.Iterator iterator() -> iterator
    132:132:int size() -> size
com.google.common.collect.DiscreteDomain -> com.google.common.collect.DiscreteDomain:
    boolean supportsFastOffset -> a
    54:54:com.google.common.collect.DiscreteDomain integers() -> integers
    115:115:com.google.common.collect.DiscreteDomain longs() -> longs
    187:187:com.google.common.collect.DiscreteDomain bigIntegers() -> bigIntegers
    238:239:void <init>() -> <init>
    242:244:void <init>(boolean) -> <init>
    251:255:java.lang.Comparable offset(java.lang.Comparable,long) -> a
    java.lang.Comparable next(java.lang.Comparable) -> next
    java.lang.Comparable previous(java.lang.Comparable) -> previous
    long distance(java.lang.Comparable,java.lang.Comparable) -> distance
    304:304:java.lang.Comparable minValue() -> minValue
    320:320:java.lang.Comparable maxValue() -> maxValue
    46:46:void <init>(boolean,byte) -> <init>
com.google.common.collect.DiscreteDomain$BigIntegerDomain -> com.google.common.collect.bq:
    com.google.common.collect.DiscreteDomain$BigIntegerDomain INSTANCE -> b
    java.math.BigInteger MIN_LONG -> c
    java.math.BigInteger MAX_LONG -> d
    long serialVersionUID -> serialVersionUID
    195:196:void <init>() -> <init>
    203:203:java.math.BigInteger next(java.math.BigInteger) -> a
    208:208:java.math.BigInteger previous(java.math.BigInteger) -> b
    213:214:java.math.BigInteger offset(java.math.BigInteger,long) -> a
    219:219:long distance(java.math.BigInteger,java.math.BigInteger) -> a
    223:223:java.lang.Object readResolve() -> readResolve
    228:228:java.lang.String toString() -> toString
    190:190:long distance(java.lang.Comparable,java.lang.Comparable) -> distance
    190:190:java.lang.Comparable previous(java.lang.Comparable) -> previous
    190:190:java.lang.Comparable next(java.lang.Comparable) -> next
    190:190:java.lang.Comparable offset(java.lang.Comparable,long) -> a
    190:190:com.google.common.collect.DiscreteDomain$BigIntegerDomain access$300() -> a
    192:199:void <clinit>() -> <clinit>
com.google.common.collect.DiscreteDomain$IntegerDomain -> com.google.common.collect.br:
    com.google.common.collect.DiscreteDomain$IntegerDomain INSTANCE -> b
    long serialVersionUID -> serialVersionUID
    61:62:void <init>() -> <init>
    66:67:java.lang.Integer next(java.lang.Integer) -> a
    72:73:java.lang.Integer previous(java.lang.Integer) -> b
    78:79:java.lang.Integer offset(java.lang.Integer,long) -> a
    84:84:long distance(java.lang.Integer,java.lang.Integer) -> a
    89:89:java.lang.Integer minValue() -> b
    94:94:java.lang.Integer maxValue() -> c
    98:98:java.lang.Object readResolve() -> readResolve
    103:103:java.lang.String toString() -> toString
    57:57:java.lang.Comparable maxValue() -> maxValue
    57:57:java.lang.Comparable minValue() -> minValue
    57:57:long distance(java.lang.Comparable,java.lang.Comparable) -> distance
    57:57:java.lang.Comparable previous(java.lang.Comparable) -> previous
    57:57:java.lang.Comparable next(java.lang.Comparable) -> next
    57:57:java.lang.Comparable offset(java.lang.Comparable,long) -> a
    57:57:com.google.common.collect.DiscreteDomain$IntegerDomain access$000() -> a
    58:58:void <clinit>() -> <clinit>
com.google.common.collect.DiscreteDomain$LongDomain -> com.google.common.collect.bs:
    com.google.common.collect.DiscreteDomain$LongDomain INSTANCE -> b
    long serialVersionUID -> serialVersionUID
    122:123:void <init>() -> <init>
    127:128:java.lang.Long next(java.lang.Long) -> a
    133:134:java.lang.Long previous(java.lang.Long) -> b
    139:144:java.lang.Long offset(java.lang.Long,long) -> a
    149:156:long distance(java.lang.Long,java.lang.Long) -> a
    161:161:java.lang.Long minValue() -> b
    166:166:java.lang.Long maxValue() -> c
    170:170:java.lang.Object readResolve() -> readResolve
    175:175:java.lang.String toString() -> toString
    118:118:java.lang.Comparable maxValue() -> maxValue
    118:118:java.lang.Comparable minValue() -> minValue
    118:118:long distance(java.lang.Comparable,java.lang.Comparable) -> distance
    118:118:java.lang.Comparable previous(java.lang.Comparable) -> previous
    118:118:java.lang.Comparable next(java.lang.Comparable) -> next
    118:118:java.lang.Comparable offset(java.lang.Comparable,long) -> a
    118:118:com.google.common.collect.DiscreteDomain$LongDomain access$200() -> a
    119:119:void <clinit>() -> <clinit>
com.google.common.collect.EmptyContiguousSet -> com.google.common.collect.bt:
    32:33:void <init>(com.google.common.collect.DiscreteDomain) -> <init>
    37:37:java.lang.Comparable first() -> h
    42:42:java.lang.Comparable last() -> i
    47:47:int size() -> size
    52:52:com.google.common.collect.ContiguousSet intersection(com.google.common.collect.ContiguousSet) -> intersection
    57:57:com.google.common.collect.Range range() -> range
    62:62:com.google.common.collect.Range range(com.google.common.collect.BoundType,com.google.common.collect.BoundType) -> range
    67:67:com.google.common.collect.ContiguousSet headSetImpl(java.lang.Comparable,boolean) -> a
    73:73:com.google.common.collect.ContiguousSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean) -> a
    78:78:com.google.common.collect.ContiguousSet tailSetImpl(java.lang.Comparable,boolean) -> b
    83:83:boolean contains(java.lang.Object) -> contains
    89:89:int indexOf(java.lang.Object) -> a
    94:94:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    100:100:com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    105:105:boolean isPartialView() -> a
    110:110:boolean isEmpty() -> isEmpty
    115:115:com.google.common.collect.ImmutableList asList() -> asList
    120:120:java.lang.String toString() -> toString
    125:129:boolean equals(java.lang.Object) -> equals
    135:135:boolean isHashCodeFast() -> c
    140:140:int hashCode() -> hashCode
    161:161:java.lang.Object writeReplace() -> writeReplace
    167:167:com.google.common.collect.ImmutableSortedSet createDescendingSet() -> b
    28:28:java.lang.Object last() -> last
    28:28:java.lang.Object first() -> first
    28:28:com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> a
    28:28:com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> a
    28:28:com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> b
    28:28:java.util.Iterator descendingIterator() -> descendingIterator
    28:28:java.util.Iterator iterator() -> iterator
com.google.common.collect.EmptyContiguousSet$SerializedForm -> com.google.common.collect.bu:
    com.google.common.collect.DiscreteDomain domain -> a
    long serialVersionUID -> serialVersionUID
    147:149:void <init>(com.google.common.collect.DiscreteDomain) -> <init>
    152:152:java.lang.Object readResolve() -> readResolve
    144:144:void <init>(com.google.common.collect.DiscreteDomain,byte) -> <init>
com.google.common.collect.EmptyImmutableListMultimap -> com.google.common.collect.bv:
    com.google.common.collect.EmptyImmutableListMultimap INSTANCE -> a
    long serialVersionUID -> serialVersionUID
    31:32:void <init>() -> <init>
    35:35:java.lang.Object readResolve() -> readResolve
    28:28:void <clinit>() -> <clinit>
com.google.common.collect.EmptyImmutableSetMultimap -> com.google.common.collect.bw:
    com.google.common.collect.EmptyImmutableSetMultimap INSTANCE -> a
    long serialVersionUID -> serialVersionUID
    31:32:void <init>() -> <init>
    35:35:java.lang.Object readResolve() -> readResolve
    28:28:void <clinit>() -> <clinit>
com.google.common.collect.EnumBiMap -> com.google.common.collect.EnumBiMap:
    java.lang.Class keyType -> b
    java.lang.Class valueType -> c
    long serialVersionUID -> serialVersionUID
    53:53:com.google.common.collect.EnumBiMap create(java.lang.Class,java.lang.Class) -> create
    66:68:com.google.common.collect.EnumBiMap create(java.util.Map) -> create
    72:75:void <init>(java.lang.Class,java.lang.Class) -> <init>
    78:85:java.lang.Class inferKeyType(java.util.Map) -> a
    89:93:java.lang.Class inferValueType(java.util.Map) -> b
    98:98:java.lang.Class keyType() -> keyType
    103:103:java.lang.Class valueType() -> valueType
    108:108:java.lang.Enum checkKey(java.lang.Enum) -> a
    113:113:java.lang.Enum checkValue(java.lang.Enum) -> b
    122:126:void writeObject(java.io.ObjectOutputStream) -> writeObject
    131:136:void readObject(java.io.ObjectInputStream) -> readObject
    40:40:java.util.Set entrySet() -> entrySet
    40:40:java.util.Set values() -> values
    40:40:java.util.Set keySet() -> keySet
    40:40:com.google.common.collect.BiMap inverse() -> inverse
    40:40:void clear() -> clear
    40:40:void replaceAll(java.util.function.BiFunction) -> replaceAll
    40:40:void putAll(java.util.Map) -> putAll
    40:40:boolean containsValue(java.lang.Object) -> containsValue
    40:40:java.lang.Object checkValue(java.lang.Object) -> b
    40:40:java.lang.Object checkKey(java.lang.Object) -> a
com.google.common.collect.EnumHashBiMap -> com.google.common.collect.EnumHashBiMap:
    java.lang.Class keyType -> b
    long serialVersionUID -> serialVersionUID
    53:53:com.google.common.collect.EnumHashBiMap create(java.lang.Class) -> create
    67:69:com.google.common.collect.EnumHashBiMap create(java.util.Map) -> create
    73:77:void <init>(java.lang.Class) -> <init>
    83:83:java.lang.Enum checkKey(java.lang.Enum) -> a
    89:89:java.lang.Object put(java.lang.Enum,java.lang.Object) -> put
    95:95:java.lang.Object forcePut(java.lang.Enum,java.lang.Object) -> forcePut
    100:100:java.lang.Class keyType() -> keyType
    109:112:void writeObject(java.io.ObjectOutputStream) -> writeObject
    117:122:void readObject(java.io.ObjectInputStream) -> readObject
    43:43:java.util.Set entrySet() -> entrySet
    43:43:java.util.Set values() -> values
    43:43:java.util.Set keySet() -> keySet
    43:43:com.google.common.collect.BiMap inverse() -> inverse
    43:43:void clear() -> clear
    43:43:void replaceAll(java.util.function.BiFunction) -> replaceAll
    43:43:void putAll(java.util.Map) -> putAll
    43:43:java.lang.Object remove(java.lang.Object) -> remove
    43:43:java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    43:43:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    43:43:boolean containsValue(java.lang.Object) -> containsValue
    43:43:java.lang.Object checkKey(java.lang.Object) -> a
com.google.common.collect.EnumMultiset -> com.google.common.collect.EnumMultiset:
    java.lang.Class type -> a
    java.lang.Enum[] enumConstants -> b
    int[] counts -> c
    int distinctElements -> d
    long size -> e
    long serialVersionUID -> serialVersionUID
    52:52:com.google.common.collect.EnumMultiset create(java.lang.Class) -> create
    64:68:com.google.common.collect.EnumMultiset create(java.lang.Iterable) -> create
    78:80:com.google.common.collect.EnumMultiset create(java.lang.Iterable,java.lang.Class) -> create
    90:95:void <init>(java.lang.Class) -> <init>
    98:103:boolean isActuallyE(java.lang.Object) -> a
    111:115:void checkIsE(java.lang.Object) -> b
    119:119:int distinctElements() -> c
    124:124:int size() -> size
    129:133:int count(java.lang.Object) -> count
    140:154:int add(java.lang.Enum,int) -> add
    161:181:int remove(java.lang.Object,int) -> remove
    188:199:int setCount(java.lang.Enum,int) -> setCount
    204:207:void clear() -> clear
    250:250:java.util.Iterator elementIterator() -> a
    260:260:java.util.Iterator entryIterator() -> b
    280:286:void forEachEntry(java.util.function.ObjIntConsumer) -> forEachEntry
    290:290:java.util.Iterator iterator() -> iterator
    295:298:void writeObject(java.io.ObjectOutputStream) -> writeObject
    306:313:void readObject(java.io.ObjectInputStream) -> readObject
    47:47:java.util.Set entrySet() -> entrySet
    47:47:java.util.Set elementSet() -> elementSet
    47:47:int setCount(java.lang.Object,int) -> setCount
    47:47:int add(java.lang.Object,int) -> add
    47:47:boolean contains(java.lang.Object) -> contains
    47:47:boolean isEmpty() -> isEmpty
    48:48:java.lang.Enum[] access$000(com.google.common.collect.EnumMultiset) -> a
    48:48:int[] access$100(com.google.common.collect.EnumMultiset) -> b
    48:48:int access$210(com.google.common.collect.EnumMultiset) -> c
    48:48:long access$300(com.google.common.collect.EnumMultiset) -> d
    48:48:long access$302(com.google.common.collect.EnumMultiset,long) -> a
com.google.common.collect.EnumMultiset$1 -> com.google.common.collect.bx:
    com.google.common.collect.EnumMultiset this$0 -> a
    250:250:void <init>(com.google.common.collect.EnumMultiset) -> <init>
    253:253:java.lang.Enum output(int) -> b
    250:250:java.lang.Object output(int) -> a
com.google.common.collect.EnumMultiset$2 -> com.google.common.collect.by:
    com.google.common.collect.EnumMultiset this$0 -> a
    260:260:void <init>(com.google.common.collect.EnumMultiset) -> <init>
    263:263:com.google.common.collect.Multiset$Entry output(int) -> b
    260:260:java.lang.Object output(int) -> a
com.google.common.collect.EnumMultiset$2$1 -> com.google.common.collect.bz:
    int val$index -> a
    com.google.common.collect.EnumMultiset$2 this$1 -> b
    263:263:void <init>(com.google.common.collect.EnumMultiset$2,int) -> <init>
    266:266:java.lang.Enum getElement() -> a
    271:271:int getCount() -> getCount
    263:263:java.lang.Object getElement() -> getElement
com.google.common.collect.EnumMultiset$Itr -> com.google.common.collect.bA:
    int index -> a
    int toRemove -> b
    com.google.common.collect.EnumMultiset this$0 -> c
    209:211:void <init>(com.google.common.collect.EnumMultiset) -> <init>
    java.lang.Object output(int) -> a
    217:222:boolean hasNext() -> hasNext
    227:233:java.lang.Object next() -> next
    238:245:void remove() -> remove
com.google.common.collect.EvictingQueue -> com.google.common.collect.EvictingQueue:
    java.util.Queue delegate -> a
    int maxSize -> b
    long serialVersionUID -> serialVersionUID
    54:58:void <init>(int) -> <init>
    67:67:com.google.common.collect.EvictingQueue create(int) -> create
    77:77:int remainingCapacity() -> remainingCapacity
    82:82:java.util.Queue delegate() -> delegate
    94:94:boolean offer(java.lang.Object) -> offer
    106:114:boolean add(java.lang.Object) -> add
    120:125:boolean addAll(java.util.Collection) -> addAll
    130:130:boolean contains(java.lang.Object) -> contains
    136:136:boolean remove(java.lang.Object) -> remove
    46:46:java.util.Collection delegate() -> delegate
    46:46:java.lang.Object delegate() -> delegate
com.google.common.collect.ExplicitOrdering -> com.google.common.collect.bB:
    com.google.common.collect.ImmutableMap rankMap -> a
    long serialVersionUID -> serialVersionUID
    30:31:void <init>(java.util.List) -> <init>
    33:35:void <init>(com.google.common.collect.ImmutableMap) -> <init>
    39:39:int compare(java.lang.Object,java.lang.Object) -> compare
    43:47:int rank(java.lang.Object) -> a
    52:56:boolean equals(java.lang.Object) -> equals
    61:61:int hashCode() -> hashCode
    66:66:java.lang.String toString() -> toString
com.google.common.collect.FilteredEntryMultimap -> com.google.common.collect.bC:
    com.google.common.collect.Multimap unfiltered -> a
    com.google.common.base.Predicate predicate -> b
    49:52:void <init>(com.google.common.collect.Multimap,com.google.common.base.Predicate) -> <init>
    56:56:com.google.common.collect.Multimap unfiltered() -> a
    61:61:com.google.common.base.Predicate entryPredicate() -> b
    66:66:int size() -> size
    70:70:boolean satisfies(java.lang.Object,java.lang.Object) -> a
    88:91:java.util.Collection filterCollection(java.util.Collection,com.google.common.base.Predicate) -> a
    97:97:boolean containsKey(java.lang.Object) -> containsKey
    102:102:java.util.Collection removeAll(java.lang.Object) -> removeAll
    107:109:java.util.Collection unmodifiableEmptyCollection() -> c
    114:115:void clear() -> clear
    119:119:java.util.Collection get(java.lang.Object) -> get
    124:124:java.util.Collection createEntries() -> k
    129:129:java.util.Collection createValues() -> g
    134:134:java.util.Iterator entryIterator() -> l
    139:139:java.util.Map createAsMap() -> n
    144:144:java.util.Set createKeySet() -> e
    148:163:boolean removeEntriesIf(com.google.common.base.Predicate) -> a
    339:339:com.google.common.collect.Multiset createKeys() -> j
    45:45:boolean access$000(com.google.common.collect.FilteredEntryMultimap,java.lang.Object,java.lang.Object) -> a
com.google.common.collect.FilteredEntryMultimap$AsMap -> com.google.common.collect.bD:
    com.google.common.collect.FilteredEntryMultimap this$0 -> a
    167:167:void <init>(com.google.common.collect.FilteredEntryMultimap) -> <init>
    170:170:boolean containsKey(java.lang.Object) -> containsKey
    175:176:void clear() -> clear
    180:187:java.util.Collection get(java.lang.Object) -> b
    192:212:java.util.Collection remove(java.lang.Object) -> a
    239:239:java.util.Set createKeySet() -> e
    288:288:java.util.Set createEntrySet() -> a
    333:333:java.util.Collection createValues() -> a_
    166:166:java.lang.Object remove(java.lang.Object) -> remove
    166:166:java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl -> com.google.common.collect.bE:
    com.google.common.collect.FilteredEntryMultimap$AsMap this$1 -> a
    245:245:void <init>(com.google.common.collect.FilteredEntryMultimap$AsMap) -> <init>
    248:248:java.util.Map map() -> a
    253:253:java.util.Iterator iterator() -> iterator
    275:275:boolean removeAll(java.util.Collection) -> removeAll
    280:280:boolean retainAll(java.util.Collection) -> retainAll
    285:285:int size() -> size
com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl$1 -> com.google.common.collect.bF:
    java.util.Iterator backingIterator -> a
    com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl this$2 -> b
    253:255:void <init>(com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl) -> <init>
    259:268:java.util.Map$Entry computeNext() -> a
    253:253:java.lang.Object computeNext() -> computeNext
com.google.common.collect.FilteredEntryMultimap$AsMap$1KeySetImpl -> com.google.common.collect.bG:
    com.google.common.collect.FilteredEntryMultimap$AsMap this$1 -> a
    220:222:void <init>(com.google.common.collect.FilteredEntryMultimap$AsMap) -> <init>
    226:226:boolean removeAll(java.util.Collection) -> removeAll
    231:231:boolean retainAll(java.util.Collection) -> retainAll
    236:236:boolean remove(java.lang.Object) -> remove
com.google.common.collect.FilteredEntryMultimap$AsMap$1ValuesImpl -> com.google.common.collect.bH:
    com.google.common.collect.FilteredEntryMultimap$AsMap this$1 -> a
    295:297:void <init>(com.google.common.collect.FilteredEntryMultimap$AsMap) -> <init>
    301:320:boolean remove(java.lang.Object) -> remove
    325:325:boolean removeAll(java.util.Collection) -> removeAll
    330:330:boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.FilteredEntryMultimap$Keys -> com.google.common.collect.bI:
    com.google.common.collect.FilteredEntryMultimap this$0 -> a
    344:346:void <init>(com.google.common.collect.FilteredEntryMultimap) -> <init>
    350:371:int remove(java.lang.Object,int) -> remove
    376:376:java.util.Set entrySet() -> entrySet
com.google.common.collect.FilteredEntryMultimap$Keys$1 -> com.google.common.collect.bJ:
    com.google.common.collect.FilteredEntryMultimap$Keys this$1 -> a
    376:376:void <init>(com.google.common.collect.FilteredEntryMultimap$Keys) -> <init>
    380:380:com.google.common.collect.Multiset multiset() -> a
    385:385:java.util.Iterator iterator() -> iterator
    390:390:int size() -> size
    394:394:boolean removeEntriesIf(com.google.common.base.Predicate) -> a
    406:406:boolean removeAll(java.util.Collection) -> removeAll
    411:411:boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.FilteredEntryMultimap$Keys$1$1 -> com.google.common.collect.bK:
    com.google.common.base.Predicate val$predicate -> a
    395:395:void <init>(com.google.common.collect.FilteredEntryMultimap$Keys$1,com.google.common.base.Predicate) -> <init>
    398:399:boolean apply(java.util.Map$Entry) -> a
    395:395:boolean apply(java.lang.Object) -> apply
com.google.common.collect.FilteredEntryMultimap$ValuePredicate -> com.google.common.collect.bL:
    java.lang.Object key -> a
    com.google.common.collect.FilteredEntryMultimap this$0 -> b
    76:78:void <init>(com.google.common.collect.FilteredEntryMultimap,java.lang.Object) -> <init>
    82:82:boolean apply(java.lang.Object) -> apply
com.google.common.collect.FilteredEntrySetMultimap -> com.google.common.collect.bM:
    34:35:void <init>(com.google.common.collect.SetMultimap,com.google.common.base.Predicate) -> <init>
    39:39:com.google.common.collect.SetMultimap unfiltered() -> c
    44:44:java.util.Set get(java.lang.Object) -> get
    49:49:java.util.Set removeAll(java.lang.Object) -> removeAll
    54:54:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    59:59:java.util.Set createEntries() -> d
    64:64:java.util.Set entries() -> entries
    29:29:java.util.Collection createEntries() -> k
    29:29:java.util.Collection get(java.lang.Object) -> get
    29:29:java.util.Collection removeAll(java.lang.Object) -> removeAll
    29:29:com.google.common.collect.Multimap unfiltered() -> a
    29:29:java.util.Collection entries() -> entries
    29:29:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.FilteredKeyListMultimap -> com.google.common.collect.bN:
    33:34:void <init>(com.google.common.collect.ListMultimap,com.google.common.base.Predicate) -> <init>
    38:38:com.google.common.collect.ListMultimap unfiltered() -> c
    43:43:java.util.List get(java.lang.Object) -> get
    48:48:java.util.List removeAll(java.lang.Object) -> removeAll
    53:53:java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    29:29:java.util.Collection get(java.lang.Object) -> get
    29:29:java.util.Collection removeAll(java.lang.Object) -> removeAll
    29:29:com.google.common.collect.Multimap unfiltered() -> a
    29:29:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.FilteredKeyMultimap -> com.google.common.collect.bO:
    com.google.common.collect.Multimap unfiltered -> a
    com.google.common.base.Predicate keyPredicate -> b
    43:46:void <init>(com.google.common.collect.Multimap,com.google.common.base.Predicate) -> <init>
    50:50:com.google.common.collect.Multimap unfiltered() -> a
    55:55:com.google.common.base.Predicate entryPredicate() -> b
    60:64:int size() -> size
    69:74:boolean containsKey(java.lang.Object) -> containsKey
    79:79:java.util.Collection removeAll(java.lang.Object) -> removeAll
    83:86:java.util.Collection unmodifiableEmptyCollection() -> c
    92:93:void clear() -> clear
    97:97:java.util.Set createKeySet() -> e
    102:107:java.util.Collection get(java.lang.Object) -> get
    176:176:java.util.Iterator entryIterator() -> l
    181:181:java.util.Collection createEntries() -> k
    208:208:java.util.Collection createValues() -> g
    213:213:java.util.Map createAsMap() -> n
    218:218:com.google.common.collect.Multiset createKeys() -> j
com.google.common.collect.FilteredKeyMultimap$AddRejectingList -> com.google.common.collect.bP:
    java.lang.Object key -> a
    138:140:void <init>(java.lang.Object) -> <init>
    144:145:boolean add(java.lang.Object) -> add
    150:151:void add(int,java.lang.Object) -> add
    156:157:boolean addAll(java.util.Collection) -> addAll
    163:165:boolean addAll(int,java.util.Collection) -> addAll
    170:170:java.util.List delegate() -> delegate
    135:135:java.util.Collection delegate() -> delegate
    135:135:java.lang.Object delegate() -> delegate
com.google.common.collect.FilteredKeyMultimap$AddRejectingSet -> com.google.common.collect.bQ:
    java.lang.Object key -> a
    114:116:void <init>(java.lang.Object) -> <init>
    120:120:boolean add(java.lang.Object) -> add
    125:126:boolean addAll(java.util.Collection) -> addAll
    131:131:java.util.Set delegate() -> delegate
    111:111:java.util.Collection delegate() -> delegate
    111:111:java.lang.Object delegate() -> delegate
com.google.common.collect.FilteredKeyMultimap$Entries -> com.google.common.collect.bR:
    com.google.common.collect.FilteredKeyMultimap this$0 -> a
    185:185:void <init>(com.google.common.collect.FilteredKeyMultimap) -> <init>
    188:188:java.util.Collection delegate() -> delegate
    194:202:boolean remove(java.lang.Object) -> remove
    184:184:java.lang.Object delegate() -> delegate
com.google.common.collect.FilteredKeySetMultimap -> com.google.common.collect.bS:
    35:36:void <init>(com.google.common.collect.SetMultimap,com.google.common.base.Predicate) -> <init>
    40:40:com.google.common.collect.SetMultimap unfiltered() -> c
    45:45:java.util.Set get(java.lang.Object) -> get
    50:50:java.util.Set removeAll(java.lang.Object) -> removeAll
    55:55:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    60:60:java.util.Set entries() -> entries
    65:65:java.util.Set createEntries() -> d
    30:30:java.util.Collection createEntries() -> k
    30:30:java.util.Collection get(java.lang.Object) -> get
    30:30:java.util.Collection removeAll(java.lang.Object) -> removeAll
    30:30:com.google.common.collect.Multimap unfiltered() -> a
    30:30:java.util.Collection entries() -> entries
    30:30:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.FilteredKeySetMultimap$EntrySet -> com.google.common.collect.bT:
    68:68:void <init>(com.google.common.collect.FilteredKeySetMultimap) -> <init>
    71:71:int hashCode() -> hashCode
    76:76:boolean equals(java.lang.Object) -> equals
com.google.common.collect.FilteredMultimap -> com.google.common.collect.bU:
    com.google.common.collect.Multimap unfiltered() -> a
    com.google.common.base.Predicate entryPredicate() -> b
com.google.common.collect.FilteredMultimapValues -> com.google.common.collect.bV:
    com.google.common.collect.FilteredMultimap multimap -> a
    39:41:void <init>(com.google.common.collect.FilteredMultimap) -> <init>
    45:45:java.util.Iterator iterator() -> iterator
    50:50:boolean contains(java.lang.Object) -> contains
    55:55:int size() -> size
    60:69:boolean remove(java.lang.Object) -> remove
    74:78:boolean removeAll(java.util.Collection) -> removeAll
    83:88:boolean retainAll(java.util.Collection) -> retainAll
    93:94:void clear() -> clear
com.google.common.collect.FilteredSetMultimap -> com.google.common.collect.bW:
    com.google.common.collect.SetMultimap unfiltered() -> c
    26:26:com.google.common.collect.Multimap unfiltered() -> a
com.google.common.collect.FluentIterable -> com.google.common.collect.FluentIterable:
    com.google.common.base.Optional iterableDelegate -> a
    118:120:void <init>() -> <init>
    122:125:void <init>(java.lang.Iterable) -> <init>
    128:128:java.lang.Iterable getDelegate() -> a
    139:139:com.google.common.collect.FluentIterable from(java.lang.Iterable) -> from
    161:161:com.google.common.collect.FluentIterable from(java.lang.Object[]) -> from
    174:174:com.google.common.collect.FluentIterable from(com.google.common.collect.FluentIterable) -> from
    191:191:com.google.common.collect.FluentIterable concat(java.lang.Iterable,java.lang.Iterable) -> concat
    210:210:com.google.common.collect.FluentIterable concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable) -> concat
    233:233:com.google.common.collect.FluentIterable concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable) -> concat
    253:253:com.google.common.collect.FluentIterable concat(java.lang.Iterable[]) -> concat
    273:274:com.google.common.collect.FluentIterable concat(java.lang.Iterable) -> concat
    285:288:com.google.common.collect.FluentIterable concatNoDefensiveCopy(java.lang.Iterable[]) -> a
    312:312:com.google.common.collect.FluentIterable of() -> of
    325:325:com.google.common.collect.FluentIterable of(java.lang.Object,java.lang.Object[]) -> of
    337:337:java.lang.String toString() -> toString
    346:346:int size() -> size
    356:356:boolean contains(java.lang.Object) -> contains
    377:377:com.google.common.collect.FluentIterable cycle() -> cycle
    393:393:com.google.common.collect.FluentIterable append(java.lang.Iterable) -> append
    406:406:com.google.common.collect.FluentIterable append(java.lang.Object[]) -> append
    416:416:com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate) -> filter
    434:434:com.google.common.collect.FluentIterable filter(java.lang.Class) -> filter
    443:443:boolean anyMatch(com.google.common.base.Predicate) -> anyMatch
    453:453:boolean allMatch(com.google.common.base.Predicate) -> allMatch
    466:466:com.google.common.base.Optional firstMatch(com.google.common.base.Predicate) -> firstMatch
    480:480:com.google.common.collect.FluentIterable transform(com.google.common.base.Function) -> transform
    498:498:com.google.common.collect.FluentIterable transformAndConcat(com.google.common.base.Function) -> transformAndConcat
    512:513:com.google.common.base.Optional first() -> first
    531:558:com.google.common.base.Optional last() -> last
    579:579:com.google.common.collect.FluentIterable skip(int) -> skip
    594:594:com.google.common.collect.FluentIterable limit(int) -> limit
    603:603:boolean isEmpty() -> isEmpty
    617:617:com.google.common.collect.ImmutableList toList() -> toList
    633:633:com.google.common.collect.ImmutableList toSortedList(java.util.Comparator) -> toSortedList
    647:647:com.google.common.collect.ImmutableSet toSet() -> toSet
    664:664:com.google.common.collect.ImmutableSortedSet toSortedSet(java.util.Comparator) -> toSortedSet
    677:677:com.google.common.collect.ImmutableMultiset toMultiset() -> toMultiset
    697:697:com.google.common.collect.ImmutableMap toMap(com.google.common.base.Function) -> toMap
    719:719:com.google.common.collect.ImmutableListMultimap index(com.google.common.base.Function) -> index
    753:753:com.google.common.collect.ImmutableMap uniqueIndex(com.google.common.base.Function) -> uniqueIndex
    770:770:java.lang.Object[] toArray(java.lang.Class) -> toArray
    786:795:java.util.Collection copyInto(java.util.Collection) -> copyInto
    810:810:java.lang.String join(com.google.common.base.Joiner) -> join
    827:827:java.lang.Object get(int) -> get
    841:841:java.util.stream.Stream stream() -> stream
com.google.common.collect.FluentIterable$1 -> com.google.common.collect.bX:
    java.lang.Iterable val$iterable -> a
    141:141:void <init>(java.lang.Iterable,java.lang.Iterable) -> <init>
    144:144:java.util.Iterator iterator() -> iterator
com.google.common.collect.FluentIterable$2 -> com.google.common.collect.bY:
    java.lang.Iterable val$inputs -> a
    274:274:void <init>(java.lang.Iterable) -> <init>
    277:277:java.util.Iterator iterator() -> iterator
com.google.common.collect.FluentIterable$3 -> com.google.common.collect.bZ:
    java.lang.Iterable[] val$inputs -> a
    288:288:void <init>(java.lang.Iterable[]) -> <init>
    291:291:java.util.Iterator iterator() -> iterator
com.google.common.collect.FluentIterable$3$1 -> com.google.common.collect.ca:
    com.google.common.collect.FluentIterable$3 this$0 -> a
    293:293:void <init>(com.google.common.collect.FluentIterable$3,int) -> <init>
    296:296:java.util.Iterator get(int) -> b
    293:293:java.lang.Object get(int) -> a
com.google.common.collect.ForwardingBlockingDeque -> com.google.common.collect.ForwardingBlockingDeque:
    53:53:void <init>() -> <init>
    java.util.concurrent.BlockingDeque delegate() -> delegate
    60:60:int remainingCapacity() -> remainingCapacity
    65:66:void putFirst(java.lang.Object) -> putFirst
    70:71:void putLast(java.lang.Object) -> putLast
    75:75:boolean offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offerFirst
    80:80:boolean offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offerLast
    85:85:java.lang.Object takeFirst() -> takeFirst
    90:90:java.lang.Object takeLast() -> takeLast
    95:95:java.lang.Object pollFirst(long,java.util.concurrent.TimeUnit) -> pollFirst
    100:100:java.lang.Object pollLast(long,java.util.concurrent.TimeUnit) -> pollLast
    105:106:void put(java.lang.Object) -> put
    110:110:boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offer
    115:115:java.lang.Object take() -> take
    120:120:java.lang.Object poll(long,java.util.concurrent.TimeUnit) -> poll
    125:125:int drainTo(java.util.Collection) -> drainTo
    130:130:int drainTo(java.util.Collection,int) -> drainTo
    47:47:java.util.Deque delegate() -> delegate
    47:47:java.util.Queue delegate() -> delegate
    47:47:java.util.Collection delegate() -> delegate
    47:47:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingCollection -> com.google.common.collect.ForwardingCollection:
    53:53:void <init>() -> <init>
    java.util.Collection delegate() -> delegate
    60:60:java.util.Iterator iterator() -> iterator
    65:65:int size() -> size
    71:71:boolean removeAll(java.util.Collection) -> removeAll
    76:76:boolean isEmpty() -> isEmpty
    81:81:boolean contains(java.lang.Object) -> contains
    87:87:boolean add(java.lang.Object) -> add
    93:93:boolean remove(java.lang.Object) -> remove
    98:98:boolean containsAll(java.util.Collection) -> containsAll
    104:104:boolean addAll(java.util.Collection) -> addAll
    110:110:boolean retainAll(java.util.Collection) -> retainAll
    115:116:void clear() -> clear
    120:120:java.lang.Object[] toArray() -> toArray
    126:126:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    137:137:boolean standardContains(java.lang.Object) -> standardContains
    148:148:boolean standardContainsAll(java.util.Collection) -> standardContainsAll
    158:158:boolean standardAddAll(java.util.Collection) -> standardAddAll
    169:176:boolean standardRemove(java.lang.Object) -> standardRemove
    187:187:boolean standardRemoveAll(java.util.Collection) -> standardRemoveAll
    198:198:boolean standardRetainAll(java.util.Collection) -> standardRetainAll
    209:210:void standardClear() -> standardClear
    220:220:boolean standardIsEmpty() -> standardIsEmpty
    231:231:java.lang.String standardToString() -> standardToString
    242:243:java.lang.Object[] standardToArray() -> standardToArray
    254:254:java.lang.Object[] standardToArray(java.lang.Object[]) -> standardToArray
    48:48:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingConcurrentMap -> com.google.common.collect.ForwardingConcurrentMap:
    43:43:void <init>() -> <init>
    java.util.concurrent.ConcurrentMap delegate() -> delegate
    51:51:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    57:57:boolean remove(java.lang.Object,java.lang.Object) -> remove
    63:63:java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    69:69:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    38:38:java.util.Map delegate() -> delegate
    38:38:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingDeque -> com.google.common.collect.ForwardingDeque:
    45:45:void <init>() -> <init>
    java.util.Deque delegate() -> delegate
    52:53:void addFirst(java.lang.Object) -> addFirst
    57:58:void addLast(java.lang.Object) -> addLast
    62:62:java.util.Iterator descendingIterator() -> descendingIterator
    67:67:java.lang.Object getFirst() -> getFirst
    72:72:java.lang.Object getLast() -> getLast
    78:78:boolean offerFirst(java.lang.Object) -> offerFirst
    84:84:boolean offerLast(java.lang.Object) -> offerLast
    89:89:java.lang.Object peekFirst() -> peekFirst
    94:94:java.lang.Object peekLast() -> peekLast
    100:100:java.lang.Object pollFirst() -> pollFirst
    106:106:java.lang.Object pollLast() -> pollLast
    112:112:java.lang.Object pop() -> pop
    117:118:void push(java.lang.Object) -> push
    123:123:java.lang.Object removeFirst() -> removeFirst
    129:129:java.lang.Object removeLast() -> removeLast
    135:135:boolean removeFirstOccurrence(java.lang.Object) -> removeFirstOccurrence
    141:141:boolean removeLastOccurrence(java.lang.Object) -> removeLastOccurrence
    41:41:java.util.Queue delegate() -> delegate
    41:41:java.util.Collection delegate() -> delegate
    41:41:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingIterator -> com.google.common.collect.ForwardingIterator:
    42:42:void <init>() -> <init>
    java.util.Iterator delegate() -> delegate
    49:49:boolean hasNext() -> hasNext
    55:55:java.lang.Object next() -> next
    60:61:void remove() -> remove
    38:38:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingList -> com.google.common.collect.ForwardingList:
    58:58:void <init>() -> <init>
    java.util.List delegate() -> delegate
    65:66:void add(int,java.lang.Object) -> add
    71:71:boolean addAll(int,java.util.Collection) -> addAll
    76:76:java.lang.Object get(int) -> get
    81:81:int indexOf(java.lang.Object) -> indexOf
    86:86:int lastIndexOf(java.lang.Object) -> lastIndexOf
    91:91:java.util.ListIterator listIterator() -> listIterator
    96:96:java.util.ListIterator listIterator(int) -> listIterator
    102:102:java.lang.Object remove(int) -> remove
    108:108:java.lang.Object set(int,java.lang.Object) -> set
    113:113:java.util.List subList(int,int) -> subList
    118:118:boolean equals(java.lang.Object) -> equals
    123:123:int hashCode() -> hashCode
    134:135:boolean standardAdd(java.lang.Object) -> standardAdd
    146:146:boolean standardAddAll(int,java.lang.Iterable) -> standardAddAll
    157:157:int standardIndexOf(java.lang.Object) -> standardIndexOf
    168:168:int standardLastIndexOf(java.lang.Object) -> standardLastIndexOf
    179:179:java.util.Iterator standardIterator() -> standardIterator
    190:190:java.util.ListIterator standardListIterator() -> standardListIterator
    203:203:java.util.ListIterator standardListIterator(int) -> standardListIterator
    214:214:java.util.List standardSubList(int,int) -> standardSubList
    226:226:boolean standardEquals(java.lang.Object) -> standardEquals
    238:238:int standardHashCode() -> standardHashCode
    53:53:java.util.Collection delegate() -> delegate
    53:53:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingListIterator -> com.google.common.collect.ForwardingListIterator:
    43:43:void <init>() -> <init>
    java.util.ListIterator delegate() -> delegate
    50:51:void add(java.lang.Object) -> add
    55:55:boolean hasPrevious() -> hasPrevious
    60:60:int nextIndex() -> nextIndex
    66:66:java.lang.Object previous() -> previous
    71:71:int previousIndex() -> previousIndex
    76:77:void set(java.lang.Object) -> set
    38:38:java.util.Iterator delegate() -> delegate
    38:38:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingListMultimap -> com.google.common.collect.ForwardingListMultimap:
    41:41:void <init>() -> <init>
    com.google.common.collect.ListMultimap delegate() -> delegate
    48:48:java.util.List get(java.lang.Object) -> get
    54:54:java.util.List removeAll(java.lang.Object) -> removeAll
    60:60:java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    36:36:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    36:36:java.util.Collection removeAll(java.lang.Object) -> removeAll
    36:36:java.util.Collection get(java.lang.Object) -> get
    36:36:com.google.common.collect.Multimap delegate() -> delegate
    36:36:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMap -> com.google.common.collect.ForwardingMap:
    62:62:void <init>() -> <init>
    java.util.Map delegate() -> delegate
    69:69:int size() -> size
    74:74:boolean isEmpty() -> isEmpty
    80:80:java.lang.Object remove(java.lang.Object) -> remove
    85:86:void clear() -> clear
    90:90:boolean containsKey(java.lang.Object) -> containsKey
    95:95:boolean containsValue(java.lang.Object) -> containsValue
    100:100:java.lang.Object get(java.lang.Object) -> get
    106:106:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    111:112:void putAll(java.util.Map) -> putAll
    116:116:java.util.Set keySet() -> keySet
    121:121:java.util.Collection values() -> values
    126:126:java.util.Set entrySet() -> entrySet
    131:131:boolean equals(java.lang.Object) -> equals
    136:136:int hashCode() -> hashCode
    147:148:void standardPutAll(java.util.Map) -> standardPutAll
    162:171:java.lang.Object standardRemove(java.lang.Object) -> standardRemove
    182:183:void standardClear() -> standardClear
    211:211:boolean standardContainsKey(java.lang.Object) -> standardContainsKey
    239:239:boolean standardContainsValue(java.lang.Object) -> standardContainsValue
    270:270:boolean standardIsEmpty() -> standardIsEmpty
    281:281:boolean standardEquals(java.lang.Object) -> standardEquals
    292:292:int standardHashCode() -> standardHashCode
    303:303:java.lang.String standardToString() -> standardToString
    57:57:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMap$StandardEntrySet -> com.google.common.collect.ForwardingMap$StandardEntrySet:
    254:254:void <init>(com.google.common.collect.ForwardingMap) -> <init>
com.google.common.collect.ForwardingMap$StandardKeySet -> com.google.common.collect.ForwardingMap$StandardKeySet:
    197:199:void <init>(com.google.common.collect.ForwardingMap) -> <init>
com.google.common.collect.ForwardingMap$StandardValues -> com.google.common.collect.ForwardingMap$StandardValues:
    226:228:void <init>(com.google.common.collect.ForwardingMap) -> <init>
com.google.common.collect.ForwardingMapEntry -> com.google.common.collect.ForwardingMapEntry:
    54:54:void <init>() -> <init>
    java.util.Map$Entry delegate() -> delegate
    61:61:java.lang.Object getKey() -> getKey
    66:66:java.lang.Object getValue() -> getValue
    71:71:java.lang.Object setValue(java.lang.Object) -> setValue
    76:76:boolean equals(java.lang.Object) -> equals
    81:81:int hashCode() -> hashCode
    92:97:boolean standardEquals(java.lang.Object) -> standardEquals
    108:110:int standardHashCode() -> standardHashCode
    122:122:java.lang.String standardToString() -> standardToString
    49:49:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMultimap -> com.google.common.collect.ForwardingMultimap:
    43:43:void <init>() -> <init>
    com.google.common.collect.Multimap delegate() -> delegate
    50:50:java.util.Map asMap() -> asMap
    55:56:void clear() -> clear
    60:60:boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    65:65:boolean containsKey(java.lang.Object) -> containsKey
    70:70:boolean containsValue(java.lang.Object) -> containsValue
    75:75:java.util.Collection entries() -> entries
    80:80:java.util.Collection get(java.lang.Object) -> get
    85:85:boolean isEmpty() -> isEmpty
    90:90:com.google.common.collect.Multiset keys() -> keys
    95:95:java.util.Set keySet() -> keySet
    101:101:boolean put(java.lang.Object,java.lang.Object) -> put
    107:107:boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    113:113:boolean putAll(com.google.common.collect.Multimap) -> putAll
    119:119:boolean remove(java.lang.Object,java.lang.Object) -> remove
    125:125:java.util.Collection removeAll(java.lang.Object) -> removeAll
    131:131:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    136:136:int size() -> size
    141:141:java.util.Collection values() -> values
    146:146:boolean equals(java.lang.Object) -> equals
    151:151:int hashCode() -> hashCode
    39:39:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMultiset -> com.google.common.collect.ForwardingMultiset:
    54:54:void <init>() -> <init>
    com.google.common.collect.Multiset delegate() -> delegate
    61:61:int count(java.lang.Object) -> count
    67:67:int add(java.lang.Object,int) -> add
    73:73:int remove(java.lang.Object,int) -> remove
    78:78:java.util.Set elementSet() -> elementSet
    83:83:java.util.Set entrySet() -> entrySet
    88:88:boolean equals(java.lang.Object) -> equals
    93:93:int hashCode() -> hashCode
    99:99:int setCount(java.lang.Object,int) -> setCount
    105:105:boolean setCount(java.lang.Object,int,int) -> setCount
    116:116:boolean standardContains(java.lang.Object) -> standardContains
    128:129:void standardClear() -> standardClear
    140:145:int standardCount(java.lang.Object) -> standardCount
    156:157:boolean standardAdd(java.lang.Object) -> standardAdd
    170:170:boolean standardAddAll(java.util.Collection) -> standardAddAll
    182:182:boolean standardRemove(java.lang.Object) -> standardRemove
    194:194:boolean standardRemoveAll(java.util.Collection) -> standardRemoveAll
    206:206:boolean standardRetainAll(java.util.Collection) -> standardRetainAll
    218:218:int standardSetCount(java.lang.Object,int) -> standardSetCount
    229:229:boolean standardSetCount(java.lang.Object,int,int) -> standardSetCount
    267:267:java.util.Iterator standardIterator() -> standardIterator
    278:278:int standardSize() -> standardSize
    289:289:boolean standardEquals(java.lang.Object) -> standardEquals
    300:300:int standardHashCode() -> standardHashCode
    312:312:java.lang.String standardToString() -> standardToString
    50:50:java.util.Collection delegate() -> delegate
    50:50:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMultiset$StandardElementSet -> com.google.common.collect.ForwardingMultiset$StandardElementSet:
    com.google.common.collect.ForwardingMultiset this$0 -> a
    246:246:void <init>(com.google.common.collect.ForwardingMultiset) -> <init>
    250:250:com.google.common.collect.Multiset multiset() -> a
    255:255:java.util.Iterator iterator() -> iterator
com.google.common.collect.ForwardingNavigableMap -> com.google.common.collect.ForwardingNavigableMap:
    62:62:void <init>() -> <init>
    java.util.NavigableMap delegate() -> delegate
    69:69:java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    78:78:java.util.Map$Entry standardLowerEntry(java.lang.Object) -> standardLowerEntry
    83:83:java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    92:92:java.lang.Object standardLowerKey(java.lang.Object) -> standardLowerKey
    97:97:java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    106:106:java.util.Map$Entry standardFloorEntry(java.lang.Object) -> standardFloorEntry
    111:111:java.lang.Object floorKey(java.lang.Object) -> floorKey
    120:120:java.lang.Object standardFloorKey(java.lang.Object) -> standardFloorKey
    125:125:java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    134:134:java.util.Map$Entry standardCeilingEntry(java.lang.Object) -> standardCeilingEntry
    139:139:java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    148:148:java.lang.Object standardCeilingKey(java.lang.Object) -> standardCeilingKey
    153:153:java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    162:162:java.util.Map$Entry standardHigherEntry(java.lang.Object) -> standardHigherEntry
    167:167:java.lang.Object higherKey(java.lang.Object) -> higherKey
    176:176:java.lang.Object standardHigherKey(java.lang.Object) -> standardHigherKey
    181:181:java.util.Map$Entry firstEntry() -> firstEntry
    190:190:java.util.Map$Entry standardFirstEntry() -> standardFirstEntry
    199:203:java.lang.Object standardFirstKey() -> standardFirstKey
    209:209:java.util.Map$Entry lastEntry() -> lastEntry
    218:218:java.util.Map$Entry standardLastEntry() -> standardLastEntry
    226:230:java.lang.Object standardLastKey() -> standardLastKey
    236:236:java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    245:245:java.util.Map$Entry standardPollFirstEntry() -> standardPollFirstEntry
    250:250:java.util.Map$Entry pollLastEntry() -> pollLastEntry
    259:259:java.util.Map$Entry standardPollLastEntry() -> standardPollLastEntry
    264:264:java.util.NavigableMap descendingMap() -> descendingMap
    329:329:java.util.NavigableSet navigableKeySet() -> navigableKeySet
    350:350:java.util.NavigableSet descendingKeySet() -> descendingKeySet
    362:362:java.util.NavigableSet standardDescendingKeySet() -> standardDescendingKeySet
    372:372:java.util.SortedMap standardSubMap(java.lang.Object,java.lang.Object) -> standardSubMap
    377:377:java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    382:382:java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    387:387:java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    396:396:java.util.SortedMap standardHeadMap(java.lang.Object) -> standardHeadMap
    405:405:java.util.SortedMap standardTailMap(java.lang.Object) -> standardTailMap
    57:57:java.util.SortedMap delegate() -> delegate
    57:57:java.util.Map delegate() -> delegate
    57:57:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap -> com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap:
    com.google.common.collect.ForwardingNavigableMap this$0 -> a
    281:281:void <init>(com.google.common.collect.ForwardingNavigableMap) -> <init>
    285:285:java.util.NavigableMap forward() -> a
    290:291:void replaceAll(java.util.function.BiFunction) -> replaceAll
    295:295:java.util.Iterator entryIterator() -> entryIterator
com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1 -> com.google.common.collect.cb:
    java.util.Map$Entry toRemove -> a
    java.util.Map$Entry nextOrNull -> b
    com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap this$1 -> c
    295:297:void <init>(com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap) -> <init>
    301:301:boolean hasNext() -> hasNext
    306:314:java.util.Map$Entry next() -> a
    319:322:void remove() -> remove
    295:295:java.lang.Object next() -> next
com.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet -> com.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet:
    343:345:void <init>(com.google.common.collect.ForwardingNavigableMap) -> <init>
com.google.common.collect.ForwardingNavigableSet -> com.google.common.collect.ForwardingNavigableSet:
    56:56:void <init>() -> <init>
    java.util.NavigableSet delegate() -> delegate
    63:63:java.lang.Object lower(java.lang.Object) -> lower
    72:72:java.lang.Object standardLower(java.lang.Object) -> standardLower
    77:77:java.lang.Object floor(java.lang.Object) -> floor
    86:86:java.lang.Object standardFloor(java.lang.Object) -> standardFloor
    91:91:java.lang.Object ceiling(java.lang.Object) -> ceiling
    100:100:java.lang.Object standardCeiling(java.lang.Object) -> standardCeiling
    105:105:java.lang.Object higher(java.lang.Object) -> higher
    114:114:java.lang.Object standardHigher(java.lang.Object) -> standardHigher
    119:119:java.lang.Object pollFirst() -> pollFirst
    128:128:java.lang.Object standardPollFirst() -> standardPollFirst
    133:133:java.lang.Object pollLast() -> pollLast
    142:142:java.lang.Object standardPollLast() -> standardPollLast
    146:146:java.lang.Object standardFirst() -> standardFirst
    150:150:java.lang.Object standardLast() -> standardLast
    155:155:java.util.NavigableSet descendingSet() -> descendingSet
    177:177:java.util.Iterator descendingIterator() -> descendingIterator
    183:183:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    194:194:java.util.NavigableSet standardSubSet(java.lang.Object,boolean,java.lang.Object,boolean) -> standardSubSet
    205:205:java.util.SortedSet standardSubSet(java.lang.Object,java.lang.Object) -> standardSubSet
    210:210:java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    219:219:java.util.SortedSet standardHeadSet(java.lang.Object) -> standardHeadSet
    224:224:java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    233:233:java.util.SortedSet standardTailSet(java.lang.Object) -> standardTailSet
    51:51:java.util.SortedSet delegate() -> delegate
    51:51:java.util.Set delegate() -> delegate
    51:51:java.util.Collection delegate() -> delegate
    51:51:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingNavigableSet$StandardDescendingSet -> com.google.common.collect.ForwardingNavigableSet$StandardDescendingSet:
    170:172:void <init>(com.google.common.collect.ForwardingNavigableSet) -> <init>
com.google.common.collect.ForwardingObject -> com.google.common.collect.ForwardingObject:
    50:50:void <init>() -> <init>
    java.lang.Object delegate() -> delegate
    63:63:java.lang.String toString() -> toString
com.google.common.collect.ForwardingQueue -> com.google.common.collect.ForwardingQueue:
    50:50:void <init>() -> <init>
    java.util.Queue delegate() -> delegate
    58:58:boolean offer(java.lang.Object) -> offer
    64:64:java.lang.Object poll() -> poll
    70:70:java.lang.Object remove() -> remove
    75:75:java.lang.Object peek() -> peek
    80:80:java.lang.Object element() -> element
    91:93:boolean standardOffer(java.lang.Object) -> standardOffer
    105:107:java.lang.Object standardPeek() -> standardPeek
    119:121:java.lang.Object standardPoll() -> standardPoll
    46:46:java.util.Collection delegate() -> delegate
    46:46:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingSet -> com.google.common.collect.ForwardingSet:
    53:53:void <init>() -> <init>
    java.util.Set delegate() -> delegate
    60:60:boolean equals(java.lang.Object) -> equals
    65:65:int hashCode() -> hashCode
    77:77:boolean standardRemoveAll(java.util.Collection) -> standardRemoveAll
    88:88:boolean standardEquals(java.lang.Object) -> standardEquals
    98:98:int standardHashCode() -> standardHashCode
    48:48:java.util.Collection delegate() -> delegate
    48:48:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingSetMultimap -> com.google.common.collect.ForwardingSetMultimap:
    38:38:void <init>() -> <init>
    com.google.common.collect.SetMultimap delegate() -> delegate
    46:46:java.util.Set entries() -> entries
    51:51:java.util.Set get(java.lang.Object) -> get
    57:57:java.util.Set removeAll(java.lang.Object) -> removeAll
    63:63:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    37:37:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    37:37:java.util.Collection removeAll(java.lang.Object) -> removeAll
    37:37:java.util.Collection get(java.lang.Object) -> get
    37:37:java.util.Collection entries() -> entries
    37:37:com.google.common.collect.Multimap delegate() -> delegate
    37:37:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingSortedMap -> com.google.common.collect.ForwardingSortedMap:
    59:59:void <init>() -> <init>
    java.util.SortedMap delegate() -> delegate
    66:66:java.util.Comparator comparator() -> comparator
    71:71:java.lang.Object firstKey() -> firstKey
    76:76:java.util.SortedMap headMap(java.lang.Object) -> headMap
    81:81:java.lang.Object lastKey() -> lastKey
    86:86:java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    91:91:java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    112:116:int unsafeCompare(java.lang.Object,java.lang.Object) -> a
    133:137:boolean standardContainsKey(java.lang.Object) -> standardContainsKey
    150:151:java.util.SortedMap standardSubMap(java.lang.Object,java.lang.Object) -> standardSubMap
    53:53:java.util.Map delegate() -> delegate
    53:53:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingSortedMap$StandardKeySet -> com.google.common.collect.ForwardingSortedMap$StandardKeySet:
    104:106:void <init>(com.google.common.collect.ForwardingSortedMap) -> <init>
com.google.common.collect.ForwardingSortedMultiset -> com.google.common.collect.ForwardingSortedMultiset:
    50:50:void <init>() -> <init>
    com.google.common.collect.SortedMultiset delegate() -> delegate
    57:57:java.util.NavigableSet elementSet() -> elementSet
    82:82:java.util.Comparator comparator() -> comparator
    87:87:com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    114:114:com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    124:129:com.google.common.collect.Multiset$Entry standardFirstEntry() -> standardFirstEntry
    134:134:com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    145:150:com.google.common.collect.Multiset$Entry standardLastEntry() -> standardLastEntry
    155:155:com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    165:172:com.google.common.collect.Multiset$Entry standardPollFirstEntry() -> standardPollFirstEntry
    177:177:com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    188:195:com.google.common.collect.Multiset$Entry standardPollLastEntry() -> standardPollLastEntry
    200:200:com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    206:206:com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    219:219:com.google.common.collect.SortedMultiset standardSubMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> standardSubMultiset
    224:224:com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    45:45:java.util.Set elementSet() -> elementSet
    45:45:com.google.common.collect.Multiset delegate() -> delegate
    45:45:java.util.Collection delegate() -> delegate
    45:45:java.lang.Object delegate() -> delegate
    45:45:java.util.SortedSet elementSet() -> elementSet
com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset -> com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset:
    104:104:void <init>(com.google.common.collect.ForwardingSortedMultiset) -> <init>
com.google.common.collect.ForwardingSortedMultiset$StandardElementSet -> com.google.common.collect.ForwardingSortedMultiset$StandardElementSet:
    75:77:void <init>(com.google.common.collect.ForwardingSortedMultiset) -> <init>
com.google.common.collect.ForwardingSortedSet -> com.google.common.collect.ForwardingSortedSet:
    58:58:void <init>() -> <init>
    java.util.SortedSet delegate() -> delegate
    65:65:java.util.Comparator comparator() -> comparator
    70:70:java.lang.Object first() -> first
    75:75:java.util.SortedSet headSet(java.lang.Object) -> headSet
    80:80:java.lang.Object last() -> last
    85:85:java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    90:90:java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    96:99:int unsafeCompare(java.lang.Object,java.lang.Object) -> a
    115:119:boolean standardContains(java.lang.Object) -> standardContains
    136:148:boolean standardRemove(java.lang.Object) -> standardRemove
    160:160:java.util.SortedSet standardSubSet(java.lang.Object,java.lang.Object) -> standardSubSet
    54:54:java.util.Set delegate() -> delegate
    54:54:java.util.Collection delegate() -> delegate
    54:54:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingSortedSetMultimap -> com.google.common.collect.ForwardingSortedSetMultimap:
    41:41:void <init>() -> <init>
    com.google.common.collect.SortedSetMultimap delegate() -> delegate
    48:48:java.util.SortedSet get(java.lang.Object) -> get
    53:53:java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    58:58:java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    63:63:java.util.Comparator valueComparator() -> valueComparator
    36:36:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    36:36:java.util.Set removeAll(java.lang.Object) -> removeAll
    36:36:java.util.Set get(java.lang.Object) -> get
    36:36:com.google.common.collect.SetMultimap delegate() -> delegate
    36:36:java.util.Collection get(java.lang.Object) -> get
    36:36:java.util.Collection removeAll(java.lang.Object) -> removeAll
    36:36:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    36:36:com.google.common.collect.Multimap delegate() -> delegate
    36:36:java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingTable -> com.google.common.collect.ForwardingTable:
    36:36:void <init>() -> <init>
    com.google.common.collect.Table delegate() -> delegate
    43:43:java.util.Set cellSet() -> cellSet
    48:49:void clear() -> clear
    53:53:java.util.Map column(java.lang.Object) -> column
    58:58:java.util.Set columnKeySet() -> columnKeySet
    63:63:java.util.Map columnMap() -> columnMap
    68:68:boolean contains(java.lang.Object,java.lang.Object) -> contains
    73:73:boolean containsColumn(java.lang.Object) -> containsColumn
    78:78:boolean containsRow(java.lang.Object) -> containsRow
    83:83:boolean containsValue(java.lang.Object) -> containsValue
    88:88:java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    93:93:boolean isEmpty() -> isEmpty
    99:99:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    104:105:void putAll(com.google.common.collect.Table) -> putAll
    110:110:java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    115:115:java.util.Map row(java.lang.Object) -> row
    120:120:java.util.Set rowKeySet() -> rowKeySet
    125:125:java.util.Map rowMap() -> rowMap
    130:130:int size() -> size
    135:135:java.util.Collection values() -> values
    140:140:boolean equals(java.lang.Object) -> equals
    145:145:int hashCode() -> hashCode
    33:33:java.lang.Object delegate() -> delegate
com.google.common.collect.GeneralRange -> com.google.common.collect.cc:
    java.util.Comparator comparator -> a
    boolean hasLowerBound -> b
    java.lang.Object lowerEndpoint -> c
    com.google.common.collect.BoundType lowerBoundType -> d
    boolean hasUpperBound -> e
    java.lang.Object upperEndpoint -> f
    com.google.common.collect.BoundType upperBoundType -> g
    59:59:com.google.common.collect.GeneralRange all(java.util.Comparator) -> a
    68:68:com.google.common.collect.GeneralRange downTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType) -> a
    77:77:com.google.common.collect.GeneralRange upTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType) -> b
    108:132:void <init>(java.util.Comparator,boolean,java.lang.Object,com.google.common.collect.BoundType,boolean,java.lang.Object,com.google.common.collect.BoundType) -> <init>
    135:135:java.util.Comparator comparator() -> a
    139:139:boolean hasLowerBound() -> b
    143:143:boolean hasUpperBound() -> c
    152:157:boolean tooLow(java.lang.Object) -> a
    161:166:boolean tooHigh(java.lang.Object) -> b
    170:170:boolean contains(java.lang.Object) -> c
    177:220:com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange) -> a
    225:235:boolean equals(java.lang.Object) -> equals
    240:245:int hashCode() -> hashCode
    271:271:java.lang.String toString() -> toString
    281:281:java.lang.Object getLowerEndpoint() -> d
    285:285:com.google.common.collect.BoundType getLowerBoundType() -> e
    289:289:java.lang.Object getUpperEndpoint() -> f
    293:293:com.google.common.collect.BoundType getUpperBoundType() -> g
com.google.common.collect.HashBasedTable -> com.google.common.collect.HashBasedTable:
    long serialVersionUID -> serialVersionUID
    70:70:com.google.common.collect.HashBasedTable create() -> create
    83:85:com.google.common.collect.HashBasedTable create(int,int) -> create
    97:99:com.google.common.collect.HashBasedTable create(com.google.common.collect.Table) -> create
    103:104:void <init>(java.util.Map,com.google.common.collect.HashBasedTable$Factory) -> <init>
    110:110:boolean contains(java.lang.Object,java.lang.Object) -> contains
    115:115:boolean containsColumn(java.lang.Object) -> containsColumn
    120:120:boolean containsRow(java.lang.Object) -> containsRow
    125:125:boolean containsValue(java.lang.Object) -> containsValue
    130:130:java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    135:135:boolean equals(java.lang.Object) -> equals
    141:141:java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    51:51:java.util.Map columnMap() -> columnMap
    51:51:java.util.Map rowMap() -> rowMap
    51:51:java.util.Collection values() -> values
    51:51:java.util.Set columnKeySet() -> columnKeySet
    51:51:java.util.Set rowKeySet() -> rowKeySet
    51:51:java.util.Map column(java.lang.Object) -> column
    51:51:java.util.Map row(java.lang.Object) -> row
    51:51:java.util.Set cellSet() -> cellSet
    51:51:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    51:51:void clear() -> clear
    51:51:int size() -> size
    51:51:boolean isEmpty() -> isEmpty
    51:51:java.lang.String toString() -> toString
    51:51:int hashCode() -> hashCode
    51:51:void putAll(com.google.common.collect.Table) -> putAll
com.google.common.collect.HashBasedTable$Factory -> com.google.common.collect.cd:
    int expectedSize -> a
    long serialVersionUID -> serialVersionUID
    56:58:void <init>(int) -> <init>
    62:62:java.util.Map get() -> a
    53:53:java.lang.Object get() -> get
com.google.common.collect.HashBiMap -> com.google.common.collect.HashBiMap:
    com.google.common.collect.HashBiMap$BiEntry[] hashTableKToV -> a
    com.google.common.collect.HashBiMap$BiEntry[] hashTableVToK -> b
    com.google.common.collect.HashBiMap$BiEntry firstInKeyInsertionOrder -> c
    com.google.common.collect.HashBiMap$BiEntry lastInKeyInsertionOrder -> d
    int size -> e
    int mask -> f
    int modCount -> g
    com.google.common.collect.BiMap inverse -> h
    long serialVersionUID -> serialVersionUID
    65:65:com.google.common.collect.HashBiMap create() -> create
    75:75:com.google.common.collect.HashBiMap create(int) -> create
    83:85:com.google.common.collect.HashBiMap create(java.util.Map) -> create
    115:117:void <init>(int) -> <init>
    120:129:void init(int) -> a
    136:182:void delete(com.google.common.collect.HashBiMap$BiEntry) -> a
    185:219:void insert(com.google.common.collect.HashBiMap$BiEntry,com.google.common.collect.HashBiMap$BiEntry) -> a
    222:229:com.google.common.collect.HashBiMap$BiEntry seekByKey(java.lang.Object,int) -> a
    233:240:com.google.common.collect.HashBiMap$BiEntry seekByValue(java.lang.Object,int) -> b
    245:245:boolean containsKey(java.lang.Object) -> containsKey
    260:260:boolean containsValue(java.lang.Object) -> containsValue
    265:265:java.lang.Object get(java.lang.Object) -> get
    271:271:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    275:304:java.lang.Object put(java.lang.Object,java.lang.Object,boolean) -> a
    312:312:java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    316:356:java.lang.Object putInverse(java.lang.Object,java.lang.Object,boolean) -> b
    360:376:void rehashIfNecessary() -> a
    380:380:com.google.common.collect.HashBiMap$BiEntry[] createTable(int) -> b
    387:394:java.lang.Object remove(java.lang.Object) -> remove
    400:406:void clear() -> clear
    410:410:int size() -> size
    456:456:java.util.Set keySet() -> keySet
    491:491:java.util.Set values() -> values
    496:496:java.util.Iterator entryIterator() -> b
    545:551:void forEach(java.util.function.BiConsumer) -> forEach
    555:561:void replaceAll(java.util.function.BiFunction) -> replaceAll
    567:568:com.google.common.collect.BiMap inverse() -> inverse
    750:752:void writeObject(java.io.ObjectOutputStream) -> writeObject
    756:760:void readObject(java.io.ObjectInputStream) -> readObject
    59:59:java.util.Set entrySet() -> entrySet
    59:59:java.util.Collection values() -> values
    60:60:com.google.common.collect.HashBiMap$BiEntry access$000(com.google.common.collect.HashBiMap) -> a
    60:60:int access$100(com.google.common.collect.HashBiMap) -> b
    60:60:void access$200(com.google.common.collect.HashBiMap,com.google.common.collect.HashBiMap$BiEntry) -> a
    60:60:com.google.common.collect.HashBiMap$BiEntry access$300(com.google.common.collect.HashBiMap,java.lang.Object,int) -> a
    60:60:com.google.common.collect.HashBiMap$BiEntry access$400(com.google.common.collect.HashBiMap,java.lang.Object,int) -> b
    60:60:void access$500(com.google.common.collect.HashBiMap,com.google.common.collect.HashBiMap$BiEntry,com.google.common.collect.HashBiMap$BiEntry) -> a
    60:60:int access$700(com.google.common.collect.HashBiMap) -> c
    60:60:java.lang.Object access$800(com.google.common.collect.HashBiMap,java.lang.Object,java.lang.Object,boolean) -> a
com.google.common.collect.HashBiMap$1 -> com.google.common.collect.ce:
    com.google.common.collect.HashBiMap this$0 -> a
    496:496:void <init>(com.google.common.collect.HashBiMap) -> <init>
    499:499:java.util.Map$Entry output(com.google.common.collect.HashBiMap$BiEntry) -> b
    496:496:java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry) -> a
com.google.common.collect.HashBiMap$1$MapEntry -> com.google.common.collect.cf:
    com.google.common.collect.HashBiMap$BiEntry delegate -> a
    com.google.common.collect.HashBiMap$1 this$1 -> b
    505:507:void <init>(com.google.common.collect.HashBiMap$1,com.google.common.collect.HashBiMap$BiEntry) -> <init>
    511:511:java.lang.Object getKey() -> getKey
    516:516:java.lang.Object getValue() -> getValue
    521:537:java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.HashBiMap$BiEntry -> com.google.common.collect.cg:
    int keyHash -> a
    int valueHash -> b
    com.google.common.collect.HashBiMap$BiEntry nextInKToVBucket -> c
    com.google.common.collect.HashBiMap$BiEntry nextInVToKBucket -> d
    com.google.common.collect.HashBiMap$BiEntry nextInKeyInsertionOrder -> e
    com.google.common.collect.HashBiMap$BiEntry prevInKeyInsertionOrder -> f
    99:102:void <init>(java.lang.Object,int,java.lang.Object,int) -> <init>
com.google.common.collect.HashBiMap$Inverse -> com.google.common.collect.ch:
    com.google.common.collect.HashBiMap this$0 -> a
    571:571:void <init>(com.google.common.collect.HashBiMap) -> <init>
    574:574:com.google.common.collect.BiMap forward() -> a
    579:579:int size() -> size
    584:585:void clear() -> clear
    589:589:boolean containsKey(java.lang.Object) -> containsKey
    594:594:java.lang.Object get(java.lang.Object) -> get
    601:601:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    607:607:java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    613:620:java.lang.Object remove(java.lang.Object) -> remove
    626:626:com.google.common.collect.BiMap inverse() -> inverse
    631:631:java.util.Set keySet() -> keySet
    664:664:java.util.Set values() -> values
    669:669:java.util.Iterator entryIterator() -> b
    714:716:void forEach(java.util.function.BiConsumer) -> forEach
    720:726:void replaceAll(java.util.function.BiFunction) -> replaceAll
    729:729:java.lang.Object writeReplace() -> writeReplace
    571:571:java.util.Collection values() -> values
    715:715:void lambda$forEach$0(java.util.function.BiConsumer,java.lang.Object,java.lang.Object) -> a
    571:571:void <init>(com.google.common.collect.HashBiMap,byte) -> <init>
com.google.common.collect.HashBiMap$Inverse$1 -> com.google.common.collect.ci:
    com.google.common.collect.HashBiMap$Inverse this$1 -> a
    669:669:void <init>(com.google.common.collect.HashBiMap$Inverse) -> <init>
    672:672:java.util.Map$Entry output(com.google.common.collect.HashBiMap$BiEntry) -> b
    669:669:java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry) -> a
com.google.common.collect.HashBiMap$Inverse$1$InverseEntry -> com.google.common.collect.cj:
    com.google.common.collect.HashBiMap$BiEntry delegate -> a
    com.google.common.collect.HashBiMap$Inverse$1 this$2 -> b
    678:680:void <init>(com.google.common.collect.HashBiMap$Inverse$1,com.google.common.collect.HashBiMap$BiEntry) -> <init>
    684:684:java.lang.Object getKey() -> getKey
    689:689:java.lang.Object getValue() -> getValue
    694:706:java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.HashBiMap$Inverse$InverseKeySet -> com.google.common.collect.ck:
    com.google.common.collect.HashBiMap$Inverse this$1 -> a
    636:638:void <init>(com.google.common.collect.HashBiMap$Inverse) -> <init>
    642:647:boolean remove(java.lang.Object) -> remove
    653:653:java.util.Iterator iterator() -> iterator
com.google.common.collect.HashBiMap$Inverse$InverseKeySet$1 -> com.google.common.collect.cl:
    653:653:void <init>(com.google.common.collect.HashBiMap$Inverse$InverseKeySet) -> <init>
    656:656:java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry) -> a
com.google.common.collect.HashBiMap$InverseSerializedForm -> com.google.common.collect.cm:
    com.google.common.collect.HashBiMap bimap -> a
    736:738:void <init>(com.google.common.collect.HashBiMap) -> <init>
    741:741:java.lang.Object readResolve() -> readResolve
com.google.common.collect.HashBiMap$Itr -> com.google.common.collect.cn:
    com.google.common.collect.HashBiMap$BiEntry next -> a
    com.google.common.collect.HashBiMap$BiEntry toRemove -> b
    int expectedModCount -> c
    int remaining -> d
    com.google.common.collect.HashBiMap this$0 -> e
    413:417:void <init>(com.google.common.collect.HashBiMap) -> <init>
    421:424:boolean hasNext() -> hasNext
    429:437:java.lang.Object next() -> next
    442:449:void remove() -> remove
    java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry) -> a
com.google.common.collect.HashBiMap$KeySet -> com.google.common.collect.co:
    com.google.common.collect.HashBiMap this$0 -> a
    461:463:void <init>(com.google.common.collect.HashBiMap) -> <init>
    467:467:java.util.Iterator iterator() -> iterator
    477:484:boolean remove(java.lang.Object) -> remove
com.google.common.collect.HashBiMap$KeySet$1 -> com.google.common.collect.cp:
    467:467:void <init>(com.google.common.collect.HashBiMap$KeySet) -> <init>
    470:470:java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry) -> a
com.google.common.collect.HashMultimap -> com.google.common.collect.HashMultimap:
    int expectedValuesPerKey -> a
    long serialVersionUID -> serialVersionUID
    59:59:com.google.common.collect.HashMultimap create() -> create
    75:75:com.google.common.collect.HashMultimap create(int,int) -> create
    89:89:com.google.common.collect.HashMultimap create(com.google.common.collect.Multimap) -> create
    93:94:void <init>() -> <init>
    50:100:void <init>(int,int) -> <init>
    50:105:void <init>(com.google.common.collect.Multimap) -> <init>
    116:116:java.util.Set createCollection() -> a
    125:127:void writeObject(java.io.ObjectOutputStream) -> writeObject
    131:137:void readObject(java.io.ObjectInputStream) -> readObject
    46:46:boolean equals(java.lang.Object) -> equals
    46:46:boolean put(java.lang.Object,java.lang.Object) -> put
    46:46:java.util.Map asMap() -> asMap
    46:46:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    46:46:java.util.Set removeAll(java.lang.Object) -> removeAll
    46:46:java.util.Set entries() -> entries
    46:46:java.util.Set get(java.lang.Object) -> get
    46:46:void forEach(java.util.function.BiConsumer) -> forEach
    46:46:java.util.Collection values() -> values
    46:46:void clear() -> clear
    46:46:boolean containsKey(java.lang.Object) -> containsKey
    46:46:int size() -> size
    46:46:java.util.Collection createCollection() -> b
    46:46:java.lang.String toString() -> toString
    46:46:int hashCode() -> hashCode
    46:46:com.google.common.collect.Multiset keys() -> keys
    46:46:java.util.Set keySet() -> keySet
    46:46:boolean putAll(com.google.common.collect.Multimap) -> putAll
    46:46:boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    46:46:boolean remove(java.lang.Object,java.lang.Object) -> remove
    46:46:boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    46:46:boolean containsValue(java.lang.Object) -> containsValue
    46:46:boolean isEmpty() -> isEmpty
com.google.common.collect.HashMultimapGwtSerializationDependencies -> com.google.common.collect.cq:
    35:36:void <init>(java.util.Map) -> <init>
com.google.common.collect.HashMultiset -> com.google.common.collect.HashMultiset:
    long serialVersionUID -> serialVersionUID
    38:38:com.google.common.collect.HashMultiset create() -> create
    49:49:com.google.common.collect.HashMultiset create(int) -> create
    60:62:com.google.common.collect.HashMultiset create(java.lang.Iterable) -> create
    66:67:void <init>() -> <init>
    70:71:void <init>(int) -> <init>
    79:81:void writeObject(java.io.ObjectOutputStream) -> writeObject
    85:89:void readObject(java.io.ObjectInputStream) -> readObject
    33:33:int setCount(java.lang.Object,int) -> setCount
    33:33:int remove(java.lang.Object,int) -> remove
    33:33:int add(java.lang.Object,int) -> add
    33:33:int count(java.lang.Object) -> count
    33:33:java.util.Iterator iterator() -> iterator
    33:33:int size() -> size
    33:33:void clear() -> clear
    33:33:void forEachEntry(java.util.function.ObjIntConsumer) -> forEachEntry
    33:33:java.util.Set entrySet() -> entrySet
    33:33:java.util.Set elementSet() -> elementSet
    33:33:boolean setCount(java.lang.Object,int,int) -> setCount
    33:33:boolean contains(java.lang.Object) -> contains
    33:33:boolean isEmpty() -> isEmpty
com.google.common.collect.ImmutableAsList -> com.google.common.collect.cr:
    34:34:void <init>() -> <init>
    com.google.common.collect.ImmutableCollection delegateCollection() -> b
    41:41:boolean contains(java.lang.Object) -> contains
    46:46:int size() -> size
    51:51:boolean isEmpty() -> isEmpty
    56:56:boolean isPartialView() -> a
    77:77:void readObject(java.io.ObjectInputStream) -> readObject
    83:83:java.lang.Object writeReplace() -> writeReplace
com.google.common.collect.ImmutableAsList$SerializedForm -> com.google.common.collect.cs:
    com.google.common.collect.ImmutableCollection collection -> a
    long serialVersionUID -> serialVersionUID
    64:66:void <init>(com.google.common.collect.ImmutableCollection) -> <init>
    69:69:java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableBiMap -> com.google.common.collect.ImmutableBiMap:
    59:59:java.util.stream.Collector toImmutableBiMap(java.util.function.Function,java.util.function.Function) -> toImmutableBiMap
    66:66:com.google.common.collect.ImmutableBiMap of() -> of
    71:71:com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object) -> of
    80:80:com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    89:89:com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    98:99:com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    109:110:com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    120:120:com.google.common.collect.ImmutableBiMap$Builder builder() -> builder
    137:138:com.google.common.collect.ImmutableBiMap$Builder builderWithExpectedSize(int) -> builderWithExpectedSize
    330:339:com.google.common.collect.ImmutableBiMap copyOf(java.util.Map) -> copyOf
    355:367:com.google.common.collect.ImmutableBiMap copyOf(java.lang.Iterable) -> copyOf
    371:371:void <init>() -> <init>
    com.google.common.collect.ImmutableBiMap inverse() -> inverse
    387:387:com.google.common.collect.ImmutableSet values() -> values
    392:392:com.google.common.collect.ImmutableSet createValues() -> d
    405:405:java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    432:432:java.lang.Object writeReplace() -> writeReplace
    40:40:com.google.common.collect.ImmutableCollection createValues() -> a
    40:40:com.google.common.collect.ImmutableCollection values() -> values
    40:40:java.util.Collection values() -> values
    40:40:com.google.common.collect.BiMap inverse() -> inverse
    40:40:java.util.Set values() -> values
com.google.common.collect.ImmutableBiMap$Builder -> com.google.common.collect.ImmutableBiMap$Builder:
    175:175:void <init>() -> <init>
    178:179:void <init>(int) -> <init>
    188:189:com.google.common.collect.ImmutableBiMap$Builder put(java.lang.Object,java.lang.Object) -> put
    201:202:com.google.common.collect.ImmutableBiMap$Builder put(java.util.Map$Entry) -> put
    214:215:com.google.common.collect.ImmutableBiMap$Builder putAll(java.util.Map) -> putAll
    229:230:com.google.common.collect.ImmutableBiMap$Builder putAll(java.lang.Iterable) -> putAll
    247:248:com.google.common.collect.ImmutableBiMap$Builder orderEntriesByValue(java.util.Comparator) -> orderEntriesByValue
    254:255:com.google.common.collect.ImmutableBiMap$Builder combine(com.google.common.collect.ImmutableMap$Builder) -> a
    267:291:com.google.common.collect.ImmutableBiMap build() -> build
    169:169:com.google.common.collect.ImmutableMap build() -> build
    169:169:com.google.common.collect.ImmutableMap$Builder combine(com.google.common.collect.ImmutableMap$Builder) -> b
    169:169:com.google.common.collect.ImmutableMap$Builder orderEntriesByValue(java.util.Comparator) -> orderEntriesByValue
    169:169:com.google.common.collect.ImmutableMap$Builder putAll(java.lang.Iterable) -> putAll
    169:169:com.google.common.collect.ImmutableMap$Builder putAll(java.util.Map) -> putAll
    169:169:com.google.common.collect.ImmutableMap$Builder put(java.util.Map$Entry) -> put
    169:169:com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object) -> put
com.google.common.collect.ImmutableBiMap$SerializedForm -> com.google.common.collect.ct:
    long serialVersionUID -> serialVersionUID
    418:419:void <init>(com.google.common.collect.ImmutableBiMap) -> <init>
    423:424:java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableBiMapFauxverideShim -> com.google.common.collect.cu:
    32:32:void <init>() -> <init>
    45:45:java.util.stream.Collector toImmutableMap(java.util.function.Function,java.util.function.Function) -> toImmutableMap
    61:61:java.util.stream.Collector toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator) -> toImmutableMap
com.google.common.collect.ImmutableClassToInstanceMap -> com.google.common.collect.ImmutableClassToInstanceMap:
    com.google.common.collect.ImmutableClassToInstanceMap EMPTY -> a
    com.google.common.collect.ImmutableMap delegate -> b
    51:51:com.google.common.collect.ImmutableClassToInstanceMap of() -> of
    60:61:com.google.common.collect.ImmutableClassToInstanceMap of(java.lang.Class,java.lang.Object) -> of
    69:69:com.google.common.collect.ImmutableClassToInstanceMap$Builder builder() -> builder
    152:157:com.google.common.collect.ImmutableClassToInstanceMap copyOf(java.util.Map) -> copyOf
    162:164:void <init>(com.google.common.collect.ImmutableMap) -> <init>
    168:168:java.util.Map delegate() -> delegate
    174:174:java.lang.Object getInstance(java.lang.Class) -> getInstance
    187:187:java.lang.Object putInstance(java.lang.Class,java.lang.Object) -> putInstance
    191:191:java.lang.Object readResolve() -> readResolve
    36:36:java.lang.Object delegate() -> delegate
    38:38:void <init>(com.google.common.collect.ImmutableMap,byte) -> <init>
    41:42:void <clinit>() -> <clinit>
com.google.common.collect.ImmutableClassToInstanceMap$Builder -> com.google.common.collect.ImmutableClassToInstanceMap$Builder:
    com.google.common.collect.ImmutableMap$Builder mapBuilder -> a
    89:90:void <init>() -> <init>
    98:99:com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object) -> put
    111:116:com.google.common.collect.ImmutableClassToInstanceMap$Builder putAll(java.util.Map) -> putAll
    120:120:java.lang.Object cast(java.lang.Class,java.lang.Object) -> a
    130:134:com.google.common.collect.ImmutableClassToInstanceMap build() -> build
com.google.common.collect.ImmutableCollection -> com.google.common.collect.ImmutableCollection:
    java.lang.Object[] EMPTY_ARRAY -> a
    175:175:void <init>() -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    183:183:java.util.Spliterator spliterator() -> spliterator
    190:190:java.lang.Object[] toArray() -> toArray
    196:209:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    215:215:java.lang.Object[] internalArray() -> d
    223:223:int internalArrayStart() -> e
    231:231:int internalArrayEnd() -> f
    boolean contains(java.lang.Object) -> contains
    247:247:boolean add(java.lang.Object) -> add
    260:260:boolean remove(java.lang.Object) -> remove
    273:273:boolean addAll(java.util.Collection) -> addAll
    286:286:boolean removeAll(java.util.Collection) -> removeAll
    299:299:boolean removeIf(java.util.function.Predicate) -> removeIf
    311:311:boolean retainAll(java.util.Collection) -> retainAll
    323:323:void clear() -> clear
    337:343:com.google.common.collect.ImmutableList asList() -> asList
    boolean isPartialView() -> a
    361:364:int copyIntoArray(java.lang.Object[],int) -> a
    369:369:java.lang.Object writeReplace() -> writeReplace
    161:161:java.util.Iterator iterator() -> iterator
    186:186:void <clinit>() -> <clinit>
com.google.common.collect.ImmutableCollection$Builder -> com.google.common.collect.ImmutableCollection$Builder:
    382:394:int expandedCapacity(int,int) -> a
    397:397:void <init>() -> <init>
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
    423:426:com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    441:444:com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    459:462:com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableCollection build() -> build
com.google.common.collect.ImmutableEntry -> com.google.common.collect.cv:
    java.lang.Object key -> g
    java.lang.Object value -> h
    long serialVersionUID -> serialVersionUID
    29:32:void <init>(java.lang.Object,java.lang.Object) -> <init>
    36:36:java.lang.Object getKey() -> getKey
    41:41:java.lang.Object getValue() -> getValue
    46:46:java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.ImmutableEnumMap -> com.google.common.collect.cw:
    java.util.EnumMap delegate -> b
    38:45:com.google.common.collect.ImmutableMap asImmutable(java.util.EnumMap) -> a
    51:54:void <init>(java.util.EnumMap) -> <init>
    58:58:com.google.common.collect.UnmodifiableIterator keyIterator() -> e
    63:63:java.util.Spliterator keySpliterator() -> f
    68:68:int size() -> size
    73:73:boolean containsKey(java.lang.Object) -> containsKey
    78:78:java.lang.Object get(java.lang.Object) -> get
    83:89:boolean equals(java.lang.Object) -> equals
    94:94:com.google.common.collect.UnmodifiableIterator entryIterator() -> d
    104:105:void forEach(java.util.function.BiConsumer) -> forEach
    109:109:boolean isPartialView() -> b
    115:115:java.lang.Object writeReplace() -> writeReplace
    36:36:void <init>(java.util.EnumMap,byte) -> <init>
com.google.common.collect.ImmutableEnumMap$EnumSerializedForm -> com.google.common.collect.cx:
    java.util.EnumMap delegate -> a
    long serialVersionUID -> serialVersionUID
    124:126:void <init>(java.util.EnumMap) -> <init>
    129:129:java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableEnumSet -> com.google.common.collect.cy:
    java.util.EnumSet delegate -> a
    int hashCode -> b
    37:43:com.google.common.collect.ImmutableSet asImmutable(java.util.EnumSet) -> a
    57:59:void <init>(java.util.EnumSet) -> <init>
    63:63:boolean isPartialView() -> a
    68:68:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    73:73:java.util.Spliterator spliterator() -> spliterator
    78:79:void forEach(java.util.function.Consumer) -> forEach
    83:83:int size() -> size
    88:88:boolean contains(java.lang.Object) -> contains
    93:96:boolean containsAll(java.util.Collection) -> containsAll
    101:101:boolean isEmpty() -> isEmpty
    106:112:boolean equals(java.lang.Object) -> equals
    117:117:boolean isHashCodeFast() -> c
    124:125:int hashCode() -> hashCode
    130:130:java.lang.String toString() -> toString
    136:136:java.lang.Object writeReplace() -> writeReplace
    32:32:java.util.Iterator iterator() -> iterator
    34:34:void <init>(java.util.EnumSet,byte) -> <init>
com.google.common.collect.ImmutableEnumSet$EnumSerializedForm -> com.google.common.collect.cz:
    java.util.EnumSet delegate -> a
    long serialVersionUID -> serialVersionUID
    145:147:void <init>(java.util.EnumSet) -> <init>
    151:151:java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableList -> com.google.common.collect.ImmutableList:
    71:71:java.util.stream.Collector toImmutableList() -> toImmutableList
    82:82:com.google.common.collect.ImmutableList of() -> of
    93:93:com.google.common.collect.ImmutableList of(java.lang.Object) -> of
    102:102:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object) -> of
    111:111:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    120:120:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    129:129:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    138:138:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    147:147:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    156:156:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    165:165:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    175:175:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    185:185:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    202:218:com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    229:232:com.google.common.collect.ImmutableList copyOf(java.lang.Iterable) -> copyOf
    253:258:com.google.common.collect.ImmutableList copyOf(java.util.Collection) -> copyOf
    268:275:com.google.common.collect.ImmutableList copyOf(java.util.Iterator) -> copyOf
    286:292:com.google.common.collect.ImmutableList copyOf(java.lang.Object[]) -> copyOf
    313:316:com.google.common.collect.ImmutableList sortedCopyOf(java.lang.Iterable) -> sortedCopyOf
    336:341:com.google.common.collect.ImmutableList sortedCopyOf(java.util.Comparator,java.lang.Iterable) -> sortedCopyOf
    346:346:com.google.common.collect.ImmutableList construct(java.lang.Object[]) -> b
    355:355:com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]) -> a
    363:372:com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[],int) -> b
    376:376:void <init>() -> <init>
    382:382:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    387:387:com.google.common.collect.UnmodifiableListIterator listIterator() -> listIterator
    392:392:com.google.common.collect.UnmodifiableListIterator listIterator(int) -> listIterator
    402:407:void forEach(java.util.function.Consumer) -> forEach
    411:411:int indexOf(java.lang.Object) -> indexOf
    416:416:int lastIndexOf(java.lang.Object) -> lastIndexOf
    421:421:boolean contains(java.lang.Object) -> contains
    433:442:com.google.common.collect.ImmutableList subList(int,int) -> subList
    451:451:com.google.common.collect.ImmutableList subListUnchecked(int,int) -> a
    496:496:boolean addAll(int,java.util.Collection) -> addAll
    509:509:java.lang.Object set(int,java.lang.Object) -> set
    521:521:void add(int,java.lang.Object) -> add
    534:534:java.lang.Object remove(int) -> remove
    546:546:void replaceAll(java.util.function.UnaryOperator) -> replaceAll
    558:558:void sort(java.util.Comparator) -> sort
    568:568:com.google.common.collect.ImmutableList asList() -> asList
    573:573:java.util.Spliterator spliterator() -> spliterator
    579:583:int copyIntoArray(java.lang.Object[],int) -> a
    594:594:com.google.common.collect.ImmutableList reverse() -> reverse
    659:659:boolean equals(java.lang.Object) -> equals
    664:672:int hashCode() -> hashCode
    694:694:void readObject(java.io.ObjectInputStream) -> readObject
    699:699:java.lang.Object writeReplace() -> writeReplace
    707:707:com.google.common.collect.ImmutableList$Builder builder() -> builder
    724:725:com.google.common.collect.ImmutableList$Builder builderWithExpectedSize(int) -> builderWithExpectedSize
    59:59:java.util.Iterator iterator() -> iterator
    59:59:java.util.List subList(int,int) -> subList
    59:59:java.util.ListIterator listIterator(int) -> listIterator
    59:59:java.util.ListIterator listIterator() -> listIterator
com.google.common.collect.ImmutableList$1 -> com.google.common.collect.cA:
    com.google.common.collect.ImmutableList this$0 -> a
    392:392:void <init>(com.google.common.collect.ImmutableList,int,int) -> <init>
    395:395:java.lang.Object get(int) -> a
com.google.common.collect.ImmutableList$Builder -> com.google.common.collect.ImmutableList$Builder:
    java.lang.Object[] contents -> a
    int size -> b
    boolean forceCopy -> c
    758:759:void <init>() -> <init>
    761:764:void <init>(int) -> <init>
    767:774:void getReadyToExpandTo(int) -> a
    786:789:com.google.common.collect.ImmutableList$Builder add(java.lang.Object) -> add
    802:804:com.google.common.collect.ImmutableList$Builder add(java.lang.Object[]) -> add
    808:811:void add(java.lang.Object[],int) -> a
    823:834:com.google.common.collect.ImmutableList$Builder addAll(java.lang.Iterable) -> addAll
    847:848:com.google.common.collect.ImmutableList$Builder addAll(java.util.Iterator) -> addAll
    853:855:com.google.common.collect.ImmutableList$Builder combine(com.google.common.collect.ImmutableList$Builder) -> a
    863:864:com.google.common.collect.ImmutableList build() -> build
    748:748:com.google.common.collect.ImmutableCollection build() -> build
    748:748:com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    748:748:com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    748:748:com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    748:748:com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableList$ReverseImmutableList -> com.google.common.collect.cB:
    com.google.common.collect.ImmutableList forwardList -> a
    600:602:void <init>(com.google.common.collect.ImmutableList) -> <init>
    605:605:int reverseIndex(int) -> a
    609:609:int reversePosition(int) -> b
    614:614:com.google.common.collect.ImmutableList reverse() -> reverse
    619:619:boolean contains(java.lang.Object) -> contains
    624:625:int indexOf(java.lang.Object) -> indexOf
    630:631:int lastIndexOf(java.lang.Object) -> lastIndexOf
    636:637:com.google.common.collect.ImmutableList subList(int,int) -> subList
    642:643:java.lang.Object get(int) -> get
    648:648:int size() -> size
    653:653:boolean isPartialView() -> a
    597:597:java.util.List subList(int,int) -> subList
    597:597:java.util.ListIterator listIterator(int) -> listIterator
    597:597:java.util.ListIterator listIterator() -> listIterator
    597:597:java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableList$SerializedForm -> com.google.common.collect.cC:
    java.lang.Object[] elements -> a
    long serialVersionUID -> serialVersionUID
    682:684:void <init>(java.lang.Object[]) -> <init>
    687:687:java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableList$SubList -> com.google.common.collect.cD:
    int offset -> a
    int length -> b
    com.google.common.collect.ImmutableList this$0 -> c
    458:461:void <init>(com.google.common.collect.ImmutableList,int,int) -> <init>
    465:465:int size() -> size
    470:471:java.lang.Object get(int) -> get
    476:477:com.google.common.collect.ImmutableList subList(int,int) -> subList
    482:482:boolean isPartialView() -> a
    454:454:java.util.List subList(int,int) -> subList
    454:454:java.util.ListIterator listIterator(int) -> listIterator
    454:454:java.util.ListIterator listIterator() -> listIterator
    454:454:java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableListMultimap -> com.google.common.collect.ImmutableListMultimap:
    com.google.common.collect.ImmutableListMultimap inverse -> a
    long serialVersionUID -> serialVersionUID
    86:88:java.util.stream.Collector toImmutableListMultimap(java.util.function.Function,java.util.function.Function) -> toImmutableListMultimap
    130:136:java.util.stream.Collector flatteningToImmutableListMultimap(java.util.function.Function,java.util.function.Function) -> flatteningToImmutableListMultimap
    144:144:com.google.common.collect.ImmutableListMultimap of() -> of
    149:151:com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object) -> of
    156:159:com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    164:168:com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    174:179:com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    185:191:com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    201:201:com.google.common.collect.ImmutableListMultimap$Builder builder() -> builder
    334:347:com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap) -> copyOf
    361:361:com.google.common.collect.ImmutableListMultimap copyOf(java.lang.Iterable) -> copyOf
    368:388:com.google.common.collect.ImmutableListMultimap fromMapEntries(java.util.Collection,java.util.Comparator) -> a
    392:393:void <init>(com.google.common.collect.ImmutableMap,int) -> <init>
    405:406:com.google.common.collect.ImmutableList get(java.lang.Object) -> get
    422:423:com.google.common.collect.ImmutableListMultimap inverse() -> inverse
    427:433:com.google.common.collect.ImmutableListMultimap invert() -> d
    446:446:com.google.common.collect.ImmutableList removeAll(java.lang.Object) -> removeAll
    459:459:com.google.common.collect.ImmutableList replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    468:470:void writeObject(java.io.ObjectOutputStream) -> writeObject
    474:506:void readObject(java.io.ObjectInputStream) -> readObject
    52:52:com.google.common.collect.ImmutableMultimap inverse() -> inverse
    52:52:com.google.common.collect.ImmutableCollection get(java.lang.Object) -> get
    52:52:com.google.common.collect.ImmutableCollection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    52:52:com.google.common.collect.ImmutableCollection removeAll(java.lang.Object) -> removeAll
    52:52:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    52:52:java.util.Collection get(java.lang.Object) -> get
    52:52:java.util.Collection removeAll(java.lang.Object) -> removeAll
    52:52:java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    52:52:java.util.List removeAll(java.lang.Object) -> removeAll
    52:52:java.util.List get(java.lang.Object) -> get
    135:135:java.util.stream.Stream lambda$flatteningToImmutableListMultimap$2(java.util.function.Function,java.lang.Object) -> a
    134:134:java.lang.Object lambda$flatteningToImmutableListMultimap$1(java.util.function.Function,java.lang.Object) -> b
    90:90:void lambda$toImmutableListMultimap$0(java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableListMultimap$Builder,java.lang.Object) -> a
com.google.common.collect.ImmutableListMultimap$Builder -> com.google.common.collect.ImmutableListMultimap$Builder:
    228:228:void <init>() -> <init>
    233:234:com.google.common.collect.ImmutableListMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
    245:246:com.google.common.collect.ImmutableListMultimap$Builder put(java.util.Map$Entry) -> put
    258:259:com.google.common.collect.ImmutableListMultimap$Builder putAll(java.lang.Iterable) -> putAll
    265:266:com.google.common.collect.ImmutableListMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    272:273:com.google.common.collect.ImmutableListMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    279:280:com.google.common.collect.ImmutableListMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    286:287:com.google.common.collect.ImmutableListMultimap$Builder combine(com.google.common.collect.ImmutableMultimap$Builder) -> a
    298:299:com.google.common.collect.ImmutableListMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    310:311:com.google.common.collect.ImmutableListMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    317:317:com.google.common.collect.ImmutableListMultimap build() -> build
    223:223:com.google.common.collect.ImmutableMultimap build() -> build
    223:223:com.google.common.collect.ImmutableMultimap$Builder combine(com.google.common.collect.ImmutableMultimap$Builder) -> b
    223:223:com.google.common.collect.ImmutableMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    223:223:com.google.common.collect.ImmutableMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    223:223:com.google.common.collect.ImmutableMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    223:223:com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    223:223:com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    223:223:com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Iterable) -> putAll
    223:223:com.google.common.collect.ImmutableMultimap$Builder put(java.util.Map$Entry) -> put
    223:223:com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
com.google.common.collect.ImmutableMap -> com.google.common.collect.ImmutableMap:
    java.util.Map$Entry[] EMPTY_ENTRY_ARRAY -> a
    com.google.common.collect.ImmutableSet entrySet -> b
    com.google.common.collect.ImmutableSet keySet -> c
    com.google.common.collect.ImmutableCollection values -> d
    com.google.common.collect.ImmutableSetMultimap multimapView -> e
    84:84:java.util.stream.Collector toImmutableMap(java.util.function.Function,java.util.function.Function) -> toImmutableMap
    101:105:java.util.stream.Collector toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator) -> toImmutableMap
    116:116:com.google.common.collect.ImmutableMap of() -> of
    125:125:com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object) -> of
    134:134:com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    143:143:com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    152:153:com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    163:164:com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    177:178:java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object) -> a
    186:186:com.google.common.collect.ImmutableMap$Builder builder() -> builder
    203:204:com.google.common.collect.ImmutableMap$Builder builderWithExpectedSize(int) -> builderWithExpectedSize
    209:212:void checkNoConflict(boolean,java.lang.String,java.util.Map$Entry,java.util.Map$Entry) -> a
    216:216:java.lang.IllegalArgumentException conflictException(java.lang.String,java.lang.Object,java.lang.Object) -> a
    428:439:com.google.common.collect.ImmutableMap copyOf(java.util.Map) -> copyOf
    454:466:com.google.common.collect.ImmutableMap copyOf(java.lang.Iterable) -> copyOf
    472:476:com.google.common.collect.ImmutableMap copyOfEnumMap(java.util.EnumMap) -> a
    518:518:void <init>() -> <init>
    530:530:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    543:543:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    555:555:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    567:567:java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    579:579:java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function) -> computeIfAbsent
    592:592:java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction) -> computeIfPresent
    604:604:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction) -> compute
    617:617:java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction) -> merge
    629:629:void putAll(java.util.Map) -> putAll
    641:641:void replaceAll(java.util.function.BiFunction) -> replaceAll
    653:653:java.lang.Object remove(java.lang.Object) -> remove
    665:665:boolean remove(java.lang.Object,java.lang.Object) -> remove
    677:677:void clear() -> clear
    682:682:boolean isEmpty() -> isEmpty
    687:687:boolean containsKey(java.lang.Object) -> containsKey
    692:692:boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    706:707:java.lang.Object getOrDefault(java.lang.Object,java.lang.Object) -> getOrDefault
    718:719:com.google.common.collect.ImmutableSet entrySet() -> entrySet
    com.google.common.collect.ImmutableSet createEntrySet() -> g
    732:733:com.google.common.collect.ImmutableSet keySet() -> keySet
    com.google.common.collect.ImmutableSet createKeySet() -> c
    744:745:com.google.common.collect.UnmodifiableIterator keyIterator() -> e
    759:759:java.util.Spliterator keySpliterator() -> f
    770:771:com.google.common.collect.ImmutableCollection values() -> values
    com.google.common.collect.ImmutableCollection createValues() -> a
    790:796:com.google.common.collect.ImmutableSetMultimap asMultimap() -> asMultimap
    871:871:boolean equals(java.lang.Object) -> equals
    boolean isPartialView() -> b
    878:878:int hashCode() -> hashCode
    882:882:boolean isHashCodeFast() -> h
    887:887:java.lang.String toString() -> toString
    926:926:java.lang.Object writeReplace() -> writeReplace
    64:64:java.util.Set entrySet() -> entrySet
    64:64:java.util.Collection values() -> values
    64:64:java.util.Set keySet() -> keySet
    479:479:void <clinit>() -> <clinit>
com.google.common.collect.ImmutableMap$1 -> com.google.common.collect.cE:
    com.google.common.collect.UnmodifiableIterator val$entryIterator -> a
    745:745:void <init>(com.google.common.collect.ImmutableMap,com.google.common.collect.UnmodifiableIterator) -> <init>
    748:748:boolean hasNext() -> hasNext
    753:753:java.lang.Object next() -> next
com.google.common.collect.ImmutableMap$Builder -> com.google.common.collect.ImmutableMap$Builder:
    java.util.Comparator valueComparator -> a
    java.util.Map$Entry[] entries -> b
    int size -> c
    boolean entriesUsed -> d
    261:262:void <init>() -> <init>
    265:269:void <init>(int) -> <init>
    272:278:void ensureCapacity(int) -> a
    286:290:com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object) -> put
    301:301:com.google.common.collect.ImmutableMap$Builder put(java.util.Map$Entry) -> put
    312:312:com.google.common.collect.ImmutableMap$Builder putAll(java.util.Map) -> putAll
    325:331:com.google.common.collect.ImmutableMap$Builder putAll(java.lang.Iterable) -> putAll
    347:349:com.google.common.collect.ImmutableMap$Builder orderEntriesByValue(java.util.Comparator) -> orderEntriesByValue
    354:358:com.google.common.collect.ImmutableMap$Builder combine(com.google.common.collect.ImmutableMap$Builder) -> b
    381:395:com.google.common.collect.ImmutableMap build() -> build
com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap -> com.google.common.collect.cF:
    481:481:void <init>() -> <init>
    com.google.common.collect.UnmodifiableIterator entryIterator() -> d
    493:493:com.google.common.collect.ImmutableSet createKeySet() -> c
    509:509:com.google.common.collect.ImmutableSet createEntrySet() -> g
    514:514:com.google.common.collect.ImmutableCollection createValues() -> a
    481:481:java.util.Set entrySet() -> entrySet
    481:481:java.util.Collection values() -> values
    481:481:java.util.Set keySet() -> keySet
com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap$1EntrySetImpl -> com.google.common.collect.cG:
    com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap this$0 -> a
    498:498:void <init>(com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap) -> <init>
    501:501:com.google.common.collect.ImmutableMap map() -> b
    506:506:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    498:498:java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets -> com.google.common.collect.cH:
    com.google.common.collect.ImmutableMap this$0 -> b
    801:801:void <init>(com.google.common.collect.ImmutableMap) -> <init>
    806:806:int size() -> size
    811:811:com.google.common.collect.ImmutableSet createKeySet() -> c
    816:816:boolean containsKey(java.lang.Object) -> containsKey
    821:822:com.google.common.collect.ImmutableSet get(java.lang.Object) -> a
    827:827:boolean isPartialView() -> b
    833:833:int hashCode() -> hashCode
    838:838:boolean isHashCodeFast() -> h
    843:844:com.google.common.collect.UnmodifiableIterator entryIterator() -> d
    800:800:java.lang.Object get(java.lang.Object) -> get
    801:801:void <init>(com.google.common.collect.ImmutableMap,byte) -> <init>
com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1 -> com.google.common.collect.cI:
    java.util.Iterator val$backingIterator -> a
    844:844:void <init>(com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets,java.util.Iterator) -> <init>
    847:847:boolean hasNext() -> hasNext
    852:853:java.util.Map$Entry next() -> a
    844:844:java.lang.Object next() -> next
com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1 -> com.google.common.collect.cJ:
    java.util.Map$Entry val$backingEntry -> a
    853:853:void <init>(com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1,java.util.Map$Entry) -> <init>
    856:856:java.lang.Object getKey() -> getKey
    861:861:com.google.common.collect.ImmutableSet getValue() -> a
    853:853:java.lang.Object getValue() -> getValue
com.google.common.collect.ImmutableMap$SerializedForm -> com.google.common.collect.cK:
    java.lang.Object[] keys -> a
    java.lang.Object[] values -> b
    long serialVersionUID -> serialVersionUID
    899:908:void <init>(com.google.common.collect.ImmutableMap) -> <init>
    911:912:java.lang.Object readResolve() -> readResolve
    916:919:java.lang.Object createMap(com.google.common.collect.ImmutableMap$Builder) -> a
com.google.common.collect.ImmutableMapEntry -> com.google.common.collect.cL:
    43:43:com.google.common.collect.ImmutableMapEntry[] createEntryArray(int) -> a
    47:49:void <init>(java.lang.Object,java.lang.Object) -> <init>
    58:58:com.google.common.collect.ImmutableMapEntry getNextInKeyBucket() -> a
    63:63:com.google.common.collect.ImmutableMapEntry getNextInValueBucket() -> b
    71:71:boolean isReusable() -> c
com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableBiMapEntry -> com.google.common.collect.cM:
    com.google.common.collect.ImmutableMapEntry nextInValueBucket -> a
    102:104:void <init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry) -> <init>
    109:109:com.google.common.collect.ImmutableMapEntry getNextInValueBucket() -> b
com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry -> com.google.common.collect.cN:
    com.google.common.collect.ImmutableMapEntry nextInKeyBucket -> a
    78:80:void <init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry) -> <init>
    84:84:com.google.common.collect.ImmutableMapEntry getNextInKeyBucket() -> a
    89:89:boolean isReusable() -> c
com.google.common.collect.ImmutableMapEntrySet -> com.google.common.collect.cO:
    80:80:void <init>() -> <init>
    com.google.common.collect.ImmutableMap map() -> b
    86:86:int size() -> size
    91:96:boolean contains(java.lang.Object) -> contains
    101:101:boolean isPartialView() -> a
    107:107:boolean isHashCodeFast() -> c
    112:112:int hashCode() -> hashCode
    118:118:java.lang.Object writeReplace() -> writeReplace
com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm -> com.google.common.collect.cP:
    com.google.common.collect.ImmutableMap map -> a
    long serialVersionUID -> serialVersionUID
    125:127:void <init>(com.google.common.collect.ImmutableMap) -> <init>
    130:130:java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet -> com.google.common.collect.cQ:
    com.google.common.collect.ImmutableMap map -> a
    com.google.common.collect.ImmutableList entries -> b
    40:41:void <init>(com.google.common.collect.ImmutableMap,java.util.Map$Entry[]) -> <init>
    43:46:void <init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ImmutableList) -> <init>
    50:50:com.google.common.collect.ImmutableMap map() -> b
    56:56:int copyIntoArray(java.lang.Object[],int) -> a
    61:61:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    66:66:java.util.Spliterator spliterator() -> spliterator
    71:72:void forEach(java.util.function.Consumer) -> forEach
    76:76:com.google.common.collect.ImmutableList createAsList() -> g
    35:35:java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMapKeySet -> com.google.common.collect.cR:
    com.google.common.collect.ImmutableMap map -> a
    38:40:void <init>(com.google.common.collect.ImmutableMap) -> <init>
    44:44:int size() -> size
    49:49:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    54:54:java.util.Spliterator spliterator() -> spliterator
    59:59:boolean contains(java.lang.Object) -> contains
    64:64:java.lang.Object get(int) -> a
    69:71:void forEach(java.util.function.Consumer) -> forEach
    75:75:boolean isPartialView() -> a
    81:81:java.lang.Object writeReplace() -> writeReplace
    34:34:java.util.Iterator iterator() -> iterator
    70:70:void lambda$forEach$0(java.util.function.Consumer,java.lang.Object,java.lang.Object) -> a
com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm -> com.google.common.collect.cS:
    com.google.common.collect.ImmutableMap map -> a
    long serialVersionUID -> serialVersionUID
    88:90:void <init>(com.google.common.collect.ImmutableMap) -> <init>
    93:93:java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMapValues -> com.google.common.collect.cT:
    com.google.common.collect.ImmutableMap map -> a
    39:41:void <init>(com.google.common.collect.ImmutableMap) -> <init>
    45:45:int size() -> size
    50:50:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    67:67:java.util.Spliterator spliterator() -> spliterator
    72:72:boolean contains(java.lang.Object) -> contains
    77:77:boolean isPartialView() -> a
    82:83:com.google.common.collect.ImmutableList asList() -> asList
    99:101:void forEach(java.util.function.Consumer) -> forEach
    106:106:java.lang.Object writeReplace() -> writeReplace
    35:35:java.util.Iterator iterator() -> iterator
    100:100:void lambda$forEach$0(java.util.function.Consumer,java.lang.Object,java.lang.Object) -> a
    36:36:com.google.common.collect.ImmutableMap access$000(com.google.common.collect.ImmutableMapValues) -> a
com.google.common.collect.ImmutableMapValues$1 -> com.google.common.collect.cU:
    com.google.common.collect.UnmodifiableIterator entryItr -> a
    com.google.common.collect.ImmutableMapValues this$0 -> b
    50:51:void <init>(com.google.common.collect.ImmutableMapValues) -> <init>
    55:55:boolean hasNext() -> hasNext
    60:60:java.lang.Object next() -> next
com.google.common.collect.ImmutableMapValues$2 -> com.google.common.collect.cV:
    com.google.common.collect.ImmutableList val$entryList -> a
    com.google.common.collect.ImmutableMapValues this$0 -> b
    83:83:void <init>(com.google.common.collect.ImmutableMapValues,com.google.common.collect.ImmutableList) -> <init>
    86:86:java.lang.Object get(int) -> get
    91:91:com.google.common.collect.ImmutableCollection delegateCollection() -> b
com.google.common.collect.ImmutableMapValues$SerializedForm -> com.google.common.collect.cW:
    com.google.common.collect.ImmutableMap map -> a
    long serialVersionUID -> serialVersionUID
    113:115:void <init>(com.google.common.collect.ImmutableMap) -> <init>
    118:118:java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMultimap -> com.google.common.collect.ImmutableMultimap:
    com.google.common.collect.ImmutableMap map -> b
    int size -> a
    long serialVersionUID -> serialVersionUID
    75:75:com.google.common.collect.ImmutableMultimap of() -> of
    80:80:com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object) -> of
    85:85:com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    93:93:com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    101:101:com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    110:110:com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    120:120:com.google.common.collect.ImmutableMultimap$Builder builder() -> builder
    308:315:com.google.common.collect.ImmutableMultimap copyOf(com.google.common.collect.Multimap) -> copyOf
    329:329:com.google.common.collect.ImmutableMultimap copyOf(java.lang.Iterable) -> copyOf
    346:349:void <init>(com.google.common.collect.ImmutableMap,int) -> <init>
    363:363:com.google.common.collect.ImmutableCollection removeAll(java.lang.Object) -> removeAll
    376:376:com.google.common.collect.ImmutableCollection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    388:388:void clear() -> clear
    com.google.common.collect.ImmutableCollection get(java.lang.Object) -> get
    com.google.common.collect.ImmutableMultimap inverse() -> inverse
    417:417:boolean put(java.lang.Object,java.lang.Object) -> put
    430:430:boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    443:443:boolean putAll(com.google.common.collect.Multimap) -> putAll
    456:456:boolean remove(java.lang.Object,java.lang.Object) -> remove
    466:466:boolean isPartialView() -> a
    473:473:boolean containsKey(java.lang.Object) -> containsKey
    478:478:boolean containsValue(java.lang.Object) -> containsValue
    483:483:int size() -> size
    494:494:com.google.common.collect.ImmutableSet keySet() -> keySet
    499:499:java.util.Set createKeySet() -> e
    509:509:com.google.common.collect.ImmutableMap asMap() -> asMap
    514:514:java.util.Map createAsMap() -> n
    520:520:com.google.common.collect.ImmutableCollection entries() -> entries
    525:525:com.google.common.collect.ImmutableCollection createEntries() -> d
    564:564:com.google.common.collect.UnmodifiableIterator entryIterator() -> b
    589:598:java.util.Spliterator entrySpliterator() -> m
    603:607:void forEach(java.util.function.BiConsumer) -> forEach
    616:616:com.google.common.collect.ImmutableMultiset keys() -> keys
    621:621:com.google.common.collect.ImmutableMultiset createKeys() -> f
    685:685:com.google.common.collect.ImmutableCollection values() -> values
    690:690:com.google.common.collect.ImmutableCollection createValues() -> o
    695:695:com.google.common.collect.UnmodifiableIterator valueIterator() -> c
    69:69:java.lang.String toString() -> toString
    69:69:int hashCode() -> hashCode
    69:69:boolean equals(java.lang.Object) -> equals
    69:69:java.util.Map asMap() -> asMap
    69:69:java.util.Iterator valueIterator() -> h
    69:69:java.util.Collection createValues() -> g
    69:69:java.util.Collection values() -> values
    69:69:com.google.common.collect.Multiset createKeys() -> j
    69:69:com.google.common.collect.Multiset keys() -> keys
    69:69:java.util.Set keySet() -> keySet
    69:69:java.util.Iterator entryIterator() -> l
    69:69:java.util.Collection createEntries() -> k
    69:69:java.util.Collection entries() -> entries
    69:69:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    69:69:boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    69:69:boolean isEmpty() -> isEmpty
    69:69:java.util.Collection get(java.lang.Object) -> get
    69:69:java.util.Collection removeAll(java.lang.Object) -> removeAll
    606:606:void lambda$forEach$3(java.util.function.BiConsumer,java.lang.Object,java.util.Collection) -> a
    606:606:void lambda$null$2(java.util.function.BiConsumer,java.lang.Object,java.lang.Object) -> a
    592:595:java.util.Spliterator lambda$entrySpliterator$1(java.util.Map$Entry) -> a
    595:595:java.util.Map$Entry lambda$null$0(java.lang.Object,java.lang.Object) -> a
com.google.common.collect.ImmutableMultimap$1 -> com.google.common.collect.cX:
    java.util.Iterator asMapItr -> a
    java.lang.Object currentKey -> b
    java.util.Iterator valueItr -> c
    com.google.common.collect.ImmutableMultimap this$0 -> d
    564:568:void <init>(com.google.common.collect.ImmutableMultimap) -> <init>
    572:572:boolean hasNext() -> hasNext
    577:582:java.util.Map$Entry next() -> a
    564:564:java.lang.Object next() -> next
com.google.common.collect.ImmutableMultimap$2 -> com.google.common.collect.cY:
    java.util.Iterator valueCollectionItr -> a
    java.util.Iterator valueItr -> b
    com.google.common.collect.ImmutableMultimap this$0 -> c
    695:697:void <init>(com.google.common.collect.ImmutableMultimap) -> <init>
    701:701:boolean hasNext() -> hasNext
    706:709:java.lang.Object next() -> next
com.google.common.collect.ImmutableMultimap$Builder -> com.google.common.collect.ImmutableMultimap$Builder:
    java.util.Map builderMap -> a
    java.util.Comparator keyComparator -> b
    java.util.Comparator valueComparator -> c
    152:154:void <init>() -> <init>
    157:157:java.util.Collection newMutableValueCollection() -> a
    163:169:com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
    179:179:com.google.common.collect.ImmutableMultimap$Builder put(java.util.Map$Entry) -> put
    190:193:com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Iterable) -> putAll
    204:226:com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    237:237:com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    251:254:com.google.common.collect.ImmutableMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    264:265:com.google.common.collect.ImmutableMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    275:276:com.google.common.collect.ImmutableMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    281:284:com.google.common.collect.ImmutableMultimap$Builder combine(com.google.common.collect.ImmutableMultimap$Builder) -> b
    289:293:com.google.common.collect.ImmutableMultimap build() -> build
com.google.common.collect.ImmutableMultimap$EntryCollection -> com.google.common.collect.cZ:
    com.google.common.collect.ImmutableMultimap multimap -> a
    long serialVersionUID -> serialVersionUID
    531:533:void <init>(com.google.common.collect.ImmutableMultimap) -> <init>
    537:537:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    542:542:boolean isPartialView() -> a
    547:547:int size() -> size
    552:556:boolean contains(java.lang.Object) -> contains
    528:528:java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMultimap$FieldSettersHolder -> com.google.common.collect.da:
    com.google.common.collect.Serialization$FieldSetter MAP_FIELD_SETTER -> a
    com.google.common.collect.Serialization$FieldSetter SIZE_FIELD_SETTER -> b
    340:343:void <clinit>() -> <clinit>
com.google.common.collect.ImmutableMultimap$Keys -> com.google.common.collect.db:
    com.google.common.collect.ImmutableMultimap this$0 -> a
    626:626:void <init>(com.google.common.collect.ImmutableMultimap) -> <init>
    629:629:boolean contains(java.lang.Object) -> contains
    634:635:int count(java.lang.Object) -> count
    640:640:com.google.common.collect.ImmutableSet elementSet() -> elementSet
    645:645:int size() -> size
    650:651:com.google.common.collect.Multiset$Entry getEntry(int) -> a
    656:656:boolean isPartialView() -> a
    662:662:java.lang.Object writeReplace() -> writeReplace
    624:624:java.util.Set elementSet() -> elementSet
com.google.common.collect.ImmutableMultimap$KeysSerializedForm -> com.google.common.collect.dc:
    com.google.common.collect.ImmutableMultimap multimap -> a
    670:672:void <init>(com.google.common.collect.ImmutableMultimap) -> <init>
    675:675:java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMultimap$Values -> com.google.common.collect.dd:
    com.google.common.collect.ImmutableMultimap multimap -> a
    long serialVersionUID -> serialVersionUID
    717:719:void <init>(com.google.common.collect.ImmutableMultimap) -> <init>
    723:723:boolean contains(java.lang.Object) -> contains
    728:728:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    734:737:int copyIntoArray(java.lang.Object[],int) -> a
    742:742:int size() -> size
    747:747:boolean isPartialView() -> a
    714:714:java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMultiset -> com.google.common.collect.ImmutableMultiset:
    com.google.common.collect.ImmutableList asList -> a
    com.google.common.collect.ImmutableSet entrySet -> b
    67:67:java.util.stream.Collector toImmutableMultiset() -> toImmutableMultiset
    83:85:java.util.stream.Collector toImmutableMultiset(java.util.function.Function,java.util.function.ToIntFunction) -> toImmutableMultiset
    99:99:com.google.common.collect.ImmutableMultiset of() -> of
    110:110:com.google.common.collect.ImmutableMultiset of(java.lang.Object) -> of
    121:121:com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object) -> of
    133:133:com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    145:145:com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    157:157:com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    169:169:com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    180:180:com.google.common.collect.ImmutableMultiset copyOf(java.lang.Object[]) -> copyOf
    190:203:com.google.common.collect.ImmutableMultiset copyOf(java.lang.Iterable) -> copyOf
    213:215:com.google.common.collect.ImmutableMultiset copyOf(java.util.Iterator) -> copyOf
    219:221:com.google.common.collect.ImmutableMultiset copyFromElements(java.lang.Object[]) -> a
    226:229:com.google.common.collect.ImmutableMultiset copyFromEntries(java.util.Collection) -> a
    233:233:void <init>() -> <init>
    237:238:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    264:265:com.google.common.collect.ImmutableList asList() -> asList
    270:270:boolean contains(java.lang.Object) -> contains
    283:283:int add(java.lang.Object,int) -> add
    296:296:int remove(java.lang.Object,int) -> remove
    309:309:int setCount(java.lang.Object,int) -> setCount
    322:322:boolean setCount(java.lang.Object,int,int) -> setCount
    328:332:int copyIntoArray(java.lang.Object[],int) -> a
    337:337:boolean equals(java.lang.Object) -> equals
    342:342:int hashCode() -> hashCode
    347:347:java.lang.String toString() -> toString
    com.google.common.collect.ImmutableSet elementSet() -> elementSet
    358:359:com.google.common.collect.ImmutableSet entrySet() -> entrySet
    363:363:com.google.common.collect.ImmutableSet createEntrySet() -> b
    com.google.common.collect.Multiset$Entry getEntry(int) -> a
    428:428:java.lang.Object writeReplace() -> writeReplace
    436:436:com.google.common.collect.ImmutableMultiset$Builder builder() -> builder
    54:54:java.util.Iterator iterator() -> iterator
    54:54:java.util.Set entrySet() -> entrySet
    54:54:java.util.Set elementSet() -> elementSet
    93:93:com.google.common.collect.ImmutableMultiset lambda$toImmutableMultiset$3(com.google.common.collect.Multiset) -> a
    90:91:com.google.common.collect.Multiset lambda$toImmutableMultiset$2(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> a
    88:88:void lambda$toImmutableMultiset$1(java.util.function.Function,java.util.function.ToIntFunction,com.google.common.collect.Multiset,java.lang.Object) -> a
    67:67:int lambda$toImmutableMultiset$0(java.lang.Object) -> a
com.google.common.collect.ImmutableMultiset$1 -> com.google.common.collect.de:
    int remaining -> a
    java.lang.Object element -> b
    java.util.Iterator val$entryIterator -> c
    238:238:void <init>(com.google.common.collect.ImmutableMultiset,java.util.Iterator) -> <init>
    244:244:boolean hasNext() -> hasNext
    249:255:java.lang.Object next() -> next
com.google.common.collect.ImmutableMultiset$Builder -> com.google.common.collect.ImmutableMultiset$Builder:
    com.google.common.collect.Multiset contents -> a
    466:467:void <init>() -> <init>
    469:471:void <init>(com.google.common.collect.Multiset) -> <init>
    483:484:com.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object) -> add
    497:498:com.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object[]) -> add
    514:515:com.google.common.collect.ImmutableMultiset$Builder addCopies(java.lang.Object,int) -> addCopies
    530:531:com.google.common.collect.ImmutableMultiset$Builder setCount(java.lang.Object,int) -> setCount
    544:550:com.google.common.collect.ImmutableMultiset$Builder addAll(java.lang.Iterable) -> addAll
    563:564:com.google.common.collect.ImmutableMultiset$Builder addAll(java.util.Iterator) -> addAll
    573:573:com.google.common.collect.ImmutableMultiset build() -> build
    458:458:com.google.common.collect.ImmutableCollection build() -> build
    458:458:com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    458:458:com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    458:458:com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    458:458:com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
    546:546:void lambda$addAll$0(java.lang.Object,int) -> a
com.google.common.collect.ImmutableMultiset$ElementSet -> com.google.common.collect.df:
    java.util.List entries -> a
    com.google.common.collect.Multiset delegate -> b
    590:593:void <init>(java.util.List,com.google.common.collect.Multiset) -> <init>
    597:597:java.lang.Object get(int) -> a
    602:602:boolean contains(java.lang.Object) -> contains
    607:607:boolean isPartialView() -> a
    612:612:int size() -> size
com.google.common.collect.ImmutableMultiset$EntrySet -> com.google.common.collect.dg:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ImmutableMultiset this$0 -> a
    369:369:void <init>(com.google.common.collect.ImmutableMultiset) -> <init>
    372:372:boolean isPartialView() -> a
    377:377:com.google.common.collect.Multiset$Entry get(int) -> d
    382:382:int size() -> size
    387:395:boolean contains(java.lang.Object) -> contains
    400:400:int hashCode() -> hashCode
    406:406:java.lang.Object writeReplace() -> writeReplace
    368:368:java.lang.Object get(int) -> a
    369:369:void <init>(com.google.common.collect.ImmutableMultiset,byte) -> <init>
com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm -> com.google.common.collect.dh:
    com.google.common.collect.ImmutableMultiset multiset -> a
    416:418:void <init>(com.google.common.collect.ImmutableMultiset) -> <init>
    421:421:java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMultiset$SerializedForm -> com.google.common.collect.di:
    java.lang.Object[] elements -> a
    int[] counts -> b
    long serialVersionUID -> serialVersionUID
    620:630:void <init>(com.google.common.collect.Multiset) -> <init>
    633:637:java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMultisetGwtSerializationDependencies -> com.google.common.collect.dj:
    40:40:void <init>() -> <init>
com.google.common.collect.ImmutableRangeMap -> com.google.common.collect.ImmutableRangeMap:
    com.google.common.collect.ImmutableRangeMap EMPTY -> a
    com.google.common.collect.ImmutableList ranges -> b
    com.google.common.collect.ImmutableList values -> c
    long serialVersionUID -> serialVersionUID
    62:62:java.util.stream.Collector toImmutableRangeMap(java.util.function.Function,java.util.function.Function) -> toImmutableRangeMap
    68:68:com.google.common.collect.ImmutableRangeMap of() -> of
    73:73:com.google.common.collect.ImmutableRangeMap of(com.google.common.collect.Range,java.lang.Object) -> of
    79:89:com.google.common.collect.ImmutableRangeMap copyOf(com.google.common.collect.RangeMap) -> copyOf
    94:94:com.google.common.collect.ImmutableRangeMap$Builder builder() -> builder
    168:171:void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableList) -> <init>
    175:186:java.lang.Object get(java.lang.Comparable) -> get
    192:203:java.util.Map$Entry getEntry(java.lang.Comparable) -> getEntry
    209:214:com.google.common.collect.Range span() -> span
    226:226:void put(com.google.common.collect.Range,java.lang.Object) -> put
    238:238:void putCoalescing(com.google.common.collect.Range,java.lang.Object) -> putCoalescing
    250:250:void putAll(com.google.common.collect.RangeMap) -> putAll
    262:262:void clear() -> clear
    274:274:void remove(com.google.common.collect.Range) -> remove
    289:289:void merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction) -> merge
    294:299:com.google.common.collect.ImmutableMap asMapOfRanges() -> asMapOfRanges
    304:309:com.google.common.collect.ImmutableMap asDescendingMapOfRanges() -> asDescendingMapOfRanges
    314:361:com.google.common.collect.ImmutableRangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    375:375:int hashCode() -> hashCode
    380:384:boolean equals(java.lang.Object) -> equals
    389:389:java.lang.String toString() -> toString
    424:424:java.lang.Object writeReplace() -> writeReplace
    45:45:com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    45:45:java.util.Map asDescendingMapOfRanges() -> asDescendingMapOfRanges
    45:45:java.util.Map asMapOfRanges() -> asMapOfRanges
    47:47:com.google.common.collect.ImmutableList access$000(com.google.common.collect.ImmutableRangeMap) -> a
    49:50:void <clinit>() -> <clinit>
com.google.common.collect.ImmutableRangeMap$1 -> com.google.common.collect.dk:
    int val$len -> a
    int val$off -> b
    com.google.common.collect.Range val$range -> c
    com.google.common.collect.ImmutableRangeMap this$0 -> d
    339:339:void <init>(com.google.common.collect.ImmutableRangeMap,int,int,com.google.common.collect.Range) -> <init>
    342:342:int size() -> size
    347:351:com.google.common.collect.Range get(int) -> a
    357:357:boolean isPartialView() -> a
    339:339:java.lang.Object get(int) -> get
com.google.common.collect.ImmutableRangeMap$2 -> com.google.common.collect.dl:
    com.google.common.collect.Range val$range -> a
    com.google.common.collect.ImmutableRangeMap val$outer -> b
    361:361:void <init>(com.google.common.collect.ImmutableRangeMap,com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableList,com.google.common.collect.Range,com.google.common.collect.ImmutableRangeMap) -> <init>
    364:367:com.google.common.collect.ImmutableRangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    361:361:com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    361:361:java.util.Map asDescendingMapOfRanges() -> asDescendingMapOfRanges
    361:361:java.util.Map asMapOfRanges() -> asMapOfRanges
com.google.common.collect.ImmutableRangeMap$Builder -> com.google.common.collect.ImmutableRangeMap$Builder:
    java.util.List entries -> a
    106:108:void <init>() -> <init>
    117:121:com.google.common.collect.ImmutableRangeMap$Builder put(com.google.common.collect.Range,java.lang.Object) -> put
    127:130:com.google.common.collect.ImmutableRangeMap$Builder putAll(com.google.common.collect.RangeMap) -> putAll
    135:136:com.google.common.collect.ImmutableRangeMap$Builder combine(com.google.common.collect.ImmutableRangeMap$Builder) -> a
    146:161:com.google.common.collect.ImmutableRangeMap build() -> build
com.google.common.collect.ImmutableRangeMap$SerializedForm -> com.google.common.collect.dm:
    com.google.common.collect.ImmutableMap mapOfRanges -> a
    long serialVersionUID -> serialVersionUID
    400:402:void <init>(com.google.common.collect.ImmutableMap) -> <init>
    405:408:java.lang.Object readResolve() -> readResolve
    413:417:java.lang.Object createRangeMap() -> a
com.google.common.collect.ImmutableRangeSet -> com.google.common.collect.ImmutableRangeSet:
    com.google.common.collect.ImmutableRangeSet EMPTY -> a
    com.google.common.collect.ImmutableRangeSet ALL -> b
    com.google.common.collect.ImmutableList ranges -> c
    com.google.common.collect.ImmutableRangeSet complement -> d
    68:68:java.util.stream.Collector toImmutableRangeSet() -> toImmutableRangeSet
    74:74:com.google.common.collect.ImmutableRangeSet of() -> of
    82:88:com.google.common.collect.ImmutableRangeSet of(com.google.common.collect.Range) -> of
    95:95:com.google.common.collect.ImmutableRangeSet all() -> a
    100:113:com.google.common.collect.ImmutableRangeSet copyOf(com.google.common.collect.RangeSet) -> copyOf
    125:125:com.google.common.collect.ImmutableRangeSet copyOf(java.lang.Iterable) -> copyOf
    137:137:com.google.common.collect.ImmutableRangeSet unionOf(java.lang.Iterable) -> unionOf
    140:142:void <init>(com.google.common.collect.ImmutableList) -> <init>
    144:147:void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableRangeSet) -> <init>
    153:168:boolean intersects(com.google.common.collect.Range) -> intersects
    173:181:boolean encloses(com.google.common.collect.Range) -> encloses
    186:198:com.google.common.collect.Range rangeContaining(java.lang.Comparable) -> rangeContaining
    203:206:com.google.common.collect.Range span() -> span
    211:211:boolean isEmpty() -> isEmpty
    223:223:void add(com.google.common.collect.Range) -> add
    235:235:void addAll(com.google.common.collect.RangeSet) -> addAll
    247:247:void addAll(java.lang.Iterable) -> addAll
    259:259:void remove(com.google.common.collect.Range) -> remove
    271:271:void removeAll(com.google.common.collect.RangeSet) -> removeAll
    283:283:void removeAll(java.lang.Iterable) -> removeAll
    288:291:com.google.common.collect.ImmutableSet asRanges() -> asRanges
    296:299:com.google.common.collect.ImmutableSet asDescendingSetOfRanges() -> asDescendingSetOfRanges
    361:372:com.google.common.collect.ImmutableRangeSet complement() -> complement
    384:384:com.google.common.collect.ImmutableRangeSet union(com.google.common.collect.RangeSet) -> union
    397:399:com.google.common.collect.ImmutableRangeSet intersection(com.google.common.collect.RangeSet) -> intersection
    411:413:com.google.common.collect.ImmutableRangeSet difference(com.google.common.collect.RangeSet) -> difference
    421:456:com.google.common.collect.ImmutableList intersectRanges(com.google.common.collect.Range) -> a
    483:491:com.google.common.collect.ImmutableRangeSet subRangeSet(com.google.common.collect.Range) -> subRangeSet
    514:533:com.google.common.collect.ImmutableSortedSet asSet(com.google.common.collect.DiscreteDomain) -> asSet
    704:704:boolean isPartialView() -> b
    709:709:com.google.common.collect.ImmutableRangeSet$Builder builder() -> builder
    828:828:java.lang.Object writeReplace() -> writeReplace
    48:48:boolean equals(java.lang.Object) -> equals
    48:48:boolean enclosesAll(com.google.common.collect.RangeSet) -> enclosesAll
    48:48:void clear() -> clear
    48:48:boolean contains(java.lang.Comparable) -> contains
    48:48:com.google.common.collect.RangeSet subRangeSet(com.google.common.collect.Range) -> subRangeSet
    48:48:com.google.common.collect.RangeSet complement() -> complement
    48:48:java.util.Set asDescendingSetOfRanges() -> asDescendingSetOfRanges
    48:48:java.util.Set asRanges() -> asRanges
    50:50:com.google.common.collect.ImmutableList access$000(com.google.common.collect.ImmutableRangeSet) -> a
    53:57:void <clinit>() -> <clinit>
com.google.common.collect.ImmutableRangeSet$1 -> com.google.common.collect.dn:
    int val$length -> a
    int val$fromIndex -> b
    com.google.common.collect.Range val$range -> c
    com.google.common.collect.ImmutableRangeSet this$0 -> d
    456:456:void <init>(com.google.common.collect.ImmutableRangeSet,int,int,com.google.common.collect.Range) -> <init>
    459:459:int size() -> size
    464:468:com.google.common.collect.Range get(int) -> a
    474:474:boolean isPartialView() -> a
    456:456:java.lang.Object get(int) -> get
com.google.common.collect.ImmutableRangeSet$AsSet -> com.google.common.collect.do:
    com.google.common.collect.DiscreteDomain domain -> c
    java.lang.Integer size -> d
    com.google.common.collect.ImmutableRangeSet this$0 -> a
    539:542:void <init>(com.google.common.collect.ImmutableRangeSet,com.google.common.collect.DiscreteDomain) -> <init>
    549:560:int size() -> size
    565:565:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    586:586:com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    605:605:com.google.common.collect.ImmutableSortedSet subSet(com.google.common.collect.Range) -> a
    610:610:com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Comparable,boolean) -> a
    616:622:com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean) -> a
    627:627:com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Comparable,boolean) -> b
    632:640:boolean contains(java.lang.Object) -> contains
    646:659:int indexOf(java.lang.Object) -> a
    664:664:com.google.common.collect.ImmutableSortedSet createDescendingSet() -> b
    669:669:boolean isPartialView() -> a
    674:674:java.lang.String toString() -> toString
    679:679:java.lang.Object writeReplace() -> writeReplace
    536:536:com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> a
    536:536:com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> a
    536:536:com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> b
    536:536:java.util.Iterator descendingIterator() -> descendingIterator
    536:536:java.util.Iterator iterator() -> iterator
    536:536:com.google.common.collect.DiscreteDomain access$100(com.google.common.collect.ImmutableRangeSet$AsSet) -> a
com.google.common.collect.ImmutableRangeSet$AsSet$1 -> com.google.common.collect.dp:
    java.util.Iterator rangeItr -> a
    java.util.Iterator elemItr -> b
    com.google.common.collect.ImmutableRangeSet$AsSet this$1 -> c
    565:567:void <init>(com.google.common.collect.ImmutableRangeSet$AsSet) -> <init>
    571:578:java.lang.Comparable computeNext() -> a
    565:565:java.lang.Object computeNext() -> computeNext
com.google.common.collect.ImmutableRangeSet$AsSet$2 -> com.google.common.collect.dq:
    java.util.Iterator rangeItr -> a
    java.util.Iterator elemItr -> b
    com.google.common.collect.ImmutableRangeSet$AsSet this$1 -> c
    586:588:void <init>(com.google.common.collect.ImmutableRangeSet$AsSet) -> <init>
    592:599:java.lang.Comparable computeNext() -> a
    586:586:java.lang.Object computeNext() -> computeNext
com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm -> com.google.common.collect.dr:
    com.google.common.collect.ImmutableList ranges -> a
    com.google.common.collect.DiscreteDomain domain -> b
    687:690:void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.DiscreteDomain) -> <init>
    693:693:java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableRangeSet$Builder -> com.google.common.collect.ImmutableRangeSet$Builder:
    java.util.List ranges -> a
    720:722:void <init>() -> <init>
    734:736:com.google.common.collect.ImmutableRangeSet$Builder add(com.google.common.collect.Range) -> add
    746:746:com.google.common.collect.ImmutableRangeSet$Builder addAll(com.google.common.collect.RangeSet) -> addAll
    758:761:com.google.common.collect.ImmutableRangeSet$Builder addAll(java.lang.Iterable) -> addAll
    766:767:com.google.common.collect.ImmutableRangeSet$Builder combine(com.google.common.collect.ImmutableRangeSet$Builder) -> a
    776:804:com.google.common.collect.ImmutableRangeSet build() -> build
com.google.common.collect.ImmutableRangeSet$ComplementRanges -> com.google.common.collect.ds:
    boolean positiveBoundedBelow -> a
    boolean positiveBoundedAbove -> b
    int size -> c
    com.google.common.collect.ImmutableRangeSet this$0 -> d
    313:325:void <init>(com.google.common.collect.ImmutableRangeSet) -> <init>
    329:329:int size() -> size
    334:350:com.google.common.collect.Range get(int) -> a
    355:355:boolean isPartialView() -> a
    304:304:java.lang.Object get(int) -> get
com.google.common.collect.ImmutableRangeSet$SerializedForm -> com.google.common.collect.dt:
    com.google.common.collect.ImmutableList ranges -> a
    812:814:void <init>(com.google.common.collect.ImmutableList) -> <init>
    817:822:java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSet -> com.google.common.collect.ImmutableSet:
    com.google.common.collect.ImmutableList asList -> a
    66:66:java.util.stream.Collector toImmutableSet() -> toImmutableSet
    75:75:com.google.common.collect.ImmutableSet of() -> of
    84:84:com.google.common.collect.ImmutableSet of(java.lang.Object) -> of
    93:93:com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object) -> of
    102:102:com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    111:111:com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    120:120:com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    134:145:com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    165:169:com.google.common.collect.ImmutableSet constructUnknownDuplication(int,java.lang.Object[]) -> a
    188:202:com.google.common.collect.ImmutableSet construct(int,int,java.lang.Object[]) -> a
    224:238:com.google.common.collect.ImmutableSet copyOf(java.util.Collection) -> copyOf
    255:257:com.google.common.collect.ImmutableSet copyOf(java.lang.Iterable) -> copyOf
    268:275:com.google.common.collect.ImmutableSet copyOf(java.util.Iterator) -> copyOf
    287:293:com.google.common.collect.ImmutableSet copyOf(java.lang.Object[]) -> copyOf
    299:299:com.google.common.collect.ImmutableSet copyOfEnumSet(java.util.EnumSet) -> a
    302:302:void <init>() -> <init>
    306:306:boolean isHashCodeFast() -> c
    311:319:boolean equals(java.lang.Object) -> equals
    324:324:int hashCode() -> hashCode
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    336:337:com.google.common.collect.ImmutableList asList() -> asList
    341:341:com.google.common.collect.ImmutableList createAsList() -> g
    410:410:java.lang.Object writeReplace() -> writeReplace
    418:418:com.google.common.collect.ImmutableSet$Builder builder() -> builder
    435:436:com.google.common.collect.ImmutableSet$Builder builderWithExpectedSize(int) -> builderWithExpectedSize
    441:454:java.lang.Object[] rebuildHashTable(int,java.lang.Object[],int) -> a
    642:655:int chooseTableSize(int) -> b
    697:732:boolean hashFloodingDetected(java.lang.Object[]) -> a
    741:741:int maxRunBeforeFallback(int) -> a
    51:51:java.util.Iterator iterator() -> iterator
    53:53:int access$000(int) -> c
com.google.common.collect.ImmutableSet$Builder -> com.google.common.collect.ImmutableSet$Builder:
    com.google.common.collect.ImmutableSet$SetBuilderImpl impl -> b
    boolean forceCopy -> a
    480:481:void <init>() -> <init>
    483:485:void <init>(int) -> <init>
    487:489:void <init>(byte) -> <init>
    497:501:void copyIfNecessary() -> a
    504:505:void copy() -> b
    510:513:com.google.common.collect.ImmutableSet$Builder add(java.lang.Object) -> add
    519:520:com.google.common.collect.ImmutableSet$Builder add(java.lang.Object[]) -> add
    534:535:com.google.common.collect.ImmutableSet$Builder addAll(java.lang.Iterable) -> addAll
    541:542:com.google.common.collect.ImmutableSet$Builder addAll(java.util.Iterator) -> addAll
    546:548:com.google.common.collect.ImmutableSet$Builder combine(com.google.common.collect.ImmutableSet$Builder) -> a
    553:555:com.google.common.collect.ImmutableSet build() -> build
    475:475:com.google.common.collect.ImmutableCollection build() -> build
    475:475:com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    475:475:com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    475:475:com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    475:475:com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableSet$Indexed -> com.google.common.collect.du:
    344:344:void <init>() -> <init>
    java.lang.Object get(int) -> a
    349:349:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    354:354:java.util.Spliterator spliterator() -> spliterator
    359:364:void forEach(java.util.function.Consumer) -> forEach
    368:368:int copyIntoArray(java.lang.Object[],int) -> a
    373:373:com.google.common.collect.ImmutableList createAsList() -> g
    344:344:java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableSet$Indexed$1 -> com.google.common.collect.dv:
    com.google.common.collect.ImmutableSet$Indexed this$0 -> a
    373:373:void <init>(com.google.common.collect.ImmutableSet$Indexed) -> <init>
    376:376:java.lang.Object get(int) -> get
    381:381:com.google.common.collect.ImmutableSet$Indexed delegateCollection() -> c
    373:373:com.google.common.collect.ImmutableCollection delegateCollection() -> b
com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl -> com.google.common.collect.dw:
    java.util.Set delegate -> c
    846:851:void <init>(com.google.common.collect.ImmutableSet$SetBuilderImpl) -> <init>
    855:859:com.google.common.collect.ImmutableSet$SetBuilderImpl add(java.lang.Object) -> a
    864:864:com.google.common.collect.ImmutableSet$SetBuilderImpl copy() -> a
    869:876:com.google.common.collect.ImmutableSet build() -> b
com.google.common.collect.ImmutableSet$RegularSetBuilderImpl -> com.google.common.collect.dx:
    java.lang.Object[] hashTable -> c
    int maxRunBeforeFallback -> d
    int expandTableThreshold -> e
    int hashCode -> f
    759:764:void <init>(int) -> <init>
    767:772:void <init>(com.google.common.collect.ImmutableSet$RegularSetBuilderImpl) -> <init>
    775:781:void ensureTableCapacity(int) -> a
    785:803:com.google.common.collect.ImmutableSet$SetBuilderImpl add(java.lang.Object) -> a
    808:808:com.google.common.collect.ImmutableSet$SetBuilderImpl copy() -> a
    813:819:com.google.common.collect.ImmutableSet$SetBuilderImpl review() -> c
    824:834:com.google.common.collect.ImmutableSet build() -> b
com.google.common.collect.ImmutableSet$SerializedForm -> com.google.common.collect.dy:
    java.lang.Object[] elements -> a
    long serialVersionUID -> serialVersionUID
    397:399:void <init>(java.lang.Object[]) -> <init>
    402:402:java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSet$SetBuilderImpl -> com.google.common.collect.dz:
    java.lang.Object[] dedupedElements -> a
    int distinct -> b
    565:568:void <init>(int) -> <init>
    571:574:void <init>(com.google.common.collect.ImmutableSet$SetBuilderImpl) -> <init>
    581:586:void ensureCapacity(int) -> a
    590:592:void addDedupedElement(java.lang.Object) -> b
    com.google.common.collect.ImmutableSet$SetBuilderImpl add(java.lang.Object) -> a
    602:606:com.google.common.collect.ImmutableSet$SetBuilderImpl combine(com.google.common.collect.ImmutableSet$SetBuilderImpl) -> a
    com.google.common.collect.ImmutableSet$SetBuilderImpl copy() -> a
    620:620:com.google.common.collect.ImmutableSet$SetBuilderImpl review() -> c
    com.google.common.collect.ImmutableSet build() -> b
com.google.common.collect.ImmutableSetMultimap -> com.google.common.collect.ImmutableSetMultimap:
    com.google.common.collect.ImmutableSet emptySet -> a
    com.google.common.collect.ImmutableSetMultimap inverse -> c
    com.google.common.collect.ImmutableSet entries -> d
    long serialVersionUID -> serialVersionUID
    90:92:java.util.stream.Collector toImmutableSetMultimap(java.util.function.Function,java.util.function.Function) -> toImmutableSetMultimap
    143:149:java.util.stream.Collector flatteningToImmutableSetMultimap(java.util.function.Function,java.util.function.Function) -> flatteningToImmutableSetMultimap
    157:157:com.google.common.collect.ImmutableSetMultimap of() -> of
    162:164:com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object) -> of
    172:175:com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    183:187:com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    196:201:com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    210:216:com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    223:223:com.google.common.collect.ImmutableSetMultimap$Builder builder() -> builder
    377:377:com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap) -> copyOf
    382:395:com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator) -> a
    410:410:com.google.common.collect.ImmutableSetMultimap copyOf(java.lang.Iterable) -> copyOf
    417:434:com.google.common.collect.ImmutableSetMultimap fromMapEntries(java.util.Collection,java.util.Comparator) -> a
    447:449:void <init>(com.google.common.collect.ImmutableMap,int,java.util.Comparator) -> <init>
    461:462:com.google.common.collect.ImmutableSet get(java.lang.Object) -> get
    476:477:com.google.common.collect.ImmutableSetMultimap inverse() -> inverse
    481:487:com.google.common.collect.ImmutableSetMultimap invert() -> d
    500:500:com.google.common.collect.ImmutableSet removeAll(java.lang.Object) -> removeAll
    513:513:com.google.common.collect.ImmutableSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    524:525:com.google.common.collect.ImmutableSet entries() -> entries
    562:564:com.google.common.collect.ImmutableSet valueSet(java.util.Comparator,java.util.Collection) -> a
    568:570:com.google.common.collect.ImmutableSet emptySet(java.util.Comparator) -> a
    575:575:com.google.common.collect.ImmutableSet$Builder valuesBuilder(java.util.Comparator) -> b
    586:589:void writeObject(java.io.ObjectOutputStream) -> writeObject
    593:594:java.util.Comparator valueComparator() -> f
    608:646:void readObject(java.io.ObjectInputStream) -> readObject
    56:56:com.google.common.collect.ImmutableCollection entries() -> entries
    56:56:com.google.common.collect.ImmutableMultimap inverse() -> inverse
    56:56:com.google.common.collect.ImmutableCollection get(java.lang.Object) -> get
    56:56:com.google.common.collect.ImmutableCollection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    56:56:com.google.common.collect.ImmutableCollection removeAll(java.lang.Object) -> removeAll
    56:56:java.util.Collection entries() -> entries
    56:56:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    56:56:java.util.Collection get(java.lang.Object) -> get
    56:56:java.util.Collection removeAll(java.lang.Object) -> removeAll
    56:56:java.util.Set entries() -> entries
    56:56:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    56:56:java.util.Set removeAll(java.lang.Object) -> removeAll
    56:56:java.util.Set get(java.lang.Object) -> get
    148:148:java.util.stream.Stream lambda$flatteningToImmutableSetMultimap$2(java.util.function.Function,java.lang.Object) -> a
    147:147:java.lang.Object lambda$flatteningToImmutableSetMultimap$1(java.util.function.Function,java.lang.Object) -> b
    94:94:void lambda$toImmutableSetMultimap$0(java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableSetMultimap$Builder,java.lang.Object) -> a
com.google.common.collect.ImmutableSetMultimap$Builder -> com.google.common.collect.ImmutableSetMultimap$Builder:
    251:252:void <init>() -> <init>
    256:256:java.util.Collection newMutableValueCollection() -> a
    263:264:com.google.common.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
    275:276:com.google.common.collect.ImmutableSetMultimap$Builder put(java.util.Map$Entry) -> put
    288:289:com.google.common.collect.ImmutableSetMultimap$Builder putAll(java.lang.Iterable) -> putAll
    295:296:com.google.common.collect.ImmutableSetMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    302:302:com.google.common.collect.ImmutableSetMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    309:312:com.google.common.collect.ImmutableSetMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    318:319:com.google.common.collect.ImmutableSetMultimap$Builder combine(com.google.common.collect.ImmutableMultimap$Builder) -> a
    330:331:com.google.common.collect.ImmutableSetMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    348:349:com.google.common.collect.ImmutableSetMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    355:359:com.google.common.collect.ImmutableSetMultimap build() -> build
    245:245:com.google.common.collect.ImmutableMultimap build() -> build
    245:245:com.google.common.collect.ImmutableMultimap$Builder combine(com.google.common.collect.ImmutableMultimap$Builder) -> b
    245:245:com.google.common.collect.ImmutableMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    245:245:com.google.common.collect.ImmutableMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    245:245:com.google.common.collect.ImmutableMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    245:245:com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    245:245:com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    245:245:com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Iterable) -> putAll
    245:245:com.google.common.collect.ImmutableMultimap$Builder put(java.util.Map$Entry) -> put
    245:245:com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
com.google.common.collect.ImmutableSetMultimap$EntrySet -> com.google.common.collect.dA:
    com.google.common.collect.ImmutableSetMultimap multimap -> a
    531:533:void <init>(com.google.common.collect.ImmutableSetMultimap) -> <init>
    537:541:boolean contains(java.lang.Object) -> contains
    546:546:int size() -> size
    551:551:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    556:556:boolean isPartialView() -> a
    528:528:java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableSetMultimap$SetFieldSettersHolder -> com.google.common.collect.dB:
    com.google.common.collect.Serialization$FieldSetter EMPTY_SET_FIELD_SETTER -> a
    600:601:void <clinit>() -> <clinit>
com.google.common.collect.ImmutableSortedAsList -> com.google.common.collect.dC:
    34:35:void <init>(com.google.common.collect.ImmutableSortedSet,com.google.common.collect.ImmutableList) -> <init>
    39:39:com.google.common.collect.ImmutableSortedSet delegateCollection() -> g
    44:44:java.util.Comparator comparator() -> comparator
    53:60:int indexOf(java.lang.Object) -> indexOf
    66:66:int lastIndexOf(java.lang.Object) -> lastIndexOf
    72:72:boolean contains(java.lang.Object) -> contains
    83:84:com.google.common.collect.ImmutableList subListUnchecked(int,int) -> a
    89:93:java.util.Spliterator spliterator() -> spliterator
    29:29:com.google.common.collect.ImmutableCollection delegateCollection() -> b
com.google.common.collect.ImmutableSortedMap -> com.google.common.collect.ImmutableSortedMap:
    java.util.Comparator NATURAL_ORDER -> b
    com.google.common.collect.ImmutableSortedMap NATURAL_EMPTY_MAP -> c
    com.google.common.collect.RegularImmutableSortedSet keySet -> d
    com.google.common.collect.ImmutableList valueList -> e
    com.google.common.collect.ImmutableSortedMap descendingMap -> f
    long serialVersionUID -> serialVersionUID
    79:79:java.util.stream.Collector toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function) -> toImmutableSortedMap
    98:103:java.util.stream.Collector toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator) -> toImmutableSortedMap
    119:123:com.google.common.collect.ImmutableSortedMap emptyMap(java.util.Comparator) -> a
    132:132:com.google.common.collect.ImmutableSortedMap of() -> of
    137:137:com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object) -> of
    142:144:com.google.common.collect.ImmutableSortedMap of(java.util.Comparator,java.lang.Object,java.lang.Object) -> b
    156:156:com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object) -> of
    168:168:com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object) -> of
    180:180:com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object) -> of
    192:193:com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object) -> of
    198:198:com.google.common.collect.ImmutableSortedMap ofEntries(java.util.Map$Entry[]) -> a
    220:221:com.google.common.collect.ImmutableSortedMap copyOf(java.util.Map) -> copyOf
    237:237:com.google.common.collect.ImmutableSortedMap copyOf(java.util.Map,java.util.Comparator) -> copyOf
    257:258:com.google.common.collect.ImmutableSortedMap copyOf(java.lang.Iterable) -> copyOf
    273:273:com.google.common.collect.ImmutableSortedMap copyOf(java.lang.Iterable,java.util.Comparator) -> copyOf
    288:303:com.google.common.collect.ImmutableSortedMap copyOfSorted(java.util.SortedMap) -> copyOfSorted
    308:325:com.google.common.collect.ImmutableSortedMap copyOfInternal(java.util.Map,java.util.Comparator) -> a
    340:341:com.google.common.collect.ImmutableSortedMap fromEntries(java.util.Comparator,boolean,java.lang.Iterable) -> a
    349:396:com.google.common.collect.ImmutableSortedMap fromEntries(java.util.Comparator,boolean,java.util.Map$Entry[],int) -> b
    407:407:com.google.common.collect.ImmutableSortedMap$Builder naturalOrder() -> naturalOrder
    419:419:com.google.common.collect.ImmutableSortedMap$Builder orderedBy(java.util.Comparator) -> orderedBy
    427:427:com.google.common.collect.ImmutableSortedMap$Builder reverseOrder() -> reverseOrder
    563:564:void <init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList) -> <init>
    569:573:void <init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSortedMap) -> <init>
    577:577:int size() -> size
    582:587:void forEach(java.util.function.BiConsumer) -> forEach
    591:592:java.lang.Object get(java.lang.Object) -> get
    597:597:boolean isPartialView() -> b
    603:603:com.google.common.collect.ImmutableSet entrySet() -> entrySet
    651:651:com.google.common.collect.ImmutableSet createEntrySet() -> g
    657:657:com.google.common.collect.ImmutableSortedSet keySet() -> keySet
    662:662:com.google.common.collect.ImmutableSet createKeySet() -> c
    671:671:com.google.common.collect.ImmutableCollection values() -> values
    676:676:com.google.common.collect.ImmutableCollection createValues() -> a
    686:686:java.util.Comparator comparator() -> comparator
    691:691:java.lang.Object firstKey() -> firstKey
    696:696:java.lang.Object lastKey() -> lastKey
    700:706:com.google.common.collect.ImmutableSortedMap getSubMap(int,int) -> a
    721:721:com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object) -> headMap
    737:737:com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object,boolean) -> headMap
    752:752:com.google.common.collect.ImmutableSortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    771:778:com.google.common.collect.ImmutableSortedMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    792:792:com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object) -> tailMap
    808:808:com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object,boolean) -> tailMap
    813:813:java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    818:818:java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    823:823:java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    828:828:java.lang.Object floorKey(java.lang.Object) -> floorKey
    833:833:java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    838:838:java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    843:843:java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    848:848:java.lang.Object higherKey(java.lang.Object) -> higherKey
    853:853:java.util.Map$Entry firstEntry() -> firstEntry
    858:858:java.util.Map$Entry lastEntry() -> lastEntry
    871:871:java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    884:884:java.util.Map$Entry pollLastEntry() -> pollLastEntry
    891:901:com.google.common.collect.ImmutableSortedMap descendingMap() -> descendingMap
    906:906:com.google.common.collect.ImmutableSortedSet navigableKeySet() -> navigableKeySet
    911:911:com.google.common.collect.ImmutableSortedSet descendingKeySet() -> descendingKeySet
    939:939:java.lang.Object writeReplace() -> writeReplace
    60:60:com.google.common.collect.ImmutableSet keySet() -> keySet
    60:60:java.util.Set entrySet() -> entrySet
    60:60:java.util.Collection values() -> values
    60:60:java.util.Set keySet() -> keySet
    60:60:java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    60:60:java.util.SortedMap headMap(java.lang.Object) -> headMap
    60:60:java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    60:60:java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    60:60:java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    60:60:java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    60:60:java.util.NavigableSet descendingKeySet() -> descendingKeySet
    60:60:java.util.NavigableSet navigableKeySet() -> navigableKeySet
    60:60:java.util.NavigableMap descendingMap() -> descendingMap
    104:104:java.util.TreeMap lambda$toImmutableSortedMap$0(java.util.Comparator) -> b
    61:61:com.google.common.collect.ImmutableSortedMap access$000(java.util.Comparator,java.lang.Object,java.lang.Object) -> a
    61:61:com.google.common.collect.ImmutableSortedMap access$100(java.util.Comparator,boolean,java.util.Map$Entry[],int) -> a
    61:61:com.google.common.collect.RegularImmutableSortedSet access$200(com.google.common.collect.ImmutableSortedMap) -> a
    61:61:com.google.common.collect.ImmutableList access$300(com.google.common.collect.ImmutableSortedMap) -> b
    112:116:void <clinit>() -> <clinit>
com.google.common.collect.ImmutableSortedMap$1 -> com.google.common.collect.dD:
    java.util.Comparator val$comparator -> a
    375:375:void <init>(java.util.Comparator) -> <init>
    378:378:int compare(java.util.Map$Entry,java.util.Map$Entry) -> a
    375:375:int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.ImmutableSortedMap$1EntrySet -> com.google.common.collect.dE:
    com.google.common.collect.ImmutableSortedMap this$0 -> a
    608:608:void <init>(com.google.common.collect.ImmutableSortedMap) -> <init>
    611:611:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    616:616:java.util.Spliterator spliterator() -> spliterator
    621:622:void forEach(java.util.function.Consumer) -> forEach
    626:626:com.google.common.collect.ImmutableList createAsList() -> g
    648:648:com.google.common.collect.ImmutableMap map() -> b
    608:608:java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableSortedMap$1EntrySet$1 -> com.google.common.collect.dF:
    com.google.common.collect.ImmutableSortedMap$1EntrySet this$1 -> a
    626:626:void <init>(com.google.common.collect.ImmutableSortedMap$1EntrySet) -> <init>
    629:630:java.util.Map$Entry get(int) -> a
    635:636:java.util.Spliterator spliterator() -> spliterator
    641:641:com.google.common.collect.ImmutableCollection delegateCollection() -> b
    626:626:java.lang.Object get(int) -> get
com.google.common.collect.ImmutableSortedMap$Builder -> com.google.common.collect.ImmutableSortedMap$Builder:
    java.util.Comparator comparator -> e
    459:461:void <init>(java.util.Comparator) -> <init>
    471:472:com.google.common.collect.ImmutableSortedMap$Builder put(java.lang.Object,java.lang.Object) -> put
    485:486:com.google.common.collect.ImmutableSortedMap$Builder put(java.util.Map$Entry) -> put
    499:500:com.google.common.collect.ImmutableSortedMap$Builder putAll(java.util.Map) -> putAll
    515:516:com.google.common.collect.ImmutableSortedMap$Builder putAll(java.lang.Iterable) -> putAll
    530:530:com.google.common.collect.ImmutableSortedMap$Builder orderEntriesByValue(java.util.Comparator) -> orderEntriesByValue
    535:536:com.google.common.collect.ImmutableSortedMap$Builder combine(com.google.common.collect.ImmutableMap$Builder) -> a
    547:553:com.google.common.collect.ImmutableSortedMap build() -> build
    451:451:com.google.common.collect.ImmutableMap build() -> build
    451:451:com.google.common.collect.ImmutableMap$Builder combine(com.google.common.collect.ImmutableMap$Builder) -> b
    451:451:com.google.common.collect.ImmutableMap$Builder orderEntriesByValue(java.util.Comparator) -> orderEntriesByValue
    451:451:com.google.common.collect.ImmutableMap$Builder putAll(java.lang.Iterable) -> putAll
    451:451:com.google.common.collect.ImmutableMap$Builder putAll(java.util.Map) -> putAll
    451:451:com.google.common.collect.ImmutableMap$Builder put(java.util.Map$Entry) -> put
    451:451:com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object) -> put
com.google.common.collect.ImmutableSortedMap$SerializedForm -> com.google.common.collect.dG:
    java.util.Comparator comparator -> a
    long serialVersionUID -> serialVersionUID
    924:926:void <init>(com.google.common.collect.ImmutableSortedMap) -> <init>
    930:931:java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSortedMapFauxverideShim -> com.google.common.collect.dH:
    32:32:void <init>() -> <init>
    45:45:java.util.stream.Collector toImmutableMap(java.util.function.Function,java.util.function.Function) -> toImmutableMap
    61:61:java.util.stream.Collector toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator) -> toImmutableMap
    74:74:com.google.common.collect.ImmutableSortedMap$Builder builder() -> builder
    85:85:com.google.common.collect.ImmutableSortedMap$Builder builderWithExpectedSize(int) -> builderWithExpectedSize
    99:99:com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object) -> of
    113:113:com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    127:127:com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    142:142:com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    158:158:com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
com.google.common.collect.ImmutableSortedMultiset -> com.google.common.collect.ImmutableSortedMultiset:
    com.google.common.collect.ImmutableSortedMultiset descendingMultiset -> a
    66:66:java.util.stream.Collector toImmutableSortedMultiset(java.util.Comparator) -> toImmutableSortedMultiset
    84:87:java.util.stream.Collector toImmutableSortedMultiset(java.util.Comparator,java.util.function.Function,java.util.function.ToIntFunction) -> toImmutableSortedMultiset
    101:101:com.google.common.collect.ImmutableSortedMultiset of() -> of
    106:109:com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable) -> of
    120:120:com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable,java.lang.Comparable) -> of
    131:131:com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    143:143:com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    155:155:com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    167:171:com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable[]) -> of
    181:181:com.google.common.collect.ImmutableSortedMultiset copyOf(java.lang.Comparable[]) -> copyOf
    209:210:com.google.common.collect.ImmutableSortedMultiset copyOf(java.lang.Iterable) -> copyOf
    227:228:com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Iterator) -> copyOf
    239:240:com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Comparator,java.util.Iterator) -> copyOf
    255:269:com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Comparator,java.lang.Iterable) -> copyOf
    287:288:com.google.common.collect.ImmutableSortedMultiset copyOfSorted(com.google.common.collect.SortedMultiset) -> copyOfSorted
    293:308:com.google.common.collect.ImmutableSortedMultiset copyOfSortedEntries(java.util.Comparator,java.util.Collection) -> a
    313:316:com.google.common.collect.ImmutableSortedMultiset emptyMultiset(java.util.Comparator) -> a
    320:320:void <init>() -> <init>
    324:324:java.util.Comparator comparator() -> comparator
    com.google.common.collect.ImmutableSortedSet elementSet() -> elementSet
    334:341:com.google.common.collect.ImmutableSortedMultiset descendingMultiset() -> descendingMultiset
    356:356:com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    371:371:com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    com.google.common.collect.ImmutableSortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    380:385:com.google.common.collect.ImmutableSortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    com.google.common.collect.ImmutableSortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    400:400:com.google.common.collect.ImmutableSortedMultiset$Builder orderedBy(java.util.Comparator) -> orderedBy
    412:412:com.google.common.collect.ImmutableSortedMultiset$Builder reverseOrder() -> reverseOrder
    426:426:com.google.common.collect.ImmutableSortedMultiset$Builder naturalOrder() -> naturalOrder
    589:589:java.lang.Object writeReplace() -> writeReplace
    50:50:com.google.common.collect.ImmutableSet elementSet() -> elementSet
    50:50:java.util.Set elementSet() -> elementSet
    50:50:com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    50:50:com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    50:50:com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    50:50:com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    50:50:java.util.NavigableSet elementSet() -> elementSet
    50:50:java.util.SortedSet elementSet() -> elementSet
    95:95:com.google.common.collect.ImmutableSortedMultiset lambda$toImmutableSortedMultiset$4(java.util.Comparator,com.google.common.collect.Multiset) -> a
    92:93:com.google.common.collect.Multiset lambda$toImmutableSortedMultiset$3(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> a
    90:90:void lambda$toImmutableSortedMultiset$2(java.util.function.Function,java.util.function.ToIntFunction,com.google.common.collect.Multiset,java.lang.Object) -> a
    88:88:com.google.common.collect.Multiset lambda$toImmutableSortedMultiset$1(java.util.Comparator) -> b
    66:66:int lambda$toImmutableSortedMultiset$0(java.lang.Object) -> a
com.google.common.collect.ImmutableSortedMultiset$Builder -> com.google.common.collect.ImmutableSortedMultiset$Builder:
    454:455:void <init>(java.util.Comparator) -> <init>
    467:468:com.google.common.collect.ImmutableSortedMultiset$Builder add(java.lang.Object) -> add
    481:482:com.google.common.collect.ImmutableSortedMultiset$Builder add(java.lang.Object[]) -> add
    499:500:com.google.common.collect.ImmutableSortedMultiset$Builder addCopies(java.lang.Object,int) -> addCopies
    516:517:com.google.common.collect.ImmutableSortedMultiset$Builder setCount(java.lang.Object,int) -> setCount
    530:531:com.google.common.collect.ImmutableSortedMultiset$Builder addAll(java.lang.Iterable) -> addAll
    544:545:com.google.common.collect.ImmutableSortedMultiset$Builder addAll(java.util.Iterator) -> addAll
    554:554:com.google.common.collect.ImmutableSortedMultiset build() -> build
    448:448:com.google.common.collect.ImmutableMultiset build() -> build
    448:448:com.google.common.collect.ImmutableMultiset$Builder addAll(java.util.Iterator) -> addAll
    448:448:com.google.common.collect.ImmutableMultiset$Builder addAll(java.lang.Iterable) -> addAll
    448:448:com.google.common.collect.ImmutableMultiset$Builder setCount(java.lang.Object,int) -> setCount
    448:448:com.google.common.collect.ImmutableMultiset$Builder addCopies(java.lang.Object,int) -> addCopies
    448:448:com.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object[]) -> add
    448:448:com.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object) -> add
    448:448:com.google.common.collect.ImmutableCollection build() -> build
    448:448:com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    448:448:com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    448:448:com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    448:448:com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableSortedMultiset$SerializedForm -> com.google.common.collect.dI:
    java.util.Comparator comparator -> a
    java.lang.Object[] elements -> b
    int[] counts -> c
    564:575:void <init>(com.google.common.collect.SortedMultiset) -> <init>
    578:583:java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSortedMultisetFauxverideShim -> com.google.common.collect.dJ:
    40:40:void <init>() -> <init>
    52:52:java.util.stream.Collector toImmutableMultiset() -> toImmutableMultiset
    67:67:java.util.stream.Collector toImmutableMultiset(java.util.function.Function,java.util.function.ToIntFunction) -> toImmutableMultiset
    80:80:com.google.common.collect.ImmutableSortedMultiset$Builder builder() -> builder
    94:94:com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object) -> of
    108:108:com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object,java.lang.Object) -> of
    122:122:com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    136:136:com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    151:151:com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    167:167:com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    181:181:com.google.common.collect.ImmutableSortedMultiset copyOf(java.lang.Object[]) -> copyOf
com.google.common.collect.ImmutableSortedSet -> com.google.common.collect.ImmutableSortedSet:
    java.util.Comparator comparator -> b
    com.google.common.collect.ImmutableSortedSet descendingSet -> a
    79:79:java.util.stream.Collector toImmutableSortedSet(java.util.Comparator) -> toImmutableSortedSet
    83:86:com.google.common.collect.RegularImmutableSortedSet emptySet(java.util.Comparator) -> a
    92:92:com.google.common.collect.ImmutableSortedSet of() -> of
    97:97:com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable) -> of
    109:109:com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable) -> of
    121:121:com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    133:133:com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    146:146:com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    160:168:com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable[]) -> of
    182:182:com.google.common.collect.ImmutableSortedSet copyOf(java.lang.Comparable[]) -> copyOf
    210:211:com.google.common.collect.ImmutableSortedSet copyOf(java.lang.Iterable) -> copyOf
    242:243:com.google.common.collect.ImmutableSortedSet copyOf(java.util.Collection) -> copyOf
    261:262:com.google.common.collect.ImmutableSortedSet copyOf(java.util.Iterator) -> copyOf
    274:274:com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Iterator) -> copyOf
    290:302:com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.lang.Iterable) -> copyOf
    322:322:com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Collection) -> copyOf
    340:345:com.google.common.collect.ImmutableSortedSet copyOfSorted(java.util.SortedSet) -> copyOfSorted
    362:377:com.google.common.collect.ImmutableSortedSet construct(java.util.Comparator,int,java.lang.Object[]) -> a
    389:389:com.google.common.collect.ImmutableSortedSet$Builder orderedBy(java.util.Comparator) -> orderedBy
    397:397:com.google.common.collect.ImmutableSortedSet$Builder reverseOrder() -> reverseOrder
    407:407:com.google.common.collect.ImmutableSortedSet$Builder naturalOrder() -> naturalOrder
    574:574:int unsafeCompare(java.lang.Object,java.lang.Object) -> a
    582:583:int unsafeCompare(java.util.Comparator,java.lang.Object,java.lang.Object) -> a
    588:590:void <init>(java.util.Comparator) -> <init>
    599:599:java.util.Comparator comparator() -> comparator
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    617:617:com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object) -> headSet
    624:624:com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object,boolean) -> headSet
    641:641:com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    649:652:com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    667:667:com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object) -> tailSet
    674:674:com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object,boolean) -> tailSet
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> b
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> a
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> a
    692:692:java.lang.Object lower(java.lang.Object) -> lower
    699:699:java.lang.Object floor(java.lang.Object) -> floor
    706:706:java.lang.Object ceiling(java.lang.Object) -> ceiling
    713:713:java.lang.Object higher(java.lang.Object) -> higher
    718:718:java.lang.Object first() -> first
    723:723:java.lang.Object last() -> last
    738:738:java.lang.Object pollFirst() -> pollFirst
    753:753:java.lang.Object pollLast() -> pollLast
    765:770:com.google.common.collect.ImmutableSortedSet descendingSet() -> descendingSet
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> b
    781:782:java.util.Spliterator spliterator() -> spliterator
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    int indexOf(java.lang.Object) -> a
    834:834:void readObject(java.io.ObjectInputStream) -> readObject
    839:839:java.lang.Object writeReplace() -> writeReplace
    61:61:java.util.Iterator iterator() -> iterator
    61:61:java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    61:61:java.util.SortedSet headSet(java.lang.Object) -> headSet
    61:61:java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    61:61:java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    61:61:java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    61:61:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    61:61:java.util.Iterator descendingIterator() -> descendingIterator
    61:61:java.util.NavigableSet descendingSet() -> descendingSet
com.google.common.collect.ImmutableSortedSet$1 -> com.google.common.collect.dK:
    com.google.common.collect.UnmodifiableIterator iterator -> a
    com.google.common.collect.ImmutableSortedSet this$0 -> b
    782:783:void <init>(com.google.common.collect.ImmutableSortedSet,long,int) -> <init>
    787:791:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    797:797:java.util.Comparator getComparator() -> getComparator
com.google.common.collect.ImmutableSortedSet$Builder -> com.google.common.collect.ImmutableSortedSet$Builder:
    java.util.Comparator comparator -> b
    java.lang.Object[] elements -> c
    int n -> d
    437:441:void <init>(java.util.Comparator) -> <init>
    445:446:void copy() -> b
    449:465:void sortAndDedup() -> c
    479:494:com.google.common.collect.ImmutableSortedSet$Builder add(java.lang.Object) -> add
    508:512:com.google.common.collect.ImmutableSortedSet$Builder add(java.lang.Object[]) -> add
    526:527:com.google.common.collect.ImmutableSortedSet$Builder addAll(java.lang.Iterable) -> addAll
    541:542:com.google.common.collect.ImmutableSortedSet$Builder addAll(java.util.Iterator) -> addAll
    548:553:com.google.common.collect.ImmutableSortedSet$Builder combine(com.google.common.collect.ImmutableSet$Builder) -> b
    562:568:com.google.common.collect.ImmutableSortedSet build() -> build
    427:427:com.google.common.collect.ImmutableSet build() -> build
    427:427:com.google.common.collect.ImmutableSet$Builder combine(com.google.common.collect.ImmutableSet$Builder) -> a
    427:427:com.google.common.collect.ImmutableSet$Builder addAll(java.util.Iterator) -> addAll
    427:427:com.google.common.collect.ImmutableSet$Builder addAll(java.lang.Iterable) -> addAll
    427:427:com.google.common.collect.ImmutableSet$Builder add(java.lang.Object[]) -> add
    427:427:com.google.common.collect.ImmutableSet$Builder add(java.lang.Object) -> add
    427:427:com.google.common.collect.ImmutableCollection build() -> build
    427:427:com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    427:427:com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    427:427:com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    427:427:com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableSortedSet$SerializedForm -> com.google.common.collect.dL:
    java.util.Comparator comparator -> a
    java.lang.Object[] elements -> b
    long serialVersionUID -> serialVersionUID
    820:823:void <init>(java.util.Comparator,java.lang.Object[]) -> <init>
    827:827:java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSortedSetFauxverideShim -> com.google.common.collect.dM:
    40:40:void <init>() -> <init>
    51:51:java.util.stream.Collector toImmutableSet() -> toImmutableSet
    64:64:com.google.common.collect.ImmutableSortedSet$Builder builder() -> builder
    76:76:com.google.common.collect.ImmutableSortedSet$Builder builderWithExpectedSize(int) -> builderWithExpectedSize
    90:90:com.google.common.collect.ImmutableSortedSet of(java.lang.Object) -> of
    104:104:com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object) -> of
    118:118:com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    132:132:com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    146:146:com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    161:161:com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    175:175:com.google.common.collect.ImmutableSortedSet copyOf(java.lang.Object[]) -> copyOf
com.google.common.collect.ImmutableTable -> com.google.common.collect.ImmutableTable:
    68:71:java.util.stream.Collector toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function) -> toImmutableTable
    96:107:java.util.stream.Collector toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator) -> toImmutableTable
    182:182:com.google.common.collect.ImmutableTable of() -> of
    187:187:com.google.common.collect.ImmutableTable of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    205:210:com.google.common.collect.ImmutableTable copyOf(com.google.common.collect.Table) -> copyOf
    216:220:com.google.common.collect.ImmutableTable copyOf(java.lang.Iterable) -> b
    228:228:com.google.common.collect.ImmutableTable$Builder builder() -> builder
    236:239:com.google.common.collect.Table$Cell cellOf(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    360:360:void <init>() -> <init>
    364:364:com.google.common.collect.ImmutableSet cellSet() -> cellSet
    com.google.common.collect.ImmutableSet createCellSet() -> h
    372:372:com.google.common.collect.UnmodifiableIterator cellIterator() -> j
    377:377:java.util.Spliterator cellSpliterator() -> c
    382:382:com.google.common.collect.ImmutableCollection values() -> values
    com.google.common.collect.ImmutableCollection createValues() -> i
    390:390:java.util.Iterator valuesIterator() -> e
    400:402:com.google.common.collect.ImmutableMap column(java.lang.Object) -> column
    407:407:com.google.common.collect.ImmutableSet columnKeySet() -> columnKeySet
    com.google.common.collect.ImmutableMap columnMap() -> columnMap
    426:428:com.google.common.collect.ImmutableMap row(java.lang.Object) -> row
    433:433:com.google.common.collect.ImmutableSet rowKeySet() -> rowKeySet
    com.google.common.collect.ImmutableMap rowMap() -> rowMap
    447:447:boolean contains(java.lang.Object,java.lang.Object) -> contains
    452:452:boolean containsValue(java.lang.Object) -> containsValue
    464:464:void clear() -> clear
    477:477:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    489:489:void putAll(com.google.common.collect.Table) -> putAll
    502:502:java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    com.google.common.collect.ImmutableTable$SerializedForm createSerializedForm() -> g
    564:564:java.lang.Object writeReplace() -> writeReplace
    50:50:java.lang.String toString() -> toString
    50:50:int hashCode() -> hashCode
    50:50:boolean equals(java.lang.Object) -> equals
    50:50:java.util.Collection createValues() -> d
    50:50:java.util.Collection values() -> values
    50:50:java.util.Iterator cellIterator() -> b
    50:50:java.util.Set createCellSet() -> a
    50:50:java.util.Set cellSet() -> cellSet
    50:50:boolean isEmpty() -> isEmpty
    50:50:java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    50:50:java.util.Set columnKeySet() -> columnKeySet
    50:50:java.util.Set rowKeySet() -> rowKeySet
    50:50:boolean containsColumn(java.lang.Object) -> containsColumn
    50:50:boolean containsRow(java.lang.Object) -> containsRow
    50:50:java.util.Map columnMap() -> columnMap
    50:50:java.util.Map rowMap() -> rowMap
    50:50:java.util.Map column(java.lang.Object) -> column
    50:50:java.util.Map row(java.lang.Object) -> row
    117:117:com.google.common.collect.ImmutableTable lambda$toImmutableTable$4(com.google.common.collect.ImmutableTable$CollectorState) -> a
    116:116:com.google.common.collect.ImmutableTable$CollectorState lambda$toImmutableTable$3(java.util.function.BinaryOperator,com.google.common.collect.ImmutableTable$CollectorState,com.google.common.collect.ImmutableTable$CollectorState) -> a
    111:114:void lambda$toImmutableTable$2(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,com.google.common.collect.ImmutableTable$CollectorState,java.lang.Object) -> a
    108:108:com.google.common.collect.ImmutableTable$CollectorState lambda$toImmutableTable$1() -> k
    74:74:void lambda$toImmutableTable$0(java.util.function.Function,java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableTable$Builder,java.lang.Object) -> a
    51:51:com.google.common.collect.ImmutableTable access$000(java.lang.Iterable) -> a
com.google.common.collect.ImmutableTable$Builder -> com.google.common.collect.ImmutableTable$Builder:
    java.util.List cells -> a
    java.util.Comparator rowComparator -> b
    java.util.Comparator columnComparator -> c
    270:278:void <init>() -> <init>
    283:284:com.google.common.collect.ImmutableTable$Builder orderRowsBy(java.util.Comparator) -> orderRowsBy
    290:291:com.google.common.collect.ImmutableTable$Builder orderColumnsBy(java.util.Comparator) -> orderColumnsBy
    300:301:com.google.common.collect.ImmutableTable$Builder put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    310:320:com.google.common.collect.ImmutableTable$Builder put(com.google.common.collect.Table$Cell) -> put
    331:334:com.google.common.collect.ImmutableTable$Builder putAll(com.google.common.collect.Table) -> putAll
    338:339:com.google.common.collect.ImmutableTable$Builder combine(com.google.common.collect.ImmutableTable$Builder) -> a
    348:355:com.google.common.collect.ImmutableTable build() -> build
com.google.common.collect.ImmutableTable$CollectorState -> com.google.common.collect.dN:
    java.util.List insertionOrder -> a
    com.google.common.collect.Table table -> b
    120:122:void <init>() -> <init>
    125:133:void put(java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator) -> a
    136:139:com.google.common.collect.ImmutableTable$CollectorState combine(com.google.common.collect.ImmutableTable$CollectorState,java.util.function.BinaryOperator) -> a
    143:143:com.google.common.collect.ImmutableTable toTable() -> a
    120:120:void <init>(byte) -> <init>
com.google.common.collect.ImmutableTable$MutableCell -> com.google.common.collect.dO:
    java.lang.Object row -> a
    java.lang.Object column -> b
    java.lang.Object value -> c
    152:156:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    160:160:java.lang.Object getRowKey() -> getRowKey
    165:165:java.lang.Object getColumnKey() -> getColumnKey
    170:170:java.lang.Object getValue() -> getValue
    174:176:void merge(java.lang.Object,java.util.function.BinaryOperator) -> a
com.google.common.collect.ImmutableTable$SerializedForm -> com.google.common.collect.dP:
    java.lang.Object[] rowKeys -> a
    java.lang.Object[] columnKeys -> b
    java.lang.Object[] cellValues -> c
    int[] cellRowIndices -> d
    int[] cellColumnIndices -> e
    long serialVersionUID -> serialVersionUID
    525:531:void <init>(java.lang.Object[],java.lang.Object[],java.lang.Object[],int[],int[]) -> <init>
    535:538:com.google.common.collect.ImmutableTable$SerializedForm create(com.google.common.collect.ImmutableTable,int[],int[]) -> a
    544:557:java.lang.Object readResolve() -> readResolve
com.google.common.collect.IndexedImmutableSet -> com.google.common.collect.dQ:
    27:27:void <init>() -> <init>
    java.lang.Object get(int) -> a
    32:32:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    37:37:java.util.Spliterator spliterator() -> spliterator
    42:47:void forEach(java.util.function.Consumer) -> forEach
    52:52:int copyIntoArray(java.lang.Object[],int) -> a
    57:57:com.google.common.collect.ImmutableList createAsList() -> g
    26:26:java.util.Iterator iterator() -> iterator
com.google.common.collect.IndexedImmutableSet$1 -> com.google.common.collect.dR:
    com.google.common.collect.IndexedImmutableSet this$0 -> a
    57:57:void <init>(com.google.common.collect.IndexedImmutableSet) -> <init>
    60:60:java.lang.Object get(int) -> get
    65:65:boolean isPartialView() -> a
    70:70:int size() -> size
    75:75:com.google.common.collect.ImmutableCollection delegateCollection() -> b
com.google.common.collect.Interner -> com.google.common.collect.Interner:
    java.lang.Object intern(java.lang.Object) -> intern
com.google.common.collect.Interners -> com.google.common.collect.Interners:
    36:36:void <init>() -> <init>
    90:90:com.google.common.collect.Interners$InternerBuilder newBuilder() -> newBuilder
    99:99:com.google.common.collect.Interner newStrongInterner() -> newStrongInterner
    110:110:com.google.common.collect.Interner newWeakInterner() -> newWeakInterner
    157:157:com.google.common.base.Function asFunction(com.google.common.collect.Interner) -> asFunction
com.google.common.collect.Interners$InternerBuilder -> com.google.common.collect.Interners$InternerBuilder:
    com.google.common.collect.MapMaker mapMaker -> a
    boolean strong -> b
    44:47:void <init>() -> <init>
    55:56:com.google.common.collect.Interners$InternerBuilder strong() -> strong
    66:67:com.google.common.collect.Interners$InternerBuilder weak() -> weak
    76:77:com.google.common.collect.Interners$InternerBuilder concurrencyLevel(int) -> concurrencyLevel
    81:84:com.google.common.collect.Interner build() -> build
    43:43:void <init>(byte) -> <init>
com.google.common.collect.Interners$InternerFunction -> com.google.common.collect.dS:
    com.google.common.collect.Interner interner -> a
    164:166:void <init>(com.google.common.collect.Interner) -> <init>
    170:170:java.lang.Object apply(java.lang.Object) -> apply
    175:175:int hashCode() -> hashCode
    180:185:boolean equals(java.lang.Object) -> equals
com.google.common.collect.Interners$InternerImpl -> com.google.common.collect.dT:
    com.google.common.collect.MapMakerInternalMap map -> a
    118:121:void <init>(com.google.common.collect.MapMaker) -> <init>
    127:147:java.lang.Object intern(java.lang.Object) -> intern
    114:114:void <init>(com.google.common.collect.MapMaker,byte) -> <init>
com.google.common.collect.Iterables -> com.google.common.collect.Iterables:
    68:68:void <init>() -> <init>
    72:78:java.lang.Iterable unmodifiableIterable(java.lang.Iterable) -> unmodifiableIterable
    89:89:java.lang.Iterable unmodifiableIterable(com.google.common.collect.ImmutableCollection) -> unmodifiableIterable
    124:126:int size(java.lang.Iterable) -> size
    136:140:boolean contains(java.lang.Iterable,java.lang.Object) -> contains
    155:157:boolean removeAll(java.lang.Iterable,java.util.Collection) -> removeAll
    172:174:boolean retainAll(java.lang.Iterable,java.util.Collection) -> retainAll
    195:198:boolean removeIf(java.lang.Iterable,com.google.common.base.Predicate) -> removeIf
    204:213:java.lang.Object removeFirstMatching(java.lang.Iterable,com.google.common.base.Predicate) -> a
    223:230:boolean elementsEqual(java.lang.Iterable,java.lang.Iterable) -> elementsEqual
    241:241:java.lang.String toString(java.lang.Iterable) -> toString
    254:254:java.lang.Object getOnlyElement(java.lang.Iterable) -> getOnlyElement
    268:268:java.lang.Object getOnlyElement(java.lang.Iterable,java.lang.Object) -> getOnlyElement
    280:280:java.lang.Object[] toArray(java.lang.Iterable,java.lang.Class) -> toArray
    284:285:java.lang.Object[] toArray(java.lang.Iterable,java.lang.Object[]) -> a
    295:295:java.lang.Object[] toArray(java.lang.Iterable) -> a
    304:306:java.util.Collection castOrCopyToCollection(java.lang.Iterable) -> b
    316:320:boolean addAll(java.util.Collection,java.lang.Iterable) -> addAll
    335:340:int frequency(java.lang.Iterable,java.lang.Object) -> frequency
    362:363:java.lang.Iterable cycle(java.lang.Iterable) -> cycle
    403:403:java.lang.Iterable cycle(java.lang.Object[]) -> cycle
    418:418:java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable) -> concat
    434:434:java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable) -> concat
    454:454:java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable) -> concat
    472:472:java.lang.Iterable concat(java.lang.Iterable[]) -> concat
    488:488:java.lang.Iterable concat(java.lang.Iterable) -> concat
    510:512:java.lang.Iterable partition(java.lang.Iterable,int) -> partition
    536:538:java.lang.Iterable paddedPartition(java.lang.Iterable,int) -> paddedPartition
    554:556:java.lang.Iterable filter(java.lang.Iterable,com.google.common.base.Predicate) -> filter
    597:599:java.lang.Iterable filter(java.lang.Iterable,java.lang.Class) -> filter
    608:608:boolean any(java.lang.Iterable,com.google.common.base.Predicate) -> any
    618:618:boolean all(java.lang.Iterable,com.google.common.base.Predicate) -> all
    631:631:java.lang.Object find(java.lang.Iterable,com.google.common.base.Predicate) -> find
    646:646:java.lang.Object find(java.lang.Iterable,com.google.common.base.Predicate,java.lang.Object) -> find
    661:661:com.google.common.base.Optional tryFind(java.lang.Iterable,com.google.common.base.Predicate) -> tryFind
    675:675:int indexOf(java.lang.Iterable,com.google.common.base.Predicate) -> indexOf
    693:695:java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function) -> transform
    726:729:java.lang.Object get(java.lang.Iterable,int) -> get
    749:757:java.lang.Object get(java.lang.Iterable,int,java.lang.Object) -> get
    779:779:java.lang.Object getFirst(java.lang.Iterable,java.lang.Object) -> getFirst
    793:801:java.lang.Object getLast(java.lang.Iterable) -> getLast
    816:825:java.lang.Object getLast(java.lang.Iterable,java.lang.Object) -> getLast
    829:829:java.lang.Object getLastInNonemptyList(java.util.List) -> a
    852:855:java.lang.Iterable skip(java.lang.Iterable,int) -> skip
    922:924:java.lang.Iterable limit(java.lang.Iterable,int) -> limit
    954:956:java.lang.Iterable consumingIterable(java.lang.Iterable) -> consumingIterable
    985:988:boolean isEmpty(java.lang.Iterable) -> isEmpty
    1007:1017:java.lang.Iterable mergeSorted(java.lang.Iterable,java.util.Comparator) -> mergeSorted
    1023:1023:com.google.common.base.Function toIterator() -> a
com.google.common.collect.Iterables$1 -> com.google.common.collect.dU:
    java.lang.Iterable val$iterable -> a
    363:363:void <init>(java.lang.Iterable) -> <init>
    366:366:java.util.Iterator iterator() -> iterator
    371:371:java.util.Spliterator spliterator() -> spliterator
    376:376:java.lang.String toString() -> toString
    371:371:java.lang.Iterable lambda$spliterator$0(java.lang.Iterable) -> a
com.google.common.collect.Iterables$10 -> com.google.common.collect.dV:
    1023:1023:void <init>() -> <init>
    1026:1026:java.util.Iterator apply(java.lang.Iterable) -> a
    1023:1023:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Iterables$2 -> com.google.common.collect.dW:
    java.lang.Iterable val$iterable -> a
    int val$size -> b
    512:512:void <init>(java.lang.Iterable,int) -> <init>
    515:515:java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$3 -> com.google.common.collect.dX:
    java.lang.Iterable val$iterable -> a
    int val$size -> b
    538:538:void <init>(java.lang.Iterable,int) -> <init>
    541:541:java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$4 -> com.google.common.collect.dY:
    java.lang.Iterable val$unfiltered -> a
    com.google.common.base.Predicate val$retainIfTrue -> b
    556:556:void <init>(java.lang.Iterable,com.google.common.base.Predicate) -> <init>
    559:559:java.util.Iterator iterator() -> iterator
    564:571:void forEach(java.util.function.Consumer) -> forEach
    575:575:java.util.Spliterator spliterator() -> spliterator
    567:570:void lambda$forEach$0(com.google.common.base.Predicate,java.util.function.Consumer,java.lang.Object) -> a
com.google.common.collect.Iterables$5 -> com.google.common.collect.dZ:
    java.lang.Iterable val$fromIterable -> a
    com.google.common.base.Function val$function -> b
    695:695:void <init>(java.lang.Iterable,com.google.common.base.Function) -> <init>
    698:698:java.util.Iterator iterator() -> iterator
    703:705:void forEach(java.util.function.Consumer) -> forEach
    709:709:java.util.Spliterator spliterator() -> spliterator
    704:704:void lambda$forEach$0(java.util.function.Consumer,com.google.common.base.Function,java.lang.Object) -> a
com.google.common.collect.Iterables$6 -> com.google.common.collect.ea:
    java.lang.Iterable val$iterable -> a
    int val$numberToSkip -> b
    855:855:void <init>(java.lang.Iterable,int) -> <init>
    858:872:java.util.Iterator iterator() -> iterator
    897:902:java.util.Spliterator spliterator() -> spliterator
com.google.common.collect.Iterables$6$1 -> com.google.common.collect.eb:
    boolean atStart -> a
    java.util.Iterator val$iterator -> b
    872:873:void <init>(com.google.common.collect.Iterables$6,java.util.Iterator) -> <init>
    877:877:boolean hasNext() -> hasNext
    882:884:java.lang.Object next() -> next
    889:891:void remove() -> remove
com.google.common.collect.Iterables$7 -> com.google.common.collect.ec:
    java.lang.Iterable val$iterable -> a
    int val$limitSize -> b
    924:924:void <init>(java.lang.Iterable,int) -> <init>
    927:927:java.util.Iterator iterator() -> iterator
    932:932:java.util.Spliterator spliterator() -> spliterator
com.google.common.collect.Iterables$8 -> com.google.common.collect.ed:
    java.lang.Iterable val$iterable -> a
    956:956:void <init>(java.lang.Iterable) -> <init>
    959:961:java.util.Iterator iterator() -> iterator
    966:966:java.lang.String toString() -> toString
com.google.common.collect.Iterables$9 -> com.google.common.collect.ee:
    java.lang.Iterable val$iterables -> a
    java.util.Comparator val$comparator -> b
    1010:1010:void <init>(java.lang.Iterable,java.util.Comparator) -> <init>
    1013:1014:java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$UnmodifiableIterable -> com.google.common.collect.ef:
    java.lang.Iterable iterable -> a
    95:97:void <init>(java.lang.Iterable) -> <init>
    101:101:java.util.Iterator iterator() -> iterator
    106:107:void forEach(java.util.function.Consumer) -> forEach
    112:112:java.util.Spliterator spliterator() -> spliterator
    117:117:java.lang.String toString() -> toString
    92:92:void <init>(java.lang.Iterable,byte) -> <init>
com.google.common.collect.Iterators -> com.google.common.collect.Iterators:
    69:69:void <init>() -> <init>
    77:77:com.google.common.collect.UnmodifiableIterator emptyIterator() -> a
    88:88:com.google.common.collect.UnmodifiableListIterator emptyListIterator() -> c
    121:121:java.util.Iterator emptyModifiableIterator() -> b
    127:133:com.google.common.collect.UnmodifiableIterator unmodifiableIterator(java.util.Iterator) -> unmodifiableIterator
    154:154:com.google.common.collect.UnmodifiableIterator unmodifiableIterator(com.google.common.collect.UnmodifiableIterator) -> unmodifiableIterator
    162:167:int size(java.util.Iterator) -> size
    172:185:boolean contains(java.util.Iterator,java.lang.Object) -> contains
    198:206:boolean removeAll(java.util.Iterator,java.util.Collection) -> removeAll
    220:228:boolean removeIf(java.util.Iterator,com.google.common.base.Predicate) -> removeIf
    242:250:boolean retainAll(java.util.Iterator,java.util.Collection) -> retainAll
    263:273:boolean elementsEqual(java.util.Iterator,java.util.Iterator) -> elementsEqual
    281:290:java.lang.String toString(java.util.Iterator) -> toString
    301:315:java.lang.Object getOnlyElement(java.util.Iterator) -> getOnlyElement
    327:327:java.lang.Object getOnlyElement(java.util.Iterator,java.lang.Object) -> getOnlyElement
    340:341:java.lang.Object[] toArray(java.util.Iterator,java.lang.Class) -> toArray
    352:358:boolean addAll(java.util.Collection,java.util.Iterator) -> addAll
    368:374:int frequency(java.util.Iterator,java.lang.Object) -> frequency
    390:391:java.util.Iterator cycle(java.lang.Iterable) -> cycle
    440:440:java.util.Iterator cycle(java.lang.Object[]) -> cycle
    450:450:java.util.Iterator consumingForArray(java.lang.Object[]) -> a
    480:482:java.util.Iterator concat(java.util.Iterator,java.util.Iterator) -> concat
    495:498:java.util.Iterator concat(java.util.Iterator,java.util.Iterator,java.util.Iterator) -> concat
    515:519:java.util.Iterator concat(java.util.Iterator,java.util.Iterator,java.util.Iterator,java.util.Iterator) -> concat
    533:533:java.util.Iterator concat(java.util.Iterator[]) -> concat
    546:546:java.util.Iterator concat(java.util.Iterator) -> concat
    551:554:java.util.Iterator concatNoDefensiveCopy(java.util.Iterator[]) -> a
    572:572:com.google.common.collect.UnmodifiableIterator partition(java.util.Iterator,int) -> partition
    590:590:com.google.common.collect.UnmodifiableIterator paddedPartition(java.util.Iterator,int) -> paddedPartition
    595:597:com.google.common.collect.UnmodifiableIterator partitionImpl(java.util.Iterator,int,boolean) -> a
    630:632:com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,com.google.common.base.Predicate) -> filter
    653:653:com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,java.lang.Class) -> filter
    661:661:boolean any(java.util.Iterator,com.google.common.base.Predicate) -> any
    669:676:boolean all(java.util.Iterator,com.google.common.base.Predicate) -> all
    689:697:java.lang.Object find(java.util.Iterator,com.google.common.base.Predicate) -> find
    710:718:java.lang.Object find(java.util.Iterator,com.google.common.base.Predicate,java.lang.Object) -> find
    733:741:com.google.common.base.Optional tryFind(java.util.Iterator,com.google.common.base.Predicate) -> tryFind
    759:766:int indexOf(java.util.Iterator,com.google.common.base.Predicate) -> indexOf
    779:780:java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function) -> transform
    798:808:java.lang.Object get(java.util.Iterator,int) -> get
    825:827:java.lang.Object get(java.util.Iterator,int,java.lang.Object) -> get
    831:834:void checkNonnegative(int) -> a
    845:845:java.lang.Object getNext(java.util.Iterator,java.lang.Object) -> getNext
    856:860:java.lang.Object getLast(java.util.Iterator) -> getLast
    872:872:java.lang.Object getLast(java.util.Iterator,java.lang.Object) -> getLast
    884:891:int advance(java.util.Iterator,int) -> advance
    905:907:java.util.Iterator limit(java.util.Iterator,int) -> limit
    943:944:java.util.Iterator consumingIterator(java.util.Iterator) -> consumingIterator
    969:974:java.lang.Object pollNext(java.util.Iterator) -> a
    982:987:void clear(java.util.Iterator) -> b
    1001:1001:com.google.common.collect.UnmodifiableIterator forArray(java.lang.Object[]) -> forArray
    1013:1022:com.google.common.collect.UnmodifiableListIterator forArray(java.lang.Object[],int,int,int) -> a
    1049:1049:com.google.common.collect.UnmodifiableIterator singletonIterator(java.lang.Object) -> singletonIterator
    1079:1080:com.google.common.collect.UnmodifiableIterator forEnumeration(java.util.Enumeration) -> forEnumeration
    1100:1101:java.util.Enumeration asEnumeration(java.util.Iterator) -> asEnumeration
    1194:1201:com.google.common.collect.PeekingIterator peekingIterator(java.util.Iterator) -> peekingIterator
    1212:1212:com.google.common.collect.PeekingIterator peekingIterator(com.google.common.collect.PeekingIterator) -> peekingIterator
    1230:1233:com.google.common.collect.UnmodifiableIterator mergeSorted(java.lang.Iterable,java.util.Comparator) -> mergeSorted
    1380:1380:java.util.ListIterator cast(java.util.Iterator) -> c
com.google.common.collect.Iterators$1 -> com.google.common.collect.eg:
    java.util.Iterator val$iterator -> a
    133:133:void <init>(java.util.Iterator) -> <init>
    136:136:boolean hasNext() -> hasNext
    141:141:java.lang.Object next() -> next
com.google.common.collect.Iterators$10 -> com.google.common.collect.eh:
    java.util.Enumeration val$enumeration -> a
    1080:1080:void <init>(java.util.Enumeration) -> <init>
    1083:1083:boolean hasNext() -> hasNext
    1088:1088:java.lang.Object next() -> next
com.google.common.collect.Iterators$11 -> com.google.common.collect.ei:
    java.util.Iterator val$iterator -> a
    1101:1101:void <init>(java.util.Iterator) -> <init>
    1104:1104:boolean hasMoreElements() -> hasMoreElements
    1109:1109:java.lang.Object nextElement() -> nextElement
com.google.common.collect.Iterators$2 -> com.google.common.collect.ej:
    java.util.Iterator iterator -> a
    java.lang.Iterable val$iterable -> b
    391:392:void <init>(java.lang.Iterable) -> <init>
    405:405:boolean hasNext() -> hasNext
    410:416:java.lang.Object next() -> next
    421:422:void remove() -> remove
com.google.common.collect.Iterators$3 -> com.google.common.collect.ek:
    int index -> a
    java.lang.Object[] val$elements -> b
    450:451:void <init>(java.lang.Object[]) -> <init>
    455:455:boolean hasNext() -> hasNext
    460:466:java.lang.Object next() -> next
com.google.common.collect.Iterators$4 -> com.google.common.collect.el:
    java.util.Iterator val$iterator -> a
    int val$size -> b
    boolean val$pad -> c
    597:597:void <init>(java.util.Iterator,int,boolean) -> <init>
    600:600:boolean hasNext() -> hasNext
    605:619:java.util.List next() -> a
    597:597:java.lang.Object next() -> next
com.google.common.collect.Iterators$5 -> com.google.common.collect.em:
    java.util.Iterator val$unfiltered -> a
    com.google.common.base.Predicate val$retainIfTrue -> b
    632:632:void <init>(java.util.Iterator,com.google.common.base.Predicate) -> <init>
    635:641:java.lang.Object computeNext() -> computeNext
com.google.common.collect.Iterators$6 -> com.google.common.collect.en:
    com.google.common.base.Function val$function -> a
    780:780:void <init>(java.util.Iterator,com.google.common.base.Function) -> <init>
    783:783:java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Iterators$7 -> com.google.common.collect.eo:
    int count -> a
    int val$limitSize -> b
    java.util.Iterator val$iterator -> c
    907:907:void <init>(int,java.util.Iterator) -> <init>
    912:912:boolean hasNext() -> hasNext
    917:921:java.lang.Object next() -> next
    926:927:void remove() -> remove
com.google.common.collect.Iterators$8 -> com.google.common.collect.ep:
    java.util.Iterator val$iterator -> a
    944:944:void <init>(java.util.Iterator) -> <init>
    947:947:boolean hasNext() -> hasNext
    952:954:java.lang.Object next() -> next
    959:959:java.lang.String toString() -> toString
com.google.common.collect.Iterators$9 -> com.google.common.collect.eq:
    boolean done -> a
    java.lang.Object val$value -> b
    1049:1049:void <init>(java.lang.Object) -> <init>
    1054:1054:boolean hasNext() -> hasNext
    1059:1063:java.lang.Object next() -> next
com.google.common.collect.Iterators$ArrayItr -> com.google.common.collect.er:
    com.google.common.collect.UnmodifiableListIterator EMPTY -> a
    java.lang.Object[] array -> b
    int offset -> c
    1032:1035:void <init>(java.lang.Object[],int,int,int) -> <init>
    1039:1039:java.lang.Object get(int) -> a
    1026:1026:void <clinit>() -> <clinit>
com.google.common.collect.Iterators$ConcatenatedIterator -> com.google.common.collect.es:
    java.util.Iterator toRemove -> a
    java.util.Iterator iterator -> b
    java.util.Iterator topMetaIterator -> c
    java.util.Deque metaIterators -> d
    1305:1308:void <init>(java.util.Iterator) -> <init>
    1312:1319:java.util.Iterator getTopMetaIterator() -> a
    1324:1357:boolean hasNext() -> hasNext
    1362:1366:java.lang.Object next() -> next
    1372:1375:void remove() -> remove
com.google.common.collect.Iterators$EmptyModifiableIterator -> com.google.common.collect.et:
    com.google.common.collect.Iterators$EmptyModifiableIterator INSTANCE -> a
    com.google.common.collect.Iterators$EmptyModifiableIterator[] $VALUES -> b
    95:95:com.google.common.collect.Iterators$EmptyModifiableIterator[] values() -> values
    95:95:com.google.common.collect.Iterators$EmptyModifiableIterator valueOf(java.lang.String) -> valueOf
    95:95:void <init>(java.lang.String,int) -> <init>
    100:100:boolean hasNext() -> hasNext
    105:105:java.lang.Object next() -> next
    110:111:void remove() -> remove
    95:96:void <clinit>() -> <clinit>
com.google.common.collect.Iterators$MergingIterator -> com.google.common.collect.eu:
    java.util.Queue queue -> a
    1250:1268:void <init>(java.lang.Iterable,java.util.Comparator) -> <init>
    1272:1272:boolean hasNext() -> hasNext
    1277:1282:java.lang.Object next() -> next
com.google.common.collect.Iterators$MergingIterator$1 -> com.google.common.collect.ev:
    java.util.Comparator val$itemComparator -> a
    1254:1254:void <init>(com.google.common.collect.Iterators$MergingIterator,java.util.Comparator) -> <init>
    1257:1257:int compare(com.google.common.collect.PeekingIterator,com.google.common.collect.PeekingIterator) -> a
    1254:1254:int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.Iterators$PeekingImpl -> com.google.common.collect.ew:
    java.util.Iterator iterator -> a
    boolean hasPeeked -> b
    java.lang.Object peekedElement -> c
    1121:1123:void <init>(java.util.Iterator) -> <init>
    1127:1127:boolean hasNext() -> hasNext
    1132:1138:java.lang.Object next() -> next
    1143:1145:void remove() -> remove
    1149:1153:java.lang.Object peek() -> peek
com.google.common.collect.JdkBackedImmutableBiMap -> com.google.common.collect.ex:
    com.google.common.collect.ImmutableList entries -> b
    java.util.Map forwardDelegate -> c
    java.util.Map backwardDelegate -> d
    com.google.common.collect.JdkBackedImmutableBiMap inverse -> e
    34:49:com.google.common.collect.ImmutableBiMap create(int,java.util.Map$Entry[]) -> a
    57:61:void <init>(com.google.common.collect.ImmutableList,java.util.Map,java.util.Map) -> <init>
    65:65:int size() -> size
    72:80:com.google.common.collect.ImmutableBiMap inverse() -> inverse
    104:104:java.lang.Object get(java.lang.Object) -> get
    109:109:com.google.common.collect.ImmutableSet createEntrySet() -> g
    114:114:com.google.common.collect.ImmutableSet createKeySet() -> c
    119:119:boolean isPartialView() -> b
    30:30:com.google.common.collect.BiMap inverse() -> inverse
    31:31:com.google.common.collect.ImmutableList access$100(com.google.common.collect.JdkBackedImmutableBiMap) -> a
com.google.common.collect.JdkBackedImmutableBiMap$InverseEntries -> com.google.common.collect.ey:
    com.google.common.collect.JdkBackedImmutableBiMap this$0 -> a
    84:84:void <init>(com.google.common.collect.JdkBackedImmutableBiMap) -> <init>
    87:88:java.util.Map$Entry get(int) -> a
    93:93:boolean isPartialView() -> a
    98:98:int size() -> size
    83:83:java.lang.Object get(int) -> get
    84:84:void <init>(com.google.common.collect.JdkBackedImmutableBiMap,byte) -> <init>
com.google.common.collect.JdkBackedImmutableMap -> com.google.common.collect.ez:
    java.util.Map delegateMap -> b
    com.google.common.collect.ImmutableList entries -> c
    39:47:com.google.common.collect.ImmutableMap create(int,java.util.Map$Entry[]) -> a
    53:56:void <init>(java.util.Map,com.google.common.collect.ImmutableList) -> <init>
    60:60:int size() -> size
    65:65:java.lang.Object get(java.lang.Object) -> get
    70:70:com.google.common.collect.ImmutableSet createEntrySet() -> g
    75:77:void forEach(java.util.function.BiConsumer) -> forEach
    81:81:com.google.common.collect.ImmutableSet createKeySet() -> c
    86:86:com.google.common.collect.ImmutableCollection createValues() -> a
    91:91:boolean isPartialView() -> b
    76:76:void lambda$forEach$0(java.util.function.BiConsumer,java.util.Map$Entry) -> a
com.google.common.collect.JdkBackedImmutableMultiset -> com.google.common.collect.eA:
    java.util.Map delegateMap -> a
    com.google.common.collect.ImmutableList entries -> b
    long size -> c
    com.google.common.collect.ImmutableSet elementSet -> d
    39:53:com.google.common.collect.ImmutableMultiset create(java.util.Collection) -> b
    57:61:void <init>(java.util.Map,com.google.common.collect.ImmutableList,long) -> <init>
    65:65:int count(java.lang.Object) -> count
    72:73:com.google.common.collect.ImmutableSet elementSet() -> elementSet
    78:78:com.google.common.collect.Multiset$Entry getEntry(int) -> a
    83:83:boolean isPartialView() -> a
    88:88:int size() -> size
    31:31:java.util.Set elementSet() -> elementSet
com.google.common.collect.JdkBackedImmutableSet -> com.google.common.collect.eB:
    java.util.Set delegate -> a
    com.google.common.collect.ImmutableList delegateList -> b
    33:36:void <init>(java.util.Set,com.google.common.collect.ImmutableList) -> <init>
    40:40:java.lang.Object get(int) -> a
    45:45:boolean contains(java.lang.Object) -> contains
    50:50:boolean isPartialView() -> a
    55:55:int size() -> size
com.google.common.collect.LexicographicalOrdering -> com.google.common.collect.eC:
    java.util.Comparator elementOrder -> a
    long serialVersionUID -> serialVersionUID
    30:32:void <init>(java.util.Comparator) -> <init>
    36:50:int compare(java.lang.Iterable,java.lang.Iterable) -> a
    55:62:boolean equals(java.lang.Object) -> equals
    67:67:int hashCode() -> hashCode
    72:72:java.lang.String toString() -> toString
    26:26:int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.LinkedHashMultimap -> com.google.common.collect.LinkedHashMultimap:
    int valueSetCapacity -> a
    com.google.common.collect.LinkedHashMultimap$ValueEntry multimapHeaderEntry -> b
    long serialVersionUID -> serialVersionUID
    86:86:com.google.common.collect.LinkedHashMultimap create() -> create
    99:100:com.google.common.collect.LinkedHashMultimap create(int,int) -> create
    113:115:com.google.common.collect.LinkedHashMultimap create(com.google.common.collect.Multimap) -> create
    129:131:void succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> b
    134:136:void succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry) -> b
    139:140:void deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> b
    143:144:void deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry) -> b
    219:229:void <init>(int,int) -> <init>
    240:240:java.util.Set createCollection() -> a
    254:254:java.util.Collection createCollection(java.lang.Object) -> a
    267:267:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    283:283:java.util.Set entries() -> entries
    298:298:java.util.Set keySet() -> keySet
    310:310:java.util.Collection values() -> values
    520:520:java.util.Iterator entryIterator() -> l
    551:551:java.util.Spliterator entrySpliterator() -> m
    556:556:java.util.Iterator valueIterator() -> h
    561:561:java.util.Spliterator valueSpliterator() -> i
    566:568:void clear() -> clear
    576:586:void writeObject(java.io.ObjectOutputStream) -> writeObject
    590:610:void readObject(java.io.ObjectInputStream) -> readObject
    80:80:boolean equals(java.lang.Object) -> equals
    80:80:boolean put(java.lang.Object,java.lang.Object) -> put
    80:80:java.util.Map asMap() -> asMap
    80:80:java.util.Set removeAll(java.lang.Object) -> removeAll
    80:80:java.util.Set get(java.lang.Object) -> get
    80:80:java.util.Collection entries() -> entries
    80:80:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    80:80:void forEach(java.util.function.BiConsumer) -> forEach
    80:80:boolean containsKey(java.lang.Object) -> containsKey
    80:80:int size() -> size
    80:80:java.util.Collection createCollection() -> b
    80:80:java.lang.String toString() -> toString
    80:80:int hashCode() -> hashCode
    80:80:com.google.common.collect.Multiset keys() -> keys
    80:80:boolean putAll(com.google.common.collect.Multimap) -> putAll
    80:80:boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    80:80:boolean remove(java.lang.Object,java.lang.Object) -> remove
    80:80:boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    80:80:boolean containsValue(java.lang.Object) -> containsValue
    80:80:boolean isEmpty() -> isEmpty
    81:81:void access$200(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> a
    81:81:com.google.common.collect.LinkedHashMultimap$ValueEntry access$300(com.google.common.collect.LinkedHashMultimap) -> a
    81:81:void access$400(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry) -> a
    81:81:void access$500(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> a
    81:81:void access$600(com.google.common.collect.LinkedHashMultimap$ValueEntry) -> a
com.google.common.collect.LinkedHashMultimap$1 -> com.google.common.collect.eD:
    com.google.common.collect.LinkedHashMultimap$ValueEntry nextEntry -> a
    com.google.common.collect.LinkedHashMultimap$ValueEntry toRemove -> b
    com.google.common.collect.LinkedHashMultimap this$0 -> c
    520:521:void <init>(com.google.common.collect.LinkedHashMultimap) -> <init>
    526:526:boolean hasNext() -> hasNext
    531:537:java.util.Map$Entry next() -> a
    542:545:void remove() -> remove
    520:520:java.lang.Object next() -> next
com.google.common.collect.LinkedHashMultimap$ValueEntry -> com.google.common.collect.eE:
    int smearedValueHash -> a
    com.google.common.collect.LinkedHashMultimap$ValueEntry nextInValueBucket -> b
    com.google.common.collect.LinkedHashMultimap$ValueSetLink predecessorInValueSet -> d
    com.google.common.collect.LinkedHashMultimap$ValueSetLink successorInValueSet -> e
    com.google.common.collect.LinkedHashMultimap$ValueEntry predecessorInMultimap -> f
    com.google.common.collect.LinkedHashMultimap$ValueEntry successorInMultimap -> c
    169:172:void <init>(java.lang.Object,java.lang.Object,int,com.google.common.collect.LinkedHashMultimap$ValueEntry) -> <init>
    175:175:boolean matchesValue(java.lang.Object,int) -> a
    180:180:com.google.common.collect.LinkedHashMultimap$ValueSetLink getPredecessorInValueSet() -> a
    185:185:com.google.common.collect.LinkedHashMultimap$ValueSetLink getSuccessorInValueSet() -> b
    190:191:void setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> a
    195:196:void setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> b
    199:199:com.google.common.collect.LinkedHashMultimap$ValueEntry getPredecessorInMultimap() -> c
    203:203:com.google.common.collect.LinkedHashMultimap$ValueEntry getSuccessorInMultimap() -> d
    207:208:void setSuccessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry) -> a
    211:212:void setPredecessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry) -> b
com.google.common.collect.LinkedHashMultimap$ValueSet -> com.google.common.collect.eF:
    java.lang.Object key -> a
    com.google.common.collect.LinkedHashMultimap$ValueEntry[] hashTable -> b
    int size -> c
    int modCount -> d
    com.google.common.collect.LinkedHashMultimap$ValueSetLink firstEntry -> e
    com.google.common.collect.LinkedHashMultimap$ValueSetLink lastEntry -> f
    com.google.common.collect.LinkedHashMultimap this$0 -> g
    323:341:void <init>(com.google.common.collect.LinkedHashMultimap,java.lang.Object,int) -> <init>
    344:344:int mask() -> c
    349:349:com.google.common.collect.LinkedHashMultimap$ValueSetLink getPredecessorInValueSet() -> a
    354:354:com.google.common.collect.LinkedHashMultimap$ValueSetLink getSuccessorInValueSet() -> b
    359:360:void setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> a
    364:365:void setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> b
    369:369:java.util.Iterator iterator() -> iterator
    411:417:void forEach(java.util.function.Consumer) -> forEach
    421:421:int size() -> size
    426:434:boolean contains(java.lang.Object) -> contains
    439:457:boolean add(java.lang.Object) -> add
    461:475:void rehashIfNecessary() -> d
    480:500:boolean remove(java.lang.Object) -> remove
    505:515:void clear() -> clear
    315:315:com.google.common.collect.LinkedHashMultimap$ValueSetLink access$000(com.google.common.collect.LinkedHashMultimap$ValueSet) -> a
    315:315:int access$100(com.google.common.collect.LinkedHashMultimap$ValueSet) -> b
com.google.common.collect.LinkedHashMultimap$ValueSet$1 -> com.google.common.collect.eG:
    com.google.common.collect.LinkedHashMultimap$ValueSetLink nextEntry -> a
    com.google.common.collect.LinkedHashMultimap$ValueEntry toRemove -> b
    int expectedModCount -> c
    com.google.common.collect.LinkedHashMultimap$ValueSet this$1 -> d
    369:372:void <init>(com.google.common.collect.LinkedHashMultimap$ValueSet) -> <init>
    375:378:void checkForComodification() -> a
    382:383:boolean hasNext() -> hasNext
    388:395:java.lang.Object next() -> next
    400:405:void remove() -> remove
com.google.common.collect.LinkedHashMultimap$ValueSetLink -> com.google.common.collect.eH:
    com.google.common.collect.LinkedHashMultimap$ValueSetLink getPredecessorInValueSet() -> a
    com.google.common.collect.LinkedHashMultimap$ValueSetLink getSuccessorInValueSet() -> b
    void setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> a
    void setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> b
com.google.common.collect.LinkedHashMultimapGwtSerializationDependencies -> com.google.common.collect.eI:
    36:37:void <init>(java.util.Map) -> <init>
com.google.common.collect.LinkedHashMultiset -> com.google.common.collect.LinkedHashMultiset:
    long serialVersionUID -> serialVersionUID
    46:46:com.google.common.collect.LinkedHashMultiset create() -> create
    57:57:com.google.common.collect.LinkedHashMultiset create(int) -> create
    68:70:com.google.common.collect.LinkedHashMultiset create(java.lang.Iterable) -> create
    74:75:void <init>() -> <init>
    78:79:void <init>(int) -> <init>
    87:89:void writeObject(java.io.ObjectOutputStream) -> writeObject
    93:97:void readObject(java.io.ObjectInputStream) -> readObject
    41:41:int setCount(java.lang.Object,int) -> setCount
    41:41:int remove(java.lang.Object,int) -> remove
    41:41:int add(java.lang.Object,int) -> add
    41:41:int count(java.lang.Object) -> count
    41:41:java.util.Iterator iterator() -> iterator
    41:41:int size() -> size
    41:41:void clear() -> clear
    41:41:void forEachEntry(java.util.function.ObjIntConsumer) -> forEachEntry
    41:41:java.util.Set entrySet() -> entrySet
    41:41:java.util.Set elementSet() -> elementSet
    41:41:boolean setCount(java.lang.Object,int,int) -> setCount
    41:41:boolean contains(java.lang.Object) -> contains
    41:41:boolean isEmpty() -> isEmpty
com.google.common.collect.LinkedListMultimap -> com.google.common.collect.LinkedListMultimap:
    com.google.common.collect.LinkedListMultimap$Node head -> a
    com.google.common.collect.LinkedListMultimap$Node tail -> b
    java.util.Map keyToKeyList -> c
    int size -> d
    int modCount -> e
    long serialVersionUID -> serialVersionUID
    167:167:com.google.common.collect.LinkedListMultimap create() -> create
    178:178:com.google.common.collect.LinkedListMultimap create(int) -> create
    190:190:com.google.common.collect.LinkedListMultimap create(com.google.common.collect.Multimap) -> create
    194:195:void <init>() -> <init>
    197:199:void <init>(int) -> <init>
    202:204:void <init>(com.google.common.collect.Multimap) -> <init>
    213:254:com.google.common.collect.LinkedListMultimap$Node addNode(java.lang.Object,java.lang.Object,com.google.common.collect.LinkedListMultimap$Node) -> a
    262:293:void removeNode(com.google.common.collect.LinkedListMultimap$Node) -> a
    297:298:void removeAllNodes(java.lang.Object) -> b
    302:305:void checkElement(java.lang.Object) -> c
    570:570:int size() -> size
    575:575:boolean isEmpty() -> isEmpty
    580:580:boolean containsKey(java.lang.Object) -> containsKey
    585:585:boolean containsValue(java.lang.Object) -> containsValue
    600:601:boolean put(java.lang.Object,java.lang.Object) -> put
    617:638:java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    642:642:java.util.List getCopy(java.lang.Object) -> d
    653:655:java.util.List removeAll(java.lang.Object) -> removeAll
    660:665:void clear() -> clear
    680:680:java.util.List get(java.lang.Object) -> get
    718:718:java.util.Set createKeySet() -> e
    723:723:com.google.common.collect.Multiset createKeys() -> j
    736:736:java.util.List values() -> values
    764:764:java.util.List createValues() -> a
    785:785:java.util.List entries() -> entries
    810:810:java.util.List createEntries() -> b
    815:815:java.util.Iterator entryIterator() -> l
    820:820:java.util.Map createAsMap() -> n
    830:836:void writeObject(java.io.ObjectOutputStream) -> writeObject
    840:850:void readObject(java.io.ObjectInputStream) -> readObject
    98:98:java.lang.String toString() -> toString
    98:98:int hashCode() -> hashCode
    98:98:boolean equals(java.lang.Object) -> equals
    98:98:java.util.Map asMap() -> asMap
    98:98:java.util.Collection createValues() -> g
    98:98:java.util.Collection values() -> values
    98:98:com.google.common.collect.Multiset keys() -> keys
    98:98:java.util.Set keySet() -> keySet
    98:98:java.util.Collection createEntries() -> k
    98:98:java.util.Collection entries() -> entries
    98:98:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    98:98:boolean putAll(com.google.common.collect.Multimap) -> putAll
    98:98:boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    98:98:boolean remove(java.lang.Object,java.lang.Object) -> remove
    98:98:boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    98:98:java.util.Collection get(java.lang.Object) -> get
    98:98:java.util.Collection removeAll(java.lang.Object) -> removeAll
    99:99:int access$000(com.google.common.collect.LinkedListMultimap) -> a
    99:99:com.google.common.collect.LinkedListMultimap$Node access$100(com.google.common.collect.LinkedListMultimap) -> b
    99:99:com.google.common.collect.LinkedListMultimap$Node access$200(com.google.common.collect.LinkedListMultimap) -> c
    99:99:void access$300(java.lang.Object) -> a
    99:99:void access$400(com.google.common.collect.LinkedListMultimap,com.google.common.collect.LinkedListMultimap$Node) -> a
    99:99:void access$500(com.google.common.collect.LinkedListMultimap,java.lang.Object) -> a
    99:99:java.util.Map access$600(com.google.common.collect.LinkedListMultimap) -> d
    99:99:com.google.common.collect.LinkedListMultimap$Node access$700(com.google.common.collect.LinkedListMultimap,java.lang.Object,java.lang.Object,com.google.common.collect.LinkedListMultimap$Node) -> a
    99:99:int access$900(com.google.common.collect.LinkedListMultimap) -> e
com.google.common.collect.LinkedListMultimap$1 -> com.google.common.collect.eJ:
    java.lang.Object val$key -> a
    com.google.common.collect.LinkedListMultimap this$0 -> b
    680:680:void <init>(com.google.common.collect.LinkedListMultimap,java.lang.Object) -> <init>
    683:684:int size() -> size
    689:689:java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.LinkedListMultimap$1EntriesImpl -> com.google.common.collect.eK:
    com.google.common.collect.LinkedListMultimap this$0 -> a
    791:791:void <init>(com.google.common.collect.LinkedListMultimap) -> <init>
    794:794:int size() -> size
    799:799:java.util.ListIterator listIterator(int) -> listIterator
    804:808:void forEach(java.util.function.Consumer) -> forEach
com.google.common.collect.LinkedListMultimap$1KeySetImpl -> com.google.common.collect.eL:
    com.google.common.collect.LinkedListMultimap this$0 -> a
    697:697:void <init>(com.google.common.collect.LinkedListMultimap) -> <init>
    700:700:int size() -> size
    705:705:java.util.Iterator iterator() -> iterator
    710:710:boolean contains(java.lang.Object) -> contains
    715:715:boolean remove(java.lang.Object) -> remove
com.google.common.collect.LinkedListMultimap$1ValuesImpl -> com.google.common.collect.eM:
    com.google.common.collect.LinkedListMultimap this$0 -> a
    742:742:void <init>(com.google.common.collect.LinkedListMultimap) -> <init>
    745:745:int size() -> size
    750:751:java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.LinkedListMultimap$1ValuesImpl$1 -> com.google.common.collect.eN:
    com.google.common.collect.LinkedListMultimap$NodeIterator val$nodeItr -> a
    751:751:void <init>(com.google.common.collect.LinkedListMultimap$1ValuesImpl,java.util.ListIterator,com.google.common.collect.LinkedListMultimap$NodeIterator) -> <init>
    754:754:java.lang.Object transform(java.util.Map$Entry) -> a
    759:760:void set(java.lang.Object) -> set
    751:751:java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.LinkedListMultimap$DistinctKeyIterator -> com.google.common.collect.eO:
    java.util.Set seenKeys -> a
    com.google.common.collect.LinkedListMultimap$Node next -> b
    com.google.common.collect.LinkedListMultimap$Node current -> c
    int expectedModCount -> d
    com.google.common.collect.LinkedListMultimap this$0 -> e
    415:419:void <init>(com.google.common.collect.LinkedListMultimap) -> <init>
    422:425:void checkForConcurrentModification() -> a
    429:430:boolean hasNext() -> hasNext
    435:442:java.lang.Object next() -> next
    447:452:void remove() -> remove
    415:415:void <init>(com.google.common.collect.LinkedListMultimap,byte) -> <init>
com.google.common.collect.LinkedListMultimap$KeyList -> com.google.common.collect.eP:
    com.google.common.collect.LinkedListMultimap$Node head -> a
    com.google.common.collect.LinkedListMultimap$Node tail -> b
    int count -> c
    144:150:void <init>(com.google.common.collect.LinkedListMultimap$Node) -> <init>
com.google.common.collect.LinkedListMultimap$Node -> com.google.common.collect.eQ:
    java.lang.Object key -> a
    java.lang.Object value -> b
    com.google.common.collect.LinkedListMultimap$Node next -> c
    com.google.common.collect.LinkedListMultimap$Node previous -> d
    com.google.common.collect.LinkedListMultimap$Node nextSibling -> e
    com.google.common.collect.LinkedListMultimap$Node previousSibling -> f
    116:119:void <init>(java.lang.Object,java.lang.Object) -> <init>
    123:123:java.lang.Object getKey() -> getKey
    128:128:java.lang.Object getValue() -> getValue
    133:135:java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.LinkedListMultimap$NodeIterator -> com.google.common.collect.eR:
    int nextIndex -> a
    com.google.common.collect.LinkedListMultimap$Node next -> b
    com.google.common.collect.LinkedListMultimap$Node current -> c
    com.google.common.collect.LinkedListMultimap$Node previous -> d
    int expectedModCount -> e
    com.google.common.collect.LinkedListMultimap this$0 -> f
    313:331:void <init>(com.google.common.collect.LinkedListMultimap,int) -> <init>
    334:337:void checkForConcurrentModification() -> a
    341:342:boolean hasNext() -> hasNext
    348:353:com.google.common.collect.LinkedListMultimap$Node next() -> b
    358:369:void remove() -> remove
    373:374:boolean hasPrevious() -> hasPrevious
    380:385:com.google.common.collect.LinkedListMultimap$Node previous() -> c
    390:390:int nextIndex() -> nextIndex
    395:395:int previousIndex() -> previousIndex
    400:400:void set$58840bfe() -> d
    405:405:void add$58840bfe() -> e
    409:411:void setValue(java.lang.Object) -> a
    308:308:void add(java.lang.Object) -> add
    308:308:void set(java.lang.Object) -> set
    308:308:java.lang.Object previous() -> previous
    308:308:java.lang.Object next() -> next
com.google.common.collect.LinkedListMultimap$ValueForKeyIterator -> com.google.common.collect.eS:
    java.lang.Object key -> a
    int nextIndex -> b
    com.google.common.collect.LinkedListMultimap$Node next -> c
    com.google.common.collect.LinkedListMultimap$Node current -> d
    com.google.common.collect.LinkedListMultimap$Node previous -> e
    com.google.common.collect.LinkedListMultimap this$0 -> f
    464:468:void <init>(com.google.common.collect.LinkedListMultimap,java.lang.Object) -> <init>
    478:496:void <init>(com.google.common.collect.LinkedListMultimap,java.lang.Object,int) -> <init>
    500:500:boolean hasNext() -> hasNext
    506:510:java.lang.Object next() -> next
    515:515:boolean hasPrevious() -> hasPrevious
    521:525:java.lang.Object previous() -> previous
    530:530:int nextIndex() -> nextIndex
    535:535:int previousIndex() -> previousIndex
    540:549:void remove() -> remove
    553:555:void set(java.lang.Object) -> set
    560:563:void add(java.lang.Object) -> add
com.google.common.collect.ListMultimap -> com.google.common.collect.ListMultimap:
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Map asMap() -> asMap
    boolean equals(java.lang.Object) -> equals
    42:42:java.util.Collection get(java.lang.Object) -> get
    42:42:java.util.Collection removeAll(java.lang.Object) -> removeAll
    42:42:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.Lists -> com.google.common.collect.Lists:
    68:68:void <init>() -> <init>
    83:83:java.util.ArrayList newArrayList() -> newArrayList
    103:108:java.util.ArrayList newArrayList(java.lang.Object[]) -> newArrayList
    126:130:java.util.ArrayList newArrayList(java.lang.Iterable) -> newArrayList
    142:144:java.util.ArrayList newArrayList(java.util.Iterator) -> newArrayList
    149:152:int computeArrayListCapacity(int) -> a
    173:174:java.util.ArrayList newArrayListWithCapacity(int) -> newArrayListWithCapacity
    192:192:java.util.ArrayList newArrayListWithExpectedSize(int) -> newArrayListWithExpectedSize
    214:214:java.util.LinkedList newLinkedList() -> newLinkedList
    236:238:java.util.LinkedList newLinkedList(java.lang.Iterable) -> newLinkedList
    252:252:java.util.concurrent.CopyOnWriteArrayList newCopyOnWriteArrayList() -> newCopyOnWriteArrayList
    267:269:java.util.concurrent.CopyOnWriteArrayList newCopyOnWriteArrayList(java.lang.Iterable) -> newCopyOnWriteArrayList
    287:287:java.util.List asList(java.lang.Object,java.lang.Object[]) -> asList
    307:307:java.util.List asList(java.lang.Object,java.lang.Object,java.lang.Object[]) -> asList
    426:426:java.util.List cartesianProduct(java.util.List) -> cartesianProduct
    485:485:java.util.List cartesianProduct(java.util.List[]) -> cartesianProduct
    522:522:java.util.List transform(java.util.List,com.google.common.base.Function) -> transform
    657:659:java.util.List partition(java.util.List,int) -> partition
    704:704:com.google.common.collect.ImmutableList charactersOf(java.lang.String) -> charactersOf
    718:718:java.util.List charactersOf(java.lang.CharSequence) -> charactersOf
    794:801:java.util.List reverse(java.util.List) -> reverse
    952:959:int hashCodeImpl(java.util.List) -> a
    964:984:boolean equalsImpl(java.util.List,java.lang.Object) -> a
    990:996:boolean addAllImpl(java.util.List,int,java.lang.Iterable) -> a
    1001:1010:int indexOfImpl(java.util.List,java.lang.Object) -> b
    1015:1029:int indexOfRandomAccess(java.util.List,java.lang.Object) -> d
    1034:1043:int lastIndexOfImpl(java.util.List,java.lang.Object) -> c
    1048:1061:int lastIndexOfRandomAccess(java.util.List,java.lang.Object) -> e
    1066:1066:java.util.ListIterator listIteratorImpl(java.util.List,int) -> a
    1072:1093:java.util.List subListImpl(java.util.List,int,int) -> a
    1148:1148:java.util.List cast(java.lang.Iterable) -> a
com.google.common.collect.Lists$1 -> com.google.common.collect.eT:
    1074:1074:void <init>(java.util.List) -> <init>
    1077:1077:java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.Lists$2 -> com.google.common.collect.eU:
    1084:1084:void <init>(java.util.List) -> <init>
    1087:1087:java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.Lists$AbstractListWrapper -> com.google.common.collect.eV:
    java.util.List backingList -> a
    1099:1101:void <init>(java.util.List) -> <init>
    1105:1106:void add(int,java.lang.Object) -> add
    1110:1110:boolean addAll(int,java.util.Collection) -> addAll
    1115:1115:java.lang.Object get(int) -> get
    1120:1120:java.lang.Object remove(int) -> remove
    1125:1125:java.lang.Object set(int,java.lang.Object) -> set
    1130:1130:boolean contains(java.lang.Object) -> contains
    1135:1135:int size() -> size
com.google.common.collect.Lists$CharSequenceAsList -> com.google.common.collect.eW:
    java.lang.CharSequence sequence -> a
    766:768:void <init>(java.lang.CharSequence) -> <init>
    772:773:java.lang.Character get(int) -> a
    778:778:int size() -> size
    763:763:java.lang.Object get(int) -> get
com.google.common.collect.Lists$OnePlusArrayList -> com.google.common.collect.eX:
    java.lang.Object first -> a
    java.lang.Object[] rest -> b
    long serialVersionUID -> serialVersionUID
    316:319:void <init>(java.lang.Object,java.lang.Object[]) -> <init>
    323:323:int size() -> size
    329:330:java.lang.Object get(int) -> get
com.google.common.collect.Lists$Partition -> com.google.common.collect.eY:
    java.util.List list -> a
    int size -> b
    668:671:void <init>(java.util.List,int) -> <init>
    675:678:java.util.List get(int) -> a
    683:683:int size() -> size
    688:688:boolean isEmpty() -> isEmpty
    664:664:java.lang.Object get(int) -> get
com.google.common.collect.Lists$RandomAccessListWrapper -> com.google.common.collect.eZ:
    1142:1143:void <init>(java.util.List) -> <init>
com.google.common.collect.Lists$RandomAccessPartition -> com.google.common.collect.fa:
    694:695:void <init>(java.util.List,int) -> <init>
com.google.common.collect.Lists$RandomAccessReverseList -> com.google.common.collect.fb:
    945:946:void <init>(java.util.List) -> <init>
com.google.common.collect.Lists$ReverseList -> com.google.common.collect.fc:
    java.util.List forwardList -> a
    808:810:void <init>(java.util.List) -> <init>
    813:813:java.util.List getForwardList() -> a
    817:819:int reverseIndex(int) -> a
    823:825:int reversePosition(int) -> b
    830:831:void add(int,java.lang.Object) -> add
    835:836:void clear() -> clear
    840:840:java.lang.Object remove(int) -> remove
    845:846:void removeRange(int,int) -> removeRange
    850:850:java.lang.Object set(int,java.lang.Object) -> set
    855:855:java.lang.Object get(int) -> get
    860:860:int size() -> size
    865:866:java.util.List subList(int,int) -> subList
    871:871:java.util.Iterator iterator() -> iterator
    876:878:java.util.ListIterator listIterator(int) -> listIterator
    805:805:int access$000(com.google.common.collect.Lists$ReverseList,int) -> a
com.google.common.collect.Lists$ReverseList$1 -> com.google.common.collect.fd:
    boolean canRemoveOrSet -> a
    java.util.ListIterator val$forwardIterator -> b
    com.google.common.collect.Lists$ReverseList this$0 -> c
    878:878:void <init>(com.google.common.collect.Lists$ReverseList,java.util.ListIterator) -> <init>
    884:887:void add(java.lang.Object) -> add
    891:891:boolean hasNext() -> hasNext
    896:896:boolean hasPrevious() -> hasPrevious
    901:905:java.lang.Object next() -> next
    910:910:int nextIndex() -> nextIndex
    915:919:java.lang.Object previous() -> previous
    924:924:int previousIndex() -> previousIndex
    929:932:void remove() -> remove
    936:938:void set(java.lang.Object) -> set
com.google.common.collect.Lists$StringAsImmutableList -> com.google.common.collect.fe:
    java.lang.String string -> a
    726:728:void <init>(java.lang.String) -> <init>
    732:732:int indexOf(java.lang.Object) -> indexOf
    737:737:int lastIndexOf(java.lang.Object) -> lastIndexOf
    742:743:com.google.common.collect.ImmutableList subList(int,int) -> subList
    748:748:boolean isPartialView() -> a
    753:754:java.lang.Character get(int) -> a
    759:759:int size() -> size
    721:721:java.util.List subList(int,int) -> subList
    721:721:java.lang.Object get(int) -> get
com.google.common.collect.Lists$TransformingRandomAccessList -> com.google.common.collect.ff:
    java.util.List fromList -> b
    com.google.common.base.Function function -> a
    long serialVersionUID -> serialVersionUID
    587:590:void <init>(java.util.List,com.google.common.base.Function) -> <init>
    594:595:void clear() -> clear
    599:599:java.lang.Object get(int) -> get
    604:604:java.util.Iterator iterator() -> iterator
    609:609:java.util.ListIterator listIterator(int) -> listIterator
    619:619:boolean isEmpty() -> isEmpty
    624:625:boolean removeIf(java.util.function.Predicate) -> removeIf
    630:630:java.lang.Object remove(int) -> remove
    635:635:int size() -> size
    625:625:boolean lambda$removeIf$0(java.util.function.Predicate,java.lang.Object) -> a
com.google.common.collect.Lists$TransformingRandomAccessList$1 -> com.google.common.collect.fg:
    com.google.common.collect.Lists$TransformingRandomAccessList this$0 -> a
    609:609:void <init>(com.google.common.collect.Lists$TransformingRandomAccessList,java.util.ListIterator) -> <init>
    612:612:java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Lists$TransformingSequentialList -> com.google.common.collect.fh:
    java.util.List fromList -> b
    com.google.common.base.Function function -> a
    long serialVersionUID -> serialVersionUID
    537:540:void <init>(java.util.List,com.google.common.base.Function) -> <init>
    548:549:void clear() -> clear
    553:553:int size() -> size
    558:558:java.util.ListIterator listIterator(int) -> listIterator
    568:569:boolean removeIf(java.util.function.Predicate) -> removeIf
    569:569:boolean lambda$removeIf$0(java.util.function.Predicate,java.lang.Object) -> a
com.google.common.collect.Lists$TransformingSequentialList$1 -> com.google.common.collect.fi:
    com.google.common.collect.Lists$TransformingSequentialList this$0 -> a
    558:558:void <init>(com.google.common.collect.Lists$TransformingSequentialList,java.util.ListIterator) -> <init>
    561:561:java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Lists$TwoPlusArrayList -> com.google.common.collect.fj:
    java.lang.Object first -> a
    java.lang.Object second -> b
    java.lang.Object[] rest -> c
    long serialVersionUID -> serialVersionUID
    343:347:void <init>(java.lang.Object,java.lang.Object,java.lang.Object[]) -> <init>
    351:351:int size() -> size
    356:364:java.lang.Object get(int) -> get
com.google.common.collect.MapDifference -> com.google.common.collect.MapDifference:
    boolean areEqual() -> areEqual
    java.util.Map entriesOnlyOnLeft() -> entriesOnlyOnLeft
    java.util.Map entriesOnlyOnRight() -> entriesOnlyOnRight
    java.util.Map entriesInCommon() -> entriesInCommon
    java.util.Map entriesDiffering() -> entriesDiffering
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.MapDifference$ValueDifference -> com.google.common.collect.MapDifference$ValueDifference:
    java.lang.Object leftValue() -> leftValue
    java.lang.Object rightValue() -> rightValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.MapMaker -> com.google.common.collect.MapMaker:
    boolean useCustomMap -> a
    int initialCapacity -> b
    int concurrencyLevel -> c
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength -> d
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength -> e
    com.google.common.base.Equivalence keyEquivalence -> f
    98:110:void <init>() -> <init>
    122:125:com.google.common.collect.MapMaker keyEquivalence(com.google.common.base.Equivalence) -> a
    129:129:com.google.common.base.Equivalence getKeyEquivalence() -> a
    144:150:com.google.common.collect.MapMaker initialCapacity(int) -> initialCapacity
    154:154:int getInitialCapacity() -> b
    178:184:com.google.common.collect.MapMaker concurrencyLevel(int) -> concurrencyLevel
    188:188:int getConcurrencyLevel() -> c
    205:205:com.google.common.collect.MapMaker weakKeys() -> weakKeys
    209:215:com.google.common.collect.MapMaker setKeyStrength(com.google.common.collect.MapMakerInternalMap$Strength) -> a
    219:219:com.google.common.collect.MapMakerInternalMap$Strength getKeyStrength() -> d
    241:241:com.google.common.collect.MapMaker weakValues() -> weakValues
    255:261:com.google.common.collect.MapMaker setValueStrength(com.google.common.collect.MapMakerInternalMap$Strength) -> b
    265:265:com.google.common.collect.MapMakerInternalMap$Strength getValueStrength() -> e
    280:283:java.util.concurrent.ConcurrentMap makeMap() -> makeMap
    292:308:java.lang.String toString() -> toString
com.google.common.collect.MapMaker$Dummy -> com.google.common.collect.fk:
    com.google.common.collect.MapMaker$Dummy VALUE -> a
    com.google.common.collect.MapMaker$Dummy[] $VALUES -> b
    250:250:com.google.common.collect.MapMaker$Dummy[] values() -> values
    250:250:com.google.common.collect.MapMaker$Dummy valueOf(java.lang.String) -> valueOf
    250:250:void <init>(java.lang.String,int) -> <init>
    250:251:void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap -> com.google.common.collect.fl:
    int segmentMask -> d
    int segmentShift -> e
    com.google.common.collect.MapMakerInternalMap$Segment[] segments -> a
    int concurrencyLevel -> f
    com.google.common.base.Equivalence keyEquivalence -> b
    com.google.common.collect.MapMakerInternalMap$InternalEntryHelper entryHelper -> c
    com.google.common.collect.MapMakerInternalMap$WeakValueReference UNSET_WEAK_VALUE_REFERENCE -> g
    java.util.Set keySet -> h
    java.util.Collection values -> i
    java.util.Set entrySet -> j
    long serialVersionUID -> serialVersionUID
    161:195:void <init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper) -> <init>
    200:215:com.google.common.collect.MapMakerInternalMap create(com.google.common.collect.MapMaker) -> a
    231:242:com.google.common.collect.MapMakerInternalMap createWithDummyValues(com.google.common.collect.MapMaker) -> b
    386:386:com.google.common.collect.MapMakerInternalMap$WeakValueReference unsetWeakValueReference() -> a
    1056:1061:int rehash(int) -> a
    1075:1076:int hash(java.lang.Object) -> b
    1080:1083:void reclaimValue(com.google.common.collect.MapMakerInternalMap$WeakValueReference) -> a
    1086:1088:void reclaimKey(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    1107:1107:com.google.common.collect.MapMakerInternalMap$Segment segmentFor(int) -> b
    1111:1111:com.google.common.collect.MapMakerInternalMap$Segment createSegment(int,int) -> a
    1119:1122:java.lang.Object getLiveValue(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> b
    1127:1127:com.google.common.collect.MapMakerInternalMap$Segment[] newSegmentArray(int) -> c
    2288:2288:com.google.common.base.Equivalence valueEquivalence() -> b
    2302:2320:boolean isEmpty() -> isEmpty
    2325:2330:int size() -> size
    2335:2339:java.lang.Object get(java.lang.Object) -> get
    2347:2351:com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry(java.lang.Object) -> a
    2356:2360:boolean containsKey(java.lang.Object) -> containsKey
    2365:2398:boolean containsValue(java.lang.Object) -> containsValue
    2404:2407:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    2413:2416:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    2421:2424:void putAll(java.util.Map) -> putAll
    2429:2433:java.lang.Object remove(java.lang.Object) -> remove
    2439:2443:boolean remove(java.lang.Object,java.lang.Object) -> remove
    2449:2455:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    2461:2464:java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    2469:2472:void clear() -> clear
    2478:2479:java.util.Set keySet() -> keySet
    2486:2487:java.util.Collection values() -> values
    2494:2495:java.util.Set entrySet() -> entrySet
    2821:2823:java.util.ArrayList toArrayList(java.util.Collection) -> b
    2831:2835:java.lang.Object writeReplace() -> writeReplace
    70:70:java.util.ArrayList access$900(java.util.Collection) -> a
    1001:1001:void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$1 -> com.google.common.collect.fm:
    1002:1002:void <init>() -> <init>
    1009:1009:void clear() -> clear
    1013:1013:java.lang.Object get() -> get
    1019:1019:com.google.common.collect.MapMakerInternalMap$WeakValueReference copyFor$16849e43() -> b
    1002:1002:com.google.common.collect.MapMakerInternalMap$WeakValueReference copyFor(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    1002:1002:com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry() -> a
com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy -> com.google.common.collect.fn:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength -> b
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength -> c
    com.google.common.base.Equivalence keyEquivalence -> d
    int concurrencyLevel -> e
    java.util.concurrent.ConcurrentMap delegate -> a
    2862:2869:void <init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap) -> <init>
    2873:2873:java.util.concurrent.ConcurrentMap delegate() -> delegate
    2877:2883:void writeMapTo(java.io.ObjectOutputStream) -> a
    2887:2893:com.google.common.collect.MapMaker readMapMaker(java.io.ObjectInputStream) -> a
    2899:2906:void readEntries(java.io.ObjectInputStream) -> b
    2844:2844:java.util.Map delegate() -> delegate
    2844:2844:java.lang.Object delegate() -> delegate
com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry -> com.google.common.collect.fo:
    java.lang.Object key -> a
    int hash -> b
    com.google.common.collect.MapMakerInternalMap$InternalEntry next -> c
    345:349:void <init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> <init>
    353:353:java.lang.Object getKey() -> a
    358:358:int getHash() -> b
    363:363:com.google.common.collect.MapMakerInternalMap$InternalEntry getNext() -> c
com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry -> com.google.common.collect.fp:
    int hash -> a
    com.google.common.collect.MapMakerInternalMap$InternalEntry next -> b
    652:655:void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> <init>
    659:659:java.lang.Object getKey() -> a
    664:664:int getHash() -> b
    669:669:com.google.common.collect.MapMakerInternalMap$InternalEntry getNext() -> c
com.google.common.collect.MapMakerInternalMap$EntryIterator -> com.google.common.collect.fq:
    2671:2671:void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    2675:2675:java.util.Map$Entry next() -> b
    2671:2671:java.lang.Object next() -> next
com.google.common.collect.MapMakerInternalMap$EntrySet -> com.google.common.collect.fr:
    com.google.common.collect.MapMakerInternalMap this$0 -> a
    2756:2756:void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    2760:2760:java.util.Iterator iterator() -> iterator
    2765:2775:boolean contains(java.lang.Object) -> contains
    2780:2785:boolean remove(java.lang.Object) -> remove
    2790:2790:int size() -> size
    2795:2795:boolean isEmpty() -> isEmpty
    2800:2801:void clear() -> clear
com.google.common.collect.MapMakerInternalMap$HashIterator -> com.google.common.collect.fs:
    int nextSegmentIndex -> a
    int nextTableIndex -> b
    com.google.common.collect.MapMakerInternalMap$Segment currentSegment -> c
    java.util.concurrent.atomic.AtomicReferenceArray currentTable -> d
    com.google.common.collect.MapMakerInternalMap$InternalEntry nextEntry -> e
    com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextExternal -> f
    com.google.common.collect.MapMakerInternalMap$WriteThroughEntry lastReturned -> g
    com.google.common.collect.MapMakerInternalMap this$0 -> h
    2510:2514:void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    2520:2540:void advance() -> b
    2544:2551:boolean nextInChain() -> c
    2556:2563:boolean nextInTable() -> d
    2572:2583:boolean advanceTo(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    2588:2588:boolean hasNext() -> hasNext
    2592:2597:com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextEntry() -> a
    2602:2605:void remove() -> remove
com.google.common.collect.MapMakerInternalMap$InternalEntry -> com.google.common.collect.ft:
    com.google.common.collect.MapMakerInternalMap$InternalEntry getNext() -> c
    int getHash() -> b
    java.lang.Object getKey() -> a
    java.lang.Object getValue() -> d
com.google.common.collect.MapMakerInternalMap$InternalEntryHelper -> com.google.common.collect.fu:
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength() -> a
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> b
    com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> a
    com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> a
com.google.common.collect.MapMakerInternalMap$KeyIterator -> com.google.common.collect.fv:
    2608:2608:void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    2612:2612:java.lang.Object next() -> next
com.google.common.collect.MapMakerInternalMap$KeySet -> com.google.common.collect.fw:
    com.google.common.collect.MapMakerInternalMap this$0 -> a
    2680:2680:void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    2684:2684:java.util.Iterator iterator() -> iterator
    2689:2689:int size() -> size
    2694:2694:boolean isEmpty() -> isEmpty
    2699:2699:boolean contains(java.lang.Object) -> contains
    2704:2704:boolean remove(java.lang.Object) -> remove
    2709:2710:void clear() -> clear
com.google.common.collect.MapMakerInternalMap$SafeToArraySet -> com.google.common.collect.fx:
    2804:2804:void <init>() -> <init>
    2810:2810:java.lang.Object[] toArray() -> toArray
    2815:2815:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    2804:2804:void <init>(byte) -> <init>
com.google.common.collect.MapMakerInternalMap$Segment -> com.google.common.collect.fy:
    com.google.common.collect.MapMakerInternalMap map -> d
    int count -> a
    int modCount -> b
    int threshold -> e
    java.util.concurrent.atomic.AtomicReferenceArray table -> c
    int maxSegmentSize -> f
    java.util.concurrent.atomic.AtomicInteger readCount -> g
    1201:1207:void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$Segment self() -> a
    1219:1219:void maybeDrainReferenceQueues() -> b
    1222:1222:void maybeClearReferenceQueues() -> c
    1226:1227:void setValue(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> a
    1231:1231:com.google.common.collect.MapMakerInternalMap$InternalEntry copyEntry(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    1235:1235:java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int) -> a
    1239:1245:void initTable(java.util.concurrent.atomic.AtomicReferenceArray) -> a
    1337:1344:void tryDrainReferenceQueues() -> f
    1349:1358:void drainKeyReferenceQueue(java.lang.ref.ReferenceQueue) -> a
    1363:1372:void drainValueReferenceQueue(java.lang.ref.ReferenceQueue) -> b
    1375:1376:void clearReferenceQueue(java.lang.ref.ReferenceQueue) -> c
    1381:1382:com.google.common.collect.MapMakerInternalMap$InternalEntry getFirst(int) -> b
    1388:1406:com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry(java.lang.Object,int) -> a
    1410:1410:com.google.common.collect.MapMakerInternalMap$InternalEntry getLiveEntry(java.lang.Object,int) -> e
    1415:1427:java.lang.Object get(java.lang.Object,int) -> b
    1432:1440:boolean containsKey(java.lang.Object,int) -> c
    1473:1526:java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean) -> a
    1532:1596:void expand() -> g
    1599:1642:boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object) -> a
    1646:1683:java.lang.Object replace(java.lang.Object,int,java.lang.Object) -> a
    1688:1724:java.lang.Object remove(java.lang.Object,int) -> d
    1728:1765:boolean remove(java.lang.Object,int,java.lang.Object) -> b
    1769:1785:void clear() -> d
    1801:1812:com.google.common.collect.MapMakerInternalMap$InternalEntry removeFromChain(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> b
    1818:1839:boolean reclaimKey(com.google.common.collect.MapMakerInternalMap$InternalEntry,int) -> a
    1845:1873:boolean reclaimValue(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakValueReference) -> a
    1936:1936:boolean isCollected(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    1945:1955:java.lang.Object getLiveValue(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> b
    1964:1967:void postReadCleanup() -> e
    1975:1976:void preWriteCleanup() -> h
    1979:1980:void runCleanup() -> i
    1983:1991:void runLockedCleanup() -> j
com.google.common.collect.MapMakerInternalMap$SerializationProxy -> com.google.common.collect.fz:
    long serialVersionUID -> serialVersionUID
    2923:2925:void <init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap) -> <init>
    2928:2930:void writeObject(java.io.ObjectOutputStream) -> writeObject
    2933:2937:void readObject(java.io.ObjectInputStream) -> readObject
    2940:2940:java.lang.Object readResolve() -> readResolve
com.google.common.collect.MapMakerInternalMap$Strength -> com.google.common.collect.fA:
    com.google.common.collect.MapMakerInternalMap$Strength STRONG -> a
    com.google.common.collect.MapMakerInternalMap$Strength WEAK -> b
    com.google.common.collect.MapMakerInternalMap$Strength[] $VALUES -> c
    245:245:com.google.common.collect.MapMakerInternalMap$Strength[] values() -> values
    245:245:com.google.common.collect.MapMakerInternalMap$Strength valueOf(java.lang.String) -> valueOf
    245:245:void <init>(java.lang.String,int) -> <init>
    com.google.common.base.Equivalence defaultEquivalence() -> a
    245:245:void <init>(java.lang.String,int,byte) -> <init>
    245:253:void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$Strength$1 -> com.google.common.collect.fB:
    246:246:void <init>(java.lang.String,int) -> <init>
    249:249:com.google.common.base.Equivalence defaultEquivalence() -> a
com.google.common.collect.MapMakerInternalMap$Strength$2 -> com.google.common.collect.fC:
    253:253:void <init>(java.lang.String,int) -> <init>
    256:256:com.google.common.base.Equivalence defaultEquivalence() -> a
com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry -> com.google.common.collect.fD:
    575:576:void <init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry) -> <init>
    580:580:com.google.common.collect.MapMaker$Dummy getValue() -> e
    586:586:com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry copy(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry) -> a
    571:571:java.lang.Object getValue() -> d
com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper -> com.google.common.collect.fE:
    com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper INSTANCE -> a
    593:593:void <init>() -> <init>
    600:600:com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper instance() -> c
    605:605:com.google.common.collect.MapMakerInternalMap$Strength keyStrength() -> a
    610:610:com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> b
    619:619:com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> b
    627:627:com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry copy$5d28d3e(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry) -> a
    640:640:com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry newEntry$3aa832dd(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry) -> a
    593:593:void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> a
    593:593:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    593:593:com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    593:593:com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> a
    596:596:void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment -> com.google.common.collect.fF:
    2091:2092:void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    2096:2096:com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment self() -> f
    2084:2084:com.google.common.collect.MapMakerInternalMap$Segment self() -> a
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry -> com.google.common.collect.fG:
    java.lang.Object value -> c
    393:397:void <init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry) -> <init>
    401:401:java.lang.Object getValue() -> d
    405:406:void setValue(java.lang.Object) -> a
    409:412:com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry copy(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry) -> a
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper -> com.google.common.collect.fH:
    com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper INSTANCE -> a
    416:416:void <init>() -> <init>
    423:423:com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper instance() -> c
    428:428:com.google.common.collect.MapMakerInternalMap$Strength keyStrength() -> a
    433:433:com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> b
    443:443:com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> b
    451:451:com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry copy$2c686688(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry) -> a
    459:460:void setValue$537a7a4e(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry,java.lang.Object) -> a
    468:468:com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry newEntry$39f94e60(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry) -> a
    416:416:void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> a
    416:416:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    416:416:com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    416:416:com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> a
    419:419:void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment -> com.google.common.collect.fI:
    2003:2004:void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    2008:2008:com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment self() -> f
    1995:1995:com.google.common.collect.MapMakerInternalMap$Segment self() -> a
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry -> com.google.common.collect.fJ:
    com.google.common.collect.MapMakerInternalMap$WeakValueReference valueReference -> c
    477:482:void <init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry) -> <init>
    486:486:java.lang.Object getValue() -> d
    495:498:void setValue(java.lang.Object,java.lang.ref.ReferenceQueue) -> a
    502:504:com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry copy(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry) -> a
    509:509:com.google.common.collect.MapMakerInternalMap$WeakValueReference getValueReference() -> e
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper -> com.google.common.collect.fK:
    com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper INSTANCE -> a
    513:513:void <init>() -> <init>
    520:520:com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper instance() -> c
    525:525:com.google.common.collect.MapMakerInternalMap$Strength keyStrength() -> a
    530:530:com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> b
    539:539:com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> b
    547:550:com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry copy(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry) -> a
    556:557:void setValue(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry,java.lang.Object) -> a
    565:565:com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry newEntry$2126e9d(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry) -> a
    513:513:void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> a
    513:513:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    513:513:com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    513:513:com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> a
    516:516:void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment -> com.google.common.collect.fL:
    java.lang.ref.ReferenceQueue queueForValues -> d
    2021:2029:void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    2033:2033:com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment self() -> f
    2074:2075:void maybeDrainReferenceQueues() -> b
    2079:2080:void maybeClearReferenceQueues() -> c
    2019:2019:com.google.common.collect.MapMakerInternalMap$Segment self() -> a
    2019:2019:java.lang.ref.ReferenceQueue access$100(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment) -> a
com.google.common.collect.MapMakerInternalMap$StrongValueEntry -> com.google.common.collect.fM:
com.google.common.collect.MapMakerInternalMap$ValueIterator -> com.google.common.collect.fN:
    2616:2616:void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    2620:2620:java.lang.Object next() -> next
com.google.common.collect.MapMakerInternalMap$Values -> com.google.common.collect.fO:
    com.google.common.collect.MapMakerInternalMap this$0 -> a
    2714:2714:void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    2718:2718:java.util.Iterator iterator() -> iterator
    2723:2723:int size() -> size
    2728:2728:boolean isEmpty() -> isEmpty
    2733:2733:boolean contains(java.lang.Object) -> contains
    2738:2739:void clear() -> clear
    2746:2746:java.lang.Object[] toArray() -> toArray
    2751:2751:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry -> com.google.common.collect.fP:
    679:680:void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry) -> <init>
    684:684:com.google.common.collect.MapMaker$Dummy getValue() -> e
    691:691:com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry copy(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry) -> a
    674:674:java.lang.Object getValue() -> d
com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper -> com.google.common.collect.fQ:
    com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper INSTANCE -> a
    698:698:void <init>() -> <init>
    705:705:com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper instance() -> c
    710:710:com.google.common.collect.MapMakerInternalMap$Strength keyStrength() -> a
    715:715:com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> b
    723:723:com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> b
    731:735:com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry copy(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry) -> a
    748:748:com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry) -> a
    698:698:void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> a
    698:698:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    698:698:com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    698:698:com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> a
    701:701:void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment -> com.google.common.collect.fR:
    java.lang.ref.ReferenceQueue queueForKeys -> d
    2220:2227:void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    2231:2231:com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment self() -> f
    2247:2248:void maybeDrainReferenceQueues() -> b
    2252:2253:void maybeClearReferenceQueues() -> c
    2218:2218:com.google.common.collect.MapMakerInternalMap$Segment self() -> a
    2218:2218:java.lang.ref.ReferenceQueue access$200(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment) -> a
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry -> com.google.common.collect.fS:
    java.lang.Object value -> b
    757:762:void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry) -> <init>
    766:766:java.lang.Object getValue() -> d
    770:771:void setValue(java.lang.Object) -> a
    775:778:com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry copy(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry) -> a
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper -> com.google.common.collect.fT:
    com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper INSTANCE -> a
    782:782:void <init>() -> <init>
    789:789:com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper instance() -> c
    794:794:com.google.common.collect.MapMakerInternalMap$Strength keyStrength() -> a
    799:799:com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> b
    808:808:com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> b
    816:820:com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry copy(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry) -> a
    826:827:void setValue$7b3f81d2(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry,java.lang.Object) -> a
    835:835:com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry) -> a
    782:782:void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> a
    782:782:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    782:782:com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    782:782:com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> a
    785:785:void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment -> com.google.common.collect.fU:
    java.lang.ref.ReferenceQueue queueForKeys -> d
    2109:2117:void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    2121:2121:com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment self() -> f
    2137:2138:void maybeDrainReferenceQueues() -> b
    2142:2143:void maybeClearReferenceQueues() -> c
    2107:2107:com.google.common.collect.MapMakerInternalMap$Segment self() -> a
    2107:2107:java.lang.ref.ReferenceQueue access$300(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment) -> a
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry -> com.google.common.collect.fV:
    com.google.common.collect.MapMakerInternalMap$WeakValueReference valueReference -> b
    844:850:void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry) -> <init>
    854:854:java.lang.Object getValue() -> d
    861:864:com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry copy(java.lang.ref.ReferenceQueue,java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry) -> a
    873:876:void setValue(java.lang.Object,java.lang.ref.ReferenceQueue) -> a
    880:880:com.google.common.collect.MapMakerInternalMap$WeakValueReference getValueReference() -> e
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper -> com.google.common.collect.fW:
    com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper INSTANCE -> a
    884:884:void <init>() -> <init>
    891:891:com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper instance() -> c
    896:896:com.google.common.collect.MapMakerInternalMap$Strength keyStrength() -> a
    901:901:com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> b
    909:909:com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> b
    917:924:com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry copy(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry) -> a
    930:931:void setValue(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,java.lang.Object) -> a
    939:939:com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry) -> a
    884:884:void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> a
    884:884:com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    884:884:com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
    884:884:com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> a
    887:887:void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment -> com.google.common.collect.fX:
    java.lang.ref.ReferenceQueue queueForKeys -> d
    java.lang.ref.ReferenceQueue queueForValues -> e
    2149:2157:void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    2161:2161:com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment self() -> f
    2207:2209:void maybeDrainReferenceQueues() -> b
    2213:2214:void maybeClearReferenceQueues() -> c
    2147:2147:com.google.common.collect.MapMakerInternalMap$Segment self() -> a
    2147:2147:java.lang.ref.ReferenceQueue access$400(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment) -> a
    2147:2147:java.lang.ref.ReferenceQueue access$500(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment) -> b
com.google.common.collect.MapMakerInternalMap$WeakValueEntry -> com.google.common.collect.fY:
    com.google.common.collect.MapMakerInternalMap$WeakValueReference getValueReference() -> e
com.google.common.collect.MapMakerInternalMap$WeakValueReference -> com.google.common.collect.fZ:
    java.lang.Object get() -> get
    com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry() -> a
    void clear() -> clear
    com.google.common.collect.MapMakerInternalMap$WeakValueReference copyFor(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
com.google.common.collect.MapMakerInternalMap$WeakValueReferenceImpl -> com.google.common.collect.ga:
    com.google.common.collect.MapMakerInternalMap$InternalEntry entry -> a
    1029:1031:void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> <init>
    1035:1035:com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry() -> a
    1040:1040:com.google.common.collect.MapMakerInternalMap$WeakValueReference copyFor(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> a
com.google.common.collect.MapMakerInternalMap$WriteThroughEntry -> com.google.common.collect.gb:
    java.lang.Object key -> a
    java.lang.Object value -> b
    com.google.common.collect.MapMakerInternalMap this$0 -> c
    2632:2635:void <init>(com.google.common.collect.MapMakerInternalMap,java.lang.Object,java.lang.Object) -> <init>
    2639:2639:java.lang.Object getKey() -> getKey
    2644:2644:java.lang.Object getValue() -> getValue
    2650:2654:boolean equals(java.lang.Object) -> equals
    2660:2660:int hashCode() -> hashCode
    2665:2667:java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.Maps -> com.google.common.collect.Maps:
    90:90:void <init>() -> <init>
    109:109:com.google.common.base.Function keyFunction() -> a
    114:114:com.google.common.base.Function valueFunction() -> b
    118:118:java.util.Iterator keyIterator(java.util.Iterator) -> a
    127:127:java.util.Iterator valueIterator(java.util.Iterator) -> b
    149:172:com.google.common.collect.ImmutableMap immutableEnumMap(java.util.Map) -> immutableEnumMap
    223:225:java.util.stream.Collector toImmutableEnumMap(java.util.function.Function,java.util.function.Function) -> toImmutableEnumMap
    256:260:java.util.stream.Collector toImmutableEnumMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator) -> toImmutableEnumMap
    285:285:java.util.HashMap newHashMap() -> newHashMap
    303:303:java.util.HashMap newHashMap(java.util.Map) -> newHashMap
    318:318:java.util.HashMap newHashMapWithExpectedSize(int) -> newHashMapWithExpectedSize
    326:336:int capacity(int) -> a
    351:351:java.util.LinkedHashMap newLinkedHashMap() -> newLinkedHashMap
    368:368:java.util.LinkedHashMap newLinkedHashMap(java.util.Map) -> newLinkedHashMap
    384:384:java.util.LinkedHashMap newLinkedHashMapWithExpectedSize(int) -> newLinkedHashMapWithExpectedSize
    393:393:java.util.concurrent.ConcurrentMap newConcurrentMap() -> newConcurrentMap
    409:409:java.util.TreeMap newTreeMap() -> newTreeMap
    429:429:java.util.TreeMap newTreeMap(java.util.SortedMap) -> newTreeMap
    451:451:java.util.TreeMap newTreeMap(java.util.Comparator) -> newTreeMap
    461:461:java.util.EnumMap newEnumMap(java.lang.Class) -> newEnumMap
    477:477:java.util.EnumMap newEnumMap(java.util.Map) -> newEnumMap
    490:490:java.util.IdentityHashMap newIdentityHashMap() -> newIdentityHashMap
    511:515:com.google.common.collect.MapDifference difference(java.util.Map,java.util.Map) -> difference
    536:543:com.google.common.collect.MapDifference difference(java.util.Map,java.util.Map,com.google.common.base.Equivalence) -> difference
    565:574:com.google.common.collect.SortedMapDifference difference(java.util.SortedMap,java.util.Map) -> difference
    585:599:void doDifference(java.util.Map,java.util.Map,com.google.common.base.Equivalence,java.util.Map,java.util.Map,java.util.Map,java.util.Map) -> a
    602:605:java.util.Map unmodifiableMap(java.util.Map) -> c
    774:777:java.util.Comparator orNaturalOrder(java.util.Comparator) -> a
    805:805:java.util.Map asMap(java.util.Set,com.google.common.base.Function) -> asMap
    832:832:java.util.SortedMap asMap(java.util.SortedSet,com.google.common.base.Function) -> asMap
    861:861:java.util.NavigableMap asMap(java.util.NavigableSet,com.google.common.base.Function) -> asMap
    957:957:java.util.Iterator asMapEntryIterator(java.util.Set,com.google.common.base.Function) -> a
    1106:1106:java.util.Set removeOnlySet(java.util.Set) -> c
    1125:1125:java.util.SortedSet removeOnlySortedSet(java.util.SortedSet) -> b
    1160:1160:java.util.NavigableSet removeOnlyNavigableSet(java.util.NavigableSet) -> b
    1233:1233:com.google.common.collect.ImmutableMap toMap(java.lang.Iterable,com.google.common.base.Function) -> toMap
    1251:1258:com.google.common.collect.ImmutableMap toMap(java.util.Iterator,com.google.common.base.Function) -> toMap
    1293:1293:com.google.common.collect.ImmutableMap uniqueIndex(java.lang.Iterable,com.google.common.base.Function) -> uniqueIndex
    1328:1338:com.google.common.collect.ImmutableMap uniqueIndex(java.util.Iterator,com.google.common.base.Function) -> uniqueIndex
    1355:1362:com.google.common.collect.ImmutableMap fromProperties(java.util.Properties) -> fromProperties
    1379:1379:java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object) -> immutableEntry
    1391:1391:java.util.Set unmodifiableEntrySet(java.util.Set) -> a
    1404:1405:java.util.Map$Entry unmodifiableEntry(java.util.Map$Entry) -> a
    1420:1420:com.google.common.collect.UnmodifiableIterator unmodifiableEntryIterator(java.util.Iterator) -> c
    1495:1495:com.google.common.base.Converter asConverter(com.google.common.collect.BiMap) -> asConverter
    1574:1574:com.google.common.collect.BiMap synchronizedBiMap(com.google.common.collect.BiMap) -> synchronizedBiMap
    1589:1589:com.google.common.collect.BiMap unmodifiableBiMap(com.google.common.collect.BiMap) -> unmodifiableBiMap
    1668:1668:java.util.Map transformValues(java.util.Map,com.google.common.base.Function) -> transformValues
    1709:1709:java.util.SortedMap transformValues(java.util.SortedMap,com.google.common.base.Function) -> transformValues
    1753:1753:java.util.NavigableMap transformValues(java.util.NavigableMap,com.google.common.base.Function) -> transformValues
    1805:1805:java.util.Map transformEntries(java.util.Map,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    1857:1857:java.util.SortedMap transformEntries(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    1911:1911:java.util.NavigableMap transformEntries(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    1945:1946:com.google.common.collect.Maps$EntryTransformer asEntryTransformer(com.google.common.base.Function) -> a
    1956:1957:com.google.common.base.Function asValueToValueFunction(com.google.common.collect.Maps$EntryTransformer,java.lang.Object) -> a
    1968:1969:com.google.common.base.Function asEntryToValueFunction(com.google.common.collect.Maps$EntryTransformer) -> a
    1980:1982:java.util.Map$Entry transformEntry(com.google.common.collect.Maps$EntryTransformer,java.util.Map$Entry) -> a
    1998:1999:com.google.common.base.Function asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer) -> b
    2256:2256:com.google.common.base.Predicate keyPredicateOnEntries(com.google.common.base.Predicate) -> a
    2260:2260:com.google.common.base.Predicate valuePredicateOnEntries(com.google.common.base.Predicate) -> b
    2288:2292:java.util.Map filterKeys(java.util.Map,com.google.common.base.Predicate) -> filterKeys
    2325:2325:java.util.SortedMap filterKeys(java.util.SortedMap,com.google.common.base.Predicate) -> filterKeys
    2359:2359:java.util.NavigableMap filterKeys(java.util.NavigableMap,com.google.common.base.Predicate) -> filterKeys
    2388:2389:com.google.common.collect.BiMap filterKeys(com.google.common.collect.BiMap,com.google.common.base.Predicate) -> filterKeys
    2417:2417:java.util.Map filterValues(java.util.Map,com.google.common.base.Predicate) -> filterValues
    2448:2448:java.util.SortedMap filterValues(java.util.SortedMap,com.google.common.base.Predicate) -> filterValues
    2480:2480:java.util.NavigableMap filterValues(java.util.NavigableMap,com.google.common.base.Predicate) -> filterValues
    2512:2512:com.google.common.collect.BiMap filterValues(com.google.common.collect.BiMap,com.google.common.base.Predicate) -> filterValues
    2541:2544:java.util.Map filterEntries(java.util.Map,com.google.common.base.Predicate) -> filterEntries
    2575:2578:java.util.SortedMap filterEntries(java.util.SortedMap,com.google.common.base.Predicate) -> filterEntries
    2610:2613:java.util.NavigableMap filterEntries(java.util.NavigableMap,com.google.common.base.Predicate) -> filterEntries
    2645:2648:com.google.common.collect.BiMap filterEntries(com.google.common.collect.BiMap,com.google.common.base.Predicate) -> filterEntries
    2658:2659:java.util.Map filterFiltered(com.google.common.collect.Maps$AbstractFilteredMap,com.google.common.base.Predicate) -> a
    2668:2669:java.util.SortedMap filterFiltered(com.google.common.collect.Maps$FilteredEntrySortedMap,com.google.common.base.Predicate) -> a
    2679:2681:java.util.NavigableMap filterFiltered(com.google.common.collect.Maps$FilteredEntryNavigableMap,com.google.common.base.Predicate) -> a
    2690:2691:com.google.common.collect.BiMap filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap,com.google.common.base.Predicate) -> a
    3268:3274:java.util.NavigableMap unmodifiableNavigableMap(java.util.NavigableMap) -> unmodifiableNavigableMap
    3280:3280:java.util.Map$Entry unmodifiableOrNull(java.util.Map$Entry) -> e
    3473:3473:java.util.NavigableMap synchronizedNavigableMap(java.util.NavigableMap) -> synchronizedNavigableMap
    3572:3576:java.lang.Object safeGet(java.util.Map,java.lang.Object) -> a
    3585:3589:boolean safeContainsKey(java.util.Map,java.lang.Object) -> b
    3598:3602:java.lang.Object safeRemove(java.util.Map,java.lang.Object) -> c
    3608:3608:boolean containsKeyImpl(java.util.Map,java.lang.Object) -> d
    3613:3613:boolean containsValueImpl(java.util.Map,java.lang.Object) -> e
    3629:3632:boolean containsEntryImpl(java.util.Collection,java.lang.Object) -> a
    3647:3650:boolean removeEntryImpl(java.util.Collection,java.lang.Object) -> b
    3655:3661:boolean equalsImpl(java.util.Map,java.lang.Object) -> f
    3666:3675:java.lang.String toStringImpl(java.util.Map) -> a
    3680:3683:void putAllImpl(java.util.Map,java.util.Map) -> a
    3739:3739:java.lang.Object keyOrNull(java.util.Map$Entry) -> b
    3743:3743:java.lang.Object valueOrNull(java.util.Map$Entry) -> c
    4220:4225:com.google.common.collect.ImmutableMap indexMap(java.util.Collection) -> a
    4248:4267:java.util.NavigableMap subMap(java.util.NavigableMap,com.google.common.collect.Range) -> subMap
    263:266:void lambda$toImmutableEnumMap$4(java.util.function.Function,java.util.function.Function,com.google.common.collect.Maps$Accumulator,java.lang.Object) -> a
    261:261:com.google.common.collect.Maps$Accumulator lambda$toImmutableEnumMap$3(java.util.function.BinaryOperator) -> a
    232:235:void lambda$toImmutableEnumMap$2(java.util.function.Function,java.util.function.Function,com.google.common.collect.Maps$Accumulator,java.lang.Object) -> b
    227:227:com.google.common.collect.Maps$Accumulator lambda$toImmutableEnumMap$1() -> c
    229:229:java.lang.Object lambda$null$0(java.lang.Object,java.lang.Object) -> a
    89:89:java.util.Map access$100(java.util.Map) -> b
    89:89:java.util.Set access$200(java.util.Set) -> b
    89:89:java.util.SortedSet access$300(java.util.SortedSet) -> a
    89:89:java.util.NavigableSet access$400(java.util.NavigableSet) -> a
    89:89:java.util.Map$Entry access$800(java.util.Map$Entry) -> d
com.google.common.collect.Maps$1 -> com.google.common.collect.gc:
    118:118:void <init>(java.util.Iterator) -> <init>
    121:121:java.lang.Object transform(java.util.Map$Entry) -> a
    118:118:java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Maps$10 -> com.google.common.collect.gd:
    com.google.common.collect.Maps$EntryTransformer val$transformer -> a
    java.lang.Object val$key -> b
    1957:1957:void <init>(com.google.common.collect.Maps$EntryTransformer,java.lang.Object) -> <init>
    1960:1960:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$11 -> com.google.common.collect.ge:
    com.google.common.collect.Maps$EntryTransformer val$transformer -> a
    1969:1969:void <init>(com.google.common.collect.Maps$EntryTransformer) -> <init>
    1972:1972:java.lang.Object apply(java.util.Map$Entry) -> a
    1969:1969:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$12 -> com.google.common.collect.gf:
    java.util.Map$Entry val$entry -> a
    com.google.common.collect.Maps$EntryTransformer val$transformer -> b
    1982:1982:void <init>(java.util.Map$Entry,com.google.common.collect.Maps$EntryTransformer) -> <init>
    1985:1985:java.lang.Object getKey() -> getKey
    1990:1990:java.lang.Object getValue() -> getValue
com.google.common.collect.Maps$13 -> com.google.common.collect.gg:
    com.google.common.collect.Maps$EntryTransformer val$transformer -> a
    1999:1999:void <init>(com.google.common.collect.Maps$EntryTransformer) -> <init>
    2002:2002:java.util.Map$Entry apply(java.util.Map$Entry) -> a
    1999:1999:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$2 -> com.google.common.collect.gh:
    127:127:void <init>(java.util.Iterator) -> <init>
    130:130:java.lang.Object transform(java.util.Map$Entry) -> a
    127:127:java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Maps$3 -> com.google.common.collect.gi:
    com.google.common.base.Function val$function -> a
    957:957:void <init>(java.util.Iterator,com.google.common.base.Function) -> <init>
    960:960:java.util.Map$Entry transform(java.lang.Object) -> b
    957:957:java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Maps$4 -> com.google.common.collect.gj:
    java.util.Set val$set -> a
    1106:1106:void <init>(java.util.Set) -> <init>
    1109:1109:java.util.Set delegate() -> delegate
    1114:1114:boolean add(java.lang.Object) -> add
    1119:1119:boolean addAll(java.util.Collection) -> addAll
    1106:1106:java.util.Collection delegate() -> delegate
    1106:1106:java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$5 -> com.google.common.collect.gk:
    java.util.SortedSet val$set -> a
    1125:1125:void <init>(java.util.SortedSet) -> <init>
    1128:1128:java.util.SortedSet delegate() -> delegate
    1133:1133:boolean add(java.lang.Object) -> add
    1138:1138:boolean addAll(java.util.Collection) -> addAll
    1143:1143:java.util.SortedSet headSet(java.lang.Object) -> headSet
    1148:1148:java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    1153:1153:java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    1125:1125:java.util.Set delegate() -> delegate
    1125:1125:java.util.Collection delegate() -> delegate
    1125:1125:java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$6 -> com.google.common.collect.gl:
    java.util.NavigableSet val$set -> a
    1160:1160:void <init>(java.util.NavigableSet) -> <init>
    1163:1163:java.util.NavigableSet delegate() -> delegate
    1168:1168:boolean add(java.lang.Object) -> add
    1173:1173:boolean addAll(java.util.Collection) -> addAll
    1178:1178:java.util.SortedSet headSet(java.lang.Object) -> headSet
    1183:1183:java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    1188:1188:java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    1194:1195:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    1200:1200:java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    1205:1205:java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    1210:1210:java.util.NavigableSet descendingSet() -> descendingSet
    1160:1160:java.util.SortedSet delegate() -> delegate
    1160:1160:java.util.Set delegate() -> delegate
    1160:1160:java.util.Collection delegate() -> delegate
    1160:1160:java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$7 -> com.google.common.collect.gm:
    java.util.Map$Entry val$entry -> a
    1405:1405:void <init>(java.util.Map$Entry) -> <init>
    1408:1408:java.lang.Object getKey() -> getKey
    1413:1413:java.lang.Object getValue() -> getValue
com.google.common.collect.Maps$8 -> com.google.common.collect.gn:
    java.util.Iterator val$entryIterator -> a
    1420:1420:void <init>(java.util.Iterator) -> <init>
    1423:1423:boolean hasNext() -> hasNext
    1428:1428:java.util.Map$Entry next() -> a
    1420:1420:java.lang.Object next() -> next
com.google.common.collect.Maps$9 -> com.google.common.collect.go:
    com.google.common.base.Function val$function -> a
    1946:1946:void <init>(com.google.common.base.Function) -> <init>
    1949:1949:java.lang.Object transformEntry(java.lang.Object,java.lang.Object) -> transformEntry
com.google.common.collect.Maps$AbstractFilteredMap -> com.google.common.collect.gp:
    java.util.Map unfiltered -> a
    com.google.common.base.Predicate predicate -> b
    2698:2701:void <init>(java.util.Map,com.google.common.base.Predicate) -> <init>
    2707:2708:boolean apply(java.lang.Object,java.lang.Object) -> a
    2713:2714:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    2719:2723:void putAll(java.util.Map) -> putAll
    2727:2727:boolean containsKey(java.lang.Object) -> containsKey
    2732:2733:java.lang.Object get(java.lang.Object) -> get
    2738:2738:boolean isEmpty() -> isEmpty
    2743:2743:java.lang.Object remove(java.lang.Object) -> remove
    2748:2748:java.util.Collection createValues() -> a_
com.google.common.collect.Maps$Accumulator -> com.google.common.collect.gq:
    java.util.function.BinaryOperator mergeFunction -> a
    java.util.EnumMap map -> b
    177:181:void <init>(java.util.function.BinaryOperator) -> <init>
    184:188:void put(java.lang.Enum,java.lang.Object) -> a
    191:197:com.google.common.collect.Maps$Accumulator combine(com.google.common.collect.Maps$Accumulator) -> a
    202:202:com.google.common.collect.ImmutableMap toImmutableMap() -> a
com.google.common.collect.Maps$AsMapView -> com.google.common.collect.gr:
    java.util.Set set -> b
    com.google.common.base.Function function -> a
    870:870:java.util.Set backingSet() -> c
    873:876:void <init>(java.util.Set,com.google.common.base.Function) -> <init>
    880:880:java.util.Set createKeySet() -> e
    885:885:java.util.Collection createValues() -> a_
    890:890:int size() -> size
    895:895:boolean containsKey(java.lang.Object) -> containsKey
    900:900:java.lang.Object get(java.lang.Object) -> get
    905:910:java.lang.Object getOrDefault(java.lang.Object,java.lang.Object) -> getOrDefault
    916:921:java.lang.Object remove(java.lang.Object) -> remove
    927:928:void clear() -> clear
    944:944:java.util.Set createEntrySet() -> a
    949:952:void forEach(java.util.function.BiConsumer) -> forEach
    951:951:void lambda$forEach$0(java.util.function.BiConsumer,java.lang.Object) -> a
com.google.common.collect.Maps$AsMapView$1EntrySetImpl -> com.google.common.collect.gs:
    com.google.common.collect.Maps$AsMapView this$0 -> a
    933:933:void <init>(com.google.common.collect.Maps$AsMapView) -> <init>
    936:936:java.util.Map map() -> a
    941:941:java.util.Iterator iterator() -> iterator
com.google.common.collect.Maps$BiMapConverter -> com.google.common.collect.gt:
    com.google.common.collect.BiMap bimap -> a
    long serialVersionUID -> serialVersionUID
    1501:1503:void <init>(com.google.common.collect.BiMap) -> <init>
    1507:1507:java.lang.Object doForward(java.lang.Object) -> doForward
    1512:1512:java.lang.Object doBackward(java.lang.Object) -> doBackward
    1516:1518:java.lang.Object convert(com.google.common.collect.BiMap,java.lang.Object) -> a
    1523:1527:boolean equals(java.lang.Object) -> equals
    1532:1532:int hashCode() -> hashCode
    1538:1538:java.lang.String toString() -> toString
com.google.common.collect.Maps$DescendingMap -> com.google.common.collect.gu:
    java.util.Comparator comparator -> a
    java.util.Set entrySet -> b
    java.util.NavigableSet navigableKeySet -> c
    4026:4026:void <init>() -> <init>
    java.util.NavigableMap forward() -> a
    4033:4033:java.util.Map delegate() -> delegate
    4041:4049:java.util.Comparator comparator() -> comparator
    4054:4054:com.google.common.collect.Ordering reverse(java.util.Comparator) -> a
    4059:4059:java.lang.Object firstKey() -> firstKey
    4064:4064:java.lang.Object lastKey() -> lastKey
    4069:4069:java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    4074:4074:java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    4079:4079:java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    4084:4084:java.lang.Object floorKey(java.lang.Object) -> floorKey
    4089:4089:java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    4094:4094:java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    4099:4099:java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    4104:4104:java.lang.Object higherKey(java.lang.Object) -> higherKey
    4109:4109:java.util.Map$Entry firstEntry() -> firstEntry
    4114:4114:java.util.Map$Entry lastEntry() -> lastEntry
    4119:4119:java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    4124:4124:java.util.Map$Entry pollLastEntry() -> pollLastEntry
    4129:4129:java.util.NavigableMap descendingMap() -> descendingMap
    4136:4137:java.util.Set entrySet() -> entrySet
    java.util.Iterator entryIterator() -> entryIterator
    4155:4155:java.util.Set createEntrySet() -> b
    4160:4160:java.util.Set keySet() -> keySet
    4167:4168:java.util.NavigableSet navigableKeySet() -> navigableKeySet
    4173:4173:java.util.NavigableSet descendingKeySet() -> descendingKeySet
    4179:4179:java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    4184:4184:java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    4189:4189:java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    4194:4194:java.util.SortedMap headMap(java.lang.Object) -> headMap
    4199:4199:java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    4204:4204:java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    4209:4209:java.util.Collection values() -> values
    4214:4214:java.lang.String toString() -> toString
    4025:4025:java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$DescendingMap$1EntrySetImpl -> com.google.common.collect.gv:
    com.google.common.collect.Maps$DescendingMap this$0 -> a
    4144:4144:void <init>(com.google.common.collect.Maps$DescendingMap) -> <init>
    4147:4147:java.util.Map map() -> a
    4152:4152:java.util.Iterator iterator() -> iterator
com.google.common.collect.Maps$EntryFunction -> com.google.common.collect.gw:
    com.google.common.collect.Maps$EntryFunction KEY -> a
    com.google.common.collect.Maps$EntryFunction VALUE -> b
    com.google.common.collect.Maps$EntryFunction[] $VALUES -> c
    92:92:com.google.common.collect.Maps$EntryFunction[] values() -> values
    92:92:com.google.common.collect.Maps$EntryFunction valueOf(java.lang.String) -> valueOf
    92:92:void <init>(java.lang.String,int) -> <init>
    92:92:void <init>(java.lang.String,int,byte) -> <init>
    92:99:void <clinit>() -> <clinit>
com.google.common.collect.Maps$EntryFunction$1 -> com.google.common.collect.gx:
    93:93:void <init>(java.lang.String,int) -> <init>
    96:96:java.lang.Object apply(java.util.Map$Entry) -> a
    93:93:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$EntryFunction$2 -> com.google.common.collect.gy:
    99:99:void <init>(java.lang.String,int) -> <init>
    102:102:java.lang.Object apply(java.util.Map$Entry) -> a
    99:99:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$EntrySet -> com.google.common.collect.gz:
    3959:3959:void <init>() -> <init>
    java.util.Map map() -> a
    3964:3964:int size() -> size
    3969:3970:void clear() -> clear
    3974:3980:boolean contains(java.lang.Object) -> contains
    3985:3985:boolean isEmpty() -> isEmpty
    3990:3994:boolean remove(java.lang.Object) -> remove
    4000:4003:boolean removeAll(java.util.Collection) -> removeAll
    4010:4020:boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Maps$EntryTransformer -> com.google.common.collect.Maps$EntryTransformer:
    java.lang.Object transformEntry(java.lang.Object,java.lang.Object) -> transformEntry
com.google.common.collect.Maps$FilteredEntryBiMap -> com.google.common.collect.gA:
    com.google.common.collect.BiMap inverse -> d
    3196:3196:com.google.common.base.Predicate inversePredicate(com.google.common.base.Predicate) -> a
    3205:3208:void <init>(com.google.common.collect.BiMap,com.google.common.base.Predicate) -> <init>
    3212:3214:void <init>(com.google.common.collect.BiMap,com.google.common.base.Predicate,com.google.common.collect.BiMap) -> <init>
    3217:3217:com.google.common.collect.BiMap unfiltered() -> c
    3222:3223:java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    3228:3234:void replaceAll(java.util.function.BiFunction) -> replaceAll
    3238:3238:com.google.common.collect.BiMap inverse() -> inverse
    3243:3243:java.util.Set values() -> values
    3190:3190:java.util.Collection values() -> values
    3231:3232:java.lang.Object lambda$replaceAll$0(java.util.function.BiFunction,java.lang.Object,java.lang.Object) -> a
com.google.common.collect.Maps$FilteredEntryBiMap$1 -> com.google.common.collect.gB:
    com.google.common.base.Predicate val$forwardPredicate -> a
    3196:3196:void <init>(com.google.common.base.Predicate) -> <init>
    3199:3199:boolean apply(java.util.Map$Entry) -> a
    3196:3196:boolean apply(java.lang.Object) -> apply
com.google.common.collect.Maps$FilteredEntryMap -> com.google.common.collect.gC:
    java.util.Set filteredEntrySet -> c
    2854:2856:void <init>(java.util.Map,com.google.common.base.Predicate) -> <init>
    2860:2860:java.util.Set createEntrySet() -> a
    2894:2894:java.util.Set createKeySet() -> e
    2899:2908:boolean removeAllKeys(java.util.Map,com.google.common.base.Predicate,java.util.Collection) -> a
    2913:2922:boolean retainAllKeys(java.util.Map,com.google.common.base.Predicate,java.util.Collection) -> b
com.google.common.collect.Maps$FilteredEntryMap$EntrySet -> com.google.common.collect.gD:
    com.google.common.collect.Maps$FilteredEntryMap this$0 -> a
    2864:2864:void <init>(com.google.common.collect.Maps$FilteredEntryMap) -> <init>
    2867:2867:java.util.Set delegate() -> delegate
    2872:2872:java.util.Iterator iterator() -> iterator
    2863:2863:java.util.Collection delegate() -> delegate
    2863:2863:java.lang.Object delegate() -> delegate
    2864:2864:void <init>(com.google.common.collect.Maps$FilteredEntryMap,byte) -> <init>
com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1 -> com.google.common.collect.gE:
    com.google.common.collect.Maps$FilteredEntryMap$EntrySet this$1 -> a
    2872:2872:void <init>(com.google.common.collect.Maps$FilteredEntryMap$EntrySet,java.util.Iterator) -> <init>
    2875:2875:java.util.Map$Entry transform(java.util.Map$Entry) -> a
    2872:2872:java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1 -> com.google.common.collect.gF:
    java.util.Map$Entry val$entry -> a
    com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1 this$2 -> b
    2875:2875:void <init>(com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1,java.util.Map$Entry) -> <init>
    2878:2878:java.util.Map$Entry delegate() -> delegate
    2883:2884:java.lang.Object setValue(java.lang.Object) -> setValue
    2875:2875:java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$FilteredEntryMap$KeySet -> com.google.common.collect.gG:
    com.google.common.collect.Maps$FilteredEntryMap this$0 -> a
    2927:2929:void <init>(com.google.common.collect.Maps$FilteredEntryMap) -> <init>
    2933:2937:boolean remove(java.lang.Object) -> remove
    2942:2942:boolean removeAll(java.util.Collection) -> removeAll
    2947:2947:boolean retainAll(java.util.Collection) -> retainAll
    2953:2953:java.lang.Object[] toArray() -> toArray
    2958:2958:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
com.google.common.collect.Maps$FilteredEntryNavigableMap -> com.google.common.collect.gH:
    java.util.NavigableMap unfiltered -> a
    com.google.common.base.Predicate entryPredicate -> b
    java.util.Map filteredDelegate -> c
    3071:3075:void <init>(java.util.NavigableMap,com.google.common.base.Predicate) -> <init>
    3079:3079:java.util.Comparator comparator() -> comparator
    3084:3084:java.util.NavigableSet navigableKeySet() -> navigableKeySet
    3099:3099:java.util.Collection values() -> values
    3104:3104:java.util.Iterator entryIterator() -> b
    3109:3109:java.util.Iterator descendingEntryIterator() -> a
    3114:3114:int size() -> size
    3119:3119:boolean isEmpty() -> isEmpty
    3124:3124:java.lang.Object get(java.lang.Object) -> get
    3129:3129:boolean containsKey(java.lang.Object) -> containsKey
    3134:3134:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    3139:3139:java.lang.Object remove(java.lang.Object) -> remove
    3144:3145:void putAll(java.util.Map) -> putAll
    3149:3150:void clear() -> clear
    3154:3154:java.util.Set entrySet() -> entrySet
    3159:3159:java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    3164:3164:java.util.Map$Entry pollLastEntry() -> pollLastEntry
    3169:3169:java.util.NavigableMap descendingMap() -> descendingMap
    3175:3176:java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    3181:3181:java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    3186:3186:java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    3059:3059:com.google.common.base.Predicate access$500(com.google.common.collect.Maps$FilteredEntryNavigableMap) -> a
    3059:3059:java.util.NavigableMap access$600(com.google.common.collect.Maps$FilteredEntryNavigableMap) -> b
com.google.common.collect.Maps$FilteredEntryNavigableMap$1 -> com.google.common.collect.gI:
    com.google.common.collect.Maps$FilteredEntryNavigableMap this$0 -> a
    3084:3084:void <init>(com.google.common.collect.Maps$FilteredEntryNavigableMap,java.util.NavigableMap) -> <init>
    3087:3087:boolean removeAll(java.util.Collection) -> removeAll
    3092:3092:boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Maps$FilteredEntrySortedMap -> com.google.common.collect.gJ:
    2968:2969:void <init>(java.util.SortedMap,com.google.common.base.Predicate) -> <init>
    2972:2972:java.util.SortedMap sortedMap() -> c
    2977:2977:java.util.SortedSet keySet() -> d
    2982:2982:java.util.SortedSet createKeySet() -> f
    3020:3020:java.util.Comparator comparator() -> comparator
    3026:3026:java.lang.Object firstKey() -> firstKey
    3031:3039:java.lang.Object lastKey() -> lastKey
    3044:3044:java.util.SortedMap headMap(java.lang.Object) -> headMap
    3049:3049:java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    3054:3054:java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    2963:2963:java.util.Set createKeySet() -> e
    2963:2963:java.util.Set keySet() -> keySet
com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet -> com.google.common.collect.gK:
    com.google.common.collect.Maps$FilteredEntrySortedMap this$0 -> a
    2986:2986:void <init>(com.google.common.collect.Maps$FilteredEntrySortedMap) -> <init>
    2989:2989:java.util.Comparator comparator() -> comparator
    2994:2994:java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    2999:2999:java.util.SortedSet headSet(java.lang.Object) -> headSet
    3004:3004:java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    3009:3009:java.lang.Object first() -> first
    3014:3014:java.lang.Object last() -> last
com.google.common.collect.Maps$FilteredKeyMap -> com.google.common.collect.gL:
    com.google.common.base.Predicate keyPredicate -> c
    2823:2825:void <init>(java.util.Map,com.google.common.base.Predicate,com.google.common.base.Predicate) -> <init>
    2829:2829:java.util.Set createEntrySet() -> a
    2834:2834:java.util.Set createKeySet() -> e
    2842:2842:boolean containsKey(java.lang.Object) -> containsKey
com.google.common.collect.Maps$FilteredMapValues -> com.google.common.collect.gM:
    java.util.Map unfiltered -> a
    com.google.common.base.Predicate predicate -> b
    2758:2761:void <init>(java.util.Map,java.util.Map,com.google.common.base.Predicate) -> <init>
    2765:2773:boolean remove(java.lang.Object) -> remove
    2778:2787:boolean removeAll(java.util.Collection) -> removeAll
    2792:2801:boolean retainAll(java.util.Collection) -> retainAll
    2807:2807:java.lang.Object[] toArray() -> toArray
    2812:2812:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
com.google.common.collect.Maps$IteratorBasedAbstractMap -> com.google.common.collect.gN:
    3521:3521:void <init>() -> <init>
    int size() -> size
    java.util.Iterator entryIterator() -> b
    3528:3529:java.util.Spliterator entrySpliterator() -> c
    3534:3534:java.util.Set entrySet() -> entrySet
    3558:3559:void forEachEntry(java.util.function.Consumer) -> a
    3563:3564:void clear() -> clear
com.google.common.collect.Maps$IteratorBasedAbstractMap$1 -> com.google.common.collect.gO:
    com.google.common.collect.Maps$IteratorBasedAbstractMap this$0 -> a
    3534:3534:void <init>(com.google.common.collect.Maps$IteratorBasedAbstractMap) -> <init>
    3537:3537:java.util.Map map() -> a
    3542:3542:java.util.Iterator iterator() -> iterator
    3547:3547:java.util.Spliterator spliterator() -> spliterator
    3552:3553:void forEach(java.util.function.Consumer) -> forEach
com.google.common.collect.Maps$KeySet -> com.google.common.collect.gP:
    java.util.Map map -> b
    3688:3690:void <init>(java.util.Map) -> <init>
    3693:3693:java.util.Map map() -> b
    3698:3698:java.util.Iterator iterator() -> iterator
    3703:3706:void forEach(java.util.function.Consumer) -> forEach
    3710:3710:int size() -> size
    3715:3715:boolean isEmpty() -> isEmpty
    3720:3720:boolean contains(java.lang.Object) -> contains
    3725:3729:boolean remove(java.lang.Object) -> remove
    3734:3735:void clear() -> clear
    3705:3705:void lambda$forEach$0(java.util.function.Consumer,java.lang.Object,java.lang.Object) -> a
com.google.common.collect.Maps$MapDifferenceImpl -> com.google.common.collect.gQ:
    java.util.Map onlyOnLeft -> a
    java.util.Map onlyOnRight -> b
    java.util.Map onBoth -> c
    java.util.Map differences -> d
    619:624:void <init>(java.util.Map,java.util.Map,java.util.Map,java.util.Map) -> <init>
    628:628:boolean areEqual() -> areEqual
    633:633:java.util.Map entriesOnlyOnLeft() -> entriesOnlyOnLeft
    638:638:java.util.Map entriesOnlyOnRight() -> entriesOnlyOnRight
    643:643:java.util.Map entriesInCommon() -> entriesInCommon
    648:648:java.util.Map entriesDiffering() -> entriesDiffering
    653:663:boolean equals(java.lang.Object) -> equals
    668:669:int hashCode() -> hashCode
    674:688:java.lang.String toString() -> toString
com.google.common.collect.Maps$NavigableAsMapView -> com.google.common.collect.gR:
    java.util.NavigableSet set -> a
    com.google.common.base.Function function -> b
    1022:1025:void <init>(java.util.NavigableSet,com.google.common.base.Function) -> <init>
    1030:1030:java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    1035:1035:java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    1040:1040:java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    1045:1045:java.util.Comparator comparator() -> comparator
    1050:1050:java.lang.Object get(java.lang.Object) -> get
    1055:1060:java.lang.Object getOrDefault(java.lang.Object,java.lang.Object) -> getOrDefault
    1066:1067:void clear() -> clear
    1071:1071:java.util.Iterator entryIterator() -> b
    1076:1076:java.util.Spliterator entrySpliterator() -> c
    1081:1082:void forEach(java.util.function.BiConsumer) -> forEach
    1086:1086:java.util.Iterator descendingEntryIterator() -> a
    1091:1091:java.util.NavigableSet navigableKeySet() -> navigableKeySet
    1096:1096:int size() -> size
    1101:1101:java.util.NavigableMap descendingMap() -> descendingMap
    1081:1081:void lambda$forEach$1(java.util.function.BiConsumer,java.lang.Object) -> a
    1076:1076:java.util.Map$Entry lambda$entrySpliterator$0(java.lang.Object) -> a
com.google.common.collect.Maps$NavigableKeySet -> com.google.common.collect.gS:
    3790:3791:void <init>(java.util.NavigableMap) -> <init>
    3795:3795:java.util.NavigableMap map() -> c
    3800:3800:java.lang.Object lower(java.lang.Object) -> lower
    3805:3805:java.lang.Object floor(java.lang.Object) -> floor
    3810:3810:java.lang.Object ceiling(java.lang.Object) -> ceiling
    3815:3815:java.lang.Object higher(java.lang.Object) -> higher
    3820:3820:java.lang.Object pollFirst() -> pollFirst
    3825:3825:java.lang.Object pollLast() -> pollLast
    3830:3830:java.util.NavigableSet descendingSet() -> descendingSet
    3835:3835:java.util.Iterator descendingIterator() -> descendingIterator
    3841:3841:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    3846:3846:java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    3851:3851:java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    3856:3856:java.util.SortedSet headSet(java.lang.Object) -> headSet
    3861:3861:java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    3866:3866:java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    3787:3787:java.util.SortedMap map() -> a
    3787:3787:java.util.Map map() -> b
com.google.common.collect.Maps$SortedAsMapView -> com.google.common.collect.gT:
    968:969:void <init>(java.util.SortedSet,com.google.common.base.Function) -> <init>
    973:973:java.util.SortedSet backingSet() -> d
    978:978:java.util.Comparator comparator() -> comparator
    983:983:java.util.Set keySet() -> keySet
    988:988:java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    993:993:java.util.SortedMap headMap(java.lang.Object) -> headMap
    998:998:java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    1003:1003:java.lang.Object firstKey() -> firstKey
    1008:1008:java.lang.Object lastKey() -> lastKey
    965:965:java.util.Set backingSet() -> c
com.google.common.collect.Maps$SortedKeySet -> com.google.common.collect.gU:
    3748:3749:void <init>(java.util.SortedMap) -> <init>
    3753:3753:java.util.SortedMap map() -> a
    3758:3758:java.util.Comparator comparator() -> comparator
    3763:3763:java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    3768:3768:java.util.SortedSet headSet(java.lang.Object) -> headSet
    3773:3773:java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    3778:3778:java.lang.Object first() -> first
    3783:3783:java.lang.Object last() -> last
    3746:3746:java.util.Map map() -> b
com.google.common.collect.Maps$SortedMapDifferenceImpl -> com.google.common.collect.gV:
    743:744:void <init>(java.util.SortedMap,java.util.SortedMap,java.util.SortedMap,java.util.SortedMap) -> <init>
    748:748:java.util.SortedMap entriesDiffering() -> entriesDiffering
    753:753:java.util.SortedMap entriesInCommon() -> entriesInCommon
    758:758:java.util.SortedMap entriesOnlyOnLeft() -> entriesOnlyOnLeft
    763:763:java.util.SortedMap entriesOnlyOnRight() -> entriesOnlyOnRight
    736:736:java.util.Map entriesDiffering() -> entriesDiffering
    736:736:java.util.Map entriesInCommon() -> entriesInCommon
    736:736:java.util.Map entriesOnlyOnRight() -> entriesOnlyOnRight
    736:736:java.util.Map entriesOnlyOnLeft() -> entriesOnlyOnLeft
com.google.common.collect.Maps$TransformedEntriesMap -> com.google.common.collect.gW:
    java.util.Map fromMap -> a
    com.google.common.collect.Maps$EntryTransformer transformer -> b
    2012:2015:void <init>(java.util.Map,com.google.common.collect.Maps$EntryTransformer) -> <init>
    2019:2019:int size() -> size
    2024:2024:boolean containsKey(java.lang.Object) -> containsKey
    2029:2029:java.lang.Object get(java.lang.Object) -> get
    2036:2038:java.lang.Object getOrDefault(java.lang.Object,java.lang.Object) -> getOrDefault
    2046:2047:java.lang.Object remove(java.lang.Object) -> remove
    2053:2054:void clear() -> clear
    2058:2058:java.util.Set keySet() -> keySet
    2063:2064:java.util.Iterator entryIterator() -> b
    2069:2070:java.util.Spliterator entrySpliterator() -> c
    2075:2078:void forEach(java.util.function.BiConsumer) -> forEach
    2082:2082:java.util.Collection values() -> values
    2077:2077:void lambda$forEach$0(java.util.function.BiConsumer,java.lang.Object,java.lang.Object) -> a
com.google.common.collect.Maps$TransformedEntriesNavigableMap -> com.google.common.collect.gX:
    2135:2136:void <init>(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer) -> <init>
    2140:2140:java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    2145:2145:java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    2150:2150:java.util.NavigableSet descendingKeySet() -> descendingKeySet
    2155:2155:java.util.NavigableMap descendingMap() -> descendingMap
    2160:2160:java.util.Map$Entry firstEntry() -> firstEntry
    2165:2165:java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    2170:2170:java.lang.Object floorKey(java.lang.Object) -> floorKey
    2175:2175:java.util.NavigableMap headMap(java.lang.Object) -> a
    2180:2180:java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    2185:2185:java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    2190:2190:java.lang.Object higherKey(java.lang.Object) -> higherKey
    2195:2195:java.util.Map$Entry lastEntry() -> lastEntry
    2200:2200:java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    2205:2205:java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    2210:2210:java.util.NavigableSet navigableKeySet() -> navigableKeySet
    2215:2215:java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    2220:2220:java.util.Map$Entry pollLastEntry() -> pollLastEntry
    2226:2227:java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    2232:2232:java.util.NavigableMap subMap(java.lang.Object,java.lang.Object) -> a
    2237:2237:java.util.NavigableMap tailMap(java.lang.Object) -> b
    2242:2242:java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    2246:2246:java.util.Map$Entry transformEntry(java.util.Map$Entry) -> a
    2251:2251:java.util.NavigableMap fromMap() -> d
    2129:2129:java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    2129:2129:java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    2129:2129:java.util.SortedMap headMap(java.lang.Object) -> headMap
    2129:2129:java.util.SortedMap fromMap() -> a
com.google.common.collect.Maps$TransformedEntriesSortedMap -> com.google.common.collect.gY:
    2090:2090:java.util.SortedMap fromMap() -> a
    2095:2096:void <init>(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer) -> <init>
    2100:2100:java.util.Comparator comparator() -> comparator
    2105:2105:java.lang.Object firstKey() -> firstKey
    2110:2110:java.util.SortedMap headMap(java.lang.Object) -> headMap
    2115:2115:java.lang.Object lastKey() -> lastKey
    2120:2120:java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    2125:2125:java.util.SortedMap tailMap(java.lang.Object) -> tailMap
com.google.common.collect.Maps$UnmodifiableBiMap -> com.google.common.collect.gZ:
    java.util.Map unmodifiableMap -> a
    com.google.common.collect.BiMap delegate -> b
    com.google.common.collect.BiMap inverse -> c
    java.util.Set values -> d
    long serialVersionUID -> serialVersionUID
    1600:1604:void <init>(com.google.common.collect.BiMap,com.google.common.collect.BiMap) -> <init>
    1608:1608:java.util.Map delegate() -> delegate
    1613:1613:java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    1618:1620:com.google.common.collect.BiMap inverse() -> inverse
    1626:1627:java.util.Set values() -> values
    1593:1593:java.util.Collection values() -> values
    1593:1593:java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$UnmodifiableEntries -> com.google.common.collect.ha:
    java.util.Collection entries -> a
    1437:1439:void <init>(java.util.Collection) -> <init>
    1443:1443:java.util.Collection delegate() -> delegate
    1448:1448:java.util.Iterator iterator() -> iterator
    1455:1455:java.lang.Object[] toArray() -> toArray
    1460:1460:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    1434:1434:java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$UnmodifiableEntrySet -> com.google.common.collect.hb:
    1468:1469:void <init>(java.util.Set) -> <init>
    1475:1475:boolean equals(java.lang.Object) -> equals
    1480:1480:int hashCode() -> hashCode
com.google.common.collect.Maps$UnmodifiableNavigableMap -> com.google.common.collect.hc:
    java.util.NavigableMap delegate -> a
    com.google.common.collect.Maps$UnmodifiableNavigableMap descendingMap -> b
    3288:3290:void <init>(java.util.NavigableMap) -> <init>
    3293:3296:void <init>(java.util.NavigableMap,com.google.common.collect.Maps$UnmodifiableNavigableMap) -> <init>
    3300:3300:java.util.SortedMap delegate() -> delegate
    3305:3305:java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    3310:3310:java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    3315:3315:java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    3320:3320:java.lang.Object floorKey(java.lang.Object) -> floorKey
    3325:3325:java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    3330:3330:java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    3335:3335:java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    3340:3340:java.lang.Object higherKey(java.lang.Object) -> higherKey
    3345:3345:java.util.Map$Entry firstEntry() -> firstEntry
    3350:3350:java.util.Map$Entry lastEntry() -> lastEntry
    3355:3355:java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    3360:3360:java.util.Map$Entry pollLastEntry() -> pollLastEntry
    3367:3369:java.util.NavigableMap descendingMap() -> descendingMap
    3375:3375:java.util.Set keySet() -> keySet
    3380:3380:java.util.NavigableSet navigableKeySet() -> navigableKeySet
    3385:3385:java.util.NavigableSet descendingKeySet() -> descendingKeySet
    3390:3390:java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    3396:3397:java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    3402:3402:java.util.SortedMap headMap(java.lang.Object) -> headMap
    3407:3407:java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    3412:3412:java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    3417:3417:java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    3283:3283:java.util.Map delegate() -> delegate
    3283:3283:java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$ValueDifferenceImpl -> com.google.common.collect.hd:
    java.lang.Object left -> a
    java.lang.Object right -> b
    697:697:com.google.common.collect.MapDifference$ValueDifference create(java.lang.Object,java.lang.Object) -> a
    700:703:void <init>(java.lang.Object,java.lang.Object) -> <init>
    707:707:java.lang.Object leftValue() -> leftValue
    712:712:java.lang.Object rightValue() -> rightValue
    717:722:boolean equals(java.lang.Object) -> equals
    727:727:int hashCode() -> hashCode
    732:732:java.lang.String toString() -> toString
com.google.common.collect.Maps$Values -> com.google.common.collect.he:
    java.util.Map map -> a
    3873:3875:void <init>(java.util.Map) -> <init>
    3878:3878:java.util.Map map() -> a
    3883:3883:java.util.Iterator iterator() -> iterator
    3888:3891:void forEach(java.util.function.Consumer) -> forEach
    3896:3904:boolean remove(java.lang.Object) -> remove
    3911:3919:boolean removeAll(java.util.Collection) -> removeAll
    3926:3934:boolean retainAll(java.util.Collection) -> retainAll
    3940:3940:int size() -> size
    3945:3945:boolean isEmpty() -> isEmpty
    3950:3950:boolean contains(java.lang.Object) -> contains
    3955:3956:void clear() -> clear
    3890:3890:void lambda$forEach$0(java.util.function.Consumer,java.lang.Object,java.lang.Object) -> a
com.google.common.collect.Maps$ViewCachingAbstractMap -> com.google.common.collect.hf:
    java.util.Set entrySet -> a
    java.util.Set keySet -> b
    java.util.Collection values -> c
    3481:3481:void <init>() -> <init>
    java.util.Set createEntrySet() -> a
    3492:3493:java.util.Set entrySet() -> entrySet
    3500:3501:java.util.Set keySet() -> keySet
    3505:3505:java.util.Set createKeySet() -> e
    3512:3513:java.util.Collection values() -> values
    3517:3517:java.util.Collection createValues() -> a_
com.google.common.collect.MinMaxPriorityQueue -> com.google.common.collect.MinMaxPriorityQueue:
    com.google.common.collect.MinMaxPriorityQueue$Heap minHeap -> a
    com.google.common.collect.MinMaxPriorityQueue$Heap maxHeap -> b
    int maximumSize -> c
    java.lang.Object[] queue -> d
    int size -> e
    int modCount -> f
    109:109:com.google.common.collect.MinMaxPriorityQueue create() -> create
    118:118:com.google.common.collect.MinMaxPriorityQueue create(java.lang.Iterable) -> create
    126:126:com.google.common.collect.MinMaxPriorityQueue$Builder orderedBy(java.util.Comparator) -> orderedBy
    134:134:com.google.common.collect.MinMaxPriorityQueue$Builder expectedSize(int) -> expectedSize
    144:144:com.google.common.collect.MinMaxPriorityQueue$Builder maximumSize(int) -> maximumSize
    232:242:void <init>(com.google.common.collect.MinMaxPriorityQueue$Builder,int) -> <init>
    246:246:int size() -> size
    259:260:boolean add(java.lang.Object) -> add
    266:271:boolean addAll(java.util.Collection) -> addAll
    282:291:boolean offer(java.lang.Object) -> offer
    297:297:java.lang.Object poll() -> poll
    302:302:java.lang.Object elementData(int) -> a
    307:307:java.lang.Object peek() -> peek
    312:320:int getMaxElementIndex() -> a
    330:330:java.lang.Object pollFirst() -> pollFirst
    340:340:java.lang.Object removeFirst() -> removeFirst
    348:348:java.lang.Object peekFirst() -> peekFirst
    357:357:java.lang.Object pollLast() -> pollLast
    367:370:java.lang.Object removeLast() -> removeLast
    378:378:java.lang.Object peekLast() -> peekLast
    397:428:com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int) -> b
    432:449:com.google.common.collect.MinMaxPriorityQueue$MoveDesc fillHole(int,java.lang.Object) -> a
    466:468:java.lang.Object removeAndGet(int) -> c
    472:472:com.google.common.collect.MinMaxPriorityQueue$Heap heapForIndex(int) -> d
    480:482:boolean isEvenLevel(int) -> e
    880:880:java.util.Iterator iterator() -> iterator
    885:889:void clear() -> clear
    893:895:java.lang.Object[] toArray() -> toArray
    904:904:java.util.Comparator comparator() -> comparator
    920:932:int initialQueueSize(int,int,java.lang.Iterable) -> a
    936:942:void growIfNeeded() -> b
    946:949:int calculateNewCapacity() -> c
    954:954:int capAtMaximumSize(int,int) -> a
    102:102:void <init>(com.google.common.collect.MinMaxPriorityQueue$Builder,int,byte) -> <init>
    102:102:java.lang.Object[] access$500(com.google.common.collect.MinMaxPriorityQueue) -> a
    102:102:int access$600(com.google.common.collect.MinMaxPriorityQueue) -> b
    102:102:int access$700(com.google.common.collect.MinMaxPriorityQueue) -> c
com.google.common.collect.MinMaxPriorityQueue$Builder -> com.google.common.collect.MinMaxPriorityQueue$Builder:
    java.util.Comparator comparator -> a
    int expectedSize -> b
    int maximumSize -> c
    166:171:void <init>(java.util.Comparator) -> <init>
    179:181:com.google.common.collect.MinMaxPriorityQueue$Builder expectedSize(int) -> expectedSize
    192:194:com.google.common.collect.MinMaxPriorityQueue$Builder maximumSize(int) -> maximumSize
    202:202:com.google.common.collect.MinMaxPriorityQueue create() -> create
    210:216:com.google.common.collect.MinMaxPriorityQueue create(java.lang.Iterable) -> create
    221:221:com.google.common.collect.Ordering ordering() -> a
    158:158:void <init>(java.util.Comparator,byte) -> <init>
    158:158:com.google.common.collect.Ordering access$200(com.google.common.collect.MinMaxPriorityQueue$Builder) -> a
    158:158:int access$300(com.google.common.collect.MinMaxPriorityQueue$Builder) -> b
com.google.common.collect.MinMaxPriorityQueue$Heap -> com.google.common.collect.hg:
    com.google.common.collect.Ordering ordering -> a
    com.google.common.collect.MinMaxPriorityQueue$Heap otherHeap -> b
    com.google.common.collect.MinMaxPriorityQueue this$0 -> c
    510:512:void <init>(com.google.common.collect.MinMaxPriorityQueue,com.google.common.collect.Ordering) -> <init>
    515:515:int compareElements(int,int) -> a
    523:544:com.google.common.collect.MinMaxPriorityQueue$MoveDesc tryCrossOverAndBubbleUp(int,int,java.lang.Object) -> a
    550:560:void bubbleUp(int,java.lang.Object) -> a
    568:578:int bubbleUpAlternatingLevels(int,java.lang.Object) -> b
    586:597:int findMin(int,int) -> b
    602:602:int findMinChild(int) -> b
    607:611:int findMinGrandChild(int) -> c
    619:646:int crossOverUp(int,java.lang.Object) -> c
    659:672:int swapWithConceptuallyLastElement(java.lang.Object) -> a
    682:690:int crossOver(int,java.lang.Object) -> d
    702:706:int fillHoleAt(int) -> a
    728:728:int getLeftChildIndex(int) -> d
    732:732:int getRightChildIndex(int) -> e
    736:736:int getParentIndex(int) -> f
    740:740:int getGrandparentIndex(int) -> g
com.google.common.collect.MinMaxPriorityQueue$MoveDesc -> com.google.common.collect.hh:
    java.lang.Object toTrickle -> a
    java.lang.Object replaced -> b
    458:461:void <init>(java.lang.Object,java.lang.Object) -> <init>
com.google.common.collect.MinMaxPriorityQueue$QueueIterator -> com.google.common.collect.hi:
    int cursor -> a
    int nextCursor -> b
    int expectedModCount -> c
    java.util.Queue forgetMeNot -> d
    java.util.List skipMe -> e
    java.lang.Object lastFromForgetMeNot -> f
    boolean canRemove -> g
    com.google.common.collect.MinMaxPriorityQueue this$0 -> h
    749:752:void <init>(com.google.common.collect.MinMaxPriorityQueue) -> <init>
    762:764:boolean hasNext() -> hasNext
    769:783:java.lang.Object next() -> next
    788:812:void remove() -> remove
    816:823:boolean foundAndRemovedExactReference(java.lang.Iterable,java.lang.Object) -> a
    828:834:boolean removeExact(java.lang.Object) -> a
    838:841:void checkModCount() -> a
    848:856:void nextNotInSkipMe(int) -> a
    749:749:void <init>(com.google.common.collect.MinMaxPriorityQueue,byte) -> <init>
com.google.common.collect.MoreCollectors -> com.google.common.collect.MoreCollectors:
    java.util.stream.Collector TO_OPTIONAL -> a
    java.lang.Object NULL_PLACEHOLDER -> b
    java.util.stream.Collector ONLY_ELEMENT -> c
    59:59:java.util.stream.Collector toOptional() -> toOptional
    82:82:java.util.stream.Collector onlyElement() -> onlyElement
    167:167:void <init>() -> <init>
    70:71:java.lang.Object lambda$static$1(com.google.common.collect.MoreCollectors$ToOptionalState) -> a
    67:67:void lambda$static$0(com.google.common.collect.MoreCollectors$ToOptionalState,java.lang.Object) -> a
    43:65:void <clinit>() -> <clinit>
com.google.common.collect.MoreCollectors$ToOptionalState -> com.google.common.collect.hj:
    java.lang.Object element -> a
    java.util.List extras -> b
    95:98:void <init>() -> <init>
    101:110:java.lang.IllegalArgumentException multiples(boolean) -> a
    114:125:void add(java.lang.Object) -> a
    128:144:com.google.common.collect.MoreCollectors$ToOptionalState combine(com.google.common.collect.MoreCollectors$ToOptionalState) -> a
    149:152:java.util.Optional getOptional() -> a
    157:162:java.lang.Object getElement() -> b
com.google.common.collect.Multimap -> com.google.common.collect.Multimap:
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    void clear() -> clear
    java.util.Collection get(java.lang.Object) -> get
    java.util.Set keySet() -> keySet
    com.google.common.collect.Multiset keys() -> keys
    java.util.Collection values() -> values
    java.util.Collection entries() -> entries
    341:343:void forEach(java.util.function.BiConsumer) -> forEach
    java.util.Map asMap() -> asMap
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    342:342:void lambda$forEach$0(java.util.function.BiConsumer,java.util.Map$Entry) -> a
com.google.common.collect.MultimapBuilder -> com.google.common.collect.MultimapBuilder:
    70:70:void <init>() -> <init>
    76:76:com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys hashKeys() -> hashKeys
    86:87:com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys hashKeys(int) -> hashKeys
    104:104:com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys linkedHashKeys() -> linkedHashKeys
    117:118:com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys linkedHashKeys(int) -> linkedHashKeys
    138:138:com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys treeKeys() -> treeKeys
    155:156:com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys treeKeys(java.util.Comparator) -> treeKeys
    171:172:com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys enumKeys(java.lang.Class) -> enumKeys
    com.google.common.collect.Multimap build() -> build
    409:411:com.google.common.collect.Multimap build(com.google.common.collect.Multimap) -> build
    64:64:void <init>(byte) -> <init>
com.google.common.collect.MultimapBuilder$1 -> com.google.common.collect.hk:
    int val$expectedKeys -> a
    87:87:void <init>(int) -> <init>
    90:90:java.util.Map createMap() -> a
com.google.common.collect.MultimapBuilder$2 -> com.google.common.collect.hl:
    int val$expectedKeys -> a
    118:118:void <init>(int) -> <init>
    121:121:java.util.Map createMap() -> a
com.google.common.collect.MultimapBuilder$3 -> com.google.common.collect.hm:
    java.util.Comparator val$comparator -> a
    156:156:void <init>(java.util.Comparator) -> <init>
    159:159:java.util.Map createMap() -> a
com.google.common.collect.MultimapBuilder$4 -> com.google.common.collect.hn:
    java.lang.Class val$keyClass -> a
    172:172:void <init>(java.lang.Class) -> <init>
    178:178:java.util.Map createMap() -> a
com.google.common.collect.MultimapBuilder$ArrayListSupplier -> com.google.common.collect.ho:
    int expectedValuesPerKey -> a
    186:188:void <init>(int) -> <init>
    192:192:java.util.List get() -> a
    183:183:java.lang.Object get() -> get
com.google.common.collect.MultimapBuilder$EnumSetSupplier -> com.google.common.collect.hp:
    java.lang.Class clazz -> a
    255:257:void <init>(java.lang.Class) -> <init>
    261:261:java.util.Set get() -> a
    251:251:java.lang.Object get() -> get
com.google.common.collect.MultimapBuilder$HashSetSupplier -> com.google.common.collect.hq:
    int expectedValuesPerKey -> a
    215:217:void <init>(int) -> <init>
    221:221:java.util.Set get() -> a
    212:212:java.lang.Object get() -> get
com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier -> com.google.common.collect.hr:
    int expectedValuesPerKey -> a
    228:230:void <init>(int) -> <init>
    234:234:java.util.Set get() -> a
    225:225:java.lang.Object get() -> get
com.google.common.collect.MultimapBuilder$LinkedListSupplier -> com.google.common.collect.hs:
    com.google.common.collect.MultimapBuilder$LinkedListSupplier INSTANCE -> a
    com.google.common.collect.MultimapBuilder$LinkedListSupplier[] $VALUES -> b
    196:196:com.google.common.collect.MultimapBuilder$LinkedListSupplier[] values() -> values
    196:196:com.google.common.collect.MultimapBuilder$LinkedListSupplier valueOf(java.lang.String) -> valueOf
    196:196:void <init>(java.lang.String,int) -> <init>
    202:203:com.google.common.base.Supplier instance() -> a
    208:208:java.util.List get() -> b
    196:196:java.lang.Object get() -> get
    196:197:void <clinit>() -> <clinit>
com.google.common.collect.MultimapBuilder$ListMultimapBuilder -> com.google.common.collect.MultimapBuilder$ListMultimapBuilder:
    420:420:void <init>() -> <init>
    com.google.common.collect.ListMultimap build() -> build
    428:428:com.google.common.collect.ListMultimap build(com.google.common.collect.Multimap) -> build
    419:419:com.google.common.collect.Multimap build(com.google.common.collect.Multimap) -> build
    419:419:com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys -> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:
    276:276:void <init>() -> <init>
    java.util.Map createMap() -> a
    282:282:com.google.common.collect.MultimapBuilder$ListMultimapBuilder arrayListValues() -> arrayListValues
    292:293:com.google.common.collect.MultimapBuilder$ListMultimapBuilder arrayListValues(int) -> arrayListValues
    305:305:com.google.common.collect.MultimapBuilder$ListMultimapBuilder linkedListValues() -> linkedListValues
    316:316:com.google.common.collect.MultimapBuilder$SetMultimapBuilder hashSetValues() -> hashSetValues
    326:327:com.google.common.collect.MultimapBuilder$SetMultimapBuilder hashSetValues(int) -> hashSetValues
    339:339:com.google.common.collect.MultimapBuilder$SetMultimapBuilder linkedHashSetValues() -> linkedHashSetValues
    349:350:com.google.common.collect.MultimapBuilder$SetMultimapBuilder linkedHashSetValues(int) -> linkedHashSetValues
    363:363:com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder treeSetValues() -> treeSetValues
    373:374:com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder treeSetValues(java.util.Comparator) -> treeSetValues
    386:387:com.google.common.collect.MultimapBuilder$SetMultimapBuilder enumSetValues(java.lang.Class) -> enumSetValues
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1 -> com.google.common.collect.ht:
    int val$expectedValuesPerKey -> a
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> b
    293:293:void <init>(com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys,int) -> <init>
    296:297:com.google.common.collect.ListMultimap build() -> build
    293:293:com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2 -> com.google.common.collect.hu:
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> a
    305:305:void <init>(com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys) -> <init>
    308:309:com.google.common.collect.ListMultimap build() -> build
    305:305:com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3 -> com.google.common.collect.hv:
    int val$expectedValuesPerKey -> a
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> b
    327:327:void <init>(com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys,int) -> <init>
    330:331:com.google.common.collect.SetMultimap build() -> build
    327:327:com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4 -> com.google.common.collect.hw:
    int val$expectedValuesPerKey -> a
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> b
    350:350:void <init>(com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys,int) -> <init>
    353:354:com.google.common.collect.SetMultimap build() -> build
    350:350:com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5 -> com.google.common.collect.hx:
    java.util.Comparator val$comparator -> a
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> b
    374:374:void <init>(com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys,java.util.Comparator) -> <init>
    377:378:com.google.common.collect.SortedSetMultimap build() -> build
    374:374:com.google.common.collect.SetMultimap build() -> build
    374:374:com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6 -> com.google.common.collect.hy:
    java.lang.Class val$valueClass -> a
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> b
    387:387:void <init>(com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys,java.lang.Class) -> <init>
    393:394:com.google.common.collect.SetMultimap build() -> build
    387:387:com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$SetMultimapBuilder -> com.google.common.collect.MultimapBuilder$SetMultimapBuilder:
    438:438:void <init>() -> <init>
    com.google.common.collect.SetMultimap build() -> build
    446:446:com.google.common.collect.SetMultimap build(com.google.common.collect.Multimap) -> build
    437:437:com.google.common.collect.Multimap build(com.google.common.collect.Multimap) -> build
    437:437:com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder -> com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder:
    456:456:void <init>() -> <init>
    com.google.common.collect.SortedSetMultimap build() -> build
    464:464:com.google.common.collect.SortedSetMultimap build(com.google.common.collect.Multimap) -> build
    455:455:com.google.common.collect.SetMultimap build(com.google.common.collect.Multimap) -> build
    455:455:com.google.common.collect.SetMultimap build() -> build
    455:455:com.google.common.collect.Multimap build(com.google.common.collect.Multimap) -> build
    455:455:com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$TreeSetSupplier -> com.google.common.collect.hz:
    java.util.Comparator comparator -> a
    241:243:void <init>(java.util.Comparator) -> <init>
    247:247:java.util.SortedSet get() -> a
    238:238:java.lang.Object get() -> get
com.google.common.collect.Multimaps -> com.google.common.collect.Multimaps:
    73:73:void <init>() -> <init>
    112:115:java.util.stream.Collector toMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier) -> toMultimap
    162:165:java.util.stream.Collector flatteningToMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier) -> flatteningToMultimap
    216:216:com.google.common.collect.Multimap newMultimap(java.util.Map,com.google.common.base.Supplier) -> newMultimap
    328:328:com.google.common.collect.ListMultimap newListMultimap(java.util.Map,com.google.common.base.Supplier) -> newListMultimap
    406:406:com.google.common.collect.SetMultimap newSetMultimap(java.util.Map,com.google.common.base.Supplier) -> newSetMultimap
    506:506:com.google.common.collect.SortedSetMultimap newSortedSetMultimap(java.util.Map,com.google.common.base.Supplier) -> newSortedSetMultimap
    575:579:com.google.common.collect.Multimap invertFrom(com.google.common.collect.Multimap,com.google.common.collect.Multimap) -> invertFrom
    615:615:com.google.common.collect.Multimap synchronizedMultimap(com.google.common.collect.Multimap) -> synchronizedMultimap
    630:633:com.google.common.collect.Multimap unmodifiableMultimap(com.google.common.collect.Multimap) -> unmodifiableMultimap
    644:644:com.google.common.collect.Multimap unmodifiableMultimap(com.google.common.collect.ImmutableMultimap) -> unmodifiableMultimap
    875:875:com.google.common.collect.SetMultimap synchronizedSetMultimap(com.google.common.collect.SetMultimap) -> synchronizedSetMultimap
    890:893:com.google.common.collect.SetMultimap unmodifiableSetMultimap(com.google.common.collect.SetMultimap) -> unmodifiableSetMultimap
    905:905:com.google.common.collect.SetMultimap unmodifiableSetMultimap(com.google.common.collect.ImmutableSetMultimap) -> unmodifiableSetMultimap
    921:921:com.google.common.collect.SortedSetMultimap synchronizedSortedSetMultimap(com.google.common.collect.SortedSetMultimap) -> synchronizedSortedSetMultimap
    937:940:com.google.common.collect.SortedSetMultimap unmodifiableSortedSetMultimap(com.google.common.collect.SortedSetMultimap) -> unmodifiableSortedSetMultimap
    952:952:com.google.common.collect.ListMultimap synchronizedListMultimap(com.google.common.collect.ListMultimap) -> synchronizedListMultimap
    967:970:com.google.common.collect.ListMultimap unmodifiableListMultimap(com.google.common.collect.ListMultimap) -> unmodifiableListMultimap
    982:982:com.google.common.collect.ListMultimap unmodifiableListMultimap(com.google.common.collect.ImmutableListMultimap) -> unmodifiableListMultimap
    994:1001:java.util.Collection unmodifiableValueCollection(java.util.Collection) -> c
    1014:1017:java.util.Collection unmodifiableEntries(java.util.Collection) -> d
    1030:1030:java.util.Map asMap(com.google.common.collect.ListMultimap) -> asMap
    1043:1043:java.util.Map asMap(com.google.common.collect.SetMultimap) -> asMap
    1056:1056:java.util.Map asMap(com.google.common.collect.SortedSetMultimap) -> asMap
    1067:1067:java.util.Map asMap(com.google.common.collect.Multimap) -> asMap
    1086:1086:com.google.common.collect.SetMultimap forMap(java.util.Map) -> forMap
    1282:1284:com.google.common.collect.Multimap transformValues(com.google.common.collect.Multimap,com.google.common.base.Function) -> transformValues
    1329:1331:com.google.common.collect.ListMultimap transformValues(com.google.common.collect.ListMultimap,com.google.common.base.Function) -> transformValues
    1387:1387:com.google.common.collect.Multimap transformEntries(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    1440:1440:com.google.common.collect.ListMultimap transformEntries(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    1627:1627:com.google.common.collect.ImmutableListMultimap index(java.lang.Iterable,com.google.common.base.Function) -> index
    1668:1675:com.google.common.collect.ImmutableListMultimap index(java.util.Iterator,com.google.common.base.Function) -> index
    1931:1943:com.google.common.collect.Multimap filterKeys(com.google.common.collect.Multimap,com.google.common.base.Predicate) -> filterKeys
    1976:1984:com.google.common.collect.SetMultimap filterKeys(com.google.common.collect.SetMultimap,com.google.common.base.Predicate) -> filterKeys
    2017:2022:com.google.common.collect.ListMultimap filterKeys(com.google.common.collect.ListMultimap,com.google.common.base.Predicate) -> filterKeys
    2055:2055:com.google.common.collect.Multimap filterValues(com.google.common.collect.Multimap,com.google.common.base.Predicate) -> filterValues
    2087:2087:com.google.common.collect.SetMultimap filterValues(com.google.common.collect.SetMultimap,com.google.common.base.Predicate) -> filterValues
    2117:2123:com.google.common.collect.Multimap filterEntries(com.google.common.collect.Multimap,com.google.common.base.Predicate) -> filterEntries
    2153:2156:com.google.common.collect.SetMultimap filterEntries(com.google.common.collect.SetMultimap,com.google.common.base.Predicate) -> filterEntries
    2167:2169:com.google.common.collect.Multimap filterFiltered(com.google.common.collect.FilteredMultimap,com.google.common.base.Predicate) -> a
    2180:2182:com.google.common.collect.SetMultimap filterFiltered(com.google.common.collect.FilteredSetMultimap,com.google.common.base.Predicate) -> a
    2186:2193:boolean equalsImpl(com.google.common.collect.Multimap,java.lang.Object) -> a
    173:174:com.google.common.collect.Multimap lambda$flatteningToMultimap$3(com.google.common.collect.Multimap,com.google.common.collect.Multimap) -> a
    168:171:void lambda$flatteningToMultimap$2(java.util.function.Function,java.util.function.Function,com.google.common.collect.Multimap,java.lang.Object) -> a
    119:120:com.google.common.collect.Multimap lambda$toMultimap$1(com.google.common.collect.Multimap,com.google.common.collect.Multimap) -> b
    117:117:void lambda$toMultimap$0(java.util.function.Function,java.util.function.Function,com.google.common.collect.Multimap,java.lang.Object) -> b
    72:72:java.util.Collection access$000(java.util.Collection) -> a
    72:72:java.util.Collection access$100(java.util.Collection) -> b
com.google.common.collect.Multimaps$AsMap -> com.google.common.collect.hA:
    com.google.common.collect.Multimap multimap -> a
    1822:1824:void <init>(com.google.common.collect.Multimap) -> <init>
    1828:1828:int size() -> size
    1833:1833:java.util.Set createEntrySet() -> a
    1837:1838:void removeValuesForKey(java.lang.Object) -> a
    1873:1873:java.util.Collection get(java.lang.Object) -> b
    1878:1878:java.util.Collection remove(java.lang.Object) -> c
    1883:1883:java.util.Set keySet() -> keySet
    1888:1888:boolean isEmpty() -> isEmpty
    1893:1893:boolean containsKey(java.lang.Object) -> containsKey
    1898:1899:void clear() -> clear
    1819:1819:java.lang.Object remove(java.lang.Object) -> remove
    1819:1819:java.lang.Object get(java.lang.Object) -> get
    1819:1819:com.google.common.collect.Multimap access$200(com.google.common.collect.Multimaps$AsMap) -> a
com.google.common.collect.Multimaps$AsMap$EntrySet -> com.google.common.collect.hB:
    com.google.common.collect.Multimaps$AsMap this$0 -> a
    1841:1841:void <init>(com.google.common.collect.Multimaps$AsMap) -> <init>
    1844:1844:java.util.Map map() -> a
    1849:1850:java.util.Iterator iterator() -> iterator
    1861:1866:boolean remove(java.lang.Object) -> remove
com.google.common.collect.Multimaps$AsMap$EntrySet$1 -> com.google.common.collect.hC:
    com.google.common.collect.Multimaps$AsMap$EntrySet this$1 -> a
    1851:1851:void <init>(com.google.common.collect.Multimaps$AsMap$EntrySet) -> <init>
    1854:1854:java.util.Collection apply(java.lang.Object) -> a
    1851:1851:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Multimaps$CustomListMultimap -> com.google.common.collect.hD:
    com.google.common.base.Supplier factory -> a
    long serialVersionUID -> serialVersionUID
    335:337:void <init>(java.util.Map,com.google.common.base.Supplier) -> <init>
    341:341:java.util.Set createKeySet() -> e
    346:346:java.util.Map createAsMap() -> n
    351:351:java.util.List createCollection() -> a
    357:360:void writeObject(java.io.ObjectOutputStream) -> writeObject
    365:369:void readObject(java.io.ObjectInputStream) -> readObject
    331:331:java.util.Collection createCollection() -> b
com.google.common.collect.Multimaps$CustomMultimap -> com.google.common.collect.hE:
    com.google.common.base.Supplier factory -> a
    long serialVersionUID -> serialVersionUID
    223:225:void <init>(java.util.Map,com.google.common.base.Supplier) -> <init>
    229:229:java.util.Set createKeySet() -> e
    234:234:java.util.Map createAsMap() -> n
    239:239:java.util.Collection createCollection() -> b
    244:253:java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> a
    259:268:java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> a
    278:281:void writeObject(java.io.ObjectOutputStream) -> writeObject
    286:290:void readObject(java.io.ObjectInputStream) -> readObject
com.google.common.collect.Multimaps$CustomSetMultimap -> com.google.common.collect.hF:
    com.google.common.base.Supplier factory -> a
    long serialVersionUID -> serialVersionUID
    413:415:void <init>(java.util.Map,com.google.common.base.Supplier) -> <init>
    419:419:java.util.Set createKeySet() -> e
    424:424:java.util.Map createAsMap() -> n
    429:429:java.util.Set createCollection() -> a
    434:439:java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> a
    445:450:java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> a
    457:460:void writeObject(java.io.ObjectOutputStream) -> writeObject
    465:469:void readObject(java.io.ObjectInputStream) -> readObject
    409:409:java.util.Collection createCollection() -> b
com.google.common.collect.Multimaps$CustomSortedSetMultimap -> com.google.common.collect.hG:
    com.google.common.base.Supplier factory -> a
    java.util.Comparator valueComparator -> b
    long serialVersionUID -> serialVersionUID
    514:517:void <init>(java.util.Map,com.google.common.base.Supplier) -> <init>
    521:521:java.util.Set createKeySet() -> e
    526:526:java.util.Map createAsMap() -> n
    531:531:java.util.SortedSet createCollection() -> q
    536:536:java.util.Comparator valueComparator() -> valueComparator
    542:545:void writeObject(java.io.ObjectOutputStream) -> writeObject
    550:555:void readObject(java.io.ObjectInputStream) -> readObject
    509:509:java.util.Set createCollection() -> a
    509:509:java.util.Collection createCollection() -> b
com.google.common.collect.Multimaps$Entries -> com.google.common.collect.hH:
    1786:1786:void <init>() -> <init>
    com.google.common.collect.Multimap multimap() -> a
    1791:1791:int size() -> size
    1796:1800:boolean contains(java.lang.Object) -> contains
    1805:1809:boolean remove(java.lang.Object) -> remove
    1814:1815:void clear() -> clear
com.google.common.collect.Multimaps$Keys -> com.google.common.collect.hI:
    com.google.common.collect.Multimap multimap -> a
    1681:1683:void <init>(com.google.common.collect.Multimap) -> <init>
    1687:1688:java.util.Iterator entryIterator() -> b
    1708:1708:java.util.Spliterator spliterator() -> spliterator
    1713:1715:void forEach(java.util.function.Consumer) -> forEach
    1719:1719:int distinctElements() -> c
    1724:1724:int size() -> size
    1729:1729:boolean contains(java.lang.Object) -> contains
    1734:1734:java.util.Iterator iterator() -> iterator
    1739:1740:int count(java.lang.Object) -> count
    1745:1766:int remove(java.lang.Object,int) -> remove
    1771:1772:void clear() -> clear
    1776:1776:java.util.Set elementSet() -> elementSet
    1781:1781:java.util.Iterator elementIterator() -> a
    1714:1714:void lambda$forEach$0(java.util.function.Consumer,java.util.Map$Entry) -> a
com.google.common.collect.Multimaps$Keys$1 -> com.google.common.collect.hJ:
    1688:1688:void <init>(com.google.common.collect.Multimaps$Keys,java.util.Iterator) -> <init>
    1691:1691:com.google.common.collect.Multiset$Entry transform(java.util.Map$Entry) -> a
    1688:1688:java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Multimaps$Keys$1$1 -> com.google.common.collect.hK:
    java.util.Map$Entry val$backingEntry -> a
    1691:1691:void <init>(com.google.common.collect.Multimaps$Keys$1,java.util.Map$Entry) -> <init>
    1694:1694:java.lang.Object getElement() -> getElement
    1699:1699:int getCount() -> getCount
com.google.common.collect.Multimaps$MapMultimap -> com.google.common.collect.hL:
    java.util.Map map -> a
    long serialVersionUID -> serialVersionUID
    1094:1096:void <init>(java.util.Map) -> <init>
    1100:1100:int size() -> size
    1105:1105:boolean containsKey(java.lang.Object) -> containsKey
    1110:1110:boolean containsValue(java.lang.Object) -> containsValue
    1115:1115:boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    1120:1120:java.util.Set get(java.lang.Object) -> get
    1158:1158:boolean put(java.lang.Object,java.lang.Object) -> put
    1163:1163:boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    1168:1168:boolean putAll(com.google.common.collect.Multimap) -> putAll
    1173:1173:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    1178:1178:boolean remove(java.lang.Object,java.lang.Object) -> remove
    1183:1188:java.util.Set removeAll(java.lang.Object) -> removeAll
    1193:1194:void clear() -> clear
    1198:1198:java.util.Set createKeySet() -> e
    1203:1203:java.util.Collection createValues() -> g
    1208:1208:java.util.Set entries() -> entries
    1213:1213:java.util.Collection createEntries() -> k
    1218:1218:com.google.common.collect.Multiset createKeys() -> j
    1223:1223:java.util.Iterator entryIterator() -> l
    1228:1228:java.util.Map createAsMap() -> n
    1233:1233:int hashCode() -> hashCode
    1090:1090:java.util.Collection entries() -> entries
    1090:1090:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    1090:1090:java.util.Collection get(java.lang.Object) -> get
    1090:1090:java.util.Collection removeAll(java.lang.Object) -> removeAll
com.google.common.collect.Multimaps$MapMultimap$1 -> com.google.common.collect.hM:
    java.lang.Object val$key -> a
    com.google.common.collect.Multimaps$MapMultimap this$0 -> b
    1120:1120:void <init>(com.google.common.collect.Multimaps$MapMultimap,java.lang.Object) -> <init>
    1123:1123:java.util.Iterator iterator() -> iterator
    1151:1151:int size() -> size
com.google.common.collect.Multimaps$MapMultimap$1$1 -> com.google.common.collect.hN:
    int i -> a
    com.google.common.collect.Multimaps$MapMultimap$1 this$1 -> b
    1123:1123:void <init>(com.google.common.collect.Multimaps$MapMultimap$1) -> <init>
    1128:1128:boolean hasNext() -> hasNext
    1133:1137:java.lang.Object next() -> next
    1142:1145:void remove() -> remove
com.google.common.collect.Multimaps$TransformedEntriesListMultimap -> com.google.common.collect.hO:
    1565:1566:void <init>(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer) -> <init>
    1570:1570:java.util.List transform(java.lang.Object,java.util.Collection) -> b
    1575:1575:java.util.List get(java.lang.Object) -> get
    1581:1581:java.util.List removeAll(java.lang.Object) -> removeAll
    1586:1586:java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    1560:1560:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    1560:1560:java.util.Collection removeAll(java.lang.Object) -> removeAll
    1560:1560:java.util.Collection get(java.lang.Object) -> get
    1560:1560:java.util.Collection transform(java.lang.Object,java.util.Collection) -> a
com.google.common.collect.Multimaps$TransformedEntriesMultimap -> com.google.common.collect.hP:
    com.google.common.collect.Multimap fromMultimap -> a
    com.google.common.collect.Maps$EntryTransformer transformer -> b
    1449:1452:void <init>(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer) -> <init>
    1455:1459:java.util.Collection transform(java.lang.Object,java.util.Collection) -> a
    1465:1466:java.util.Map createAsMap() -> n
    1477:1478:void clear() -> clear
    1482:1482:boolean containsKey(java.lang.Object) -> containsKey
    1487:1487:java.util.Collection createEntries() -> k
    1492:1493:java.util.Iterator entryIterator() -> l
    1498:1498:java.util.Collection get(java.lang.Object) -> get
    1503:1503:boolean isEmpty() -> isEmpty
    1508:1508:java.util.Set createKeySet() -> e
    1513:1513:com.google.common.collect.Multiset createKeys() -> j
    1518:1518:boolean put(java.lang.Object,java.lang.Object) -> put
    1523:1523:boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    1528:1528:boolean putAll(com.google.common.collect.Multimap) -> putAll
    1534:1534:boolean remove(java.lang.Object,java.lang.Object) -> remove
    1540:1540:java.util.Collection removeAll(java.lang.Object) -> removeAll
    1545:1545:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    1550:1550:int size() -> size
    1555:1556:java.util.Collection createValues() -> g
com.google.common.collect.Multimaps$TransformedEntriesMultimap$1 -> com.google.common.collect.hQ:
    com.google.common.collect.Multimaps$TransformedEntriesMultimap this$0 -> a
    1467:1467:void <init>(com.google.common.collect.Multimaps$TransformedEntriesMultimap) -> <init>
    1470:1470:java.util.Collection transformEntry(java.lang.Object,java.util.Collection) -> a
    1467:1467:java.lang.Object transformEntry(java.lang.Object,java.lang.Object) -> transformEntry
com.google.common.collect.Multimaps$UnmodifiableListMultimap -> com.google.common.collect.hR:
    long serialVersionUID -> serialVersionUID
    766:767:void <init>(com.google.common.collect.ListMultimap) -> <init>
    771:771:com.google.common.collect.ListMultimap delegate() -> a
    776:776:java.util.List get(java.lang.Object) -> get
    781:781:java.util.List removeAll(java.lang.Object) -> removeAll
    786:786:java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    763:763:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    763:763:java.util.Collection removeAll(java.lang.Object) -> removeAll
    763:763:java.util.Collection get(java.lang.Object) -> get
    763:763:com.google.common.collect.Multimap delegate() -> delegate
    763:763:java.lang.Object delegate() -> delegate
com.google.common.collect.Multimaps$UnmodifiableMultimap -> com.google.common.collect.hS:
    com.google.common.collect.Multimap delegate -> a
    java.util.Collection entries -> b
    com.google.common.collect.Multiset keys -> c
    java.util.Set keySet -> d
    java.util.Collection values -> e
    java.util.Map map -> f
    long serialVersionUID -> serialVersionUID
    656:658:void <init>(com.google.common.collect.Multimap) -> <init>
    662:662:com.google.common.collect.Multimap delegate() -> delegate
    667:667:void clear() -> clear
    672:686:java.util.Map asMap() -> asMap
    691:695:java.util.Collection entries() -> entries
    700:700:java.util.Collection get(java.lang.Object) -> get
    705:709:com.google.common.collect.Multiset keys() -> keys
    714:718:java.util.Set keySet() -> keySet
    723:723:boolean put(java.lang.Object,java.lang.Object) -> put
    728:728:boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    733:733:boolean putAll(com.google.common.collect.Multimap) -> putAll
    738:738:boolean remove(java.lang.Object,java.lang.Object) -> remove
    743:743:java.util.Collection removeAll(java.lang.Object) -> removeAll
    748:748:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    753:757:java.util.Collection values() -> values
    647:647:java.lang.Object delegate() -> delegate
com.google.common.collect.Multimaps$UnmodifiableMultimap$1 -> com.google.common.collect.hT:
    679:679:void <init>(com.google.common.collect.Multimaps$UnmodifiableMultimap) -> <init>
    682:682:java.util.Collection apply(java.util.Collection) -> a
    679:679:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Multimaps$UnmodifiableSetMultimap -> com.google.common.collect.hU:
    long serialVersionUID -> serialVersionUID
    795:796:void <init>(com.google.common.collect.SetMultimap) -> <init>
    800:800:com.google.common.collect.SetMultimap delegate() -> a
    809:809:java.util.Set get(java.lang.Object) -> get
    814:814:java.util.Set entries() -> entries
    819:819:java.util.Set removeAll(java.lang.Object) -> removeAll
    824:824:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    792:792:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    792:792:java.util.Collection removeAll(java.lang.Object) -> removeAll
    792:792:java.util.Collection get(java.lang.Object) -> get
    792:792:java.util.Collection entries() -> entries
    792:792:com.google.common.collect.Multimap delegate() -> delegate
    792:792:java.lang.Object delegate() -> delegate
com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap -> com.google.common.collect.hV:
    long serialVersionUID -> serialVersionUID
    833:834:void <init>(com.google.common.collect.SortedSetMultimap) -> <init>
    838:838:com.google.common.collect.SortedSetMultimap delegate() -> b
    843:843:java.util.SortedSet get(java.lang.Object) -> get
    848:848:java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    853:853:java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    858:858:java.util.Comparator valueComparator() -> valueComparator
    830:830:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    830:830:java.util.Set removeAll(java.lang.Object) -> removeAll
    830:830:java.util.Set get(java.lang.Object) -> get
    830:830:com.google.common.collect.SetMultimap delegate() -> a
    830:830:java.util.Collection get(java.lang.Object) -> get
    830:830:java.util.Collection removeAll(java.lang.Object) -> removeAll
    830:830:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    830:830:com.google.common.collect.Multimap delegate() -> delegate
    830:830:java.lang.Object delegate() -> delegate
com.google.common.collect.Multiset -> com.google.common.collect.Multiset:
    int size() -> size
    int count(java.lang.Object) -> count
    int add(java.lang.Object,int) -> add
    boolean add(java.lang.Object) -> add
    int remove(java.lang.Object,int) -> remove
    boolean remove(java.lang.Object) -> remove
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    java.util.Set elementSet() -> elementSet
    java.util.Set entrySet() -> entrySet
    338:340:void forEachEntry(java.util.function.ObjIntConsumer) -> forEachEntry
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    459:469:void forEach(java.util.function.Consumer) -> forEach
    473:473:java.util.Spliterator spliterator() -> spliterator
    463:468:void lambda$forEach$1(java.util.function.Consumer,com.google.common.collect.Multiset$Entry) -> a
    339:339:void lambda$forEachEntry$0(java.util.function.ObjIntConsumer,com.google.common.collect.Multiset$Entry) -> a
com.google.common.collect.Multiset$Entry -> com.google.common.collect.Multiset$Entry:
    java.lang.Object getElement() -> getElement
    int getCount() -> getCount
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Multisets -> com.google.common.collect.Multisets:
    60:60:void <init>() -> <init>
    80:83:java.util.stream.Collector toMultiset(java.util.function.Function,java.util.function.ToIntFunction,java.util.function.Supplier) -> toMultiset
    103:108:com.google.common.collect.Multiset unmodifiableMultiset(com.google.common.collect.Multiset) -> unmodifiableMultiset
    119:119:com.google.common.collect.Multiset unmodifiableMultiset(com.google.common.collect.ImmutableMultiset) -> unmodifiableMultiset
    233:233:com.google.common.collect.SortedMultiset unmodifiableSortedMultiset(com.google.common.collect.SortedMultiset) -> unmodifiableSortedMultiset
    245:245:com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int) -> immutableEntry
    302:309:com.google.common.collect.Multiset filter(com.google.common.collect.Multiset,com.google.common.base.Predicate) -> filter
    388:391:int inferDistinctElements(java.lang.Iterable) -> a
    409:412:com.google.common.collect.Multiset union(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> union
    480:483:com.google.common.collect.Multiset intersection(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> intersection
    537:541:com.google.common.collect.Multiset sum(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> sum
    614:618:com.google.common.collect.Multiset difference(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> difference
    682:690:boolean containsOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> containsOccurrences
    712:712:boolean retainOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> retainOccurrences
    718:734:boolean retainOccurrencesImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> a
    763:772:boolean removeOccurrences(com.google.common.collect.Multiset,java.lang.Iterable) -> removeOccurrences
    801:817:boolean removeOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> removeOccurrences
    865:886:boolean equalsImpl(com.google.common.collect.Multiset,java.lang.Object) -> a
    891:898:boolean addAllImpl(com.google.common.collect.Multiset,java.util.Collection) -> a
    904:908:boolean addAllImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> b
    913:918:boolean removeAllImpl(com.google.common.collect.Multiset,java.util.Collection) -> b
    923:929:boolean retainAllImpl(com.google.common.collect.Multiset,java.util.Collection) -> c
    934:945:int setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int) -> a
    950:957:boolean setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int,int) -> a
    962:962:java.util.Iterator elementIterator(java.util.Iterator) -> a
    1053:1053:java.util.Iterator iteratorImpl(com.google.common.collect.Multiset) -> a
    1107:1114:java.util.Spliterator spliteratorImpl(com.google.common.collect.Multiset) -> b
    1119:1123:int linearTimeSizeImpl(com.google.common.collect.Multiset) -> c
    1128:1128:com.google.common.collect.Multiset cast(java.lang.Iterable) -> b
    1139:1141:com.google.common.collect.ImmutableMultiset copyHighestCountFirst(com.google.common.collect.Multiset) -> copyHighestCountFirst
    1110:1110:java.util.Spliterator lambda$spliteratorImpl$2(com.google.common.collect.Multiset$Entry) -> a
    87:88:com.google.common.collect.Multiset lambda$toMultiset$1(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> c
    85:85:void lambda$toMultiset$0(java.util.function.Function,java.util.function.ToIntFunction,com.google.common.collect.Multiset,java.lang.Object) -> a
com.google.common.collect.Multisets$1 -> com.google.common.collect.hW:
    com.google.common.collect.Multiset val$multiset1 -> a
    com.google.common.collect.Multiset val$multiset2 -> b
    412:412:void <init>(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> <init>
    415:415:boolean contains(java.lang.Object) -> contains
    420:420:boolean isEmpty() -> isEmpty
    425:425:int count(java.lang.Object) -> count
    430:430:java.util.Set createElementSet() -> d
    435:435:java.util.Iterator elementIterator() -> a
    440:443:java.util.Iterator entryIterator() -> b
com.google.common.collect.Multisets$1$1 -> com.google.common.collect.hX:
    java.util.Iterator val$iterator1 -> a
    java.util.Iterator val$iterator2 -> b
    com.google.common.collect.Multisets$1 this$0 -> c
    443:443:void <init>(com.google.common.collect.Multisets$1,java.util.Iterator,java.util.Iterator) -> <init>
    446:459:com.google.common.collect.Multiset$Entry computeNext() -> a
    443:443:java.lang.Object computeNext() -> computeNext
com.google.common.collect.Multisets$2 -> com.google.common.collect.hY:
    com.google.common.collect.Multiset val$multiset1 -> b
    com.google.common.collect.Multiset val$multiset2 -> a
    483:483:void <init>(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> <init>
    486:487:int count(java.lang.Object) -> count
    492:492:java.util.Set createElementSet() -> d
    497:497:java.util.Iterator elementIterator() -> a
    502:504:java.util.Iterator entryIterator() -> b
com.google.common.collect.Multisets$2$1 -> com.google.common.collect.hZ:
    java.util.Iterator val$iterator1 -> a
    com.google.common.collect.Multisets$2 this$0 -> b
    504:504:void <init>(com.google.common.collect.Multisets$2,java.util.Iterator) -> <init>
    507:515:com.google.common.collect.Multiset$Entry computeNext() -> a
    504:504:java.lang.Object computeNext() -> computeNext
com.google.common.collect.Multisets$3 -> com.google.common.collect.ia:
    com.google.common.collect.Multiset val$multiset1 -> a
    com.google.common.collect.Multiset val$multiset2 -> b
    541:541:void <init>(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> <init>
    544:544:boolean contains(java.lang.Object) -> contains
    549:549:boolean isEmpty() -> isEmpty
    554:554:int size() -> size
    559:559:int count(java.lang.Object) -> count
    564:564:java.util.Set createElementSet() -> d
    569:569:java.util.Iterator elementIterator() -> a
    574:576:java.util.Iterator entryIterator() -> b
com.google.common.collect.Multisets$3$1 -> com.google.common.collect.ib:
    java.util.Iterator val$iterator1 -> a
    java.util.Iterator val$iterator2 -> b
    com.google.common.collect.Multisets$3 this$0 -> c
    576:576:void <init>(com.google.common.collect.Multisets$3,java.util.Iterator,java.util.Iterator) -> <init>
    579:592:com.google.common.collect.Multiset$Entry computeNext() -> a
    576:576:java.lang.Object computeNext() -> computeNext
com.google.common.collect.Multisets$4 -> com.google.common.collect.ic:
    com.google.common.collect.Multiset val$multiset1 -> b
    com.google.common.collect.Multiset val$multiset2 -> a
    618:618:void <init>(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> <init>
    621:622:int count(java.lang.Object) -> count
    627:627:void clear() -> clear
    632:633:java.util.Iterator elementIterator() -> a
    650:651:java.util.Iterator entryIterator() -> b
    669:669:int distinctElements() -> c
com.google.common.collect.Multisets$4$1 -> com.google.common.collect.id:
    java.util.Iterator val$iterator1 -> a
    com.google.common.collect.Multisets$4 this$0 -> b
    633:633:void <init>(com.google.common.collect.Multisets$4,java.util.Iterator) -> <init>
    636:643:java.lang.Object computeNext() -> computeNext
com.google.common.collect.Multisets$4$2 -> com.google.common.collect.ie:
    java.util.Iterator val$iterator1 -> a
    com.google.common.collect.Multisets$4 this$0 -> b
    651:651:void <init>(com.google.common.collect.Multisets$4,java.util.Iterator) -> <init>
    654:662:com.google.common.collect.Multiset$Entry computeNext() -> a
    651:651:java.lang.Object computeNext() -> computeNext
com.google.common.collect.Multisets$5 -> com.google.common.collect.if:
    962:962:void <init>(java.util.Iterator) -> <init>
    965:965:java.lang.Object transform(com.google.common.collect.Multiset$Entry) -> a
    962:962:java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Multisets$AbstractEntry -> com.google.common.collect.ig:
    824:824:void <init>() -> <init>
    831:836:boolean equals(java.lang.Object) -> equals
    845:846:int hashCode() -> hashCode
    857:859:java.lang.String toString() -> toString
com.google.common.collect.Multisets$DecreasingCount -> com.google.common.collect.ih:
    com.google.common.collect.Multisets$DecreasingCount INSTANCE -> a
    1144:1144:void <init>() -> <init>
    1149:1149:int compare(com.google.common.collect.Multiset$Entry,com.google.common.collect.Multiset$Entry) -> a
    1144:1144:int compare(java.lang.Object,java.lang.Object) -> compare
    1145:1145:void <clinit>() -> <clinit>
com.google.common.collect.Multisets$ElementSet -> com.google.common.collect.ii:
    970:970:void <init>() -> <init>
    com.google.common.collect.Multiset multiset() -> a
    975:976:void clear() -> clear
    980:980:boolean contains(java.lang.Object) -> contains
    985:985:boolean containsAll(java.util.Collection) -> containsAll
    990:990:boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    998:998:boolean remove(java.lang.Object) -> remove
    1003:1003:int size() -> size
com.google.common.collect.Multisets$EntrySet -> com.google.common.collect.ij:
    1007:1007:void <init>() -> <init>
    com.google.common.collect.Multiset multiset() -> a
    1012:1024:boolean contains(java.lang.Object) -> contains
    1031:1042:boolean remove(java.lang.Object) -> remove
    1047:1048:void clear() -> clear
com.google.common.collect.Multisets$FilteredMultiset -> com.google.common.collect.ik:
    com.google.common.collect.Multiset unfiltered -> a
    com.google.common.base.Predicate predicate -> b
    316:319:void <init>(com.google.common.collect.Multiset,com.google.common.base.Predicate) -> <init>
    323:323:com.google.common.collect.UnmodifiableIterator iterator() -> e
    328:328:java.util.Set createElementSet() -> d
    333:333:java.util.Iterator elementIterator() -> a
    338:339:java.util.Set createEntrySet() -> createEntrySet
    350:350:java.util.Iterator entryIterator() -> b
    355:361:int count(java.lang.Object) -> count
    366:368:int add(java.lang.Object,int) -> add
    373:377:int remove(java.lang.Object,int) -> remove
    312:312:java.util.Iterator iterator() -> iterator
com.google.common.collect.Multisets$FilteredMultiset$1 -> com.google.common.collect.il:
    com.google.common.collect.Multisets$FilteredMultiset this$0 -> a
    340:340:void <init>(com.google.common.collect.Multisets$FilteredMultiset) -> <init>
    343:343:boolean apply(com.google.common.collect.Multiset$Entry) -> a
    340:340:boolean apply(java.lang.Object) -> apply
com.google.common.collect.Multisets$ImmutableEntry -> com.google.common.collect.im:
    java.lang.Object element -> a
    int count -> b
    long serialVersionUID -> serialVersionUID
    252:256:void <init>(java.lang.Object,int) -> <init>
    260:260:java.lang.Object getElement() -> getElement
    265:265:int getCount() -> getCount
    269:269:com.google.common.collect.Multisets$ImmutableEntry nextInBucket() -> a
com.google.common.collect.Multisets$MultisetIteratorImpl -> com.google.common.collect.in:
    com.google.common.collect.Multiset multiset -> a
    java.util.Iterator entryIterator -> b
    com.google.common.collect.Multiset$Entry currentEntry -> c
    int laterCount -> d
    int totalCount -> e
    boolean canRemove -> f
    1069:1072:void <init>(com.google.common.collect.Multiset,java.util.Iterator) -> <init>
    1076:1076:boolean hasNext() -> hasNext
    1081:1090:java.lang.Object next() -> next
    1095:1103:void remove() -> remove
com.google.common.collect.Multisets$UnmodifiableMultiset -> com.google.common.collect.io:
    com.google.common.collect.Multiset delegate -> a
    java.util.Set elementSet -> b
    java.util.Set entrySet -> c
    long serialVersionUID -> serialVersionUID
    125:127:void <init>(com.google.common.collect.Multiset) -> <init>
    133:133:com.google.common.collect.Multiset delegate() -> delegate
    139:139:java.util.Set createElementSet() -> a
    144:145:java.util.Set elementSet() -> elementSet
    153:157:java.util.Set entrySet() -> entrySet
    163:163:java.util.Iterator iterator() -> iterator
    168:168:boolean add(java.lang.Object) -> add
    173:173:int add(java.lang.Object,int) -> add
    178:178:boolean addAll(java.util.Collection) -> addAll
    183:183:boolean remove(java.lang.Object) -> remove
    188:188:int remove(java.lang.Object,int) -> remove
    193:193:boolean removeAll(java.util.Collection) -> removeAll
    198:198:boolean retainAll(java.util.Collection) -> retainAll
    203:203:void clear() -> clear
    208:208:int setCount(java.lang.Object,int) -> setCount
    213:213:boolean setCount(java.lang.Object,int,int) -> setCount
    122:122:java.util.Collection delegate() -> delegate
    122:122:java.lang.Object delegate() -> delegate
com.google.common.collect.Multisets$ViewMultiset -> com.google.common.collect.ip:
    1157:1157:void <init>() -> <init>
    1160:1160:int size() -> size
    1165:1166:void clear() -> clear
    1170:1170:java.util.Iterator iterator() -> iterator
    1175:1175:int distinctElements() -> c
    1157:1157:void <init>(byte) -> <init>
com.google.common.collect.MutableClassToInstanceMap -> com.google.common.collect.MutableClassToInstanceMap:
    java.util.Map delegate -> a
    53:53:com.google.common.collect.MutableClassToInstanceMap create() -> create
    62:62:com.google.common.collect.MutableClassToInstanceMap create(java.util.Map) -> create
    67:69:void <init>(java.util.Map) -> <init>
    73:73:java.util.Map delegate() -> delegate
    81:81:java.util.Map$Entry checkedEntry(java.util.Map$Entry) -> b
    96:96:java.util.Set entrySet() -> entrySet
    135:135:java.lang.Object put(java.lang.Class,java.lang.Object) -> put
    140:145:void putAll(java.util.Map) -> putAll
    150:150:java.lang.Object putInstance(java.lang.Class,java.lang.Object) -> putInstance
    155:155:java.lang.Object getInstance(java.lang.Class) -> getInstance
    160:160:java.lang.Object cast(java.lang.Class,java.lang.Object) -> b
    164:164:java.lang.Object writeReplace() -> writeReplace
    43:43:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    43:43:java.lang.Object delegate() -> delegate
    45:45:java.lang.Object access$000(java.lang.Class,java.lang.Object) -> a
    45:45:java.util.Map$Entry access$100(java.util.Map$Entry) -> a
com.google.common.collect.MutableClassToInstanceMap$1 -> com.google.common.collect.iq:
    java.util.Map$Entry val$entry -> a
    81:81:void <init>(java.util.Map$Entry) -> <init>
    84:84:java.util.Map$Entry delegate() -> delegate
    89:89:java.lang.Object setValue(java.lang.Object) -> setValue
    81:81:java.lang.Object delegate() -> delegate
com.google.common.collect.MutableClassToInstanceMap$2 -> com.google.common.collect.ir:
    com.google.common.collect.MutableClassToInstanceMap this$0 -> a
    96:96:void <init>(com.google.common.collect.MutableClassToInstanceMap) -> <init>
    100:100:java.util.Set delegate() -> delegate
    105:106:java.util.Spliterator spliterator() -> spliterator
    111:112:java.util.Iterator iterator() -> iterator
    122:122:java.lang.Object[] toArray() -> toArray
    127:127:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    96:96:java.util.Collection delegate() -> delegate
    96:96:java.lang.Object delegate() -> delegate
    106:106:java.util.Map$Entry lambda$spliterator$0(java.util.Map$Entry) -> a
com.google.common.collect.MutableClassToInstanceMap$2$1 -> com.google.common.collect.is:
    112:112:void <init>(com.google.common.collect.MutableClassToInstanceMap$2,java.util.Iterator) -> <init>
    115:115:java.util.Map$Entry transform(java.util.Map$Entry) -> a
    112:112:java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.MutableClassToInstanceMap$SerializedForm -> com.google.common.collect.it:
    java.util.Map backingMap -> a
    long serialVersionUID -> serialVersionUID
    171:173:void <init>(java.util.Map) -> <init>
    176:176:java.lang.Object readResolve() -> readResolve
com.google.common.collect.NaturalOrdering -> com.google.common.collect.iu:
    com.google.common.collect.NaturalOrdering INSTANCE -> a
    com.google.common.collect.Ordering nullsFirst -> b
    com.google.common.collect.Ordering nullsLast -> c
    long serialVersionUID -> serialVersionUID
    36:38:int compare(java.lang.Comparable,java.lang.Comparable) -> a
    43:47:com.google.common.collect.Ordering nullsFirst() -> nullsFirst
    52:56:com.google.common.collect.Ordering nullsLast() -> nullsLast
    61:61:com.google.common.collect.Ordering reverse() -> reverse
    66:66:java.lang.Object readResolve() -> readResolve
    71:71:java.lang.String toString() -> toString
    74:74:void <init>() -> <init>
    26:26:int compare(java.lang.Object,java.lang.Object) -> compare
    29:29:void <clinit>() -> <clinit>
com.google.common.collect.NullsFirstOrdering -> com.google.common.collect.iv:
    com.google.common.collect.Ordering ordering -> a
    long serialVersionUID -> serialVersionUID
    28:30:void <init>(com.google.common.collect.Ordering) -> <init>
    34:43:int compare(java.lang.Object,java.lang.Object) -> compare
    49:49:com.google.common.collect.Ordering reverse() -> reverse
    55:55:com.google.common.collect.Ordering nullsFirst() -> nullsFirst
    60:60:com.google.common.collect.Ordering nullsLast() -> nullsLast
    65:72:boolean equals(java.lang.Object) -> equals
    77:77:int hashCode() -> hashCode
    82:82:java.lang.String toString() -> toString
com.google.common.collect.NullsLastOrdering -> com.google.common.collect.iw:
    com.google.common.collect.Ordering ordering -> a
    long serialVersionUID -> serialVersionUID
    28:30:void <init>(com.google.common.collect.Ordering) -> <init>
    34:43:int compare(java.lang.Object,java.lang.Object) -> compare
    49:49:com.google.common.collect.Ordering reverse() -> reverse
    54:54:com.google.common.collect.Ordering nullsFirst() -> nullsFirst
    60:60:com.google.common.collect.Ordering nullsLast() -> nullsLast
    65:72:boolean equals(java.lang.Object) -> equals
    77:77:int hashCode() -> hashCode
    82:82:java.lang.String toString() -> toString
com.google.common.collect.ObjectArrays -> com.google.common.collect.ObjectArrays:
    38:38:void <init>() -> <init>
    49:49:java.lang.Object[] newArray(java.lang.Class,int) -> newArray
    59:59:java.lang.Object[] newArray(java.lang.Object[],int) -> newArray
    71:74:java.lang.Object[] concat(java.lang.Object[],java.lang.Object[],java.lang.Class) -> concat
    86:89:java.lang.Object[] concat(java.lang.Object,java.lang.Object[]) -> concat
    101:103:java.lang.Object[] concat(java.lang.Object[],java.lang.Object) -> concat
    128:136:java.lang.Object[] toArrayImpl(java.util.Collection,java.lang.Object[]) -> a
    174:174:java.lang.Object[] toArrayImpl(java.util.Collection) -> a
    193:197:java.lang.Object[] fillArray(java.lang.Iterable,java.lang.Object[]) -> a
    209:209:java.lang.Object[] checkElementsNotNull(java.lang.Object[]) -> a
    214:217:java.lang.Object[] checkElementsNotNull(java.lang.Object[],int) -> a
    224:227:java.lang.Object checkElementNotNull(java.lang.Object,int) -> a
com.google.common.collect.Ordering -> com.google.common.collect.Ordering:
    162:162:com.google.common.collect.Ordering natural() -> natural
    182:182:com.google.common.collect.Ordering from(java.util.Comparator) -> from
    195:195:com.google.common.collect.Ordering from(com.google.common.collect.Ordering) -> from
    220:220:com.google.common.collect.Ordering explicit(java.util.List) -> explicit
    246:246:com.google.common.collect.Ordering explicit(java.lang.Object,java.lang.Object[]) -> explicit
    282:282:com.google.common.collect.Ordering allEqual() -> allEqual
    295:295:com.google.common.collect.Ordering usingToString() -> usingToString
    315:315:com.google.common.collect.Ordering arbitrary() -> arbitrary
    391:391:void <init>() -> <init>
    405:405:com.google.common.collect.Ordering reverse() -> reverse
    418:418:com.google.common.collect.Ordering nullsFirst() -> nullsFirst
    431:431:com.google.common.collect.Ordering nullsLast() -> nullsLast
    449:449:com.google.common.collect.Ordering onResultOf(com.google.common.base.Function) -> onResultOf
    453:453:com.google.common.collect.Ordering onKeys() -> a
    471:471:com.google.common.collect.Ordering compound(java.util.Comparator) -> compound
    495:495:com.google.common.collect.Ordering compound(java.lang.Iterable) -> compound
    525:525:com.google.common.collect.Ordering lexicographical() -> lexicographical
    int compare(java.lang.Object,java.lang.Object) -> compare
    551:557:java.lang.Object min(java.util.Iterator) -> min
    575:575:java.lang.Object min(java.lang.Iterable) -> min
    594:594:java.lang.Object min(java.lang.Object,java.lang.Object) -> min
    612:618:java.lang.Object min(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> min
    637:643:java.lang.Object max(java.util.Iterator) -> max
    661:661:java.lang.Object max(java.lang.Iterable) -> max
    680:680:java.lang.Object max(java.lang.Object,java.lang.Object) -> max
    698:704:java.lang.Object max(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> max
    724:740:java.util.List leastOf(java.lang.Iterable,int) -> leastOf
    760:777:java.util.List leastOf(java.util.Iterator,int) -> leastOf
    800:800:java.util.List greatestOf(java.lang.Iterable,int) -> greatestOf
    820:820:java.util.List greatestOf(java.util.Iterator,int) -> greatestOf
    841:843:java.util.List sortedCopy(java.lang.Iterable) -> sortedCopy
    863:863:com.google.common.collect.ImmutableList immutableSortedCopy(java.lang.Iterable) -> immutableSortedCopy
    876:887:boolean isOrdered(java.lang.Iterable) -> isOrdered
    900:911:boolean isStrictlyOrdered(java.lang.Iterable) -> isStrictlyOrdered
    924:924:int binarySearch(java.util.List,java.lang.Object) -> binarySearch
com.google.common.collect.Ordering$ArbitraryOrdering -> com.google.common.collect.ix:
    java.util.concurrent.atomic.AtomicInteger counter -> a
    java.util.concurrent.ConcurrentMap uids -> b
    323:327:void <init>() -> <init>
    330:341:java.lang.Integer getUid(java.lang.Object) -> a
    346:364:int compare(java.lang.Object,java.lang.Object) -> compare
    369:369:java.lang.String toString() -> toString
    381:381:int identityHashCode(java.lang.Object) -> b
com.google.common.collect.Ordering$ArbitraryOrderingHolder -> com.google.common.collect.iy:
    com.google.common.collect.Ordering ARBITRARY_ORDERING -> a
    319:319:void <clinit>() -> <clinit>
com.google.common.collect.Ordering$IncomparableValueException -> com.google.common.collect.iz:
    long serialVersionUID -> serialVersionUID
    937:939:void <init>(java.lang.Object) -> <init>
com.google.common.collect.PeekingIterator -> com.google.common.collect.PeekingIterator:
    java.lang.Object peek() -> peek
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Platform -> com.google.common.collect.iA:
    40:40:java.util.Map newHashMapWithExpectedSize(int) -> a
    48:48:java.util.Map newLinkedHashMapWithExpectedSize(int) -> b
    53:53:java.util.Set newHashSetWithExpectedSize(int) -> c
    61:61:java.util.Set newLinkedHashSetWithExpectedSize(int) -> d
    69:69:java.util.Map preservesInsertionOrderOnPutsMap() -> a
    77:77:java.util.Set preservesInsertionOrderOnAddsSet() -> b
    87:93:java.lang.Object[] newArray(java.lang.Object[],int) -> a
    98:98:java.lang.Object[] copy(java.lang.Object[],int,int,java.lang.Object[]) -> a
    107:107:com.google.common.collect.MapMaker tryWeakKeys(com.google.common.collect.MapMaker) -> a
    140:140:void <init>() -> <init>
    35:36:void <clinit>() -> <clinit>
com.google.common.collect.Queues -> com.google.common.collect.Queues:
    45:45:void <init>() -> <init>
    55:55:java.util.concurrent.ArrayBlockingQueue newArrayBlockingQueue(int) -> newArrayBlockingQueue
    66:66:java.util.ArrayDeque newArrayDeque() -> newArrayDeque
    76:81:java.util.ArrayDeque newArrayDeque(java.lang.Iterable) -> newArrayDeque
    89:89:java.util.concurrent.ConcurrentLinkedQueue newConcurrentLinkedQueue() -> newConcurrentLinkedQueue
    99:104:java.util.concurrent.ConcurrentLinkedQueue newConcurrentLinkedQueue(java.lang.Iterable) -> newConcurrentLinkedQueue
    116:116:java.util.concurrent.LinkedBlockingDeque newLinkedBlockingDeque() -> newLinkedBlockingDeque
    127:127:java.util.concurrent.LinkedBlockingDeque newLinkedBlockingDeque(int) -> newLinkedBlockingDeque
    139:144:java.util.concurrent.LinkedBlockingDeque newLinkedBlockingDeque(java.lang.Iterable) -> newLinkedBlockingDeque
    152:152:java.util.concurrent.LinkedBlockingQueue newLinkedBlockingQueue() -> newLinkedBlockingQueue
    162:162:java.util.concurrent.LinkedBlockingQueue newLinkedBlockingQueue(int) -> newLinkedBlockingQueue
    175:180:java.util.concurrent.LinkedBlockingQueue newLinkedBlockingQueue(java.lang.Iterable) -> newLinkedBlockingQueue
    195:195:java.util.concurrent.PriorityBlockingQueue newPriorityBlockingQueue() -> newPriorityBlockingQueue
    209:214:java.util.concurrent.PriorityBlockingQueue newPriorityBlockingQueue(java.lang.Iterable) -> newPriorityBlockingQueue
    226:226:java.util.PriorityQueue newPriorityQueue() -> newPriorityQueue
    239:244:java.util.PriorityQueue newPriorityQueue(java.lang.Iterable) -> newPriorityQueue
    252:252:java.util.concurrent.SynchronousQueue newSynchronousQueue() -> newSynchronousQueue
    274:274:int drain(java.util.concurrent.BlockingQueue,java.util.Collection,int,java.time.Duration) -> drain
    300:321:int drain(java.util.concurrent.BlockingQueue,java.util.Collection,int,long,java.util.concurrent.TimeUnit) -> drain
    346:346:int drainUninterruptibly(java.util.concurrent.BlockingQueue,java.util.Collection,int,java.time.Duration) -> drainUninterruptibly
    372:403:int drainUninterruptibly(java.util.concurrent.BlockingQueue,java.util.Collection,int,long,java.util.concurrent.TimeUnit) -> drainUninterruptibly
    436:436:java.util.Queue synchronizedQueue(java.util.Queue) -> synchronizedQueue
    469:469:java.util.Deque synchronizedDeque(java.util.Deque) -> synchronizedDeque
com.google.common.collect.Range -> com.google.common.collect.Range:
    com.google.common.collect.Range ALL -> c
    com.google.common.collect.Cut lowerBound -> a
    com.google.common.collect.Cut upperBound -> b
    long serialVersionUID -> serialVersionUID
    142:142:com.google.common.base.Function lowerBoundFn() -> a
    147:147:com.google.common.base.Function upperBoundFn() -> b
    151:151:com.google.common.collect.Ordering rangeLexOrdering() -> c
    155:155:com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut) -> a
    168:168:com.google.common.collect.Range open(java.lang.Comparable,java.lang.Comparable) -> open
    180:180:com.google.common.collect.Range closed(java.lang.Comparable,java.lang.Comparable) -> closed
    192:192:com.google.common.collect.Range closedOpen(java.lang.Comparable,java.lang.Comparable) -> closedOpen
    204:204:com.google.common.collect.Range openClosed(java.lang.Comparable,java.lang.Comparable) -> openClosed
    217:224:com.google.common.collect.Range range(java.lang.Comparable,com.google.common.collect.BoundType,java.lang.Comparable,com.google.common.collect.BoundType) -> range
    233:233:com.google.common.collect.Range lessThan(java.lang.Comparable) -> lessThan
    242:242:com.google.common.collect.Range atMost(java.lang.Comparable) -> atMost
    252:258:com.google.common.collect.Range upTo(java.lang.Comparable,com.google.common.collect.BoundType) -> upTo
    268:268:com.google.common.collect.Range greaterThan(java.lang.Comparable) -> greaterThan
    277:277:com.google.common.collect.Range atLeast(java.lang.Comparable) -> atLeast
    287:293:com.google.common.collect.Range downTo(java.lang.Comparable,com.google.common.collect.BoundType) -> downTo
    306:306:com.google.common.collect.Range all() -> all
    316:316:com.google.common.collect.Range singleton(java.lang.Comparable) -> singleton
    329:345:com.google.common.collect.Range encloseAll(java.lang.Iterable) -> encloseAll
    351:359:void <init>(com.google.common.collect.Cut,com.google.common.collect.Cut) -> <init>
    363:363:boolean hasLowerBound() -> hasLowerBound
    373:373:java.lang.Comparable lowerEndpoint() -> lowerEndpoint
    384:384:com.google.common.collect.BoundType lowerBoundType() -> lowerBoundType
    389:389:boolean hasUpperBound() -> hasUpperBound
    399:399:java.lang.Comparable upperEndpoint() -> upperEndpoint
    410:410:com.google.common.collect.BoundType upperBoundType() -> upperBoundType
    423:423:boolean isEmpty() -> isEmpty
    432:434:boolean contains(java.lang.Comparable) -> contains
    444:444:boolean apply(java.lang.Comparable) -> apply
    452:470:boolean containsAll(java.lang.Iterable) -> containsAll
    497:498:boolean encloses(com.google.common.collect.Range) -> encloses
    527:528:boolean isConnected(com.google.common.collect.Range) -> isConnected
    548:557:com.google.common.collect.Range intersection(com.google.common.collect.Range) -> intersection
    579:582:com.google.common.collect.Range gap(com.google.common.collect.Range) -> gap
    597:606:com.google.common.collect.Range span(com.google.common.collect.Range) -> span
    635:638:com.google.common.collect.Range canonical(com.google.common.collect.DiscreteDomain) -> canonical
    650:654:boolean equals(java.lang.Object) -> equals
    660:660:int hashCode() -> hashCode
    669:669:java.lang.String toString() -> toString
    673:677:java.lang.String toString(com.google.common.collect.Cut,com.google.common.collect.Cut) -> b
    682:682:java.util.SortedSet cast(java.lang.Iterable) -> a
    686:689:java.lang.Object readResolve() -> readResolve
    695:695:int compareOrThrow(java.lang.Comparable,java.lang.Comparable) -> a
    117:117:boolean apply(java.lang.Object) -> apply
    297:297:void <clinit>() -> <clinit>
com.google.common.collect.Range$1 -> com.google.common.collect.iB:
    int[] $SwitchMap$com$google$common$collect$BoundType -> a
    252:252:void <clinit>() -> <clinit>
com.google.common.collect.Range$LowerBoundFn -> com.google.common.collect.iC:
    com.google.common.collect.Range$LowerBoundFn INSTANCE -> a
    122:122:void <init>() -> <init>
    127:127:com.google.common.collect.Cut apply(com.google.common.collect.Range) -> a
    122:122:java.lang.Object apply(java.lang.Object) -> apply
    123:123:void <clinit>() -> <clinit>
com.google.common.collect.Range$RangeLexOrdering -> com.google.common.collect.iD:
    com.google.common.collect.Ordering INSTANCE -> a
    long serialVersionUID -> serialVersionUID
    699:699:void <init>() -> <init>
    704:707:int compare(com.google.common.collect.Range,com.google.common.collect.Range) -> a
    699:699:int compare(java.lang.Object,java.lang.Object) -> compare
    700:700:void <clinit>() -> <clinit>
com.google.common.collect.Range$UpperBoundFn -> com.google.common.collect.iE:
    com.google.common.collect.Range$UpperBoundFn INSTANCE -> a
    131:131:void <init>() -> <init>
    136:136:com.google.common.collect.Cut apply(com.google.common.collect.Range) -> a
    131:131:java.lang.Object apply(java.lang.Object) -> apply
    132:132:void <clinit>() -> <clinit>
com.google.common.collect.RangeGwtSerializationDependencies -> com.google.common.collect.iF:
    32:32:void <init>() -> <init>
com.google.common.collect.RangeMap -> com.google.common.collect.RangeMap:
    java.lang.Object get(java.lang.Comparable) -> get
    java.util.Map$Entry getEntry(java.lang.Comparable) -> getEntry
    com.google.common.collect.Range span() -> span
    void put(com.google.common.collect.Range,java.lang.Object) -> put
    void putCoalescing(com.google.common.collect.Range,java.lang.Object) -> putCoalescing
    void putAll(com.google.common.collect.RangeMap) -> putAll
    void clear() -> clear
    void remove(com.google.common.collect.Range) -> remove
    void merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction) -> merge
    java.util.Map asMapOfRanges() -> asMapOfRanges
    java.util.Map asDescendingMapOfRanges() -> asDescendingMapOfRanges
    com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.RangeSet -> com.google.common.collect.RangeSet:
    boolean contains(java.lang.Comparable) -> contains
    com.google.common.collect.Range rangeContaining(java.lang.Comparable) -> rangeContaining
    boolean intersects(com.google.common.collect.Range) -> intersects
    boolean encloses(com.google.common.collect.Range) -> encloses
    boolean enclosesAll(com.google.common.collect.RangeSet) -> enclosesAll
    106:111:boolean enclosesAll(java.lang.Iterable) -> enclosesAll
    boolean isEmpty() -> isEmpty
    com.google.common.collect.Range span() -> span
    java.util.Set asRanges() -> asRanges
    java.util.Set asDescendingSetOfRanges() -> asDescendingSetOfRanges
    com.google.common.collect.RangeSet complement() -> complement
    com.google.common.collect.RangeSet subRangeSet(com.google.common.collect.Range) -> subRangeSet
    void add(com.google.common.collect.Range) -> add
    void remove(com.google.common.collect.Range) -> remove
    void clear() -> clear
    void addAll(com.google.common.collect.RangeSet) -> addAll
    224:227:void addAll(java.lang.Iterable) -> addAll
    void removeAll(com.google.common.collect.RangeSet) -> removeAll
    253:256:void removeAll(java.lang.Iterable) -> removeAll
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.RegularContiguousSet -> com.google.common.collect.iG:
    com.google.common.collect.Range range -> c
    long serialVersionUID -> serialVersionUID
    39:41:void <init>(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain) -> <init>
    44:45:com.google.common.collect.ContiguousSet intersectionInCurrentDomain(com.google.common.collect.Range) -> a
    51:51:com.google.common.collect.ContiguousSet headSetImpl(java.lang.Comparable,boolean) -> a
    57:64:com.google.common.collect.ContiguousSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean) -> a
    69:69:com.google.common.collect.ContiguousSet tailSetImpl(java.lang.Comparable,boolean) -> b
    75:75:int indexOf(java.lang.Object) -> a
    80:80:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    93:93:com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    104:104:boolean equalsOrThrow(java.lang.Comparable,java.lang.Comparable) -> b
    109:109:boolean isPartialView() -> a
    114:114:java.lang.Comparable first() -> h
    119:119:java.lang.Comparable last() -> i
    124:138:com.google.common.collect.ImmutableList createAsList() -> g
    144:145:int size() -> size
    150:156:boolean contains(java.lang.Object) -> contains
    162:162:boolean containsAll(java.util.Collection) -> containsAll
    167:167:boolean isEmpty() -> isEmpty
    172:180:com.google.common.collect.ContiguousSet intersection(com.google.common.collect.ContiguousSet) -> intersection
    187:187:com.google.common.collect.Range range() -> range
    192:194:com.google.common.collect.Range range(com.google.common.collect.BoundType,com.google.common.collect.BoundType) -> range
    199:207:boolean equals(java.lang.Object) -> equals
    213:213:int hashCode() -> hashCode
    234:234:java.lang.Object writeReplace() -> writeReplace
    33:33:java.lang.Object last() -> last
    33:33:java.lang.Object first() -> first
    33:33:com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> a
    33:33:com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> a
    33:33:com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> b
    33:33:java.util.Iterator descendingIterator() -> descendingIterator
    33:33:java.util.Iterator iterator() -> iterator
    35:35:boolean access$000(java.lang.Comparable,java.lang.Comparable) -> a
com.google.common.collect.RegularContiguousSet$1 -> com.google.common.collect.iH:
    java.lang.Comparable last -> a
    com.google.common.collect.RegularContiguousSet this$0 -> b
    80:81:void <init>(com.google.common.collect.RegularContiguousSet,java.lang.Comparable) -> <init>
    85:85:java.lang.Comparable computeNext(java.lang.Comparable) -> a
    80:80:java.lang.Object computeNext(java.lang.Object) -> computeNext
com.google.common.collect.RegularContiguousSet$2 -> com.google.common.collect.iI:
    java.lang.Comparable first -> a
    com.google.common.collect.RegularContiguousSet this$0 -> b
    93:94:void <init>(com.google.common.collect.RegularContiguousSet,java.lang.Comparable) -> <init>
    98:98:java.lang.Comparable computeNext(java.lang.Comparable) -> a
    93:93:java.lang.Object computeNext(java.lang.Object) -> computeNext
com.google.common.collect.RegularContiguousSet$3 -> com.google.common.collect.iJ:
    com.google.common.collect.RegularContiguousSet this$0 -> a
    125:125:void <init>(com.google.common.collect.RegularContiguousSet) -> <init>
    128:128:com.google.common.collect.ImmutableSortedSet delegateCollection() -> c
    133:134:java.lang.Comparable get(int) -> a
    125:125:com.google.common.collect.ImmutableCollection delegateCollection() -> b
    125:125:java.lang.Object get(int) -> get
com.google.common.collect.RegularContiguousSet$SerializedForm -> com.google.common.collect.iK:
    com.google.common.collect.Range range -> a
    com.google.common.collect.DiscreteDomain domain -> b
    221:224:void <init>(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain) -> <init>
    227:227:java.lang.Object readResolve() -> readResolve
    217:217:void <init>(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain,byte) -> <init>
com.google.common.collect.RegularImmutableAsList -> com.google.common.collect.iL:
    com.google.common.collect.ImmutableCollection delegate -> a
    com.google.common.collect.ImmutableList delegateList -> b
    35:38:void <init>(com.google.common.collect.ImmutableCollection,com.google.common.collect.ImmutableList) -> <init>
    41:42:void <init>(com.google.common.collect.ImmutableCollection,java.lang.Object[]) -> <init>
    46:46:com.google.common.collect.ImmutableCollection delegateCollection() -> b
    50:50:com.google.common.collect.ImmutableList delegateList() -> c
    56:56:com.google.common.collect.UnmodifiableListIterator listIterator(int) -> listIterator
    62:63:void forEach(java.util.function.Consumer) -> forEach
    68:68:int copyIntoArray(java.lang.Object[],int) -> a
    73:73:java.lang.Object[] internalArray() -> d
    78:78:int internalArrayStart() -> e
    83:83:int internalArrayEnd() -> f
    88:88:java.lang.Object get(int) -> get
    29:29:java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.RegularImmutableBiMap -> com.google.common.collect.iM:
    com.google.common.collect.RegularImmutableBiMap EMPTY -> b
    com.google.common.collect.ImmutableMapEntry[] keyTable -> d
    com.google.common.collect.ImmutableMapEntry[] valueTable -> e
    java.util.Map$Entry[] entries -> c
    int mask -> f
    int hashCode -> g
    com.google.common.collect.ImmutableBiMap inverse -> h
    57:57:com.google.common.collect.ImmutableBiMap fromEntries(java.util.Map$Entry[]) -> a
    61:103:com.google.common.collect.ImmutableBiMap fromEntryArray(int,java.util.Map$Entry[]) -> a
    111:117:void <init>(com.google.common.collect.ImmutableMapEntry[],com.google.common.collect.ImmutableMapEntry[],java.util.Map$Entry[],int,int) -> <init>
    128:133:int checkNoConflictInValueBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry) -> a
    138:138:java.lang.Object get(java.lang.Object) -> get
    143:144:com.google.common.collect.ImmutableSet createEntrySet() -> g
    150:150:com.google.common.collect.ImmutableSet createKeySet() -> c
    155:159:void forEach(java.util.function.BiConsumer) -> forEach
    163:163:boolean isHashCodeFast() -> h
    168:168:int hashCode() -> hashCode
    173:173:boolean isPartialView() -> b
    178:178:int size() -> size
    185:189:com.google.common.collect.ImmutableBiMap inverse() -> inverse
    41:41:com.google.common.collect.BiMap inverse() -> inverse
    43:43:com.google.common.collect.ImmutableMapEntry[] access$100(com.google.common.collect.RegularImmutableBiMap) -> a
    43:43:int access$200(com.google.common.collect.RegularImmutableBiMap) -> b
    43:43:int access$300(com.google.common.collect.RegularImmutableBiMap) -> c
    44:44:void <clinit>() -> <clinit>
com.google.common.collect.RegularImmutableBiMap$Inverse -> com.google.common.collect.iN:
    com.google.common.collect.RegularImmutableBiMap this$0 -> b
    192:192:void <init>(com.google.common.collect.RegularImmutableBiMap) -> <init>
    196:196:int size() -> size
    201:201:com.google.common.collect.ImmutableBiMap inverse() -> inverse
    206:208:void forEach(java.util.function.BiConsumer) -> forEach
    212:223:java.lang.Object get(java.lang.Object) -> get
    228:228:com.google.common.collect.ImmutableSet createKeySet() -> c
    233:233:com.google.common.collect.ImmutableSet createEntrySet() -> g
    281:281:boolean isPartialView() -> b
    286:286:java.lang.Object writeReplace() -> writeReplace
    192:192:com.google.common.collect.BiMap inverse() -> inverse
    207:207:void lambda$forEach$0(java.util.function.BiConsumer,java.lang.Object,java.lang.Object) -> a
    192:192:void <init>(com.google.common.collect.RegularImmutableBiMap,byte) -> <init>
com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet -> com.google.common.collect.iO:
    com.google.common.collect.RegularImmutableBiMap$Inverse this$1 -> a
    236:236:void <init>(com.google.common.collect.RegularImmutableBiMap$Inverse) -> <init>
    239:239:com.google.common.collect.ImmutableMap map() -> b
    244:244:boolean isHashCodeFast() -> c
    249:249:int hashCode() -> hashCode
    254:254:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    259:260:void forEach(java.util.function.Consumer) -> forEach
    264:264:com.google.common.collect.ImmutableList createAsList() -> g
    236:236:java.util.Iterator iterator() -> iterator
com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1 -> com.google.common.collect.iP:
    com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet this$2 -> a
    264:264:void <init>(com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet) -> <init>
    267:268:java.util.Map$Entry get(int) -> a
    273:273:com.google.common.collect.ImmutableCollection delegateCollection() -> b
    264:264:java.lang.Object get(int) -> get
com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm -> com.google.common.collect.iQ:
    com.google.common.collect.ImmutableBiMap forward -> a
    long serialVersionUID -> serialVersionUID
    293:295:void <init>(com.google.common.collect.ImmutableBiMap) -> <init>
    298:298:java.lang.Object readResolve() -> readResolve
com.google.common.collect.RegularImmutableList -> com.google.common.collect.iR:
    com.google.common.collect.ImmutableList EMPTY -> a
    java.lang.Object[] array -> b
    36:38:void <init>(java.lang.Object[]) -> <init>
    42:42:int size() -> size
    47:47:boolean isPartialView() -> a
    52:52:java.lang.Object[] internalArray() -> d
    57:57:int internalArrayStart() -> e
    62:62:int internalArrayEnd() -> f
    67:68:int copyIntoArray(java.lang.Object[],int) -> a
    75:75:java.lang.Object get(int) -> get
    83:83:com.google.common.collect.UnmodifiableListIterator listIterator(int) -> listIterator
    88:88:java.util.Spliterator spliterator() -> spliterator
    29:29:java.util.ListIterator listIterator(int) -> listIterator
    32:32:void <clinit>() -> <clinit>
com.google.common.collect.RegularImmutableMap -> com.google.common.collect.iS:
    com.google.common.collect.ImmutableMap EMPTY -> b
    java.util.Map$Entry[] entries -> c
    com.google.common.collect.ImmutableMapEntry[] table -> d
    int mask -> e
    long serialVersionUID -> serialVersionUID
    73:73:com.google.common.collect.ImmutableMap fromEntries(java.util.Map$Entry[]) -> a
    82:116:com.google.common.collect.ImmutableMap fromEntryArray(int,java.util.Map$Entry[]) -> a
    121:123:com.google.common.collect.ImmutableMapEntry makeImmutable(java.util.Map$Entry,java.lang.Object,java.lang.Object) -> a
    128:128:com.google.common.collect.ImmutableMapEntry makeImmutable(java.util.Map$Entry) -> a
    131:135:void <init>(java.util.Map$Entry[],com.google.common.collect.ImmutableMapEntry[],int) -> <init>
    144:149:int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry) -> a
    154:154:java.lang.Object get(java.lang.Object) -> get
    159:178:java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int) -> a
    183:187:void forEach(java.util.function.BiConsumer) -> forEach
    191:191:int size() -> size
    196:196:boolean isPartialView() -> b
    201:201:com.google.common.collect.ImmutableSet createEntrySet() -> g
    206:206:com.google.common.collect.ImmutableSet createKeySet() -> c
    261:261:com.google.common.collect.ImmutableCollection createValues() -> a
    43:43:void <clinit>() -> <clinit>
com.google.common.collect.RegularImmutableMap$KeySet -> com.google.common.collect.iT:
    com.google.common.collect.RegularImmutableMap map -> a
    213:215:void <init>(com.google.common.collect.RegularImmutableMap) -> <init>
    219:219:java.lang.Object get(int) -> a
    224:224:boolean contains(java.lang.Object) -> contains
    229:229:boolean isPartialView() -> a
    234:234:int size() -> size
    240:240:java.lang.Object writeReplace() -> writeReplace
com.google.common.collect.RegularImmutableMap$KeySet$SerializedForm -> com.google.common.collect.iU:
    com.google.common.collect.ImmutableMap map -> a
    long serialVersionUID -> serialVersionUID
    247:249:void <init>(com.google.common.collect.ImmutableMap) -> <init>
    252:252:java.lang.Object readResolve() -> readResolve
com.google.common.collect.RegularImmutableMap$Values -> com.google.common.collect.iV:
    com.google.common.collect.RegularImmutableMap map -> a
    268:270:void <init>(com.google.common.collect.RegularImmutableMap) -> <init>
    274:274:java.lang.Object get(int) -> get
    279:279:int size() -> size
    284:284:boolean isPartialView() -> a
    290:290:java.lang.Object writeReplace() -> writeReplace
com.google.common.collect.RegularImmutableMap$Values$SerializedForm -> com.google.common.collect.iW:
    com.google.common.collect.ImmutableMap map -> a
    long serialVersionUID -> serialVersionUID
    297:299:void <init>(com.google.common.collect.ImmutableMap) -> <init>
    302:302:java.lang.Object readResolve() -> readResolve
com.google.common.collect.RegularImmutableMultiset -> com.google.common.collect.iX:
    com.google.common.collect.ImmutableMultiset EMPTY -> a
    com.google.common.collect.Multisets$ImmutableEntry[] entries -> b
    com.google.common.collect.Multisets$ImmutableEntry[] hashTable -> c
    int size -> d
    int hashCode -> e
    com.google.common.collect.ImmutableSet elementSet -> f
    41:81:com.google.common.collect.ImmutableMultiset create(java.util.Collection) -> b
    85:96:boolean hashFloodingDetected(com.google.common.collect.Multisets$ImmutableEntry[]) -> a
    130:136:void <init>(com.google.common.collect.Multisets$ImmutableEntry[],com.google.common.collect.Multisets$ImmutableEntry[],int,int,com.google.common.collect.ImmutableSet) -> <init>
    154:154:boolean isPartialView() -> a
    159:172:int count(java.lang.Object) -> count
    177:177:int size() -> size
    182:183:com.google.common.collect.ImmutableSet elementSet() -> elementSet
    188:188:com.google.common.collect.Multiset$Entry getEntry(int) -> a
    193:193:int hashCode() -> hashCode
    35:35:java.util.Set elementSet() -> elementSet
    38:38:void <clinit>() -> <clinit>
com.google.common.collect.RegularImmutableMultiset$NonTerminalEntry -> com.google.common.collect.iY:
    com.google.common.collect.Multisets$ImmutableEntry nextInBucket -> a
    142:144:void <init>(java.lang.Object,int,com.google.common.collect.Multisets$ImmutableEntry) -> <init>
    148:148:com.google.common.collect.Multisets$ImmutableEntry nextInBucket() -> a
com.google.common.collect.RegularImmutableSet -> com.google.common.collect.iZ:
    com.google.common.collect.RegularImmutableSet EMPTY -> a
    java.lang.Object[] elements -> b
    java.lang.Object[] table -> c
    int mask -> d
    int hashCode -> e
    43:48:void <init>(java.lang.Object[],int,java.lang.Object[],int) -> <init>
    52:62:boolean contains(java.lang.Object) -> contains
    69:69:int size() -> size
    74:74:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    79:79:java.util.Spliterator spliterator() -> spliterator
    84:84:java.lang.Object[] internalArray() -> d
    89:89:int internalArrayStart() -> e
    94:94:int internalArrayEnd() -> f
    99:100:int copyIntoArray(java.lang.Object[],int) -> a
    105:105:com.google.common.collect.ImmutableList createAsList() -> g
    110:110:boolean isPartialView() -> a
    115:115:int hashCode() -> hashCode
    120:120:boolean isHashCodeFast() -> c
    30:30:java.util.Iterator iterator() -> iterator
    33:33:void <clinit>() -> <clinit>
com.google.common.collect.RegularImmutableSortedMultiset -> com.google.common.collect.ja:
    long[] ZERO_CUMULATIVE_COUNTS -> b
    com.google.common.collect.ImmutableSortedMultiset NATURAL_EMPTY_MULTISET -> a
    com.google.common.collect.RegularImmutableSortedSet elementSet -> c
    long[] cumulativeCounts -> d
    int offset -> e
    int length -> f
    46:51:void <init>(java.util.Comparator) -> <init>
    54:59:void <init>(com.google.common.collect.RegularImmutableSortedSet,long[],int,int) -> <init>
    62:62:int getCount(int) -> b
    67:67:com.google.common.collect.Multiset$Entry getEntry(int) -> a
    72:76:void forEachEntry(java.util.function.ObjIntConsumer) -> forEachEntry
    80:80:com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    85:85:com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    90:91:int count(java.lang.Object) -> count
    96:97:int size() -> size
    102:102:com.google.common.collect.ImmutableSortedSet elementSet() -> elementSet
    107:107:com.google.common.collect.ImmutableSortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    112:113:com.google.common.collect.ImmutableSortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    117:124:com.google.common.collect.ImmutableSortedMultiset getSubMultiset(int,int) -> a
    131:131:boolean isPartialView() -> a
    33:33:com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    33:33:com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    33:33:java.util.NavigableSet elementSet() -> elementSet
    33:33:java.util.SortedSet elementSet() -> elementSet
    33:33:java.util.Set elementSet() -> elementSet
    33:33:com.google.common.collect.ImmutableSet elementSet() -> elementSet
    36:39:void <clinit>() -> <clinit>
com.google.common.collect.RegularImmutableSortedSet -> com.google.common.collect.jb:
    com.google.common.collect.RegularImmutableSortedSet NATURAL_EMPTY_SET -> a
    com.google.common.collect.ImmutableList elements -> c
    49:51:void <init>(com.google.common.collect.ImmutableList,java.util.Comparator) -> <init>
    55:55:java.lang.Object[] internalArray() -> d
    60:60:int internalArrayStart() -> e
    65:65:int internalArrayEnd() -> f
    70:70:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    76:76:com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    81:81:java.util.Spliterator spliterator() -> spliterator
    86:87:void forEach(java.util.function.Consumer) -> forEach
    91:91:int size() -> size
    97:99:boolean contains(java.lang.Object) -> contains
    109:151:boolean containsAll(java.util.Collection) -> containsAll
    156:156:int unsafeBinarySearch(java.lang.Object) -> b
    161:161:boolean isPartialView() -> a
    166:166:int copyIntoArray(java.lang.Object[],int) -> a
    171:203:boolean equals(java.lang.Object) -> equals
    208:211:java.lang.Object first() -> first
    216:219:java.lang.Object last() -> last
    224:225:java.lang.Object lower(java.lang.Object) -> lower
    230:231:java.lang.Object floor(java.lang.Object) -> floor
    236:237:java.lang.Object ceiling(java.lang.Object) -> ceiling
    242:243:java.lang.Object higher(java.lang.Object) -> higher
    248:248:com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> b
    252:256:int headIndex(java.lang.Object,boolean) -> c
    263:263:com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> a
    268:268:com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> a
    272:276:int tailIndex(java.lang.Object,boolean) -> d
    285:285:java.util.Comparator unsafeComparator() -> h
    289:295:com.google.common.collect.RegularImmutableSortedSet getSubSet(int,int) -> a
    301:310:int indexOf(java.lang.Object) -> a
    315:315:com.google.common.collect.ImmutableList createAsList() -> g
    320:323:com.google.common.collect.ImmutableSortedSet createDescendingSet() -> b
    40:40:java.util.Iterator descendingIterator() -> descendingIterator
    40:40:java.util.Iterator iterator() -> iterator
    43:44:void <clinit>() -> <clinit>
com.google.common.collect.RegularImmutableTable -> com.google.common.collect.jc:
    36:36:void <init>() -> <init>
    com.google.common.collect.Table$Cell getCell(int) -> a
    42:42:com.google.common.collect.ImmutableSet createCellSet() -> h
    java.lang.Object getValue(int) -> b
    77:77:com.google.common.collect.ImmutableCollection createValues() -> i
    102:129:com.google.common.collect.RegularImmutableTable forCells(java.util.List,java.util.Comparator,java.util.Comparator) -> a
    140:157:com.google.common.collect.RegularImmutableTable forCellsInternal(java.lang.Iterable,java.util.Comparator,java.util.Comparator) -> a
    167:167:com.google.common.collect.RegularImmutableTable forOrderedComponents(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet) -> a
    178:185:void checkNoDuplicate(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    34:34:java.util.Collection createValues() -> d
    34:34:java.util.Set createCellSet() -> a
com.google.common.collect.RegularImmutableTable$1 -> com.google.common.collect.jd:
    java.util.Comparator val$rowComparator -> a
    java.util.Comparator val$columnComparator -> b
    112:112:void <init>(java.util.Comparator,java.util.Comparator) -> <init>
    115:124:int compare(com.google.common.collect.Table$Cell,com.google.common.collect.Table$Cell) -> a
    112:112:int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.RegularImmutableTable$CellSet -> com.google.common.collect.je:
    com.google.common.collect.RegularImmutableTable this$0 -> a
    46:46:void <init>(com.google.common.collect.RegularImmutableTable) -> <init>
    49:49:int size() -> size
    54:54:com.google.common.collect.Table$Cell get(int) -> d
    59:64:boolean contains(java.lang.Object) -> contains
    69:69:boolean isPartialView() -> a
    45:45:java.lang.Object get(int) -> a
    46:46:void <init>(com.google.common.collect.RegularImmutableTable,byte) -> <init>
com.google.common.collect.RegularImmutableTable$Values -> com.google.common.collect.jf:
    com.google.common.collect.RegularImmutableTable this$0 -> a
    81:81:void <init>(com.google.common.collect.RegularImmutableTable) -> <init>
    84:84:int size() -> size
    89:89:java.lang.Object get(int) -> get
    94:94:boolean isPartialView() -> a
    81:81:void <init>(com.google.common.collect.RegularImmutableTable,byte) -> <init>
com.google.common.collect.ReverseNaturalOrdering -> com.google.common.collect.jg:
    com.google.common.collect.ReverseNaturalOrdering INSTANCE -> a
    long serialVersionUID -> serialVersionUID
    33:38:int compare(java.lang.Comparable,java.lang.Comparable) -> a
    43:43:com.google.common.collect.Ordering reverse() -> reverse
    50:50:java.lang.Comparable min(java.lang.Comparable,java.lang.Comparable) -> b
    55:55:java.lang.Comparable min(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable[]) -> a
    60:60:java.lang.Comparable min(java.util.Iterator) -> a
    65:65:java.lang.Comparable min(java.lang.Iterable) -> a
    70:70:java.lang.Comparable max(java.lang.Comparable,java.lang.Comparable) -> c
    75:75:java.lang.Comparable max(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable[]) -> b
    80:80:java.lang.Comparable max(java.util.Iterator) -> b
    85:85:java.lang.Comparable max(java.lang.Iterable) -> b
    90:90:java.lang.Object readResolve() -> readResolve
    95:95:java.lang.String toString() -> toString
    98:98:void <init>() -> <init>
    26:26:java.lang.Object max(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> max
    26:26:java.lang.Object max(java.lang.Object,java.lang.Object) -> max
    26:26:java.lang.Object max(java.lang.Iterable) -> max
    26:26:java.lang.Object max(java.util.Iterator) -> max
    26:26:java.lang.Object min(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> min
    26:26:java.lang.Object min(java.lang.Object,java.lang.Object) -> min
    26:26:java.lang.Object min(java.lang.Iterable) -> min
    26:26:java.lang.Object min(java.util.Iterator) -> min
    26:26:int compare(java.lang.Object,java.lang.Object) -> compare
    29:29:void <clinit>() -> <clinit>
com.google.common.collect.ReverseOrdering -> com.google.common.collect.jh:
    com.google.common.collect.Ordering forwardOrder -> a
    long serialVersionUID -> serialVersionUID
    31:33:void <init>(com.google.common.collect.Ordering) -> <init>
    37:37:int compare(java.lang.Object,java.lang.Object) -> compare
    43:43:com.google.common.collect.Ordering reverse() -> reverse
    50:50:java.lang.Object min(java.lang.Object,java.lang.Object) -> min
    55:55:java.lang.Object min(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> min
    60:60:java.lang.Object min(java.util.Iterator) -> min
    65:65:java.lang.Object min(java.lang.Iterable) -> min
    70:70:java.lang.Object max(java.lang.Object,java.lang.Object) -> max
    75:75:java.lang.Object max(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> max
    80:80:java.lang.Object max(java.util.Iterator) -> max
    85:85:java.lang.Object max(java.lang.Iterable) -> max
    90:90:int hashCode() -> hashCode
    95:102:boolean equals(java.lang.Object) -> equals
    107:107:java.lang.String toString() -> toString
com.google.common.collect.RowSortedTable -> com.google.common.collect.RowSortedTable:
    java.util.SortedSet rowKeySet() -> rowKeySet
    java.util.SortedMap rowMap() -> rowMap
    35:35:java.util.Map rowMap() -> rowMap
    35:35:java.util.Set rowKeySet() -> rowKeySet
com.google.common.collect.Serialization -> com.google.common.collect.ji:
    47:47:int readCount(java.io.ObjectInputStream) -> a
    58:63:void writeMap(java.util.Map,java.io.ObjectOutputStream) -> a
    71:73:void populateMap(java.util.Map,java.io.ObjectInputStream) -> a
    81:88:void populateMap(java.util.Map,java.io.ObjectInputStream,int) -> a
    99:105:void writeMultiset(com.google.common.collect.Multiset,java.io.ObjectOutputStream) -> a
    113:115:void populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream) -> a
    125:131:void populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream,int) -> a
    143:151:void writeMultimap(com.google.common.collect.Multimap,java.io.ObjectOutputStream) -> a
    159:161:void populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream) -> a
    171:182:void populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream,int) -> a
    187:190:com.google.common.collect.Serialization$FieldSetter getFieldSetter(java.lang.Class,java.lang.String) -> a
com.google.common.collect.Serialization$FieldSetter -> com.google.common.collect.jj:
    java.lang.reflect.Field field -> a
    198:201:void <init>(java.lang.reflect.Field) -> <init>
    205:209:void set(java.lang.Object,java.lang.Object) -> a
    213:217:void set(java.lang.Object,int) -> a
    195:195:void <init>(java.lang.reflect.Field,byte) -> <init>
com.google.common.collect.SetMultimap -> com.google.common.collect.SetMultimap:
    java.util.Set get(java.lang.Object) -> get
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set entries() -> entries
    java.util.Map asMap() -> asMap
    boolean equals(java.lang.Object) -> equals
    51:51:java.util.Collection entries() -> entries
    51:51:java.util.Collection get(java.lang.Object) -> get
    51:51:java.util.Collection removeAll(java.lang.Object) -> removeAll
    51:51:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.Sets -> com.google.common.collect.Sets:
    71:71:void <init>() -> <init>
    104:104:com.google.common.collect.ImmutableSet immutableEnumSet(java.lang.Enum,java.lang.Enum[]) -> immutableEnumSet
    120:136:com.google.common.collect.ImmutableSet immutableEnumSet(java.lang.Iterable) -> immutableEnumSet
    185:185:java.util.stream.Collector toImmutableEnumSet() -> toImmutableEnumSet
    195:197:java.util.EnumSet newEnumSet(java.lang.Iterable,java.lang.Class) -> newEnumSet
    215:215:java.util.HashSet newHashSet() -> newHashSet
    232:234:java.util.HashSet newHashSet(java.lang.Object[]) -> newHashSet
    256:258:java.util.HashSet newHashSet(java.lang.Iterable) -> newHashSet
    274:276:java.util.HashSet newHashSet(java.util.Iterator) -> newHashSet
    292:292:java.util.HashSet newHashSetWithExpectedSize(int) -> newHashSetWithExpectedSize
    306:306:java.util.Set newConcurrentHashSet() -> newConcurrentHashSet
    323:325:java.util.Set newConcurrentHashSet(java.lang.Iterable) -> newConcurrentHashSet
    342:342:java.util.LinkedHashSet newLinkedHashSet() -> newLinkedHashSet
    361:366:java.util.LinkedHashSet newLinkedHashSet(java.lang.Iterable) -> newLinkedHashSet
    382:382:java.util.LinkedHashSet newLinkedHashSetWithExpectedSize(int) -> newLinkedHashSetWithExpectedSize
    400:400:java.util.TreeSet newTreeSet() -> newTreeSet
    425:427:java.util.TreeSet newTreeSet(java.lang.Iterable) -> newTreeSet
    447:447:java.util.TreeSet newTreeSet(java.util.Comparator) -> newTreeSet
    460:460:java.util.Set newIdentityHashSet() -> newIdentityHashSet
    474:474:java.util.concurrent.CopyOnWriteArraySet newCopyOnWriteArraySet() -> newCopyOnWriteArraySet
    488:492:java.util.concurrent.CopyOnWriteArraySet newCopyOnWriteArraySet(java.lang.Iterable) -> newCopyOnWriteArraySet
    509:515:java.util.EnumSet complementOf(java.util.Collection) -> complementOf
    530:533:java.util.EnumSet complementOf(java.util.Collection,java.lang.Class) -> complementOf
    538:540:java.util.EnumSet makeComplementByHand(java.util.Collection,java.lang.Class) -> a
    574:574:java.util.Set newSetFromMap(java.util.Map) -> newSetFromMap
    726:729:com.google.common.collect.Sets$SetView union(java.util.Set,java.util.Set) -> union
    825:828:com.google.common.collect.Sets$SetView intersection(java.util.Set,java.util.Set) -> intersection
    896:899:com.google.common.collect.Sets$SetView difference(java.util.Set,java.util.Set) -> difference
    964:967:com.google.common.collect.Sets$SetView symmetricDifference(java.util.Set,java.util.Set) -> symmetricDifference
    1048:1059:java.util.Set filter(java.util.Set,com.google.common.base.Predicate) -> filter
    1087:1095:java.util.SortedSet filter(java.util.SortedSet,com.google.common.base.Predicate) -> filter
    1126:1134:java.util.NavigableSet filter(java.util.NavigableSet,com.google.common.base.Predicate) -> filter
    1326:1326:java.util.Set cartesianProduct(java.util.List) -> cartesianProduct
    1384:1384:java.util.Set cartesianProduct(java.util.Set[]) -> cartesianProduct
    1492:1492:java.util.Set powerSet(java.util.Set) -> powerSet
    1628:1636:java.util.Set combinations(java.util.Set,int) -> combinations
    1727:1734:int hashCodeImpl(java.util.Set) -> a
    1739:1751:boolean equalsImpl(java.util.Set,java.lang.Object) -> a
    1768:1771:java.util.NavigableSet unmodifiableNavigableSet(java.util.NavigableSet) -> unmodifiableNavigableSet
    1925:1925:java.util.NavigableSet synchronizedNavigableSet(java.util.NavigableSet) -> synchronizedNavigableSet
    1930:1934:boolean removeAllImpl(java.util.Set,java.util.Iterator) -> a
    1938:1952:boolean removeAllImpl(java.util.Set,java.util.Collection) -> a
    2107:2126:java.util.NavigableSet subSet(java.util.NavigableSet,com.google.common.collect.Range) -> subSet
com.google.common.collect.Sets$1 -> com.google.common.collect.jk:
    java.util.Set val$set1 -> a
    java.util.Set val$set2 -> b
    729:729:void <init>(java.util.Set,java.util.Set) -> <init>
    732:738:int size() -> size
    743:743:boolean isEmpty() -> isEmpty
    748:748:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    770:770:java.util.stream.Stream stream() -> stream
    775:775:java.util.stream.Stream parallelStream() -> parallelStream
    780:780:boolean contains(java.lang.Object) -> contains
    785:787:java.util.Set copyInto(java.util.Set) -> copyInto
    792:792:com.google.common.collect.ImmutableSet immutableCopy() -> immutableCopy
    729:729:java.util.Iterator iterator() -> iterator
    770:770:boolean lambda$stream$0(java.util.Set,java.lang.Object) -> a
com.google.common.collect.Sets$1$1 -> com.google.common.collect.jl:
    java.util.Iterator itr1 -> a
    java.util.Iterator itr2 -> b
    com.google.common.collect.Sets$1 this$0 -> c
    748:750:void <init>(com.google.common.collect.Sets$1) -> <init>
    754:763:java.lang.Object computeNext() -> computeNext
com.google.common.collect.Sets$2 -> com.google.common.collect.jm:
    java.util.Set val$set1 -> a
    java.util.Set val$set2 -> b
    828:828:void <init>(java.util.Set,java.util.Set) -> <init>
    831:831:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    849:849:java.util.stream.Stream stream() -> stream
    854:854:java.util.stream.Stream parallelStream() -> parallelStream
    859:865:int size() -> size
    870:870:boolean isEmpty() -> isEmpty
    875:875:boolean contains(java.lang.Object) -> contains
    880:880:boolean containsAll(java.util.Collection) -> containsAll
    828:828:java.util.Iterator iterator() -> iterator
com.google.common.collect.Sets$2$1 -> com.google.common.collect.jn:
    java.util.Iterator itr -> a
    com.google.common.collect.Sets$2 this$0 -> b
    831:832:void <init>(com.google.common.collect.Sets$2) -> <init>
    836:842:java.lang.Object computeNext() -> computeNext
com.google.common.collect.Sets$3 -> com.google.common.collect.jo:
    java.util.Set val$set1 -> a
    java.util.Set val$set2 -> b
    899:899:void <init>(java.util.Set,java.util.Set) -> <init>
    902:902:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    920:920:java.util.stream.Stream stream() -> stream
    925:925:java.util.stream.Stream parallelStream() -> parallelStream
    930:936:int size() -> size
    941:941:boolean isEmpty() -> isEmpty
    946:946:boolean contains(java.lang.Object) -> contains
    899:899:java.util.Iterator iterator() -> iterator
    925:925:boolean lambda$parallelStream$1(java.util.Set,java.lang.Object) -> a
    920:920:boolean lambda$stream$0(java.util.Set,java.lang.Object) -> b
com.google.common.collect.Sets$3$1 -> com.google.common.collect.jp:
    java.util.Iterator itr -> a
    com.google.common.collect.Sets$3 this$0 -> b
    902:903:void <init>(com.google.common.collect.Sets$3) -> <init>
    907:913:java.lang.Object computeNext() -> computeNext
com.google.common.collect.Sets$4 -> com.google.common.collect.jq:
    java.util.Set val$set1 -> a
    java.util.Set val$set2 -> b
    967:967:void <init>(java.util.Set,java.util.Set) -> <init>
    970:972:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    994:1005:int size() -> size
    1010:1010:boolean isEmpty() -> isEmpty
    1015:1015:boolean contains(java.lang.Object) -> contains
    967:967:java.util.Iterator iterator() -> iterator
com.google.common.collect.Sets$4$1 -> com.google.common.collect.jr:
    java.util.Iterator val$itr1 -> a
    java.util.Iterator val$itr2 -> b
    com.google.common.collect.Sets$4 this$0 -> c
    972:972:void <init>(com.google.common.collect.Sets$4,java.util.Iterator,java.util.Iterator) -> <init>
    975:987:java.lang.Object computeNext() -> computeNext
com.google.common.collect.Sets$5 -> com.google.common.collect.js:
    int val$size -> a
    com.google.common.collect.ImmutableMap val$index -> b
    1636:1636:void <init>(int,com.google.common.collect.ImmutableMap) -> <init>
    1639:1643:boolean contains(java.lang.Object) -> contains
    1648:1648:java.util.Iterator iterator() -> iterator
    1715:1715:int size() -> size
    1720:1720:java.lang.String toString() -> toString
com.google.common.collect.Sets$5$1 -> com.google.common.collect.jt:
    java.util.BitSet bits -> b
    com.google.common.collect.Sets$5 this$0 -> a
    1648:1649:void <init>(com.google.common.collect.Sets$5) -> <init>
    1653:1681:java.util.Set computeNext() -> a
    1648:1648:java.lang.Object computeNext() -> computeNext
com.google.common.collect.Sets$5$1$1 -> com.google.common.collect.ju:
    java.util.BitSet val$copy -> a
    com.google.common.collect.Sets$5$1 this$1 -> b
    1681:1681:void <init>(com.google.common.collect.Sets$5$1,java.util.BitSet) -> <init>
    1684:1685:boolean contains(java.lang.Object) -> contains
    1690:1690:java.util.Iterator iterator() -> iterator
    1706:1706:int size() -> size
com.google.common.collect.Sets$5$1$1$1 -> com.google.common.collect.jv:
    int i -> a
    com.google.common.collect.Sets$5$1$1 this$2 -> b
    1690:1691:void <init>(com.google.common.collect.Sets$5$1$1) -> <init>
    1695:1699:java.lang.Object computeNext() -> computeNext
com.google.common.collect.Sets$Accumulator -> com.google.common.collect.jw:
    java.util.stream.Collector TO_IMMUTABLE_ENUM_SET -> a
    java.util.EnumSet set -> b
    141:141:void <init>() -> <init>
    154:159:void add(java.lang.Enum) -> a
    162:168:com.google.common.collect.Sets$Accumulator combine(com.google.common.collect.Sets$Accumulator) -> a
    173:173:com.google.common.collect.ImmutableSet toImmutableSet() -> a
    142:144:void <clinit>() -> <clinit>
com.google.common.collect.Sets$CartesianSet -> com.google.common.collect.jx:
    com.google.common.collect.ImmutableList axes -> a
    com.google.common.collect.CartesianList delegate -> b
    1393:1419:java.util.Set create(java.util.List) -> a
    1422:1425:void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.CartesianList) -> <init>
    1429:1429:java.util.Collection delegate() -> delegate
    1436:1440:boolean equals(java.lang.Object) -> equals
    1449:1462:int hashCode() -> hashCode
    1387:1387:java.lang.Object delegate() -> delegate
com.google.common.collect.Sets$CartesianSet$1 -> com.google.common.collect.jy:
    com.google.common.collect.ImmutableList val$axes -> a
    1403:1403:void <init>(com.google.common.collect.ImmutableList) -> <init>
    1406:1406:int size() -> size
    1411:1411:java.util.List get(int) -> a
    1416:1416:boolean isPartialView() -> a
    1403:1403:java.lang.Object get(int) -> get
com.google.common.collect.Sets$DescendingSet -> com.google.common.collect.jz:
    java.util.NavigableSet forward -> a
    1960:1962:void <init>(java.util.NavigableSet) -> <init>
    1966:1966:java.util.NavigableSet delegate() -> delegate
    1971:1971:java.lang.Object lower(java.lang.Object) -> lower
    1976:1976:java.lang.Object floor(java.lang.Object) -> floor
    1981:1981:java.lang.Object ceiling(java.lang.Object) -> ceiling
    1986:1986:java.lang.Object higher(java.lang.Object) -> higher
    1991:1991:java.lang.Object pollFirst() -> pollFirst
    1996:1996:java.lang.Object pollLast() -> pollLast
    2001:2001:java.util.NavigableSet descendingSet() -> descendingSet
    2006:2006:java.util.Iterator descendingIterator() -> descendingIterator
    2012:2012:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    2017:2017:java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    2022:2022:java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    2027:2027:java.util.SortedSet headSet(java.lang.Object) -> headSet
    2032:2032:java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    2037:2037:java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    2043:2047:java.util.Comparator comparator() -> comparator
    2053:2053:com.google.common.collect.Ordering reverse(java.util.Comparator) -> a
    2058:2058:java.lang.Object first() -> first
    2063:2063:java.lang.Object last() -> last
    2068:2068:java.util.Iterator iterator() -> iterator
    2073:2073:java.lang.Object[] toArray() -> toArray
    2078:2078:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    2083:2083:java.lang.String toString() -> toString
    1956:1956:java.util.SortedSet delegate() -> delegate
    1956:1956:java.util.Set delegate() -> delegate
    1956:1956:java.util.Collection delegate() -> delegate
    1956:1956:java.lang.Object delegate() -> delegate
com.google.common.collect.Sets$FilteredNavigableSet -> com.google.common.collect.jA:
    1202:1203:void <init>(java.util.NavigableSet,com.google.common.base.Predicate) -> <init>
    1206:1206:java.util.NavigableSet unfiltered() -> a
    1211:1211:java.lang.Object lower(java.lang.Object) -> lower
    1216:1216:java.lang.Object floor(java.lang.Object) -> floor
    1221:1221:java.lang.Object ceiling(java.lang.Object) -> ceiling
    1226:1226:java.lang.Object higher(java.lang.Object) -> higher
    1231:1231:java.lang.Object pollFirst() -> pollFirst
    1236:1236:java.lang.Object pollLast() -> pollLast
    1241:1241:java.util.NavigableSet descendingSet() -> descendingSet
    1246:1246:java.util.Iterator descendingIterator() -> descendingIterator
    1251:1251:java.lang.Object last() -> last
    1257:1258:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    1263:1263:java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    1268:1268:java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
com.google.common.collect.Sets$FilteredSet -> com.google.common.collect.jB:
    1139:1140:void <init>(java.util.Set,com.google.common.base.Predicate) -> <init>
    1144:1144:boolean equals(java.lang.Object) -> equals
    1149:1149:int hashCode() -> hashCode
com.google.common.collect.Sets$FilteredSortedSet -> com.google.common.collect.jC:
    1156:1157:void <init>(java.util.SortedSet,com.google.common.base.Predicate) -> <init>
    1161:1161:java.util.Comparator comparator() -> comparator
    1166:1167:java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    1172:1172:java.util.SortedSet headSet(java.lang.Object) -> headSet
    1177:1177:java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    1182:1182:java.lang.Object first() -> first
    1187:1194:java.lang.Object last() -> last
com.google.common.collect.Sets$ImprovedAbstractSet -> com.google.common.collect.jD:
    77:77:void <init>() -> <init>
    80:80:boolean removeAll(java.util.Collection) -> removeAll
    85:85:boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Sets$PowerSet -> com.google.common.collect.jE:
    com.google.common.collect.ImmutableMap inputSet -> a
    1542:1546:void <init>(java.util.Set) -> <init>
    1550:1550:int size() -> size
    1555:1555:boolean isEmpty() -> isEmpty
    1560:1560:java.util.Iterator iterator() -> iterator
    1570:1574:boolean contains(java.lang.Object) -> contains
    1579:1583:boolean equals(java.lang.Object) -> equals
    1593:1593:int hashCode() -> hashCode
    1598:1598:java.lang.String toString() -> toString
com.google.common.collect.Sets$PowerSet$1 -> com.google.common.collect.jF:
    com.google.common.collect.Sets$PowerSet this$0 -> a
    1560:1560:void <init>(com.google.common.collect.Sets$PowerSet,int) -> <init>
    1563:1563:java.util.Set get(int) -> b
    1560:1560:java.lang.Object get(int) -> a
com.google.common.collect.Sets$SetView -> com.google.common.collect.Sets$SetView:
    587:587:void <init>() -> <init>
    598:598:com.google.common.collect.ImmutableSet immutableCopy() -> immutableCopy
    612:613:java.util.Set copyInto(java.util.Set) -> copyInto
    626:626:boolean add(java.lang.Object) -> add
    639:639:boolean remove(java.lang.Object) -> remove
    652:652:boolean addAll(java.util.Collection) -> addAll
    665:665:boolean removeAll(java.util.Collection) -> removeAll
    678:678:boolean removeIf(java.util.function.Predicate) -> removeIf
    691:691:boolean retainAll(java.util.Collection) -> retainAll
    703:703:void clear() -> clear
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    586:586:java.util.Iterator iterator() -> iterator
    586:586:void <init>(byte) -> <init>
com.google.common.collect.Sets$SubSet -> com.google.common.collect.jG:
    com.google.common.collect.ImmutableMap inputSet -> a
    int mask -> b
    1499:1502:void <init>(com.google.common.collect.ImmutableMap,int) -> <init>
    1506:1506:java.util.Iterator iterator() -> iterator
    1529:1529:int size() -> size
    1534:1535:boolean contains(java.lang.Object) -> contains
    1495:1495:com.google.common.collect.ImmutableMap access$100(com.google.common.collect.Sets$SubSet) -> a
    1495:1495:int access$200(com.google.common.collect.Sets$SubSet) -> b
com.google.common.collect.Sets$SubSet$1 -> com.google.common.collect.jH:
    com.google.common.collect.ImmutableList elements -> a
    int remainingSetBits -> b
    com.google.common.collect.Sets$SubSet this$0 -> c
    1506:1508:void <init>(com.google.common.collect.Sets$SubSet) -> <init>
    1512:1512:boolean hasNext() -> hasNext
    1517:1522:java.lang.Object next() -> next
com.google.common.collect.Sets$UnmodifiableNavigableSet -> com.google.common.collect.jI:
    java.util.NavigableSet delegate -> a
    java.util.SortedSet unmodifiableDelegate -> b
    com.google.common.collect.Sets$UnmodifiableNavigableSet descendingSet -> c
    long serialVersionUID -> serialVersionUID
    1779:1782:void <init>(java.util.NavigableSet) -> <init>
    1786:1786:java.util.SortedSet delegate() -> delegate
    1793:1793:boolean removeIf(java.util.function.Predicate) -> removeIf
    1798:1798:java.util.stream.Stream stream() -> stream
    1803:1803:java.util.stream.Stream parallelStream() -> parallelStream
    1808:1809:void forEach(java.util.function.Consumer) -> forEach
    1813:1813:java.lang.Object lower(java.lang.Object) -> lower
    1818:1818:java.lang.Object floor(java.lang.Object) -> floor
    1823:1823:java.lang.Object ceiling(java.lang.Object) -> ceiling
    1828:1828:java.lang.Object higher(java.lang.Object) -> higher
    1833:1833:java.lang.Object pollFirst() -> pollFirst
    1838:1838:java.lang.Object pollLast() -> pollLast
    1845:1850:java.util.NavigableSet descendingSet() -> descendingSet
    1855:1855:java.util.Iterator descendingIterator() -> descendingIterator
    1861:1862:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    1867:1867:java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    1872:1872:java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    1774:1774:java.util.Set delegate() -> delegate
    1774:1774:java.util.Collection delegate() -> delegate
    1774:1774:java.lang.Object delegate() -> delegate
com.google.common.collect.SingletonImmutableBiMap -> com.google.common.collect.jJ:
    java.lang.Object singleKey -> b
    java.lang.Object singleValue -> c
    com.google.common.collect.ImmutableBiMap inverse -> d
    41:45:void <init>(java.lang.Object,java.lang.Object) -> <init>
    47:51:void <init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableBiMap) -> <init>
    55:55:java.lang.Object get(java.lang.Object) -> get
    60:60:int size() -> size
    65:66:void forEach(java.util.function.BiConsumer) -> forEach
    70:70:boolean containsKey(java.lang.Object) -> containsKey
    75:75:boolean containsValue(java.lang.Object) -> containsValue
    80:80:boolean isPartialView() -> b
    85:85:com.google.common.collect.ImmutableSet createEntrySet() -> g
    90:90:com.google.common.collect.ImmutableSet createKeySet() -> c
    98:102:com.google.common.collect.ImmutableBiMap inverse() -> inverse
    34:34:com.google.common.collect.BiMap inverse() -> inverse
com.google.common.collect.SingletonImmutableList -> com.google.common.collect.jK:
    java.lang.Object element -> a
    37:39:void <init>(java.lang.Object) -> <init>
    43:44:java.lang.Object get(int) -> get
    49:49:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    54:54:java.util.Spliterator spliterator() -> spliterator
    59:59:int size() -> size
    64:65:com.google.common.collect.ImmutableList subList(int,int) -> subList
    70:70:java.lang.String toString() -> toString
    75:75:boolean isPartialView() -> a
    31:31:java.util.List subList(int,int) -> subList
    31:31:java.util.Iterator iterator() -> iterator
com.google.common.collect.SingletonImmutableSet -> com.google.common.collect.jL:
    java.lang.Object element -> a
    int cachedHashCode -> b
    43:45:void <init>(java.lang.Object) -> <init>
    55:55:int size() -> size
    60:60:boolean contains(java.lang.Object) -> contains
    65:65:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    70:70:com.google.common.collect.ImmutableList createAsList() -> g
    75:75:boolean isPartialView() -> a
    80:81:int copyIntoArray(java.lang.Object[],int) -> a
    87:91:int hashCode() -> hashCode
    96:96:boolean isHashCodeFast() -> c
    101:101:java.lang.String toString() -> toString
    29:29:java.util.Iterator iterator() -> iterator
com.google.common.collect.SingletonImmutableTable -> com.google.common.collect.jM:
    java.lang.Object singleRowKey -> a
    java.lang.Object singleColumnKey -> b
    java.lang.Object singleValue -> c
    35:39:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    42:43:void <init>(com.google.common.collect.Table$Cell) -> <init>
    47:50:com.google.common.collect.ImmutableMap column(java.lang.Object) -> column
    55:55:com.google.common.collect.ImmutableMap columnMap() -> columnMap
    60:60:com.google.common.collect.ImmutableMap rowMap() -> rowMap
    65:65:int size() -> size
    70:70:com.google.common.collect.ImmutableSet createCellSet() -> h
    75:75:com.google.common.collect.ImmutableCollection createValues() -> i
    80:80:com.google.common.collect.ImmutableTable$SerializedForm createSerializedForm() -> g
    29:29:java.util.Collection createValues() -> d
    29:29:java.util.Set createCellSet() -> a
    29:29:java.util.Map columnMap() -> columnMap
    29:29:java.util.Map rowMap() -> rowMap
    29:29:java.util.Map column(java.lang.Object) -> column
com.google.common.collect.SortedIterable -> com.google.common.collect.jN:
    java.util.Comparator comparator() -> comparator
com.google.common.collect.SortedLists -> com.google.common.collect.jO:
    202:203:int binarySearch(java.util.List,com.google.common.base.Function,java.lang.Comparable,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior) -> a
    220:221:int binarySearch(java.util.List,com.google.common.base.Function,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior) -> a
    253:278:int binarySearch(java.util.List,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior) -> a
com.google.common.collect.SortedLists$KeyAbsentBehavior -> com.google.common.collect.jP:
    com.google.common.collect.SortedLists$KeyAbsentBehavior NEXT_LOWER -> a
    com.google.common.collect.SortedLists$KeyAbsentBehavior NEXT_HIGHER -> b
    com.google.common.collect.SortedLists$KeyAbsentBehavior INVERTED_INSERTION_INDEX -> c
    com.google.common.collect.SortedLists$KeyAbsentBehavior[] $VALUES -> d
    131:131:com.google.common.collect.SortedLists$KeyAbsentBehavior[] values() -> values
    131:131:com.google.common.collect.SortedLists$KeyAbsentBehavior valueOf(java.lang.String) -> valueOf
    131:131:void <init>(java.lang.String,int) -> <init>
    int resultIndex(int) -> a
    131:131:void <init>(java.lang.String,int,byte) -> <init>
    131:164:void <clinit>() -> <clinit>
com.google.common.collect.SortedLists$KeyAbsentBehavior$1 -> com.google.common.collect.jQ:
    136:136:void <init>(java.lang.String,int) -> <init>
    139:139:int resultIndex(int) -> a
com.google.common.collect.SortedLists$KeyAbsentBehavior$2 -> com.google.common.collect.jR:
    146:146:void <init>(java.lang.String,int) -> <init>
    149:149:int resultIndex(int) -> a
com.google.common.collect.SortedLists$KeyAbsentBehavior$3 -> com.google.common.collect.jS:
    164:164:void <init>(java.lang.String,int) -> <init>
    167:167:int resultIndex(int) -> a
com.google.common.collect.SortedLists$KeyPresentBehavior -> com.google.common.collect.jT:
    com.google.common.collect.SortedLists$KeyPresentBehavior ANY_PRESENT -> a
    com.google.common.collect.SortedLists$KeyPresentBehavior LAST_PRESENT -> b
    com.google.common.collect.SortedLists$KeyPresentBehavior FIRST_PRESENT -> c
    com.google.common.collect.SortedLists$KeyPresentBehavior FIRST_AFTER -> d
    com.google.common.collect.SortedLists$KeyPresentBehavior LAST_BEFORE -> e
    com.google.common.collect.SortedLists$KeyPresentBehavior[] $VALUES -> f
    44:44:com.google.common.collect.SortedLists$KeyPresentBehavior[] values() -> values
    44:44:com.google.common.collect.SortedLists$KeyPresentBehavior valueOf(java.lang.String) -> valueOf
    44:44:void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> a
    44:44:void <init>(java.lang.String,int,byte) -> <init>
    44:116:void <clinit>() -> <clinit>
com.google.common.collect.SortedLists$KeyPresentBehavior$1 -> com.google.common.collect.jU:
    49:49:void <init>(java.lang.String,int) -> <init>
    53:53:int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> a
com.google.common.collect.SortedLists$KeyPresentBehavior$2 -> com.google.common.collect.jV:
    57:57:void <init>(java.lang.String,int) -> <init>
    63:75:int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> a
com.google.common.collect.SortedLists$KeyPresentBehavior$3 -> com.google.common.collect.jW:
    79:79:void <init>(java.lang.String,int) -> <init>
    85:98:int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> a
com.google.common.collect.SortedLists$KeyPresentBehavior$4 -> com.google.common.collect.jX:
    105:105:void <init>(java.lang.String,int) -> <init>
    109:109:int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> a
com.google.common.collect.SortedLists$KeyPresentBehavior$5 -> com.google.common.collect.jY:
    116:116:void <init>(java.lang.String,int) -> <init>
    120:120:int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> a
com.google.common.collect.SortedMapDifference -> com.google.common.collect.SortedMapDifference:
    java.util.SortedMap entriesOnlyOnLeft() -> entriesOnlyOnLeft
    java.util.SortedMap entriesOnlyOnRight() -> entriesOnlyOnRight
    java.util.SortedMap entriesInCommon() -> entriesInCommon
    java.util.SortedMap entriesDiffering() -> entriesDiffering
    28:28:java.util.Map entriesDiffering() -> entriesDiffering
    28:28:java.util.Map entriesInCommon() -> entriesInCommon
    28:28:java.util.Map entriesOnlyOnRight() -> entriesOnlyOnRight
    28:28:java.util.Map entriesOnlyOnLeft() -> entriesOnlyOnLeft
com.google.common.collect.SortedMultiset -> com.google.common.collect.SortedMultiset:
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableSet elementSet() -> elementSet
    java.util.Set entrySet() -> entrySet
    java.util.Iterator iterator() -> iterator
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    44:44:java.util.SortedSet elementSet() -> elementSet
    44:44:java.util.Set elementSet() -> elementSet
com.google.common.collect.SortedMultisetBridge -> com.google.common.collect.jZ:
    java.util.SortedSet elementSet() -> elementSet
    29:29:java.util.Set elementSet() -> elementSet
com.google.common.collect.SortedMultisets -> com.google.common.collect.ka:
    162:165:java.lang.Object getElementOrThrow(com.google.common.collect.Multiset$Entry) -> c
    169:169:java.lang.Object getElementOrNull(com.google.common.collect.Multiset$Entry) -> d
    39:39:java.lang.Object access$000(com.google.common.collect.Multiset$Entry) -> a
    39:39:java.lang.Object access$100(com.google.common.collect.Multiset$Entry) -> b
com.google.common.collect.SortedMultisets$ElementSet -> com.google.common.collect.kb:
    com.google.common.collect.SortedMultiset multiset -> a
    46:48:void <init>(com.google.common.collect.SortedMultiset) -> <init>
    52:52:com.google.common.collect.SortedMultiset multiset() -> b
    57:57:java.util.Iterator iterator() -> iterator
    62:62:java.util.Comparator comparator() -> comparator
    67:67:java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    72:72:java.util.SortedSet headSet(java.lang.Object) -> headSet
    77:77:java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    82:82:java.lang.Object first() -> first
    87:87:java.lang.Object last() -> last
    43:43:com.google.common.collect.Multiset multiset() -> a
com.google.common.collect.SortedMultisets$NavigableElementSet -> com.google.common.collect.kc:
    95:96:void <init>(com.google.common.collect.SortedMultiset) -> <init>
    100:100:java.lang.Object lower(java.lang.Object) -> lower
    105:105:java.lang.Object floor(java.lang.Object) -> floor
    110:110:java.lang.Object ceiling(java.lang.Object) -> ceiling
    115:115:java.lang.Object higher(java.lang.Object) -> higher
    120:120:java.util.NavigableSet descendingSet() -> descendingSet
    125:125:java.util.Iterator descendingIterator() -> descendingIterator
    130:130:java.lang.Object pollFirst() -> pollFirst
    135:135:java.lang.Object pollLast() -> pollLast
    141:145:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    150:151:java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    156:157:java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
com.google.common.collect.SortedSetMultimap -> com.google.common.collect.SortedSetMultimap:
    java.util.SortedSet get(java.lang.Object) -> get
    java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Map asMap() -> asMap
    java.util.Comparator valueComparator() -> valueComparator
    47:47:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    47:47:java.util.Set removeAll(java.lang.Object) -> removeAll
    47:47:java.util.Set get(java.lang.Object) -> get
    47:47:java.util.Collection get(java.lang.Object) -> get
    47:47:java.util.Collection removeAll(java.lang.Object) -> removeAll
    47:47:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.SparseImmutableTable -> com.google.common.collect.kd:
    com.google.common.collect.ImmutableTable EMPTY -> a
    com.google.common.collect.ImmutableMap rowMap -> b
    com.google.common.collect.ImmutableMap columnMap -> c
    int[] cellRowIndices -> d
    int[] cellColumnInRowIndices -> e
    46:86:void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet) -> <init>
    91:92:com.google.common.collect.ImmutableMap columnMap() -> columnMap
    98:99:com.google.common.collect.ImmutableMap rowMap() -> rowMap
    104:104:int size() -> size
    109:114:com.google.common.collect.Table$Cell getCell(int) -> a
    119:122:java.lang.Object getValue(int) -> b
    127:133:com.google.common.collect.ImmutableTable$SerializedForm createSerializedForm() -> g
    24:24:java.util.Map columnMap() -> columnMap
    24:24:java.util.Map rowMap() -> rowMap
    27:29:void <clinit>() -> <clinit>
com.google.common.collect.StandardRowSortedTable -> com.google.common.collect.ke:
    long serialVersionUID -> serialVersionUID
    58:59:void <init>(java.util.SortedMap,com.google.common.base.Supplier) -> <init>
    62:62:java.util.SortedMap sortedBackingMap() -> i
    73:73:java.util.SortedSet rowKeySet() -> rowKeySet
    84:84:java.util.SortedMap rowMap() -> rowMap
    89:89:java.util.SortedMap createRowMap() -> j
    47:47:java.util.Map createRowMap() -> g
    47:47:java.util.Map rowMap() -> rowMap
    47:47:java.util.Set rowKeySet() -> rowKeySet
    48:48:java.util.SortedMap access$100(com.google.common.collect.StandardRowSortedTable) -> a
com.google.common.collect.StandardRowSortedTable$RowSortedMap -> com.google.common.collect.kf:
    com.google.common.collect.StandardRowSortedTable this$0 -> b
    93:93:void <init>(com.google.common.collect.StandardRowSortedTable) -> <init>
    96:96:java.util.SortedSet keySet() -> c
    101:101:java.util.SortedSet createKeySet() -> d
    106:106:java.util.Comparator comparator() -> comparator
    111:111:java.lang.Object firstKey() -> firstKey
    116:116:java.lang.Object lastKey() -> lastKey
    121:123:java.util.SortedMap headMap(java.lang.Object) -> headMap
    128:131:java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    136:138:java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    92:92:java.util.Set createKeySet() -> e
    92:92:java.util.Set keySet() -> keySet
    93:93:void <init>(com.google.common.collect.StandardRowSortedTable,byte) -> <init>
com.google.common.collect.StandardTable -> com.google.common.collect.kg:
    java.util.Map backingMap -> a
    com.google.common.base.Supplier factory -> b
    java.util.Set columnKeySet -> c
    java.util.Map rowMap -> d
    com.google.common.collect.StandardTable$ColumnMap columnMap -> e
    long serialVersionUID -> serialVersionUID
    72:75:void <init>(java.util.Map,com.google.common.base.Supplier) -> <init>
    81:81:boolean contains(java.lang.Object,java.lang.Object) -> contains
    86:94:boolean containsColumn(java.lang.Object) -> containsColumn
    99:99:boolean containsRow(java.lang.Object) -> containsRow
    104:104:boolean containsValue(java.lang.Object) -> containsValue
    109:109:java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    114:114:boolean isEmpty() -> isEmpty
    119:123:int size() -> size
    130:131:void clear() -> clear
    134:139:java.util.Map getOrCreate(java.lang.Object) -> a
    145:148:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    154:165:java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    170:182:java.util.Map removeColumn(java.lang.Object) -> b
    186:186:boolean containsMapping(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    191:195:boolean removeMapping(java.lang.Object,java.lang.Object,java.lang.Object) -> b
    228:228:java.util.Set cellSet() -> cellSet
    233:233:java.util.Iterator cellIterator() -> b
    268:277:java.util.Spliterator cellSpliterator() -> c
    282:282:java.util.Map row(java.lang.Object) -> row
    423:423:java.util.Map column(java.lang.Object) -> column
    619:619:java.util.Set rowKeySet() -> rowKeySet
    634:635:java.util.Set columnKeySet() -> columnKeySet
    713:713:java.util.Iterator createColumnKeyIterator() -> h
    749:749:java.util.Collection values() -> values
    756:757:java.util.Map rowMap() -> rowMap
    761:761:java.util.Map createRowMap() -> g
    835:836:java.util.Map columnMap() -> columnMap
    271:272:java.util.Spliterator lambda$cellSpliterator$1(java.util.Map$Entry) -> a
    274:275:com.google.common.collect.Table$Cell lambda$null$0(java.util.Map$Entry,java.util.Map$Entry) -> a
    68:68:boolean access$300(com.google.common.collect.StandardTable,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    68:68:boolean access$400(com.google.common.collect.StandardTable,java.lang.Object,java.lang.Object,java.lang.Object) -> b
    68:68:java.util.Map access$900(com.google.common.collect.StandardTable,java.lang.Object) -> a
com.google.common.collect.StandardTable$CellIterator -> com.google.common.collect.kh:
    java.util.Iterator rowIterator -> a
    java.util.Map$Entry rowEntry -> b
    java.util.Iterator columnIterator -> c
    com.google.common.collect.StandardTable this$0 -> d
    236:239:void <init>(com.google.common.collect.StandardTable) -> <init>
    243:243:boolean hasNext() -> hasNext
    248:253:com.google.common.collect.Table$Cell next() -> a
    258:263:void remove() -> remove
    236:236:java.lang.Object next() -> next
    236:236:void <init>(com.google.common.collect.StandardTable,byte) -> <init>
com.google.common.collect.StandardTable$Column -> com.google.common.collect.ki:
    java.lang.Object columnKey -> a
    com.google.common.collect.StandardTable this$0 -> b
    429:431:void <init>(com.google.common.collect.StandardTable,java.lang.Object) -> <init>
    435:435:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    440:440:java.lang.Object get(java.lang.Object) -> get
    445:445:boolean containsKey(java.lang.Object) -> containsKey
    450:450:java.lang.Object remove(java.lang.Object) -> remove
    456:470:boolean removeFromColumnIf(com.google.common.base.Predicate) -> a
    475:475:java.util.Set createEntrySet() -> a
    564:564:java.util.Set createKeySet() -> e
    591:591:java.util.Collection createValues() -> a_
com.google.common.collect.StandardTable$Column$EntrySet -> com.google.common.collect.kj:
    com.google.common.collect.StandardTable$Column this$1 -> a
    479:479:void <init>(com.google.common.collect.StandardTable$Column) -> <init>
    482:482:java.util.Iterator iterator() -> iterator
    487:493:int size() -> size
    498:498:boolean isEmpty() -> isEmpty
    503:504:void clear() -> clear
    508:512:boolean contains(java.lang.Object) -> contains
    517:521:boolean remove(java.lang.Object) -> remove
    526:526:boolean retainAll(java.util.Collection) -> retainAll
    479:479:void <init>(com.google.common.collect.StandardTable$Column,byte) -> <init>
com.google.common.collect.StandardTable$Column$EntrySetIterator -> com.google.common.collect.kk:
    java.util.Iterator iterator -> b
    com.google.common.collect.StandardTable$Column this$1 -> a
    530:531:void <init>(com.google.common.collect.StandardTable$Column) -> <init>
    535:558:java.util.Map$Entry computeNext() -> a
    530:530:java.lang.Object computeNext() -> computeNext
    530:530:void <init>(com.google.common.collect.StandardTable$Column,byte) -> <init>
com.google.common.collect.StandardTable$Column$EntrySetIterator$1EntryImpl -> com.google.common.collect.kl:
    java.util.Map$Entry val$entry -> a
    com.google.common.collect.StandardTable$Column$EntrySetIterator this$2 -> b
    539:539:void <init>(com.google.common.collect.StandardTable$Column$EntrySetIterator,java.util.Map$Entry) -> <init>
    542:542:java.lang.Object getKey() -> getKey
    547:547:java.lang.Object getValue() -> getValue
    552:552:java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.StandardTable$Column$KeySet -> com.google.common.collect.km:
    com.google.common.collect.StandardTable$Column this$1 -> a
    569:571:void <init>(com.google.common.collect.StandardTable$Column) -> <init>
    575:575:boolean contains(java.lang.Object) -> contains
    580:580:boolean remove(java.lang.Object) -> remove
    585:585:boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.StandardTable$Column$Values -> com.google.common.collect.kn:
    com.google.common.collect.StandardTable$Column this$1 -> a
    596:598:void <init>(com.google.common.collect.StandardTable$Column) -> <init>
    602:602:boolean remove(java.lang.Object) -> remove
    607:607:boolean removeAll(java.util.Collection) -> removeAll
    612:612:boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.StandardTable$ColumnKeyIterator -> com.google.common.collect.ko:
    java.util.Map seen -> a
    java.util.Iterator mapIterator -> b
    java.util.Iterator entryIterator -> c
    com.google.common.collect.StandardTable this$0 -> d
    716:721:void <init>(com.google.common.collect.StandardTable) -> <init>
    726:735:java.lang.Object computeNext() -> computeNext
    716:716:void <init>(com.google.common.collect.StandardTable,byte) -> <init>
com.google.common.collect.StandardTable$ColumnKeySet -> com.google.common.collect.kp:
    com.google.common.collect.StandardTable this$0 -> a
    639:639:void <init>(com.google.common.collect.StandardTable) -> <init>
    642:642:java.util.Iterator iterator() -> iterator
    647:647:int size() -> size
    652:666:boolean remove(java.lang.Object) -> remove
    671:685:boolean removeAll(java.util.Collection) -> removeAll
    690:702:boolean retainAll(java.util.Collection) -> retainAll
    707:707:boolean contains(java.lang.Object) -> contains
    639:639:void <init>(com.google.common.collect.StandardTable,byte) -> <init>
com.google.common.collect.StandardTable$ColumnMap -> com.google.common.collect.kq:
    com.google.common.collect.StandardTable this$0 -> a
    840:840:void <init>(com.google.common.collect.StandardTable) -> <init>
    846:846:java.util.Map get(java.lang.Object) -> a
    851:851:boolean containsKey(java.lang.Object) -> containsKey
    856:856:java.util.Map remove(java.lang.Object) -> b
    861:861:java.util.Set createEntrySet() -> a
    866:866:java.util.Set keySet() -> keySet
    871:871:java.util.Collection createValues() -> a_
    839:839:java.lang.Object remove(java.lang.Object) -> remove
    839:839:java.lang.Object get(java.lang.Object) -> get
    840:840:void <init>(com.google.common.collect.StandardTable,byte) -> <init>
com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet -> com.google.common.collect.kr:
    com.google.common.collect.StandardTable$ColumnMap this$1 -> a
    875:875:void <init>(com.google.common.collect.StandardTable$ColumnMap) -> <init>
    878:879:java.util.Iterator iterator() -> iterator
    890:890:int size() -> size
    895:905:boolean contains(java.lang.Object) -> contains
    910:915:boolean remove(java.lang.Object) -> remove
    926:927:boolean removeAll(java.util.Collection) -> removeAll
    932:940:boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1 -> com.google.common.collect.ks:
    com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet this$2 -> a
    880:880:void <init>(com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet) -> <init>
    883:883:java.util.Map apply(java.lang.Object) -> a
    880:880:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues -> com.google.common.collect.kt:
    com.google.common.collect.StandardTable$ColumnMap this$1 -> a
    946:948:void <init>(com.google.common.collect.StandardTable$ColumnMap) -> <init>
    952:958:boolean remove(java.lang.Object) -> remove
    963:971:boolean removeAll(java.util.Collection) -> removeAll
    976:984:boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.StandardTable$Row -> com.google.common.collect.ku:
    java.lang.Object rowKey -> a
    java.util.Map backingRowMap -> b
    com.google.common.collect.StandardTable this$0 -> c
    288:290:void <init>(com.google.common.collect.StandardTable,java.lang.Object) -> <init>
    295:296:java.util.Map backingRowMap() -> a
    301:301:java.util.Map computeBackingRowMap() -> d
    306:310:void maintainEmptyInvariant() -> e
    314:315:boolean containsKey(java.lang.Object) -> containsKey
    320:321:java.lang.Object get(java.lang.Object) -> get
    326:331:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    336:342:java.lang.Object remove(java.lang.Object) -> remove
    347:352:void clear() -> clear
    356:357:int size() -> size
    362:367:java.util.Iterator entryIterator() -> b
    388:392:java.util.Spliterator entrySpliterator() -> c
    396:396:java.util.Map$Entry wrapEntry(java.util.Map$Entry) -> a
com.google.common.collect.StandardTable$Row$1 -> com.google.common.collect.kv:
    java.util.Iterator val$iterator -> a
    com.google.common.collect.StandardTable$Row this$1 -> b
    367:367:void <init>(com.google.common.collect.StandardTable$Row,java.util.Iterator) -> <init>
    370:370:boolean hasNext() -> hasNext
    375:375:java.util.Map$Entry next() -> a
    380:382:void remove() -> remove
    367:367:java.lang.Object next() -> next
com.google.common.collect.StandardTable$Row$2 -> com.google.common.collect.kw:
    java.util.Map$Entry val$entry -> a
    396:396:void <init>(com.google.common.collect.StandardTable$Row,java.util.Map$Entry) -> <init>
    399:399:java.util.Map$Entry delegate() -> delegate
    404:404:java.lang.Object setValue(java.lang.Object) -> setValue
    410:410:boolean equals(java.lang.Object) -> equals
    396:396:java.lang.Object delegate() -> delegate
com.google.common.collect.StandardTable$RowMap -> com.google.common.collect.kx:
    com.google.common.collect.StandardTable this$0 -> a
    765:765:void <init>(com.google.common.collect.StandardTable) -> <init>
    768:768:boolean containsKey(java.lang.Object) -> containsKey
    775:775:java.util.Map get(java.lang.Object) -> a
    780:780:java.util.Map remove(java.lang.Object) -> b
    785:785:java.util.Set createEntrySet() -> a
    764:764:java.lang.Object remove(java.lang.Object) -> remove
    764:764:java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.StandardTable$RowMap$EntrySet -> com.google.common.collect.ky:
    com.google.common.collect.StandardTable$RowMap this$1 -> a
    789:789:void <init>(com.google.common.collect.StandardTable$RowMap) -> <init>
    792:793:java.util.Iterator iterator() -> iterator
    804:804:int size() -> size
    809:815:boolean contains(java.lang.Object) -> contains
    820:826:boolean remove(java.lang.Object) -> remove
com.google.common.collect.StandardTable$RowMap$EntrySet$1 -> com.google.common.collect.kz:
    com.google.common.collect.StandardTable$RowMap$EntrySet this$2 -> a
    794:794:void <init>(com.google.common.collect.StandardTable$RowMap$EntrySet) -> <init>
    797:797:java.util.Map apply(java.lang.Object) -> a
    794:794:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.StandardTable$TableSet -> com.google.common.collect.kA:
    com.google.common.collect.StandardTable this$0 -> a
    205:205:void <init>(com.google.common.collect.StandardTable) -> <init>
    208:208:boolean isEmpty() -> isEmpty
    213:214:void clear() -> clear
    205:205:void <init>(com.google.common.collect.StandardTable,byte) -> <init>
com.google.common.collect.Streams -> com.google.common.collect.Streams:
    62:64:java.util.stream.Stream stream(java.lang.Iterable) -> stream
    75:75:java.util.stream.Stream stream(java.util.Collection) -> stream
    84:84:java.util.stream.Stream stream(java.util.Iterator) -> stream
    93:93:java.util.stream.Stream stream(com.google.common.base.Optional) -> stream
    104:104:java.util.stream.Stream stream(java.util.Optional) -> stream
    115:115:java.util.stream.IntStream stream(java.util.OptionalInt) -> stream
    126:126:java.util.stream.LongStream stream(java.util.OptionalLong) -> stream
    137:137:java.util.stream.DoubleStream stream(java.util.OptionalDouble) -> stream
    141:145:void closeAll(java.util.stream.BaseStream[]) -> a
    159:178:java.util.stream.Stream concat(java.util.stream.Stream[]) -> concat
    191:210:java.util.stream.IntStream concat(java.util.stream.IntStream[]) -> concat
    223:242:java.util.stream.LongStream concat(java.util.stream.LongStream[]) -> concat
    255:274:java.util.stream.DoubleStream concat(java.util.stream.DoubleStream[]) -> concat
    305:331:java.util.stream.Stream zip(java.util.stream.Stream,java.util.stream.Stream,java.util.function.BiFunction) -> zip
    367:378:void forEachPair(java.util.stream.Stream,java.util.stream.Stream,java.util.function.BiConsumer) -> forEachPair
    416:471:java.util.stream.Stream mapWithIndex(java.util.stream.Stream,com.google.common.collect.Streams$FunctionWithIndex) -> mapWithIndex
    498:550:java.util.stream.Stream mapWithIndex(java.util.stream.IntStream,com.google.common.collect.Streams$IntFunctionWithIndex) -> mapWithIndex
    577:629:java.util.stream.Stream mapWithIndex(java.util.stream.LongStream,com.google.common.collect.Streams$LongFunctionWithIndex) -> mapWithIndex
    657:709:java.util.stream.Stream mapWithIndex(java.util.stream.DoubleStream,com.google.common.collect.Streams$DoubleFunctionWithIndex) -> mapWithIndex
    836:880:java.util.Optional findLast(java.util.stream.Stream) -> findLast
    898:899:java.util.OptionalInt findLast(java.util.stream.IntStream) -> findLast
    917:918:java.util.OptionalLong findLast(java.util.stream.LongStream) -> findLast
    936:937:java.util.OptionalDouble findLast(java.util.stream.DoubleStream) -> findLast
    940:940:void <init>() -> <init>
    370:370:void lambda$forEachPair$8(java.util.function.BiConsumer,com.google.common.collect.Streams$TemporaryPair) -> a
    274:274:void lambda$concat$7(java.util.stream.DoubleStream[]) -> a
    270:270:java.util.Spliterator$OfDouble lambda$concat$6(java.util.Spliterator$OfDouble) -> a
    242:242:void lambda$concat$5(java.util.stream.LongStream[]) -> a
    238:238:java.util.Spliterator$OfLong lambda$concat$4(java.util.Spliterator$OfLong) -> a
    210:210:void lambda$concat$3(java.util.stream.IntStream[]) -> a
    206:206:java.util.Spliterator$OfInt lambda$concat$2(java.util.Spliterator$OfInt) -> a
    178:178:void lambda$concat$1(java.util.stream.Stream[]) -> a
    174:174:java.util.Spliterator lambda$concat$0(java.util.Spliterator) -> a
com.google.common.collect.Streams$1 -> com.google.common.collect.kB:
    java.util.Iterator val$itrA -> a
    java.util.Iterator val$itrB -> b
    java.util.function.BiFunction val$function -> c
    319:319:void <init>(long,int,java.util.Iterator,java.util.Iterator,java.util.function.BiFunction) -> <init>
    322:326:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
com.google.common.collect.Streams$1OptionalState -> com.google.common.collect.kC:
    boolean set -> a
    java.lang.Object value -> b
    822:824:void <init>() -> <init>
    827:829:void set(java.lang.Object) -> a
    832:833:java.lang.Object get() -> a
com.google.common.collect.Streams$1Splitr -> com.google.common.collect.kD:
    java.lang.Object holder -> c
    com.google.common.collect.Streams$FunctionWithIndex val$function -> d
    444:446:void <init>(java.util.Spliterator,long,com.google.common.collect.Streams$FunctionWithIndex) -> <init>
    450:451:void accept(java.lang.Object) -> accept
    455:463:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    468:468:com.google.common.collect.Streams$1Splitr createSplit(java.util.Spliterator,long) -> b
    441:441:com.google.common.collect.Streams$MapWithIndexSpliterator createSplit(java.util.Spliterator,long) -> a
com.google.common.collect.Streams$2 -> com.google.common.collect.kE:
    long index -> a
    java.util.Iterator val$fromIterator -> b
    com.google.common.collect.Streams$FunctionWithIndex val$function -> c
    426:427:void <init>(long,int,java.util.Iterator,com.google.common.collect.Streams$FunctionWithIndex) -> <init>
    431:435:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
com.google.common.collect.Streams$2Splitr -> com.google.common.collect.kF:
    int holder -> c
    com.google.common.collect.Streams$IntFunctionWithIndex val$function -> d
    527:529:void <init>(java.util.Spliterator$OfInt,long,com.google.common.collect.Streams$IntFunctionWithIndex) -> <init>
    533:534:void accept(int) -> accept
    538:542:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    547:547:com.google.common.collect.Streams$2Splitr createSplit(java.util.Spliterator$OfInt,long) -> a
    523:523:com.google.common.collect.Streams$MapWithIndexSpliterator createSplit(java.util.Spliterator,long) -> a
com.google.common.collect.Streams$3 -> com.google.common.collect.kG:
    long index -> a
    java.util.PrimitiveIterator$OfInt val$fromIterator -> b
    com.google.common.collect.Streams$IntFunctionWithIndex val$function -> c
    508:509:void <init>(long,int,java.util.PrimitiveIterator$OfInt,com.google.common.collect.Streams$IntFunctionWithIndex) -> <init>
    513:517:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
com.google.common.collect.Streams$3Splitr -> com.google.common.collect.kH:
    long holder -> c
    com.google.common.collect.Streams$LongFunctionWithIndex val$function -> d
    606:608:void <init>(java.util.Spliterator$OfLong,long,com.google.common.collect.Streams$LongFunctionWithIndex) -> <init>
    612:613:void accept(long) -> accept
    617:621:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    626:626:com.google.common.collect.Streams$3Splitr createSplit(java.util.Spliterator$OfLong,long) -> a
    602:602:com.google.common.collect.Streams$MapWithIndexSpliterator createSplit(java.util.Spliterator,long) -> a
com.google.common.collect.Streams$4 -> com.google.common.collect.kI:
    long index -> a
    java.util.PrimitiveIterator$OfLong val$fromIterator -> b
    com.google.common.collect.Streams$LongFunctionWithIndex val$function -> c
    587:588:void <init>(long,int,java.util.PrimitiveIterator$OfLong,com.google.common.collect.Streams$LongFunctionWithIndex) -> <init>
    592:596:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
com.google.common.collect.Streams$4Splitr -> com.google.common.collect.kJ:
    double holder -> c
    com.google.common.collect.Streams$DoubleFunctionWithIndex val$function -> d
    686:688:void <init>(java.util.Spliterator$OfDouble,long,com.google.common.collect.Streams$DoubleFunctionWithIndex) -> <init>
    692:693:void accept(double) -> accept
    697:701:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    706:706:com.google.common.collect.Streams$4Splitr createSplit(java.util.Spliterator$OfDouble,long) -> a
    682:682:com.google.common.collect.Streams$MapWithIndexSpliterator createSplit(java.util.Spliterator,long) -> a
com.google.common.collect.Streams$5 -> com.google.common.collect.kK:
    long index -> a
    java.util.PrimitiveIterator$OfDouble val$fromIterator -> b
    com.google.common.collect.Streams$DoubleFunctionWithIndex val$function -> c
    667:668:void <init>(long,int,java.util.PrimitiveIterator$OfDouble,com.google.common.collect.Streams$DoubleFunctionWithIndex) -> <init>
    672:676:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
com.google.common.collect.Streams$DoubleFunctionWithIndex -> com.google.common.collect.Streams$DoubleFunctionWithIndex:
    java.lang.Object apply(double,long) -> apply
com.google.common.collect.Streams$FunctionWithIndex -> com.google.common.collect.Streams$FunctionWithIndex:
    java.lang.Object apply(java.lang.Object,long) -> apply
com.google.common.collect.Streams$IntFunctionWithIndex -> com.google.common.collect.Streams$IntFunctionWithIndex:
    java.lang.Object apply(int,long) -> apply
com.google.common.collect.Streams$LongFunctionWithIndex -> com.google.common.collect.Streams$LongFunctionWithIndex:
    java.lang.Object apply(long,long) -> apply
com.google.common.collect.Streams$MapWithIndexSpliterator -> com.google.common.collect.kL:
    java.util.Spliterator fromSpliterator -> a
    long index -> b
    732:735:void <init>(java.util.Spliterator,long) -> <init>
    com.google.common.collect.Streams$MapWithIndexSpliterator createSplit(java.util.Spliterator,long) -> a
    742:748:com.google.common.collect.Streams$MapWithIndexSpliterator trySplit() -> a
    753:753:long estimateSize() -> estimateSize
    758:758:int characteristics() -> characteristics
    726:726:java.util.Spliterator trySplit() -> trySplit
com.google.common.collect.Streams$TemporaryPair -> com.google.common.collect.kM:
    java.lang.Object a -> a
    java.lang.Object b -> b
    385:388:void <init>(java.lang.Object,java.lang.Object) -> <init>
com.google.common.collect.Synchronized -> com.google.common.collect.kN:
    109:109:java.util.Collection collection(java.util.Collection,java.lang.Object) -> c
    253:253:java.util.Set set(java.util.Set,java.lang.Object) -> a
    288:288:java.util.SortedSet sortedSet(java.util.SortedSet,java.lang.Object) -> b
    347:347:java.util.List list(java.util.List,java.lang.Object) -> b
    472:475:com.google.common.collect.Multiset multiset(com.google.common.collect.Multiset,java.lang.Object) -> a
    568:571:com.google.common.collect.Multimap multimap(com.google.common.collect.Multimap,java.lang.Object) -> a
    762:765:com.google.common.collect.ListMultimap listMultimap(com.google.common.collect.ListMultimap,java.lang.Object) -> a
    804:807:com.google.common.collect.SetMultimap setMultimap(com.google.common.collect.SetMultimap,java.lang.Object) -> a
    859:862:com.google.common.collect.SortedSetMultimap sortedSetMultimap(com.google.common.collect.SortedSetMultimap,java.lang.Object) -> a
    909:918:java.util.Collection typePreservingCollection(java.util.Collection,java.lang.Object) -> d
    922:925:java.util.Set typePreservingSet(java.util.Set,java.lang.Object) -> c
    1023:1023:java.util.Map map(java.util.Map,java.lang.Object) -> a
    1234:1234:java.util.SortedMap sortedMap(java.util.SortedMap,java.lang.Object) -> a
    1295:1298:com.google.common.collect.BiMap biMap(com.google.common.collect.BiMap,java.lang.Object) -> a
    1529:1529:java.util.NavigableSet navigableSet(java.util.NavigableSet,java.lang.Object) -> a
    1534:1534:java.util.NavigableSet navigableSet(java.util.NavigableSet) -> a
    1539:1539:java.util.NavigableMap navigableMap(java.util.NavigableMap) -> a
    1545:1545:java.util.NavigableMap navigableMap(java.util.NavigableMap,java.lang.Object) -> a
    1730:1733:java.util.Map$Entry nullableSynchronizedEntry(java.util.Map$Entry,java.lang.Object) -> b
    1788:1788:java.util.Queue queue(java.util.Queue,java.lang.Object) -> a
    1841:1841:java.util.Deque deque(java.util.Deque,java.lang.Object) -> a
    1978:1978:com.google.common.collect.Table table(com.google.common.collect.Table,java.lang.Object) -> a
    67:67:java.util.SortedSet access$100(java.util.SortedSet,java.lang.Object) -> a
    67:67:java.util.List access$200(java.util.List,java.lang.Object) -> a
    67:67:java.util.Set access$300(java.util.Set,java.lang.Object) -> b
    67:67:java.util.Collection access$400(java.util.Collection,java.lang.Object) -> a
    67:67:java.util.Collection access$500(java.util.Collection,java.lang.Object) -> b
    67:67:java.util.Map$Entry access$700(java.util.Map$Entry,java.lang.Object) -> a
com.google.common.collect.Synchronized$SynchronizedAsMap -> com.google.common.collect.kO:
    java.util.Set asMapEntrySet -> b
    java.util.Collection asMapValues -> c
    long serialVersionUID -> serialVersionUID
    1353:1354:void <init>(java.util.Map,java.lang.Object) -> <init>
    1358:1361:java.util.Collection get(java.lang.Object) -> a
    1366:1371:java.util.Set entrySet() -> entrySet
    1376:1381:java.util.Collection values() -> values
    1387:1387:boolean containsValue(java.lang.Object) -> containsValue
    1348:1348:java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.Synchronized$SynchronizedAsMapEntries -> com.google.common.collect.kP:
    long serialVersionUID -> serialVersionUID
    932:933:void <init>(java.util.Set,java.lang.Object) -> <init>
    938:939:java.util.Iterator iterator() -> iterator
    961:963:java.lang.Object[] toArray() -> toArray
    968:970:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    975:977:boolean contains(java.lang.Object) -> contains
    982:984:boolean containsAll(java.util.Collection) -> containsAll
    989:994:boolean equals(java.lang.Object) -> equals
    999:1001:boolean remove(java.lang.Object) -> remove
    1006:1008:boolean removeAll(java.util.Collection) -> removeAll
    1013:1015:boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1 -> com.google.common.collect.kQ:
    com.google.common.collect.Synchronized$SynchronizedAsMapEntries this$0 -> a
    939:939:void <init>(com.google.common.collect.Synchronized$SynchronizedAsMapEntries,java.util.Iterator) -> <init>
    942:942:java.util.Map$Entry transform(java.util.Map$Entry) -> a
    939:939:java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1 -> com.google.common.collect.kR:
    java.util.Map$Entry val$entry -> a
    com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1 this$1 -> b
    942:942:void <init>(com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1,java.util.Map$Entry) -> <init>
    945:945:java.util.Map$Entry delegate() -> delegate
    950:950:java.util.Collection getValue() -> a
    942:942:java.lang.Object getValue() -> getValue
    942:942:java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedAsMapValues -> com.google.common.collect.kS:
    long serialVersionUID -> serialVersionUID
    1395:1396:void <init>(java.util.Collection,java.lang.Object) -> <init>
    1401:1401:java.util.Iterator iterator() -> iterator
com.google.common.collect.Synchronized$SynchronizedAsMapValues$1 -> com.google.common.collect.kT:
    com.google.common.collect.Synchronized$SynchronizedAsMapValues this$0 -> a
    1401:1401:void <init>(com.google.common.collect.Synchronized$SynchronizedAsMapValues,java.util.Iterator) -> <init>
    1404:1404:java.util.Collection transform(java.util.Collection) -> a
    1401:1401:java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Synchronized$SynchronizedBiMap -> com.google.common.collect.kU:
    java.util.Set valueSet -> b
    com.google.common.collect.BiMap inverse -> c
    long serialVersionUID -> serialVersionUID
    1309:1311:void <init>(com.google.common.collect.BiMap,java.lang.Object,com.google.common.collect.BiMap) -> <init>
    1315:1315:com.google.common.collect.BiMap delegate() -> c
    1320:1325:java.util.Set values() -> values
    1330:1332:java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    1337:1342:com.google.common.collect.BiMap inverse() -> inverse
    1301:1301:java.util.Collection values() -> values
    1301:1301:java.util.Map delegate() -> a
    1301:1301:java.lang.Object delegate() -> b
    1302:1302:void <init>(com.google.common.collect.BiMap,java.lang.Object,com.google.common.collect.BiMap,byte) -> <init>
com.google.common.collect.Synchronized$SynchronizedCollection -> com.google.common.collect.kV:
    long serialVersionUID -> serialVersionUID
    115:116:void <init>(java.util.Collection,java.lang.Object) -> <init>
    121:121:java.util.Collection delegate() -> a
    126:128:boolean add(java.lang.Object) -> add
    133:135:boolean addAll(java.util.Collection) -> addAll
    140:143:void clear() -> clear
    147:149:boolean contains(java.lang.Object) -> contains
    154:156:boolean containsAll(java.util.Collection) -> containsAll
    161:163:boolean isEmpty() -> isEmpty
    168:168:java.util.Iterator iterator() -> iterator
    173:175:java.util.Spliterator spliterator() -> spliterator
    180:182:java.util.stream.Stream stream() -> stream
    187:189:java.util.stream.Stream parallelStream() -> parallelStream
    194:197:void forEach(java.util.function.Consumer) -> forEach
    201:203:boolean remove(java.lang.Object) -> remove
    208:210:boolean removeAll(java.util.Collection) -> removeAll
    215:217:boolean retainAll(java.util.Collection) -> retainAll
    222:224:boolean removeIf(java.util.function.Predicate) -> removeIf
    229:231:int size() -> size
    236:238:java.lang.Object[] toArray() -> toArray
    243:245:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    112:112:java.lang.Object delegate() -> b
    113:113:void <init>(java.util.Collection,java.lang.Object,byte) -> <init>
com.google.common.collect.Synchronized$SynchronizedDeque -> com.google.common.collect.kW:
    long serialVersionUID -> serialVersionUID
    1847:1848:void <init>(java.util.Deque,java.lang.Object) -> <init>
    1852:1852:java.util.Deque delegate() -> d
    1857:1860:void addFirst(java.lang.Object) -> addFirst
    1864:1867:void addLast(java.lang.Object) -> addLast
    1871:1873:boolean offerFirst(java.lang.Object) -> offerFirst
    1878:1880:boolean offerLast(java.lang.Object) -> offerLast
    1885:1887:java.lang.Object removeFirst() -> removeFirst
    1892:1894:java.lang.Object removeLast() -> removeLast
    1899:1901:java.lang.Object pollFirst() -> pollFirst
    1906:1908:java.lang.Object pollLast() -> pollLast
    1913:1915:java.lang.Object getFirst() -> getFirst
    1920:1922:java.lang.Object getLast() -> getLast
    1927:1929:java.lang.Object peekFirst() -> peekFirst
    1934:1936:java.lang.Object peekLast() -> peekLast
    1941:1943:boolean removeFirstOccurrence(java.lang.Object) -> removeFirstOccurrence
    1948:1950:boolean removeLastOccurrence(java.lang.Object) -> removeLastOccurrence
    1955:1958:void push(java.lang.Object) -> push
    1962:1964:java.lang.Object pop() -> pop
    1969:1971:java.util.Iterator descendingIterator() -> descendingIterator
    1844:1844:java.util.Queue delegate() -> c
    1844:1844:java.util.Collection delegate() -> a
    1844:1844:java.lang.Object delegate() -> b
com.google.common.collect.Synchronized$SynchronizedEntry -> com.google.common.collect.kX:
    long serialVersionUID -> serialVersionUID
    1740:1741:void <init>(java.util.Map$Entry,java.lang.Object) -> <init>
    1746:1746:java.util.Map$Entry delegate() -> a
    1751:1753:boolean equals(java.lang.Object) -> equals
    1758:1760:int hashCode() -> hashCode
    1765:1767:java.lang.Object getKey() -> getKey
    1772:1774:java.lang.Object getValue() -> getValue
    1779:1781:java.lang.Object setValue(java.lang.Object) -> setValue
    1736:1736:java.lang.Object delegate() -> b
com.google.common.collect.Synchronized$SynchronizedList -> com.google.common.collect.kY:
    long serialVersionUID -> serialVersionUID
    354:355:void <init>(java.util.List,java.lang.Object) -> <init>
    359:359:java.util.List delegate() -> c
    364:367:void add(int,java.lang.Object) -> add
    371:373:boolean addAll(int,java.util.Collection) -> addAll
    378:380:java.lang.Object get(int) -> get
    385:387:int indexOf(java.lang.Object) -> indexOf
    392:394:int lastIndexOf(java.lang.Object) -> lastIndexOf
    399:399:java.util.ListIterator listIterator() -> listIterator
    404:404:java.util.ListIterator listIterator(int) -> listIterator
    409:411:java.lang.Object remove(int) -> remove
    416:418:java.lang.Object set(int,java.lang.Object) -> set
    423:426:void replaceAll(java.util.function.UnaryOperator) -> replaceAll
    430:433:void sort(java.util.Comparator) -> sort
    437:439:java.util.List subList(int,int) -> subList
    444:449:boolean equals(java.lang.Object) -> equals
    454:456:int hashCode() -> hashCode
    352:352:java.util.Collection delegate() -> a
    352:352:java.lang.Object delegate() -> b
com.google.common.collect.Synchronized$SynchronizedListMultimap -> com.google.common.collect.kZ:
    long serialVersionUID -> serialVersionUID
    771:772:void <init>(com.google.common.collect.ListMultimap,java.lang.Object) -> <init>
    776:776:com.google.common.collect.ListMultimap delegate() -> c
    781:783:java.util.List get(java.lang.Object) -> get
    788:790:java.util.List removeAll(java.lang.Object) -> removeAll
    795:797:java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    768:768:java.util.Collection removeAll(java.lang.Object) -> removeAll
    768:768:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    768:768:java.util.Collection get(java.lang.Object) -> get
    768:768:com.google.common.collect.Multimap delegate() -> a
    768:768:java.lang.Object delegate() -> b
com.google.common.collect.Synchronized$SynchronizedMap -> com.google.common.collect.la:
    java.util.Set keySet -> b
    java.util.Collection values -> c
    java.util.Set entrySet -> d
    long serialVersionUID -> serialVersionUID
    1032:1033:void <init>(java.util.Map,java.lang.Object) -> <init>
    1038:1038:java.util.Map delegate() -> a
    1043:1046:void clear() -> clear
    1050:1052:boolean containsKey(java.lang.Object) -> containsKey
    1057:1059:boolean containsValue(java.lang.Object) -> containsValue
    1064:1069:java.util.Set entrySet() -> entrySet
    1074:1077:void forEach(java.util.function.BiConsumer) -> forEach
    1081:1083:java.lang.Object get(java.lang.Object) -> get
    1088:1090:java.lang.Object getOrDefault(java.lang.Object,java.lang.Object) -> getOrDefault
    1095:1097:boolean isEmpty() -> isEmpty
    1102:1107:java.util.Set keySet() -> keySet
    1112:1114:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    1119:1121:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    1126:1128:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    1133:1135:java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    1140:1142:java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function) -> computeIfAbsent
    1148:1150:java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction) -> computeIfPresent
    1155:1157:java.lang.Object compute(java.lang.Object,java.util.function.BiFunction) -> compute
    1163:1165:java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction) -> merge
    1170:1173:void putAll(java.util.Map) -> putAll
    1177:1180:void replaceAll(java.util.function.BiFunction) -> replaceAll
    1184:1186:java.lang.Object remove(java.lang.Object) -> remove
    1191:1193:boolean remove(java.lang.Object,java.lang.Object) -> remove
    1198:1200:int size() -> size
    1205:1210:java.util.Collection values() -> values
    1215:1220:boolean equals(java.lang.Object) -> equals
    1225:1227:int hashCode() -> hashCode
    1026:1026:java.lang.Object delegate() -> b
com.google.common.collect.Synchronized$SynchronizedMultimap -> com.google.common.collect.lb:
    java.util.Set keySet -> b
    java.util.Collection valuesCollection -> c
    java.util.Collection entries -> d
    java.util.Map asMap -> e
    com.google.common.collect.Multiset keys -> f
    long serialVersionUID -> serialVersionUID
    585:585:com.google.common.collect.Multimap delegate() -> a
    589:590:void <init>(com.google.common.collect.Multimap,java.lang.Object) -> <init>
    594:596:int size() -> size
    601:603:boolean isEmpty() -> isEmpty
    608:610:boolean containsKey(java.lang.Object) -> containsKey
    615:617:boolean containsValue(java.lang.Object) -> containsValue
    622:624:boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    629:631:java.util.Collection get(java.lang.Object) -> get
    636:638:boolean put(java.lang.Object,java.lang.Object) -> put
    643:645:boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    650:652:boolean putAll(com.google.common.collect.Multimap) -> putAll
    657:659:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    664:666:boolean remove(java.lang.Object,java.lang.Object) -> remove
    671:673:java.util.Collection removeAll(java.lang.Object) -> removeAll
    678:681:void clear() -> clear
    685:690:java.util.Set keySet() -> keySet
    695:700:java.util.Collection values() -> values
    705:710:java.util.Collection entries() -> entries
    715:718:void forEach(java.util.function.BiConsumer) -> forEach
    722:727:java.util.Map asMap() -> asMap
    732:737:com.google.common.collect.Multiset keys() -> keys
    742:747:boolean equals(java.lang.Object) -> equals
    752:754:int hashCode() -> hashCode
    574:574:java.lang.Object delegate() -> b
com.google.common.collect.Synchronized$SynchronizedMultiset -> com.google.common.collect.lc:
    java.util.Set elementSet -> b
    java.util.Set entrySet -> c
    long serialVersionUID -> serialVersionUID
    484:485:void <init>(com.google.common.collect.Multiset,java.lang.Object) -> <init>
    489:489:com.google.common.collect.Multiset delegate() -> c
    494:496:int count(java.lang.Object) -> count
    501:503:int add(java.lang.Object,int) -> add
    508:510:int remove(java.lang.Object,int) -> remove
    515:517:int setCount(java.lang.Object,int) -> setCount
    522:524:boolean setCount(java.lang.Object,int,int) -> setCount
    529:534:java.util.Set elementSet() -> elementSet
    539:544:java.util.Set entrySet() -> entrySet
    549:554:boolean equals(java.lang.Object) -> equals
    559:561:int hashCode() -> hashCode
    478:478:java.util.Collection delegate() -> a
    478:478:java.lang.Object delegate() -> b
com.google.common.collect.Synchronized$SynchronizedNavigableMap -> com.google.common.collect.ld:
    java.util.NavigableSet descendingKeySet -> b
    java.util.NavigableMap descendingMap -> c
    java.util.NavigableSet navigableKeySet -> d
    long serialVersionUID -> serialVersionUID
    1554:1555:void <init>(java.util.NavigableMap,java.lang.Object) -> <init>
    1559:1559:java.util.NavigableMap delegate() -> d
    1564:1566:java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    1571:1573:java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    1580:1585:java.util.NavigableSet descendingKeySet() -> descendingKeySet
    1592:1597:java.util.NavigableMap descendingMap() -> descendingMap
    1602:1604:java.util.Map$Entry firstEntry() -> firstEntry
    1609:1611:java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    1616:1618:java.lang.Object floorKey(java.lang.Object) -> floorKey
    1623:1625:java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    1630:1630:java.util.SortedMap headMap(java.lang.Object) -> headMap
    1635:1637:java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    1642:1644:java.lang.Object higherKey(java.lang.Object) -> higherKey
    1649:1651:java.util.Map$Entry lastEntry() -> lastEntry
    1656:1658:java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    1663:1665:java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    1670:1670:java.util.Set keySet() -> keySet
    1677:1682:java.util.NavigableSet navigableKeySet() -> navigableKeySet
    1687:1689:java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    1694:1696:java.util.Map$Entry pollLastEntry() -> pollLastEntry
    1702:1704:java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    1709:1709:java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    1714:1716:java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    1721:1721:java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    1548:1548:java.util.SortedMap delegate() -> c
    1548:1548:java.util.Map delegate() -> a
    1548:1548:java.lang.Object delegate() -> b
com.google.common.collect.Synchronized$SynchronizedNavigableSet -> com.google.common.collect.le:
    java.util.NavigableSet descendingSet -> b
    long serialVersionUID -> serialVersionUID
    1417:1418:void <init>(java.util.NavigableSet,java.lang.Object) -> <init>
    1422:1422:java.util.NavigableSet delegate() -> e
    1427:1429:java.lang.Object ceiling(java.lang.Object) -> ceiling
    1434:1434:java.util.Iterator descendingIterator() -> descendingIterator
    1441:1448:java.util.NavigableSet descendingSet() -> descendingSet
    1453:1455:java.lang.Object floor(java.lang.Object) -> floor
    1460:1462:java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    1467:1467:java.util.SortedSet headSet(java.lang.Object) -> headSet
    1472:1474:java.lang.Object higher(java.lang.Object) -> higher
    1479:1481:java.lang.Object lower(java.lang.Object) -> lower
    1486:1488:java.lang.Object pollFirst() -> pollFirst
    1493:1495:java.lang.Object pollLast() -> pollLast
    1501:1504:java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    1509:1509:java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    1514:1516:java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    1521:1521:java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    1412:1412:java.util.SortedSet delegate() -> c
    1412:1412:java.util.Set delegate() -> d
    1412:1412:java.util.Collection delegate() -> a
    1412:1412:java.lang.Object delegate() -> b
com.google.common.collect.Synchronized$SynchronizedObject -> com.google.common.collect.lf:
    java.lang.Object delegate -> b
    java.lang.Object mutex -> a
    long serialVersionUID -> serialVersionUID
    74:77:void <init>(java.lang.Object,java.lang.Object) -> <init>
    80:80:java.lang.Object delegate() -> b
    87:89:java.lang.String toString() -> toString
    99:102:void writeObject(java.io.ObjectOutputStream) -> writeObject
com.google.common.collect.Synchronized$SynchronizedQueue -> com.google.common.collect.lg:
    long serialVersionUID -> serialVersionUID
    1794:1795:void <init>(java.util.Queue,java.lang.Object) -> <init>
    1799:1799:java.util.Queue delegate() -> c
    1804:1806:java.lang.Object element() -> element
    1811:1813:boolean offer(java.lang.Object) -> offer
    1818:1820:java.lang.Object peek() -> peek
    1825:1827:java.lang.Object poll() -> poll
    1832:1834:java.lang.Object remove() -> remove
    1791:1791:java.util.Collection delegate() -> a
    1791:1791:java.lang.Object delegate() -> b
com.google.common.collect.Synchronized$SynchronizedRandomAccessList -> com.google.common.collect.lh:
    long serialVersionUID -> serialVersionUID
    465:466:void <init>(java.util.List,java.lang.Object) -> <init>
com.google.common.collect.Synchronized$SynchronizedSet -> com.google.common.collect.li:
    long serialVersionUID -> serialVersionUID
    259:260:void <init>(java.util.Set,java.lang.Object) -> <init>
    264:264:java.util.Set delegate() -> d
    269:274:boolean equals(java.lang.Object) -> equals
    279:281:int hashCode() -> hashCode
    256:256:java.util.Collection delegate() -> a
    256:256:java.lang.Object delegate() -> b
com.google.common.collect.Synchronized$SynchronizedSetMultimap -> com.google.common.collect.lj:
    java.util.Set entrySet -> b
    long serialVersionUID -> serialVersionUID
    815:816:void <init>(com.google.common.collect.SetMultimap,java.lang.Object) -> <init>
    820:820:com.google.common.collect.SetMultimap delegate() -> c
    825:827:java.util.Set get(java.lang.Object) -> get
    832:834:java.util.Set removeAll(java.lang.Object) -> removeAll
    839:841:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    846:851:java.util.Set entries() -> entries
    810:810:java.util.Collection entries() -> entries
    810:810:java.util.Collection removeAll(java.lang.Object) -> removeAll
    810:810:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    810:810:java.util.Collection get(java.lang.Object) -> get
    810:810:com.google.common.collect.Multimap delegate() -> a
    810:810:java.lang.Object delegate() -> b
com.google.common.collect.Synchronized$SynchronizedSortedMap -> com.google.common.collect.lk:
    long serialVersionUID -> serialVersionUID
    1241:1242:void <init>(java.util.SortedMap,java.lang.Object) -> <init>
    1246:1246:java.util.SortedMap delegate() -> c
    1251:1253:java.util.Comparator comparator() -> comparator
    1258:1260:java.lang.Object firstKey() -> firstKey
    1265:1267:java.util.SortedMap headMap(java.lang.Object) -> headMap
    1272:1274:java.lang.Object lastKey() -> lastKey
    1279:1281:java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    1286:1288:java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    1237:1237:java.util.Map delegate() -> a
    1237:1237:java.lang.Object delegate() -> b
com.google.common.collect.Synchronized$SynchronizedSortedSet -> com.google.common.collect.ll:
    long serialVersionUID -> serialVersionUID
    293:294:void <init>(java.util.SortedSet,java.lang.Object) -> <init>
    298:298:java.util.SortedSet delegate() -> c
    303:305:java.util.Comparator comparator() -> comparator
    310:312:java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    317:319:java.util.SortedSet headSet(java.lang.Object) -> headSet
    324:326:java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    331:333:java.lang.Object first() -> first
    338:340:java.lang.Object last() -> last
    291:291:java.util.Set delegate() -> d
    291:291:java.util.Collection delegate() -> a
    291:291:java.lang.Object delegate() -> b
com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap -> com.google.common.collect.lm:
    long serialVersionUID -> serialVersionUID
    868:869:void <init>(com.google.common.collect.SortedSetMultimap,java.lang.Object) -> <init>
    873:873:com.google.common.collect.SortedSetMultimap delegate() -> d
    878:880:java.util.SortedSet get(java.lang.Object) -> get
    885:887:java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    892:894:java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    899:901:java.util.Comparator valueComparator() -> valueComparator
    865:865:java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    865:865:java.util.Set removeAll(java.lang.Object) -> removeAll
    865:865:java.util.Set get(java.lang.Object) -> get
    865:865:com.google.common.collect.SetMultimap delegate() -> c
    865:865:java.util.Collection get(java.lang.Object) -> get
    865:865:java.util.Collection removeAll(java.lang.Object) -> removeAll
    865:865:java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    865:865:com.google.common.collect.Multimap delegate() -> a
    865:865:java.lang.Object delegate() -> b
com.google.common.collect.Synchronized$SynchronizedTable -> com.google.common.collect.ln:
    1985:1986:void <init>(com.google.common.collect.Table,java.lang.Object) -> <init>
    1991:1991:com.google.common.collect.Table delegate() -> a
    1996:1998:boolean contains(java.lang.Object,java.lang.Object) -> contains
    2003:2005:boolean containsRow(java.lang.Object) -> containsRow
    2010:2012:boolean containsColumn(java.lang.Object) -> containsColumn
    2017:2019:boolean containsValue(java.lang.Object) -> containsValue
    2024:2026:java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    2031:2033:boolean isEmpty() -> isEmpty
    2038:2040:int size() -> size
    2045:2048:void clear() -> clear
    2052:2054:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    2059:2062:void putAll(com.google.common.collect.Table) -> putAll
    2066:2068:java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    2073:2075:java.util.Map row(java.lang.Object) -> row
    2080:2082:java.util.Map column(java.lang.Object) -> column
    2087:2089:java.util.Set cellSet() -> cellSet
    2094:2096:java.util.Set rowKeySet() -> rowKeySet
    2101:2103:java.util.Set columnKeySet() -> columnKeySet
    2108:2110:java.util.Collection values() -> values
    2115:2126:java.util.Map rowMap() -> rowMap
    2131:2142:java.util.Map columnMap() -> columnMap
    2147:2149:int hashCode() -> hashCode
    2154:2159:boolean equals(java.lang.Object) -> equals
    1981:1981:java.lang.Object delegate() -> b
com.google.common.collect.Synchronized$SynchronizedTable$1 -> com.google.common.collect.lo:
    com.google.common.collect.Synchronized$SynchronizedTable this$0 -> a
    2119:2119:void <init>(com.google.common.collect.Synchronized$SynchronizedTable) -> <init>
    2122:2122:java.util.Map apply(java.util.Map) -> a
    2119:2119:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Synchronized$SynchronizedTable$2 -> com.google.common.collect.lp:
    com.google.common.collect.Synchronized$SynchronizedTable this$0 -> a
    2135:2135:void <init>(com.google.common.collect.Synchronized$SynchronizedTable) -> <init>
    2138:2138:java.util.Map apply(java.util.Map) -> a
    2135:2135:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Table -> com.google.common.collect.Table:
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    boolean containsRow(java.lang.Object) -> containsRow
    boolean containsColumn(java.lang.Object) -> containsColumn
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    int size() -> size
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void clear() -> clear
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void putAll(com.google.common.collect.Table) -> putAll
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Map row(java.lang.Object) -> row
    java.util.Map column(java.lang.Object) -> column
    java.util.Set cellSet() -> cellSet
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Collection values() -> values
    java.util.Map rowMap() -> rowMap
    java.util.Map columnMap() -> columnMap
com.google.common.collect.Table$Cell -> com.google.common.collect.Table$Cell:
    java.lang.Object getRowKey() -> getRowKey
    java.lang.Object getColumnKey() -> getColumnKey
    java.lang.Object getValue() -> getValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.Tables -> com.google.common.collect.Tables:
    com.google.common.base.Function UNMODIFIABLE_WRAPPER -> a
    53:53:void <init>() -> <init>
    71:71:java.util.stream.Collector toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.Supplier) -> toTable
    101:106:java.util.stream.Collector toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier) -> toTable
    125:137:void merge(com.google.common.collect.Table,java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator) -> a
    150:150:com.google.common.collect.Table$Cell immutableCell(java.lang.Object,java.lang.Object,java.lang.Object) -> immutableCell
    224:224:com.google.common.collect.Table transpose(com.google.common.collect.Table) -> transpose
    384:387:com.google.common.collect.Table newCustomTable(java.util.Map,com.google.common.base.Supplier) -> newCustomTable
    414:414:com.google.common.collect.Table transformValues(com.google.common.collect.Table,com.google.common.base.Function) -> transformValues
    549:549:com.google.common.collect.Table unmodifiableTable(com.google.common.collect.Table) -> unmodifiableTable
    651:651:com.google.common.collect.RowSortedTable unmodifiableRowSortedTable(com.google.common.collect.RowSortedTable) -> unmodifiableRowSortedTable
    682:682:com.google.common.base.Function unmodifiableWrapper() -> b
    723:723:com.google.common.collect.Table synchronizedTable(com.google.common.collect.Table) -> synchronizedTable
    727:733:boolean equalsImpl(com.google.common.collect.Table,java.lang.Object) -> a
    116:119:com.google.common.collect.Table lambda$toTable$2(java.util.function.BinaryOperator,com.google.common.collect.Table,com.google.common.collect.Table) -> a
    109:113:void lambda$toTable$1(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,com.google.common.collect.Table,java.lang.Object) -> a
    76:76:java.lang.Object lambda$toTable$0(java.lang.Object,java.lang.Object) -> a
    52:52:com.google.common.base.Function access$000() -> a
    685:685:void <clinit>() -> <clinit>
com.google.common.collect.Tables$1 -> com.google.common.collect.lq:
    686:686:void <init>() -> <init>
    689:689:java.util.Map apply(java.util.Map) -> a
    686:686:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Tables$AbstractCell -> com.google.common.collect.lr:
    184:184:void <init>() -> <init>
    188:197:boolean equals(java.lang.Object) -> equals
    202:202:int hashCode() -> hashCode
    207:207:java.lang.String toString() -> toString
com.google.common.collect.Tables$ImmutableCell -> com.google.common.collect.ls:
    java.lang.Object rowKey -> a
    java.lang.Object columnKey -> b
    java.lang.Object value -> c
    long serialVersionUID -> serialVersionUID
    158:162:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    166:166:java.lang.Object getRowKey() -> getRowKey
    171:171:java.lang.Object getColumnKey() -> getColumnKey
    176:176:java.lang.Object getValue() -> getValue
com.google.common.collect.Tables$TransformedTable -> com.google.common.collect.lt:
    com.google.common.collect.Table fromTable -> b
    com.google.common.base.Function function -> a
    421:424:void <init>(com.google.common.collect.Table,com.google.common.base.Function) -> <init>
    428:428:boolean contains(java.lang.Object,java.lang.Object) -> contains
    435:435:java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    440:440:int size() -> size
    445:446:void clear() -> clear
    450:450:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    455:455:void putAll(com.google.common.collect.Table) -> putAll
    460:461:java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    467:467:java.util.Map row(java.lang.Object) -> row
    472:472:java.util.Map column(java.lang.Object) -> column
    476:476:com.google.common.base.Function cellFunction() -> g
    487:487:java.util.Iterator cellIterator() -> b
    492:492:java.util.Spliterator cellSpliterator() -> c
    497:497:java.util.Set rowKeySet() -> rowKeySet
    502:502:java.util.Set columnKeySet() -> columnKeySet
    507:507:java.util.Collection createValues() -> d
    512:519:java.util.Map rowMap() -> rowMap
    524:531:java.util.Map columnMap() -> columnMap
com.google.common.collect.Tables$TransformedTable$1 -> com.google.common.collect.lu:
    com.google.common.collect.Tables$TransformedTable this$0 -> a
    476:476:void <init>(com.google.common.collect.Tables$TransformedTable) -> <init>
    479:480:com.google.common.collect.Table$Cell apply(com.google.common.collect.Table$Cell) -> a
    476:476:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Tables$TransformedTable$2 -> com.google.common.collect.lv:
    com.google.common.collect.Tables$TransformedTable this$0 -> a
    513:513:void <init>(com.google.common.collect.Tables$TransformedTable) -> <init>
    516:516:java.util.Map apply(java.util.Map) -> a
    513:513:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Tables$TransformedTable$3 -> com.google.common.collect.lw:
    com.google.common.collect.Tables$TransformedTable this$0 -> a
    525:525:void <init>(com.google.common.collect.Tables$TransformedTable) -> <init>
    528:528:java.util.Map apply(java.util.Map) -> a
    525:525:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Tables$TransposeTable -> com.google.common.collect.lx:
    com.google.common.collect.Table original -> a
    com.google.common.base.Function TRANSPOSE_CELL -> b
    232:234:void <init>(com.google.common.collect.Table) -> <init>
    238:239:void clear() -> clear
    243:243:java.util.Map column(java.lang.Object) -> column
    248:248:java.util.Set columnKeySet() -> columnKeySet
    253:253:java.util.Map columnMap() -> columnMap
    258:258:boolean contains(java.lang.Object,java.lang.Object) -> contains
    263:263:boolean containsColumn(java.lang.Object) -> containsColumn
    268:268:boolean containsRow(java.lang.Object) -> containsRow
    273:273:boolean containsValue(java.lang.Object) -> containsValue
    278:278:java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    283:283:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    288:289:void putAll(com.google.common.collect.Table) -> putAll
    293:293:java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    298:298:java.util.Map row(java.lang.Object) -> row
    303:303:java.util.Set rowKeySet() -> rowKeySet
    308:308:java.util.Map rowMap() -> rowMap
    313:313:int size() -> size
    318:318:java.util.Collection values() -> values
    333:333:java.util.Iterator cellIterator() -> b
    339:339:java.util.Spliterator cellSpliterator() -> c
    322:322:void <clinit>() -> <clinit>
com.google.common.collect.Tables$TransposeTable$1 -> com.google.common.collect.ly:
    323:323:void <init>() -> <init>
    326:326:com.google.common.collect.Table$Cell apply(com.google.common.collect.Table$Cell) -> a
    323:323:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Tables$UnmodifiableRowSortedMap -> com.google.common.collect.lz:
    long serialVersionUID -> serialVersionUID
    658:659:void <init>(com.google.common.collect.RowSortedTable) -> <init>
    663:663:com.google.common.collect.RowSortedTable delegate() -> a
    668:669:java.util.SortedMap rowMap() -> rowMap
    674:674:java.util.SortedSet rowKeySet() -> rowKeySet
    654:654:java.util.Map rowMap() -> rowMap
    654:654:java.util.Set rowKeySet() -> rowKeySet
    654:654:com.google.common.collect.Table delegate() -> delegate
    654:654:java.lang.Object delegate() -> delegate
com.google.common.collect.Tables$UnmodifiableTable -> com.google.common.collect.lA:
    com.google.common.collect.Table delegate -> a
    long serialVersionUID -> serialVersionUID
    556:558:void <init>(com.google.common.collect.Table) -> <init>
    563:563:com.google.common.collect.Table delegate() -> delegate
    568:568:java.util.Set cellSet() -> cellSet
    573:573:void clear() -> clear
    578:578:java.util.Map column(java.lang.Object) -> column
    583:583:java.util.Set columnKeySet() -> columnKeySet
    588:589:java.util.Map columnMap() -> columnMap
    594:594:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    599:599:void putAll(com.google.common.collect.Table) -> putAll
    604:604:java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    609:609:java.util.Map row(java.lang.Object) -> row
    614:614:java.util.Set rowKeySet() -> rowKeySet
    619:620:java.util.Map rowMap() -> rowMap
    625:625:java.util.Collection values() -> values
    552:552:java.lang.Object delegate() -> delegate
com.google.common.collect.TopKSelector -> com.google.common.collect.lB:
    int k -> a
    java.util.Comparator comparator -> b
    java.lang.Object[] buffer -> c
    int bufferSize -> d
    java.lang.Object threshold -> e
    74:74:com.google.common.collect.TopKSelector least(int,java.util.Comparator) -> a
    115:122:void <init>(java.util.Comparator,int) -> <init>
    129:147:void offer(java.lang.Object) -> a
    154:191:void trim() -> b
    200:212:int partition(int,int,int) -> a
    216:219:void swap(int,int) -> a
    222:225:com.google.common.collect.TopKSelector combine(com.google.common.collect.TopKSelector) -> a
    248:251:void offerAll(java.util.Iterator) -> a
    262:269:java.util.List topK() -> a
com.google.common.collect.TransformedIterator -> com.google.common.collect.lC:
    java.util.Iterator backingIterator -> b
    34:36:void <init>(java.util.Iterator) -> <init>
    java.lang.Object transform(java.lang.Object) -> a
    42:42:boolean hasNext() -> hasNext
    47:47:java.lang.Object next() -> next
    52:53:void remove() -> remove
com.google.common.collect.TransformedListIterator -> com.google.common.collect.lD:
    33:34:void <init>(java.util.ListIterator) -> <init>
    37:37:java.util.ListIterator backingIterator() -> a
    42:42:boolean hasPrevious() -> hasPrevious
    47:47:java.lang.Object previous() -> previous
    52:52:int nextIndex() -> nextIndex
    57:57:int previousIndex() -> previousIndex
    62:62:void set(java.lang.Object) -> set
    67:67:void add(java.lang.Object) -> add
com.google.common.collect.TreeBasedTable -> com.google.common.collect.TreeBasedTable:
    java.util.Comparator columnComparator -> c
    long serialVersionUID -> serialVersionUID
    96:96:com.google.common.collect.TreeBasedTable create() -> create
    107:109:com.google.common.collect.TreeBasedTable create(java.util.Comparator,java.util.Comparator) -> create
    117:120:com.google.common.collect.TreeBasedTable create(com.google.common.collect.TreeBasedTable) -> create
    124:126:void <init>(java.util.Comparator,java.util.Comparator) -> <init>
    138:138:java.util.Comparator rowComparator() -> rowComparator
    151:151:java.util.Comparator columnComparator() -> columnComparator
    168:168:java.util.SortedMap row(java.lang.Object) -> row
    304:304:java.util.SortedSet rowKeySet() -> rowKeySet
    309:309:java.util.SortedMap rowMap() -> rowMap
    315:329:java.util.Iterator createColumnKeyIterator() -> h
    68:68:java.util.Map rowMap() -> rowMap
    68:68:java.util.Set rowKeySet() -> rowKeySet
    68:68:java.util.Map row(java.lang.Object) -> row
    68:68:java.util.Map columnMap() -> columnMap
    68:68:java.util.Collection values() -> values
    68:68:java.util.Set columnKeySet() -> columnKeySet
    68:68:java.util.Map column(java.lang.Object) -> column
    68:68:java.util.Set cellSet() -> cellSet
    68:68:java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    68:68:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    68:68:void clear() -> clear
    68:68:int size() -> size
    68:68:boolean isEmpty() -> isEmpty
    68:68:java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    68:68:boolean containsValue(java.lang.Object) -> containsValue
    68:68:boolean containsRow(java.lang.Object) -> containsRow
    68:68:boolean containsColumn(java.lang.Object) -> containsColumn
    68:68:boolean contains(java.lang.Object,java.lang.Object) -> contains
    68:68:java.lang.String toString() -> toString
    68:68:int hashCode() -> hashCode
    68:68:boolean equals(java.lang.Object) -> equals
    68:68:void putAll(com.google.common.collect.Table) -> putAll
com.google.common.collect.TreeBasedTable$1 -> com.google.common.collect.lE:
    321:321:void <init>(com.google.common.collect.TreeBasedTable) -> <init>
    324:324:java.util.Iterator apply(java.util.Map) -> a
    321:321:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.TreeBasedTable$2 -> com.google.common.collect.lF:
    java.lang.Object lastValue -> a
    java.util.Iterator val$merged -> b
    java.util.Comparator val$comparator -> c
    329:329:void <init>(com.google.common.collect.TreeBasedTable,java.util.Iterator,java.util.Comparator) -> <init>
    334:346:java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeBasedTable$Factory -> com.google.common.collect.lG:
    java.util.Comparator comparator -> a
    long serialVersionUID -> serialVersionUID
    75:77:void <init>(java.util.Comparator) -> <init>
    81:81:java.util.TreeMap get() -> a
    72:72:java.lang.Object get() -> get
com.google.common.collect.TreeBasedTable$TreeRow -> com.google.common.collect.lH:
    java.lang.Object lowerBound -> c
    java.lang.Object upperBound -> d
    java.util.SortedMap wholeRow -> e
    com.google.common.collect.TreeBasedTable this$0 -> f
    176:177:void <init>(com.google.common.collect.TreeBasedTable,java.lang.Object) -> <init>
    179:185:void <init>(com.google.common.collect.TreeBasedTable,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    189:189:java.util.SortedSet keySet() -> f
    194:194:java.util.Comparator comparator() -> comparator
    200:201:int compare(java.lang.Object,java.lang.Object) -> a
    205:207:boolean rangeContains(java.lang.Object) -> a
    212:213:java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    218:219:java.util.SortedMap headMap(java.lang.Object) -> headMap
    224:225:java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    230:234:java.lang.Object firstKey() -> firstKey
    239:243:java.lang.Object lastKey() -> lastKey
    253:256:java.util.SortedMap wholeRow() -> g
    261:261:java.util.SortedMap backingRowMap() -> h
    266:276:java.util.SortedMap computeBackingRowMap() -> i
    281:286:void maintainEmptyInvariant() -> e
    290:290:boolean containsKey(java.lang.Object) -> containsKey
    295:296:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    171:171:java.util.Map computeBackingRowMap() -> d
    171:171:java.util.Map backingRowMap() -> a
    171:171:java.util.Set keySet() -> keySet
com.google.common.collect.TreeMultimap -> com.google.common.collect.TreeMultimap:
    java.util.Comparator keyComparator -> a
    java.util.Comparator valueComparator -> b
    long serialVersionUID -> serialVersionUID
    83:83:com.google.common.collect.TreeMultimap create() -> create
    95:95:com.google.common.collect.TreeMultimap create(java.util.Comparator,java.util.Comparator) -> create
    106:106:com.google.common.collect.TreeMultimap create(com.google.common.collect.Multimap) -> create
    110:113:void <init>(java.util.Comparator,java.util.Comparator) -> <init>
    119:121:void <init>(java.util.Comparator,java.util.Comparator,com.google.common.collect.Multimap) -> <init>
    125:125:java.util.Map createAsMap() -> n
    137:137:java.util.SortedSet createCollection() -> q
    142:145:java.util.Collection createCollection(java.lang.Object) -> a
    155:155:java.util.Comparator keyComparator() -> keyComparator
    160:160:java.util.Comparator valueComparator() -> valueComparator
    167:167:java.util.NavigableSet get(java.lang.Object) -> get
    181:181:java.util.NavigableSet keySet() -> keySet
    195:195:java.util.NavigableMap asMap() -> asMap
    204:208:void writeObject(java.io.ObjectOutputStream) -> writeObject
    213:218:void readObject(java.io.ObjectInputStream) -> readObject
    74:74:java.util.SortedSet keySet() -> keySet
    74:74:java.util.SortedMap asMap() -> asMap
    74:74:java.util.Collection values() -> values
    74:74:java.util.Map asMap() -> asMap
    74:74:java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    74:74:java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    74:74:java.util.SortedSet get(java.lang.Object) -> get
    74:74:java.util.Set get(java.lang.Object) -> get
    74:74:java.util.Set keySet() -> keySet
    74:74:java.util.Collection get(java.lang.Object) -> get
    74:74:boolean equals(java.lang.Object) -> equals
    74:74:boolean put(java.lang.Object,java.lang.Object) -> put
    74:74:java.util.Set entries() -> entries
    74:74:java.util.Set createCollection() -> a
    74:74:void forEach(java.util.function.BiConsumer) -> forEach
    74:74:void clear() -> clear
    74:74:boolean containsKey(java.lang.Object) -> containsKey
    74:74:int size() -> size
    74:74:java.util.Collection createCollection() -> b
    74:74:java.lang.String toString() -> toString
    74:74:int hashCode() -> hashCode
    74:74:com.google.common.collect.Multiset keys() -> keys
    74:74:boolean putAll(com.google.common.collect.Multimap) -> putAll
    74:74:boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    74:74:boolean remove(java.lang.Object,java.lang.Object) -> remove
    74:74:boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    74:74:boolean containsValue(java.lang.Object) -> containsValue
    74:74:boolean isEmpty() -> isEmpty
com.google.common.collect.TreeMultiset -> com.google.common.collect.TreeMultiset:
    com.google.common.collect.TreeMultiset$Reference rootReference -> a
    com.google.common.collect.GeneralRange range -> b
    com.google.common.collect.TreeMultiset$AvlNode header -> c
    long serialVersionUID -> serialVersionUID
    75:75:com.google.common.collect.TreeMultiset create() -> create
    91:92:com.google.common.collect.TreeMultiset create(java.util.Comparator) -> create
    106:108:com.google.common.collect.TreeMultiset create(java.lang.Iterable) -> create
    116:120:void <init>(com.google.common.collect.TreeMultiset$Reference,com.google.common.collect.GeneralRange,com.google.common.collect.TreeMultiset$AvlNode) -> <init>
    123:128:void <init>(java.util.Comparator) -> <init>
    161:169:long aggregateForEntries(com.google.common.collect.TreeMultiset$Aggregate) -> a
    173:191:long aggregateBelowRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode) -> a
    196:214:long aggregateAboveRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode) -> b
    220:220:int size() -> size
    225:225:int distinctElements() -> c
    229:229:int distinctElements(com.google.common.collect.TreeMultiset$AvlNode) -> a
    236:243:int count(java.lang.Object) -> count
    250:266:int add(java.lang.Object,int) -> add
    272:290:int remove(java.lang.Object,int) -> remove
    296:312:int setCount(java.lang.Object,int) -> setCount
    318:336:boolean setCount(java.lang.Object,int,int) -> setCount
    341:361:void clear() -> clear
    364:364:com.google.common.collect.Multiset$Entry wrapEntry(com.google.common.collect.TreeMultiset$AvlNode) -> b
    384:402:com.google.common.collect.TreeMultiset$AvlNode firstNode() -> g
    406:424:com.google.common.collect.TreeMultiset$AvlNode lastNode() -> h
    429:429:java.util.Iterator elementIterator() -> a
    434:434:java.util.Iterator entryIterator() -> b
    476:476:java.util.Iterator descendingEntryIterator() -> e
    518:524:void forEachEntry(java.util.function.ObjIntConsumer) -> forEachEntry
    528:528:java.util.Iterator iterator() -> iterator
    533:535:com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    541:543:com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    983:985:void successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> b
    988:990:void successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> b
    1004:1007:void writeObject(java.io.ObjectOutputStream) -> writeObject
    1011:1024:void readObject(java.io.ObjectInputStream) -> readObject
    59:59:com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    59:59:com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    59:59:com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    59:59:com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    59:59:com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    59:59:com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    59:59:java.util.Comparator comparator() -> comparator
    59:59:java.util.NavigableSet elementSet() -> elementSet
    59:59:java.util.Set entrySet() -> entrySet
    59:59:boolean contains(java.lang.Object) -> contains
    59:59:boolean isEmpty() -> isEmpty
    60:60:com.google.common.collect.TreeMultiset$AvlNode access$1200(com.google.common.collect.TreeMultiset) -> a
    60:60:com.google.common.collect.GeneralRange access$1300(com.google.common.collect.TreeMultiset) -> b
    60:60:com.google.common.collect.Multiset$Entry access$1400(com.google.common.collect.TreeMultiset,com.google.common.collect.TreeMultiset$AvlNode) -> a
    60:60:com.google.common.collect.TreeMultiset$AvlNode access$1500(com.google.common.collect.TreeMultiset) -> c
    60:60:com.google.common.collect.TreeMultiset$AvlNode access$1600(com.google.common.collect.TreeMultiset) -> d
    60:60:void access$1700(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> a
    60:60:void access$1800(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> a
com.google.common.collect.TreeMultiset$1 -> com.google.common.collect.lI:
    com.google.common.collect.TreeMultiset$AvlNode val$baseEntry -> a
    com.google.common.collect.TreeMultiset this$0 -> b
    364:364:void <init>(com.google.common.collect.TreeMultiset,com.google.common.collect.TreeMultiset$AvlNode) -> <init>
    367:367:java.lang.Object getElement() -> getElement
    372:376:int getCount() -> getCount
com.google.common.collect.TreeMultiset$2 -> com.google.common.collect.lJ:
    com.google.common.collect.TreeMultiset$AvlNode current -> a
    com.google.common.collect.Multiset$Entry prevEntry -> b
    com.google.common.collect.TreeMultiset this$0 -> c
    434:435:void <init>(com.google.common.collect.TreeMultiset) -> <init>
    440:446:boolean hasNext() -> hasNext
    452:462:com.google.common.collect.Multiset$Entry next() -> a
    467:470:void remove() -> remove
    434:434:java.lang.Object next() -> next
com.google.common.collect.TreeMultiset$3 -> com.google.common.collect.lK:
    com.google.common.collect.TreeMultiset$AvlNode current -> a
    com.google.common.collect.Multiset$Entry prevEntry -> b
    com.google.common.collect.TreeMultiset this$0 -> c
    476:478:void <init>(com.google.common.collect.TreeMultiset) -> <init>
    482:488:boolean hasNext() -> hasNext
    494:504:com.google.common.collect.Multiset$Entry next() -> a
    509:512:void remove() -> remove
    476:476:java.lang.Object next() -> next
com.google.common.collect.TreeMultiset$4 -> com.google.common.collect.lL:
    int[] $SwitchMap$com$google$common$collect$BoundType -> a
    180:180:void <clinit>() -> <clinit>
com.google.common.collect.TreeMultiset$Aggregate -> com.google.common.collect.lM:
    com.google.common.collect.TreeMultiset$Aggregate SIZE -> a
    com.google.common.collect.TreeMultiset$Aggregate DISTINCT -> b
    com.google.common.collect.TreeMultiset$Aggregate[] $VALUES -> c
    131:131:com.google.common.collect.TreeMultiset$Aggregate[] values() -> values
    131:131:com.google.common.collect.TreeMultiset$Aggregate valueOf(java.lang.String) -> valueOf
    131:131:void <init>(java.lang.String,int) -> <init>
    int nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> a
    long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> b
    131:131:void <init>(java.lang.String,int,byte) -> <init>
    131:143:void <clinit>() -> <clinit>
com.google.common.collect.TreeMultiset$Aggregate$1 -> com.google.common.collect.lN:
    132:132:void <init>(java.lang.String,int) -> <init>
    135:135:int nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> a
    140:140:long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> b
com.google.common.collect.TreeMultiset$Aggregate$2 -> com.google.common.collect.lO:
    143:143:void <init>(java.lang.String,int) -> <init>
    146:146:int nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> a
    151:151:long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> b
com.google.common.collect.TreeMultiset$AvlNode -> com.google.common.collect.lP:
    java.lang.Object elem -> a
    int elemCount -> b
    int distinctElements -> c
    long totalCount -> d
    int height -> e
    com.google.common.collect.TreeMultiset$AvlNode left -> f
    com.google.common.collect.TreeMultiset$AvlNode right -> g
    com.google.common.collect.TreeMultiset$AvlNode pred -> h
    com.google.common.collect.TreeMultiset$AvlNode succ -> i
    580:589:void <init>(java.lang.Object,int) -> <init>
    592:598:int count(java.util.Comparator,java.lang.Object) -> a
    603:608:com.google.common.collect.TreeMultiset$AvlNode addRightChild(java.lang.Object,int) -> a
    612:617:com.google.common.collect.TreeMultiset$AvlNode addLeftChild(java.lang.Object,int) -> b
    625:662:com.google.common.collect.TreeMultiset$AvlNode add(java.util.Comparator,java.lang.Object,int,int[]) -> a
    666:712:com.google.common.collect.TreeMultiset$AvlNode remove(java.util.Comparator,java.lang.Object,int,int[]) -> b
    717:761:com.google.common.collect.TreeMultiset$AvlNode setCount(java.util.Comparator,java.lang.Object,int,int[]) -> c
    770:824:com.google.common.collect.TreeMultiset$AvlNode setCount(java.util.Comparator,java.lang.Object,int,int,int[]) -> a
    828:849:com.google.common.collect.TreeMultiset$AvlNode deleteMe() -> c
    855:861:com.google.common.collect.TreeMultiset$AvlNode removeMin(com.google.common.collect.TreeMultiset$AvlNode) -> i
    867:873:com.google.common.collect.TreeMultiset$AvlNode removeMax(com.google.common.collect.TreeMultiset$AvlNode) -> j
    878:881:void recomputeMultiset() -> d
    884:885:void recomputeHeight() -> e
    888:890:void recompute() -> f
    893:906:com.google.common.collect.TreeMultiset$AvlNode rebalance() -> g
    911:911:int balanceFactor() -> h
    915:923:com.google.common.collect.TreeMultiset$AvlNode rotateLeft() -> i
    927:935:com.google.common.collect.TreeMultiset$AvlNode rotateRight() -> j
    939:939:long totalCount(com.google.common.collect.TreeMultiset$AvlNode) -> k
    943:943:int height(com.google.common.collect.TreeMultiset$AvlNode) -> l
    947:953:com.google.common.collect.TreeMultiset$AvlNode ceiling(java.util.Comparator,java.lang.Object) -> b
    958:964:com.google.common.collect.TreeMultiset$AvlNode floor(java.util.Comparator,java.lang.Object) -> c
    969:969:java.lang.Object getElement() -> a
    973:973:int getCount() -> b
    978:978:java.lang.String toString() -> toString
    566:566:int access$200(com.google.common.collect.TreeMultiset$AvlNode) -> a
    566:566:long access$300(com.google.common.collect.TreeMultiset$AvlNode) -> b
    566:566:int access$400(com.google.common.collect.TreeMultiset$AvlNode) -> c
    566:566:java.lang.Object access$500(com.google.common.collect.TreeMultiset$AvlNode) -> d
    566:566:com.google.common.collect.TreeMultiset$AvlNode access$600(com.google.common.collect.TreeMultiset$AvlNode) -> e
    566:566:com.google.common.collect.TreeMultiset$AvlNode access$700(com.google.common.collect.TreeMultiset$AvlNode) -> f
    566:566:com.google.common.collect.TreeMultiset$AvlNode access$800(com.google.common.collect.TreeMultiset$AvlNode) -> g
    566:566:int access$202(com.google.common.collect.TreeMultiset$AvlNode,int) -> a
    566:566:com.google.common.collect.TreeMultiset$AvlNode access$602(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> a
    566:566:com.google.common.collect.TreeMultiset$AvlNode access$702(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> b
    566:566:com.google.common.collect.TreeMultiset$AvlNode access$902(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> c
    566:566:com.google.common.collect.TreeMultiset$AvlNode access$802(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> d
    566:566:com.google.common.collect.TreeMultiset$AvlNode access$1000(com.google.common.collect.TreeMultiset$AvlNode,java.util.Comparator,java.lang.Object) -> a
    566:566:com.google.common.collect.TreeMultiset$AvlNode access$1100(com.google.common.collect.TreeMultiset$AvlNode,java.util.Comparator,java.lang.Object) -> b
    566:566:com.google.common.collect.TreeMultiset$AvlNode access$900(com.google.common.collect.TreeMultiset$AvlNode) -> h
com.google.common.collect.TreeMultiset$Reference -> com.google.common.collect.lQ:
    java.lang.Object value -> a
    547:547:void <init>() -> <init>
    551:551:java.lang.Object get() -> a
    555:559:void checkAndSet(java.lang.Object,java.lang.Object) -> a
    562:563:void clear() -> b
    547:547:void <init>(byte) -> <init>
com.google.common.collect.TreeRangeMap -> com.google.common.collect.TreeRangeMap:
    java.util.NavigableMap entriesByLowerBound -> a
    com.google.common.collect.RangeMap EMPTY_SUB_RANGE_MAP -> b
    59:59:com.google.common.collect.TreeRangeMap create() -> create
    62:64:void <init>() -> <init>
    105:106:java.lang.Object get(java.lang.Comparable) -> get
    111:116:java.util.Map$Entry getEntry(java.lang.Comparable) -> getEntry
    123:128:void put(com.google.common.collect.Range,java.lang.Object) -> put
    132:139:void putCoalescing(com.google.common.collect.Range,java.lang.Object) -> putCoalescing
    143:152:com.google.common.collect.Range coalescedRange(com.google.common.collect.Range,java.lang.Object) -> a
    158:163:com.google.common.collect.Range coalesce(com.google.common.collect.Range,java.lang.Object,java.util.Map$Entry) -> a
    168:171:void putAll(com.google.common.collect.RangeMap) -> putAll
    175:176:void clear() -> clear
    180:186:com.google.common.collect.Range span() -> span
    190:191:void putRangeMapEntry(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object) -> a
    195:241:void remove(com.google.common.collect.Range) -> remove
    248:260:void split(com.google.common.collect.Cut) -> a
    267:315:void merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction) -> merge
    319:319:java.util.Map asMapOfRanges() -> asMapOfRanges
    324:324:java.util.Map asDescendingMapOfRanges() -> asDescendingMapOfRanges
    366:369:com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    375:375:com.google.common.collect.RangeMap emptySubRangeMap() -> a
    787:791:boolean equals(java.lang.Object) -> equals
    796:796:int hashCode() -> hashCode
    801:801:java.lang.String toString() -> toString
    54:54:java.util.NavigableMap access$000(com.google.common.collect.TreeRangeMap) -> a
    54:54:com.google.common.collect.Range access$100(com.google.common.collect.TreeRangeMap,com.google.common.collect.Range,java.lang.Object) -> a
    54:54:com.google.common.collect.RangeMap access$200(com.google.common.collect.TreeRangeMap) -> b
    378:378:void <clinit>() -> <clinit>
com.google.common.collect.TreeRangeMap$1 -> com.google.common.collect.lR:
    379:379:void <init>() -> <init>
    382:382:java.lang.Object get(java.lang.Comparable) -> get
    387:387:java.util.Map$Entry getEntry(java.lang.Comparable) -> getEntry
    392:392:com.google.common.collect.Range span() -> span
    397:398:void put(com.google.common.collect.Range,java.lang.Object) -> put
    404:405:void putCoalescing(com.google.common.collect.Range,java.lang.Object) -> putCoalescing
    411:415:void putAll(com.google.common.collect.RangeMap) -> putAll
    418:418:void clear() -> clear
    422:423:void remove(com.google.common.collect.Range) -> remove
    428:429:void merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction) -> merge
    435:435:java.util.Map asMapOfRanges() -> asMapOfRanges
    440:440:java.util.Map asDescendingMapOfRanges() -> asDescendingMapOfRanges
    445:446:com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
com.google.common.collect.TreeRangeMap$AsMapOfRanges -> com.google.common.collect.lS:
    java.lang.Iterable entryIterable -> a
    com.google.common.collect.TreeRangeMap this$0 -> b
    332:334:void <init>(com.google.common.collect.TreeRangeMap,java.lang.Iterable) -> <init>
    338:338:boolean containsKey(java.lang.Object) -> containsKey
    343:350:java.lang.Object get(java.lang.Object) -> get
    355:355:int size() -> size
    360:360:java.util.Iterator entryIterator() -> b
com.google.common.collect.TreeRangeMap$RangeMapEntry -> com.google.common.collect.lT:
    com.google.common.collect.Range range -> a
    java.lang.Object value -> b
    72:73:void <init>(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object) -> <init>
    75:78:void <init>(com.google.common.collect.Range,java.lang.Object) -> <init>
    82:82:com.google.common.collect.Range getKey() -> a
    87:87:java.lang.Object getValue() -> getValue
    91:91:boolean contains(java.lang.Comparable) -> a
    95:95:com.google.common.collect.Cut getLowerBound() -> b
    99:99:com.google.common.collect.Cut getUpperBound() -> c
    66:66:java.lang.Object getKey() -> getKey
com.google.common.collect.TreeRangeMap$SubRangeMap -> com.google.common.collect.lU:
    com.google.common.collect.Range subRange -> b
    com.google.common.collect.TreeRangeMap this$0 -> a
    454:456:void <init>(com.google.common.collect.TreeRangeMap,com.google.common.collect.Range) -> <init>
    460:460:java.lang.Object get(java.lang.Comparable) -> get
    465:471:java.util.Map$Entry getEntry(java.lang.Comparable) -> getEntry
    477:499:com.google.common.collect.Range span() -> span
    504:507:void put(com.google.common.collect.Range,java.lang.Object) -> put
    511:519:void putCoalescing(com.google.common.collect.Range,java.lang.Object) -> putCoalescing
    523:533:void putAll(com.google.common.collect.RangeMap) -> putAll
    537:538:void clear() -> clear
    542:545:void remove(com.google.common.collect.Range) -> remove
    552:558:void merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction) -> merge
    562:565:com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    571:571:java.util.Map asMapOfRanges() -> asMapOfRanges
    576:576:java.util.Map asDescendingMapOfRanges() -> asDescendingMapOfRanges
    609:613:boolean equals(java.lang.Object) -> equals
    618:618:int hashCode() -> hashCode
    623:623:java.lang.String toString() -> toString
    450:450:com.google.common.collect.Range access$300(com.google.common.collect.TreeRangeMap$SubRangeMap) -> a
com.google.common.collect.TreeRangeMap$SubRangeMap$1 -> com.google.common.collect.lV:
    com.google.common.collect.TreeRangeMap$SubRangeMap this$1 -> a
    576:576:void <init>(com.google.common.collect.TreeRangeMap$SubRangeMap) -> <init>
    580:589:java.util.Iterator entryIterator() -> a
com.google.common.collect.TreeRangeMap$SubRangeMap$1$1 -> com.google.common.collect.lW:
    java.util.Iterator val$backingItr -> a
    com.google.common.collect.TreeRangeMap$SubRangeMap$1 this$2 -> b
    589:589:void <init>(com.google.common.collect.TreeRangeMap$SubRangeMap$1,java.util.Iterator) -> <init>
    593:600:java.util.Map$Entry computeNext() -> a
    589:589:java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap -> com.google.common.collect.lX:
    com.google.common.collect.TreeRangeMap$SubRangeMap this$1 -> b
    626:626:void <init>(com.google.common.collect.TreeRangeMap$SubRangeMap) -> <init>
    630:630:boolean containsKey(java.lang.Object) -> containsKey
    636:663:java.lang.Object get(java.lang.Object) -> get
    668:675:java.lang.Object remove(java.lang.Object) -> remove
    680:681:void clear() -> clear
    684:693:boolean removeEntryIf(com.google.common.base.Predicate) -> a
    698:698:java.util.Set keySet() -> keySet
    713:713:java.util.Set entrySet() -> entrySet
    742:750:java.util.Iterator entryIterator() -> a
    770:770:java.util.Collection values() -> values
    626:626:boolean access$400(com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap,com.google.common.base.Predicate) -> a
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1 -> com.google.common.collect.lY:
    com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap this$2 -> a
    698:698:void <init>(com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap,java.util.Map) -> <init>
    701:701:boolean remove(java.lang.Object) -> remove
    706:706:boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2 -> com.google.common.collect.lZ:
    com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap this$2 -> a
    713:713:void <init>(com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap) -> <init>
    716:716:java.util.Map map() -> a
    721:721:java.util.Iterator iterator() -> iterator
    726:726:boolean retainAll(java.util.Collection) -> retainAll
    731:731:int size() -> size
    736:736:boolean isEmpty() -> isEmpty
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$3 -> com.google.common.collect.ma:
    java.util.Iterator val$backingItr -> a
    com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap this$2 -> b
    750:750:void <init>(com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap,java.util.Iterator) -> <init>
    754:763:java.util.Map$Entry computeNext() -> a
    750:750:java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$4 -> com.google.common.collect.mb:
    com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap this$2 -> a
    770:770:void <init>(com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap,java.util.Map) -> <init>
    773:773:boolean removeAll(java.util.Collection) -> removeAll
    778:778:boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.TreeRangeSet -> com.google.common.collect.TreeRangeSet:
    java.util.NavigableMap rangesByLowerBound -> a
    java.util.Set asRanges -> b
    java.util.Set asDescendingSetOfRanges -> c
    com.google.common.collect.RangeSet complement -> d
    51:51:com.google.common.collect.TreeRangeSet create() -> create
    56:58:com.google.common.collect.TreeRangeSet create(com.google.common.collect.RangeSet) -> create
    71:73:com.google.common.collect.TreeRangeSet create(java.lang.Iterable) -> create
    76:78:void <init>(java.util.NavigableMap) -> <init>
    85:86:java.util.Set asRanges() -> asRanges
    91:93:java.util.Set asDescendingSetOfRanges() -> asDescendingSetOfRanges
    123:129:com.google.common.collect.Range rangeContaining(java.lang.Comparable) -> rangeContaining
    135:145:boolean intersects(com.google.common.collect.Range) -> intersects
    150:152:boolean encloses(com.google.common.collect.Range) -> encloses
    156:159:com.google.common.collect.Range rangeEnclosing(com.google.common.collect.Range) -> a
    165:170:com.google.common.collect.Range span() -> span
    175:218:void add(com.google.common.collect.Range) -> add
    222:261:void remove(com.google.common.collect.Range) -> remove
    264:269:void replaceRangeWithSameLowerBound(com.google.common.collect.Range) -> b
    275:276:com.google.common.collect.RangeSet complement() -> complement
    857:857:com.google.common.collect.RangeSet subRangeSet(com.google.common.collect.Range) -> subRangeSet
    42:42:boolean equals(java.lang.Object) -> equals
    42:42:void removeAll(com.google.common.collect.RangeSet) -> removeAll
    42:42:void addAll(com.google.common.collect.RangeSet) -> addAll
    42:42:boolean enclosesAll(com.google.common.collect.RangeSet) -> enclosesAll
    42:42:void clear() -> clear
    42:42:boolean isEmpty() -> isEmpty
    42:42:boolean contains(java.lang.Comparable) -> contains
    44:44:void <init>(java.util.NavigableMap,byte) -> <init>
    44:44:com.google.common.collect.Range access$600(com.google.common.collect.TreeRangeSet,com.google.common.collect.Range) -> a
com.google.common.collect.TreeRangeSet$AsRanges -> com.google.common.collect.mc:
    java.util.Collection delegate -> a
    101:103:void <init>(com.google.common.collect.TreeRangeSet,java.util.Collection) -> <init>
    107:107:java.util.Collection delegate() -> delegate
    112:112:int hashCode() -> hashCode
    117:117:boolean equals(java.lang.Object) -> equals
    97:97:java.lang.Object delegate() -> delegate
com.google.common.collect.TreeRangeSet$Complement -> com.google.common.collect.md:
    com.google.common.collect.TreeRangeSet this$0 -> b
    650:652:void <init>(com.google.common.collect.TreeRangeSet) -> <init>
    656:657:void add(com.google.common.collect.Range) -> add
    661:662:void remove(com.google.common.collect.Range) -> remove
    666:666:boolean contains(java.lang.Comparable) -> contains
    671:671:com.google.common.collect.RangeSet complement() -> complement
com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound -> com.google.common.collect.me:
    java.util.NavigableMap positiveRangesByLowerBound -> a
    java.util.NavigableMap positiveRangesByUpperBound -> b
    com.google.common.collect.Range complementLowerBoundWindow -> c
    458:459:void <init>(java.util.NavigableMap) -> <init>
    462:466:void <init>(java.util.NavigableMap,com.google.common.collect.Range) -> <init>
    469:473:java.util.NavigableMap subMap(com.google.common.collect.Range) -> a
    480:483:java.util.NavigableMap subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean) -> a
    488:488:java.util.NavigableMap headMap(com.google.common.collect.Cut,boolean) -> a
    493:493:java.util.NavigableMap tailMap(com.google.common.collect.Cut,boolean) -> b
    498:498:java.util.Comparator comparator() -> comparator
    513:534:java.util.Iterator entryIterator() -> b
    567:595:java.util.Iterator descendingEntryIterator() -> a
    622:622:int size() -> size
    627:640:com.google.common.collect.Range get(java.lang.Object) -> a
    645:645:boolean containsKey(java.lang.Object) -> containsKey
    445:445:java.lang.Object get(java.lang.Object) -> get
    445:445:java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    445:445:java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    445:445:java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    445:445:com.google.common.collect.Range access$100(com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound) -> a
com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$1 -> com.google.common.collect.mf:
    com.google.common.collect.Cut nextComplementRangeLowerBound -> a
    com.google.common.collect.Cut val$firstComplementRangeLowerBound -> b
    com.google.common.collect.PeekingIterator val$positiveItr -> c
    com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound this$0 -> d
    534:535:void <init>(com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound,com.google.common.collect.Cut,com.google.common.collect.PeekingIterator) -> <init>
    539:552:java.util.Map$Entry computeNext() -> a
    534:534:java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$2 -> com.google.common.collect.mg:
    com.google.common.collect.Cut nextComplementRangeUpperBound -> a
    com.google.common.collect.Cut val$firstComplementRangeUpperBound -> b
    com.google.common.collect.PeekingIterator val$positiveItr -> c
    com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound this$0 -> d
    595:596:void <init>(com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound,com.google.common.collect.Cut,com.google.common.collect.PeekingIterator) -> <init>
    600:615:java.util.Map$Entry computeNext() -> a
    595:595:java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeSet$RangesByUpperBound -> com.google.common.collect.mh:
    java.util.NavigableMap rangesByLowerBound -> a
    com.google.common.collect.Range upperBoundWindow -> b
    290:293:void <init>(java.util.NavigableMap) -> <init>
    296:299:void <init>(java.util.NavigableMap,com.google.common.collect.Range) -> <init>
    302:305:java.util.NavigableMap subMap(com.google.common.collect.Range) -> a
    312:315:java.util.NavigableMap subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean) -> a
    320:320:java.util.NavigableMap headMap(com.google.common.collect.Cut,boolean) -> a
    325:325:java.util.NavigableMap tailMap(com.google.common.collect.Cut,boolean) -> b
    330:330:java.util.Comparator comparator() -> comparator
    335:335:boolean containsKey(java.lang.Object) -> containsKey
    340:355:com.google.common.collect.Range get(java.lang.Object) -> a
    365:382:java.util.Iterator entryIterator() -> b
    401:415:java.util.Iterator descendingEntryIterator() -> a
    431:434:int size() -> size
    439:441:boolean isEmpty() -> isEmpty
    279:279:java.lang.Object get(java.lang.Object) -> get
    279:279:java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    279:279:java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    279:279:java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    280:280:com.google.common.collect.Range access$000(com.google.common.collect.TreeRangeSet$RangesByUpperBound) -> a
com.google.common.collect.TreeRangeSet$RangesByUpperBound$1 -> com.google.common.collect.mi:
    java.util.Iterator val$backingItr -> a
    com.google.common.collect.TreeRangeSet$RangesByUpperBound this$0 -> b
    382:382:void <init>(com.google.common.collect.TreeRangeSet$RangesByUpperBound,java.util.Iterator) -> <init>
    385:392:java.util.Map$Entry computeNext() -> a
    382:382:java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeSet$RangesByUpperBound$2 -> com.google.common.collect.mj:
    com.google.common.collect.PeekingIterator val$backingItr -> a
    com.google.common.collect.TreeRangeSet$RangesByUpperBound this$0 -> b
    415:415:void <init>(com.google.common.collect.TreeRangeSet$RangesByUpperBound,com.google.common.collect.PeekingIterator) -> <init>
    418:424:java.util.Map$Entry computeNext() -> a
    415:415:java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeSet$SubRangeSet -> com.google.common.collect.mk:
    com.google.common.collect.Range restriction -> b
    com.google.common.collect.TreeRangeSet this$0 -> c
    863:868:void <init>(com.google.common.collect.TreeRangeSet,com.google.common.collect.Range) -> <init>
    872:876:boolean encloses(com.google.common.collect.Range) -> encloses
    881:885:com.google.common.collect.Range rangeContaining(java.lang.Comparable) -> rangeContaining
    890:896:void add(com.google.common.collect.Range) -> add
    900:903:void remove(com.google.common.collect.Range) -> remove
    907:907:boolean contains(java.lang.Comparable) -> contains
    912:913:void clear() -> clear
    917:922:com.google.common.collect.RangeSet subRangeSet(com.google.common.collect.Range) -> subRangeSet
com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound -> com.google.common.collect.ml:
    com.google.common.collect.Range lowerBoundWindow -> a
    com.google.common.collect.Range restriction -> b
    java.util.NavigableMap rangesByLowerBound -> c
    java.util.NavigableMap rangesByUpperBound -> d
    695:700:void <init>(com.google.common.collect.Range,com.google.common.collect.Range,java.util.NavigableMap) -> <init>
    703:707:java.util.NavigableMap subMap(com.google.common.collect.Range) -> a
    714:719:java.util.NavigableMap subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean) -> a
    724:724:java.util.NavigableMap headMap(com.google.common.collect.Cut,boolean) -> a
    729:729:java.util.NavigableMap tailMap(com.google.common.collect.Cut,boolean) -> b
    734:734:java.util.Comparator comparator() -> comparator
    739:739:boolean containsKey(java.lang.Object) -> containsKey
    744:768:com.google.common.collect.Range get(java.lang.Object) -> a
    773:796:java.util.Iterator entryIterator() -> b
    815:829:java.util.Iterator descendingEntryIterator() -> a
    851:851:int size() -> size
    675:675:java.lang.Object get(java.lang.Object) -> get
    675:675:java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    675:675:java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    675:675:java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    675:675:com.google.common.collect.Range access$300(com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound) -> a
    675:675:com.google.common.collect.Range access$400(com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound) -> b
    675:675:void <init>(com.google.common.collect.Range,com.google.common.collect.Range,java.util.NavigableMap,byte) -> <init>
com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$1 -> com.google.common.collect.mm:
    java.util.Iterator val$completeRangeItr -> a
    com.google.common.collect.Cut val$upperBoundOnLowerBounds -> b
    com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound this$0 -> c
    796:796:void <init>(com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound,java.util.Iterator,com.google.common.collect.Cut) -> <init>
    799:807:java.util.Map$Entry computeNext() -> a
    796:796:java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$2 -> com.google.common.collect.mn:
    java.util.Iterator val$completeRangeItr -> a
    com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound this$0 -> b
    829:829:void <init>(com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound,java.util.Iterator) -> <init>
    832:843:java.util.Map$Entry computeNext() -> a
    829:829:java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeTraverser -> com.google.common.collect.TreeTraverser:
    77:77:void <init>() -> <init>
    92:93:com.google.common.collect.TreeTraverser using(com.google.common.base.Function) -> using
    java.lang.Iterable children(java.lang.Object) -> children
    116:117:com.google.common.collect.FluentIterable preOrderTraversal(java.lang.Object) -> preOrderTraversal
    138:138:com.google.common.collect.UnmodifiableIterator preOrderIterator(java.lang.Object) -> a
    181:182:com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object) -> postOrderTraversal
    203:203:com.google.common.collect.UnmodifiableIterator postOrderIterator(java.lang.Object) -> b
    256:257:com.google.common.collect.FluentIterable breadthFirstTraversal(java.lang.Object) -> breadthFirstTraversal
com.google.common.collect.TreeTraverser$1 -> com.google.common.collect.mo:
    com.google.common.base.Function val$nodeToChildrenFunction -> a
    93:93:void <init>(com.google.common.base.Function) -> <init>
    96:96:java.lang.Iterable children(java.lang.Object) -> children
com.google.common.collect.TreeTraverser$2 -> com.google.common.collect.mp:
    java.lang.Object val$root -> b
    com.google.common.collect.TreeTraverser this$0 -> a
    117:117:void <init>(com.google.common.collect.TreeTraverser,java.lang.Object) -> <init>
    120:120:com.google.common.collect.UnmodifiableIterator iterator() -> a
    125:133:void forEach(java.util.function.Consumer) -> forEach
    117:117:java.util.Iterator iterator() -> iterator
com.google.common.collect.TreeTraverser$2$1 -> com.google.common.collect.mq:
    java.util.function.Consumer val$action -> a
    com.google.common.collect.TreeTraverser$2 this$1 -> b
    126:126:void <init>(com.google.common.collect.TreeTraverser$2,java.util.function.Consumer) -> <init>
    129:131:void accept(java.lang.Object) -> accept
com.google.common.collect.TreeTraverser$3 -> com.google.common.collect.mr:
    java.lang.Object val$root -> b
    com.google.common.collect.TreeTraverser this$0 -> a
    182:182:void <init>(com.google.common.collect.TreeTraverser,java.lang.Object) -> <init>
    185:185:com.google.common.collect.UnmodifiableIterator iterator() -> a
    190:198:void forEach(java.util.function.Consumer) -> forEach
    182:182:java.util.Iterator iterator() -> iterator
com.google.common.collect.TreeTraverser$3$1 -> com.google.common.collect.ms:
    java.util.function.Consumer val$action -> a
    com.google.common.collect.TreeTraverser$3 this$1 -> b
    191:191:void <init>(com.google.common.collect.TreeTraverser$3,java.util.function.Consumer) -> <init>
    194:196:void accept(java.lang.Object) -> accept
com.google.common.collect.TreeTraverser$4 -> com.google.common.collect.mt:
    java.lang.Object val$root -> a
    com.google.common.collect.TreeTraverser this$0 -> b
    257:257:void <init>(com.google.common.collect.TreeTraverser,java.lang.Object) -> <init>
    260:260:com.google.common.collect.UnmodifiableIterator iterator() -> a
    257:257:java.util.Iterator iterator() -> iterator
com.google.common.collect.TreeTraverser$BreadthFirstIterator -> com.google.common.collect.mu:
    java.util.Queue queue -> a
    com.google.common.collect.TreeTraverser this$0 -> b
    269:272:void <init>(com.google.common.collect.TreeTraverser,java.lang.Object) -> <init>
    276:276:boolean hasNext() -> hasNext
    281:281:java.lang.Object peek() -> peek
    286:288:java.lang.Object next() -> next
com.google.common.collect.TreeTraverser$PostOrderIterator -> com.google.common.collect.mv:
    java.util.ArrayDeque stack -> a
    com.google.common.collect.TreeTraverser this$0 -> b
    219:222:void <init>(com.google.common.collect.TreeTraverser,java.lang.Object) -> <init>
    226:236:java.lang.Object computeNext() -> computeNext
    240:240:com.google.common.collect.TreeTraverser$PostOrderNode expand(java.lang.Object) -> a
com.google.common.collect.TreeTraverser$PostOrderNode -> com.google.common.collect.mw:
    java.lang.Object root -> a
    java.util.Iterator childIterator -> b
    210:213:void <init>(java.lang.Object,java.util.Iterator) -> <init>
com.google.common.collect.TreeTraverser$PreOrderIterator -> com.google.common.collect.mx:
    java.util.Deque stack -> a
    com.google.common.collect.TreeTraverser this$0 -> b
    144:147:void <init>(com.google.common.collect.TreeTraverser,java.lang.Object) -> <init>
    151:151:boolean hasNext() -> hasNext
    156:165:java.lang.Object next() -> next
com.google.common.collect.UnmodifiableIterator -> com.google.common.collect.UnmodifiableIterator:
    35:35:void <init>() -> <init>
    46:46:void remove() -> remove
com.google.common.collect.UnmodifiableListIterator -> com.google.common.collect.UnmodifiableListIterator:
    32:32:void <init>() -> <init>
    43:43:void add(java.lang.Object) -> add
    55:55:void set(java.lang.Object) -> set
com.google.common.collect.UnmodifiableSortedMultiset -> com.google.common.collect.my:
    com.google.common.collect.UnmodifiableSortedMultiset descendingMultiset -> a
    long serialVersionUID -> serialVersionUID
    36:37:void <init>(com.google.common.collect.SortedMultiset) -> <init>
    41:41:com.google.common.collect.SortedMultiset delegate() -> b
    46:46:java.util.Comparator comparator() -> comparator
    51:51:java.util.NavigableSet createElementSet() -> c
    56:56:java.util.NavigableSet elementSet() -> elementSet
    63:69:com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    74:74:com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    79:79:com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    84:84:com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    89:89:com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    94:94:com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    100:101:com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    106:106:com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    32:32:java.util.Set elementSet() -> elementSet
    32:32:java.util.Set createElementSet() -> a
    32:32:com.google.common.collect.Multiset delegate() -> delegate
    32:32:java.util.Collection delegate() -> delegate
    32:32:java.lang.Object delegate() -> delegate
    32:32:java.util.SortedSet elementSet() -> elementSet
com.google.common.collect.UsingToStringOrdering -> com.google.common.collect.mz:
    com.google.common.collect.UsingToStringOrdering INSTANCE -> a
    long serialVersionUID -> serialVersionUID
    29:29:int compare(java.lang.Object,java.lang.Object) -> compare
    34:34:java.lang.Object readResolve() -> readResolve
    39:39:java.lang.String toString() -> toString
    42:42:void <init>() -> <init>
    25:25:void <clinit>() -> <clinit>
com.google.common.escape.ArrayBasedCharEscaper -> com.google.common.escape.ArrayBasedCharEscaper:
    char[][] replacements -> a
    int replacementsLength -> b
    char safeMin -> c
    char safeMax -> d
    69:70:void <init>(java.util.Map,char,char) -> <init>
    85:98:void <init>(com.google.common.escape.ArrayBasedEscaperMap,char,char) -> <init>
    106:113:java.lang.String escape(java.lang.String) -> escape
    123:132:char[] escape(char) -> escape
    char[] escapeUnsafe(char) -> escapeUnsafe
com.google.common.escape.ArrayBasedEscaperMap -> com.google.common.escape.ArrayBasedEscaperMap:
    char[][] replacementArray -> a
    char[][] EMPTY_REPLACEMENT_ARRAY -> b
    49:49:com.google.common.escape.ArrayBasedEscaperMap create(java.util.Map) -> create
    56:58:void <init>(char[][]) -> <init>
    62:62:char[][] getReplacementArray() -> a
    70:79:char[][] createReplacementArray(java.util.Map) -> a
    83:83:void <clinit>() -> <clinit>
com.google.common.escape.ArrayBasedUnicodeEscaper -> com.google.common.escape.ArrayBasedUnicodeEscaper:
    char[][] replacements -> a
    int replacementsLength -> b
    int safeMin -> c
    int safeMax -> d
    char safeMinChar -> e
    char safeMaxChar -> f
    77:78:void <init>(java.util.Map,int,int,java.lang.String) -> <init>
    99:136:void <init>(com.google.common.escape.ArrayBasedEscaperMap,int,int,java.lang.String) -> <init>
    144:153:java.lang.String escape(java.lang.String) -> escape
    163:172:char[] escape(int) -> escape
    178:187:int nextEscapeIndex(java.lang.CharSequence,int,int) -> nextEscapeIndex
    char[] escapeUnsafe(int) -> escapeUnsafe
com.google.common.escape.CharEscaper -> com.google.common.escape.CharEscaper:
    46:46:void <init>() -> <init>
    57:65:java.lang.String escape(java.lang.String) -> escape
    char[] escape(char) -> escape
    97:155:java.lang.String escapeSlow(java.lang.String,int) -> escapeSlow
    163:170:char[] growBuffer(char[],int,int) -> a
com.google.common.escape.CharEscaperBuilder -> com.google.common.escape.CharEscaperBuilder:
    java.util.Map map -> a
    int max -> b
    77:82:void <init>() -> <init>
    87:91:com.google.common.escape.CharEscaperBuilder addEscape(char,java.lang.String) -> addEscape
    97:101:com.google.common.escape.CharEscaperBuilder addEscapes(char[],java.lang.String) -> addEscapes
    112:116:char[][] toArray() -> toArray
    126:126:com.google.common.escape.Escaper toEscaper() -> toEscaper
com.google.common.escape.CharEscaperBuilder$CharArrayDecorator -> com.google.common.escape.a:
    char[][] replacements -> a
    int replaceLength -> b
    46:49:void <init>(char[][]) -> <init>
    57:64:java.lang.String escape(java.lang.String) -> escape
    69:69:char[] escape(char) -> escape
com.google.common.escape.Escaper -> com.google.common.escape.Escaper:
    com.google.common.base.Function asFunction -> a
    62:87:void <init>() -> <init>
    java.lang.String escape(java.lang.String) -> escape
    97:97:com.google.common.base.Function asFunction() -> asFunction
com.google.common.escape.Escaper$1 -> com.google.common.escape.b:
    com.google.common.escape.Escaper this$0 -> a
    88:88:void <init>(com.google.common.escape.Escaper) -> <init>
    91:91:java.lang.String apply(java.lang.String) -> a
    88:88:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.escape.Escapers -> com.google.common.escape.Escapers:
    com.google.common.escape.Escaper NULL_ESCAPER -> a
    36:36:void <init>() -> <init>
    42:42:com.google.common.escape.Escaper nullEscaper() -> nullEscaper
    79:79:com.google.common.escape.Escapers$Builder builder() -> builder
    202:202:java.lang.String computeReplacement(com.google.common.escape.CharEscaper,char) -> computeReplacement
    215:215:java.lang.String computeReplacement(com.google.common.escape.UnicodeEscaper,int) -> computeReplacement
    219:219:java.lang.String stringOrNull(char[]) -> a
    47:47:void <clinit>() -> <clinit>
com.google.common.escape.Escapers$1 -> com.google.common.escape.c:
    48:48:void <init>() -> <init>
    51:51:java.lang.String escape(java.lang.String) -> escape
    57:57:char[] escape(char) -> escape
com.google.common.escape.Escapers$Builder -> com.google.common.escape.Escapers$Builder:
    java.util.Map replacementMap -> a
    char safeMin -> b
    char safeMax -> c
    java.lang.String unsafeReplacement -> d
    95:101:void <init>() -> <init>
    114:116:com.google.common.escape.Escapers$Builder setSafeRange(char,char) -> setSafeRange
    129:130:com.google.common.escape.Escapers$Builder setUnsafeReplacement(java.lang.String) -> setUnsafeReplacement
    145:148:com.google.common.escape.Escapers$Builder addEscape(char,java.lang.String) -> addEscape
    153:153:com.google.common.escape.Escaper build() -> build
    94:94:void <init>(byte) -> <init>
    94:94:java.lang.String access$100(com.google.common.escape.Escapers$Builder) -> a
com.google.common.escape.Escapers$Builder$1 -> com.google.common.escape.d:
    char[] replacementChars -> a
    com.google.common.escape.Escapers$Builder this$0 -> b
    153:155:void <init>(com.google.common.escape.Escapers$Builder,java.util.Map,char,char) -> <init>
    159:159:char[] escapeUnsafe(char) -> escapeUnsafe
com.google.common.escape.Platform -> com.google.common.escape.e:
    java.lang.ThreadLocal DEST_TL -> a
    30:30:char[] charBufferFromThreadLocal() -> a
    38:38:void <clinit>() -> <clinit>
com.google.common.escape.Platform$1 -> com.google.common.escape.f:
    39:39:void <init>() -> <init>
    42:42:char[] initialValue() -> a
    39:39:java.lang.Object initialValue() -> initialValue
com.google.common.escape.UnicodeEscaper -> com.google.common.escape.UnicodeEscaper:
    59:59:void <init>() -> <init>
    char[] escape(int) -> escape
    102:105:java.lang.String escape(java.lang.String) -> escape
    131:139:int nextEscapeIndex(java.lang.CharSequence,int,int) -> nextEscapeIndex
    158:211:java.lang.String escapeSlow(java.lang.String,int) -> escapeSlow
    246:285:int codePointAt(java.lang.CharSequence,int,int) -> codePointAt
    293:300:char[] growBuffer(char[],int,int) -> a
com.google.common.eventbus.AllowConcurrentEvents -> com.google.common.eventbus.AllowConcurrentEvents:
com.google.common.eventbus.AsyncEventBus -> com.google.common.eventbus.AsyncEventBus:
    39:40:void <init>(java.lang.String,java.util.concurrent.Executor) -> <init>
    52:53:void <init>(java.util.concurrent.Executor,com.google.common.eventbus.SubscriberExceptionHandler) -> <init>
    62:63:void <init>(java.util.concurrent.Executor) -> <init>
com.google.common.eventbus.DeadEvent -> com.google.common.eventbus.DeadEvent:
    java.lang.Object source -> a
    java.lang.Object event -> b
    43:46:void <init>(java.lang.Object,java.lang.Object) -> <init>
    55:55:java.lang.Object getSource() -> getSource
    65:65:java.lang.Object getEvent() -> getEvent
    70:70:java.lang.String toString() -> toString
com.google.common.eventbus.Dispatcher -> com.google.common.eventbus.a:
    34:34:void <init>() -> <init>
    47:47:com.google.common.eventbus.Dispatcher perThreadDispatchQueue() -> a
    57:57:com.google.common.eventbus.Dispatcher legacyAsync() -> b
    void dispatch(java.lang.Object,java.util.Iterator) -> a
com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher -> com.google.common.eventbus.b:
    java.util.concurrent.ConcurrentLinkedQueue queue -> a
    130:152:void <init>() -> <init>
    156:165:void dispatch(java.lang.Object,java.util.Iterator) -> a
    130:130:void <init>(byte) -> <init>
com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher$EventWithSubscriber -> com.google.common.eventbus.c:
    java.lang.Object event -> a
    com.google.common.eventbus.Subscriber subscriber -> b
    171:174:void <init>(java.lang.Object,com.google.common.eventbus.Subscriber) -> <init>
    167:167:void <init>(java.lang.Object,com.google.common.eventbus.Subscriber,byte) -> <init>
    167:167:java.lang.Object access$700(com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher$EventWithSubscriber) -> a
    167:167:com.google.common.eventbus.Subscriber access$800(com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher$EventWithSubscriber) -> b
com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher -> com.google.common.eventbus.d:
    java.lang.ThreadLocal queue -> a
    java.lang.ThreadLocal dispatching -> b
    73:87:void <init>() -> <init>
    97:116:void dispatch(java.lang.Object,java.util.Iterator) -> a
    73:73:void <init>(byte) -> <init>
com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$1 -> com.google.common.eventbus.e:
    79:79:void <init>(com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher) -> <init>
    82:82:java.util.Queue initialValue() -> a
    79:79:java.lang.Object initialValue() -> initialValue
com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$2 -> com.google.common.eventbus.f:
    88:88:void <init>(com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher) -> <init>
    91:91:java.lang.Boolean initialValue() -> a
    88:88:java.lang.Object initialValue() -> initialValue
com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$Event -> com.google.common.eventbus.g:
    java.lang.Object event -> a
    java.util.Iterator subscribers -> b
    122:125:void <init>(java.lang.Object,java.util.Iterator) -> <init>
    118:118:void <init>(java.lang.Object,java.util.Iterator,byte) -> <init>
    118:118:java.util.Iterator access$400(com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$Event) -> a
    118:118:java.lang.Object access$500(com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$Event) -> b
com.google.common.eventbus.EventBus -> com.google.common.eventbus.EventBus:
    java.util.logging.Logger logger -> a
    java.lang.String identifier -> b
    java.util.concurrent.Executor executor -> c
    com.google.common.eventbus.SubscriberExceptionHandler exceptionHandler -> d
    com.google.common.eventbus.SubscriberRegistry subscribers -> e
    com.google.common.eventbus.Dispatcher dispatcher -> f
    109:110:void <init>() -> <init>
    119:124:void <init>(java.lang.String) -> <init>
    133:138:void <init>(com.google.common.eventbus.SubscriberExceptionHandler) -> <init>
    104:149:void <init>(java.lang.String,java.util.concurrent.Executor,com.google.common.eventbus.Dispatcher,com.google.common.eventbus.SubscriberExceptionHandler) -> <init>
    157:157:java.lang.String identifier() -> identifier
    162:162:java.util.concurrent.Executor executor() -> a
    167:178:void handleSubscriberException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext) -> a
    186:187:void register(java.lang.Object) -> register
    196:197:void unregister(java.lang.Object) -> unregister
    210:217:void post(java.lang.Object) -> post
    221:221:java.lang.String toString() -> toString
    98:98:void <clinit>() -> <clinit>
com.google.common.eventbus.EventBus$LoggingHandler -> com.google.common.eventbus.h:
    com.google.common.eventbus.EventBus$LoggingHandler INSTANCE -> a
    225:225:void <init>() -> <init>
    230:234:void handleException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext) -> handleException
    237:237:java.util.logging.Logger logger(com.google.common.eventbus.SubscriberExceptionContext) -> a
    241:250:java.lang.String message(com.google.common.eventbus.SubscriberExceptionContext) -> b
    226:226:void <clinit>() -> <clinit>
com.google.common.eventbus.Subscribe -> com.google.common.eventbus.Subscribe:
com.google.common.eventbus.Subscriber -> com.google.common.eventbus.i:
    com.google.common.eventbus.EventBus bus -> a
    java.lang.Object target -> b
    java.lang.reflect.Method method -> c
    java.util.concurrent.Executor executor -> d
    39:39:com.google.common.eventbus.Subscriber create(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method) -> a
    56:63:void <init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method) -> <init>
    67:78:void dispatchEvent(java.lang.Object) -> a
    87:98:void invokeSubscriberMethod(java.lang.Object) -> b
    102:102:com.google.common.eventbus.SubscriberExceptionContext context(java.lang.Object) -> c
    107:107:int hashCode() -> hashCode
    112:119:boolean equals(java.lang.Object) -> equals
    127:127:boolean isDeclaredThreadSafe(java.lang.reflect.Method) -> a
    35:35:com.google.common.eventbus.SubscriberExceptionContext access$100(com.google.common.eventbus.Subscriber,java.lang.Object) -> a
    35:35:com.google.common.eventbus.EventBus access$200(com.google.common.eventbus.Subscriber) -> a
    35:35:void <init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method,byte) -> <init>
com.google.common.eventbus.Subscriber$1 -> com.google.common.eventbus.j:
    java.lang.Object val$event -> a
    com.google.common.eventbus.Subscriber this$0 -> b
    68:68:void <init>(com.google.common.eventbus.Subscriber,java.lang.Object) -> <init>
    72:76:void run() -> run
com.google.common.eventbus.Subscriber$SynchronizedSubscriber -> com.google.common.eventbus.k:
    138:139:void <init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method) -> <init>
    143:146:void invokeSubscriberMethod(java.lang.Object) -> b
    135:135:void <init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method,byte) -> <init>
com.google.common.eventbus.SubscriberExceptionContext -> com.google.common.eventbus.SubscriberExceptionContext:
    com.google.common.eventbus.EventBus eventBus -> a
    java.lang.Object event -> b
    java.lang.Object subscriber -> c
    java.lang.reflect.Method subscriberMethod -> d
    40:45:void <init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.Object,java.lang.reflect.Method) -> <init>
    52:52:com.google.common.eventbus.EventBus getEventBus() -> getEventBus
    57:57:java.lang.Object getEvent() -> getEvent
    62:62:java.lang.Object getSubscriber() -> getSubscriber
    67:67:java.lang.reflect.Method getSubscriberMethod() -> getSubscriberMethod
com.google.common.eventbus.SubscriberExceptionHandler -> com.google.common.eventbus.SubscriberExceptionHandler:
    void handleException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext) -> handleException
com.google.common.eventbus.SubscriberRegistry -> com.google.common.eventbus.l:
    java.util.concurrent.ConcurrentMap subscribers -> a
    com.google.common.eventbus.EventBus bus -> b
    com.google.common.cache.LoadingCache subscriberMethodsCache -> c
    com.google.common.cache.LoadingCache flattenHierarchyCache -> d
    62:70:void <init>(com.google.common.eventbus.EventBus) -> <init>
    74:90:void register(java.lang.Object) -> a
    94:113:void unregister(java.lang.Object) -> b
    125:138:java.util.Iterator getSubscribers(java.lang.Object) -> c
    162:169:com.google.common.collect.Multimap findAllSubscribers(java.lang.Object) -> d
    173:173:com.google.common.collect.ImmutableList getAnnotatedMethods(java.lang.Class) -> b
    177:198:com.google.common.collect.ImmutableList getAnnotatedMethodsNotCached(java.lang.Class) -> c
    223:225:com.google.common.collect.ImmutableSet flattenHierarchy(java.lang.Class) -> d
    54:54:com.google.common.collect.ImmutableList access$000(java.lang.Class) -> a
    148:205:void <clinit>() -> <clinit>
com.google.common.eventbus.SubscriberRegistry$1 -> com.google.common.eventbus.m:
    151:151:void <init>() -> <init>
    154:154:com.google.common.collect.ImmutableList load(java.lang.Class) -> a
    151:151:java.lang.Object load(java.lang.Object) -> load
com.google.common.eventbus.SubscriberRegistry$2 -> com.google.common.eventbus.n:
    206:206:void <init>() -> <init>
    211:212:com.google.common.collect.ImmutableSet load(java.lang.Class) -> a
    206:206:java.lang.Object load(java.lang.Object) -> load
com.google.common.eventbus.SubscriberRegistry$MethodIdentifier -> com.google.common.eventbus.o:
    java.lang.String name -> a
    java.util.List parameterTypes -> b
    234:237:void <init>(java.lang.reflect.Method) -> <init>
    241:241:int hashCode() -> hashCode
    246:250:boolean equals(java.lang.Object) -> equals
com.google.common.graph.AbstractBaseGraph -> com.google.common.graph.a:
    44:44:void <init>() -> <init>
    52:58:long edgeCount() -> edgeCount
    67:67:java.util.Set edges() -> edges
    102:104:java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    144:149:int degree(java.lang.Object) -> degree
    155:155:int inDegree(java.lang.Object) -> inDegree
    160:160:int outDegree(java.lang.Object) -> outDegree
    165:167:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    172:178:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair) -> hasEdgeConnecting
    186:188:void validateEndpoints(com.google.common.graph.EndpointPair) -> validateEndpoints
    191:191:boolean isOrderingCompatible(com.google.common.graph.EndpointPair) -> isOrderingCompatible
com.google.common.graph.AbstractBaseGraph$1 -> com.google.common.graph.b:
    com.google.common.graph.AbstractBaseGraph this$0 -> a
    67:67:void <init>(com.google.common.graph.AbstractBaseGraph) -> <init>
    70:70:com.google.common.collect.UnmodifiableIterator iterator() -> a
    75:75:int size() -> size
    80:80:boolean remove(java.lang.Object) -> remove
    89:95:boolean contains(java.lang.Object) -> contains
    67:67:java.util.Iterator iterator() -> iterator
com.google.common.graph.AbstractBaseGraph$2 -> com.google.common.graph.c:
    104:104:void <init>(com.google.common.graph.AbstractBaseGraph,com.google.common.graph.BaseGraph,java.lang.Object) -> <init>
    107:130:com.google.common.collect.UnmodifiableIterator iterator() -> a
    104:104:java.util.Iterator iterator() -> iterator
com.google.common.graph.AbstractBaseGraph$2$1 -> com.google.common.graph.d:
    com.google.common.graph.AbstractBaseGraph$2 this$1 -> a
    112:112:void <init>(com.google.common.graph.AbstractBaseGraph$2) -> <init>
    115:115:com.google.common.graph.EndpointPair apply(java.lang.Object) -> a
    112:112:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.AbstractBaseGraph$2$2 -> com.google.common.graph.e:
    com.google.common.graph.AbstractBaseGraph$2 this$1 -> a
    121:121:void <init>(com.google.common.graph.AbstractBaseGraph$2) -> <init>
    124:124:com.google.common.graph.EndpointPair apply(java.lang.Object) -> a
    121:121:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.AbstractBaseGraph$2$3 -> com.google.common.graph.f:
    com.google.common.graph.AbstractBaseGraph$2 this$1 -> a
    131:131:void <init>(com.google.common.graph.AbstractBaseGraph$2) -> <init>
    134:134:com.google.common.graph.EndpointPair apply(java.lang.Object) -> a
    131:131:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.AbstractDirectedNetworkConnections -> com.google.common.graph.g:
    java.util.Map inEdgeMap -> a
    java.util.Map outEdgeMap -> b
    int selfLoopCount -> c
    52:57:void <init>(java.util.Map,java.util.Map,int) -> <init>
    61:61:java.util.Set adjacentNodes() -> a
    66:66:java.util.Set incidentEdges() -> b
    90:90:java.util.Set inEdges() -> c
    95:95:java.util.Set outEdges() -> d
    102:102:java.lang.Object adjacentNode(java.lang.Object) -> a
    107:111:java.lang.Object removeInEdge(java.lang.Object,boolean) -> a
    116:117:java.lang.Object removeOutEdge(java.lang.Object) -> b
    122:127:void addInEdge(java.lang.Object,java.lang.Object,boolean) -> a
    131:133:void addOutEdge(java.lang.Object,java.lang.Object) -> a
    42:42:int access$000(com.google.common.graph.AbstractDirectedNetworkConnections) -> a
com.google.common.graph.AbstractDirectedNetworkConnections$1 -> com.google.common.graph.h:
    com.google.common.graph.AbstractDirectedNetworkConnections this$0 -> a
    66:66:void <init>(com.google.common.graph.AbstractDirectedNetworkConnections) -> <init>
    69:73:com.google.common.collect.UnmodifiableIterator iterator() -> a
    78:78:int size() -> size
    83:83:boolean contains(java.lang.Object) -> contains
    66:66:java.util.Iterator iterator() -> iterator
com.google.common.graph.AbstractGraph -> com.google.common.graph.AbstractGraph:
    31:31:void <init>() -> <init>
    35:45:boolean equals(java.lang.Object) -> equals
    50:50:int hashCode() -> hashCode
    56:63:java.lang.String toString() -> toString
    30:30:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair) -> hasEdgeConnecting
    30:30:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    30:30:int outDegree(java.lang.Object) -> outDegree
    30:30:int inDegree(java.lang.Object) -> inDegree
    30:30:int degree(java.lang.Object) -> degree
    30:30:java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    30:30:java.util.Set edges() -> edges
com.google.common.graph.AbstractGraphBuilder -> com.google.common.graph.i:
    boolean directed -> a
    boolean allowsSelfLoops -> b
    com.google.common.graph.ElementOrder nodeOrder -> c
    com.google.common.graph.ElementOrder incidentEdgeOrder -> d
    com.google.common.base.Optional expectedNodeCount -> e
    28:42:void <init>(boolean) -> <init>
com.google.common.graph.AbstractNetwork -> com.google.common.graph.AbstractNetwork:
    53:53:void <init>() -> <init>
    57:57:com.google.common.graph.Graph asGraph() -> asGraph
    141:144:int degree(java.lang.Object) -> degree
    150:150:int inDegree(java.lang.Object) -> inDegree
    155:155:int outDegree(java.lang.Object) -> outDegree
    160:163:java.util.Set adjacentEdges(java.lang.Object) -> adjacentEdges
    168:172:java.util.Set edgesConnecting(java.lang.Object,java.lang.Object) -> edgesConnecting
    177:178:java.util.Set edgesConnecting(com.google.common.graph.EndpointPair) -> edgesConnecting
    182:182:com.google.common.base.Predicate connectedPredicate(java.lang.Object,java.lang.Object) -> a
    192:192:java.util.Optional edgeConnecting(java.lang.Object,java.lang.Object) -> edgeConnecting
    197:198:java.util.Optional edgeConnecting(com.google.common.graph.EndpointPair) -> edgeConnecting
    203:210:java.lang.Object edgeConnectingOrNull(java.lang.Object,java.lang.Object) -> edgeConnectingOrNull
    216:217:java.lang.Object edgeConnectingOrNull(com.google.common.graph.EndpointPair) -> edgeConnectingOrNull
    222:224:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    229:233:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair) -> hasEdgeConnecting
    241:243:void validateEndpoints(com.google.common.graph.EndpointPair) -> validateEndpoints
    246:246:boolean isOrderingCompatible(com.google.common.graph.EndpointPair) -> isOrderingCompatible
    251:261:boolean equals(java.lang.Object) -> equals
    266:266:int hashCode() -> hashCode
    272:281:java.lang.String toString() -> toString
    285:292:java.util.Map edgeIncidentNodesMap(com.google.common.graph.Network) -> a
com.google.common.graph.AbstractNetwork$1 -> com.google.common.graph.j:
    com.google.common.graph.AbstractNetwork this$0 -> a
    57:57:void <init>(com.google.common.graph.AbstractNetwork) -> <init>
    60:60:java.util.Set nodes() -> nodes
    65:70:java.util.Set edges() -> edges
    107:107:com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    112:112:boolean isDirected() -> isDirected
    117:117:boolean allowsSelfLoops() -> allowsSelfLoops
    122:122:java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    127:127:java.util.Set predecessors(java.lang.Object) -> predecessors
    132:132:java.util.Set successors(java.lang.Object) -> successors
    57:57:java.lang.Iterable successors(java.lang.Object) -> successors
    57:57:java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.AbstractNetwork$1$1 -> com.google.common.graph.k:
    com.google.common.graph.AbstractNetwork$1 this$1 -> a
    70:70:void <init>(com.google.common.graph.AbstractNetwork$1) -> <init>
    73:74:java.util.Iterator iterator() -> iterator
    85:85:int size() -> size
    94:100:boolean contains(java.lang.Object) -> contains
com.google.common.graph.AbstractNetwork$1$1$1 -> com.google.common.graph.l:
    com.google.common.graph.AbstractNetwork$1$1 this$2 -> a
    75:75:void <init>(com.google.common.graph.AbstractNetwork$1$1) -> <init>
    78:78:com.google.common.graph.EndpointPair apply(java.lang.Object) -> a
    75:75:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.AbstractNetwork$2 -> com.google.common.graph.m:
    java.lang.Object val$nodePresent -> a
    java.lang.Object val$nodeToCheck -> b
    com.google.common.graph.AbstractNetwork this$0 -> c
    182:182:void <init>(com.google.common.graph.AbstractNetwork,java.lang.Object,java.lang.Object) -> <init>
    185:185:boolean apply(java.lang.Object) -> apply
com.google.common.graph.AbstractNetwork$3 -> com.google.common.graph.n:
    com.google.common.graph.Network val$network -> a
    286:286:void <init>(com.google.common.graph.Network) -> <init>
    289:289:com.google.common.graph.EndpointPair apply(java.lang.Object) -> a
    286:286:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.AbstractUndirectedNetworkConnections -> com.google.common.graph.o:
    java.util.Map incidentEdgeMap -> a
    37:39:void <init>(java.util.Map) -> <init>
    43:43:java.util.Set predecessors() -> e
    48:48:java.util.Set successors() -> f
    53:53:java.util.Set incidentEdges() -> b
    58:58:java.util.Set inEdges() -> c
    63:63:java.util.Set outEdges() -> d
    68:68:java.lang.Object adjacentNode(java.lang.Object) -> a
    73:76:java.lang.Object removeInEdge(java.lang.Object,boolean) -> a
    81:82:java.lang.Object removeOutEdge(java.lang.Object) -> b
    87:90:void addInEdge(java.lang.Object,java.lang.Object,boolean) -> a
    94:96:void addOutEdge(java.lang.Object,java.lang.Object) -> a
com.google.common.graph.AbstractValueGraph -> com.google.common.graph.AbstractValueGraph:
    40:40:void <init>() -> <init>
    45:45:com.google.common.graph.Graph asGraph() -> asGraph
    105:105:java.util.Optional edgeValue(java.lang.Object,java.lang.Object) -> edgeValue
    110:110:java.util.Optional edgeValue(com.google.common.graph.EndpointPair) -> edgeValue
    115:125:boolean equals(java.lang.Object) -> equals
    130:130:int hashCode() -> hashCode
    136:143:java.lang.String toString() -> toString
    147:154:java.util.Map edgeValueMap(com.google.common.graph.ValueGraph) -> a
    39:39:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair) -> hasEdgeConnecting
    39:39:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    39:39:int outDegree(java.lang.Object) -> outDegree
    39:39:int inDegree(java.lang.Object) -> inDegree
    39:39:int degree(java.lang.Object) -> degree
    39:39:java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    39:39:java.util.Set edges() -> edges
com.google.common.graph.AbstractValueGraph$1 -> com.google.common.graph.p:
    com.google.common.graph.AbstractValueGraph this$0 -> a
    45:45:void <init>(com.google.common.graph.AbstractValueGraph) -> <init>
    48:48:java.util.Set nodes() -> nodes
    53:53:java.util.Set edges() -> edges
    58:58:boolean isDirected() -> isDirected
    63:63:boolean allowsSelfLoops() -> allowsSelfLoops
    68:68:com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    73:73:java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    78:78:java.util.Set predecessors(java.lang.Object) -> predecessors
    83:83:java.util.Set successors(java.lang.Object) -> successors
    88:88:int degree(java.lang.Object) -> degree
    93:93:int inDegree(java.lang.Object) -> inDegree
    98:98:int outDegree(java.lang.Object) -> outDegree
    45:45:java.lang.Iterable successors(java.lang.Object) -> successors
    45:45:java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.AbstractValueGraph$2 -> com.google.common.graph.q:
    com.google.common.graph.ValueGraph val$graph -> a
    148:148:void <init>(com.google.common.graph.ValueGraph) -> <init>
    151:151:java.lang.Object apply(com.google.common.graph.EndpointPair) -> a
    148:148:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.BaseGraph -> com.google.common.graph.r:
    java.util.Set nodes() -> nodes
    java.util.Set edges() -> edges
    boolean isDirected() -> isDirected
    boolean allowsSelfLoops() -> allowsSelfLoops
    com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set successors(java.lang.Object) -> successors
    java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    int degree(java.lang.Object) -> degree
    int inDegree(java.lang.Object) -> inDegree
    int outDegree(java.lang.Object) -> outDegree
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    boolean hasEdgeConnecting(com.google.common.graph.EndpointPair) -> hasEdgeConnecting
    27:27:java.lang.Iterable successors(java.lang.Object) -> successors
    27:27:java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.ConfigurableMutableGraph -> com.google.common.graph.s:
    com.google.common.graph.MutableValueGraph backingValueGraph -> a
    35:37:void <init>(com.google.common.graph.AbstractGraphBuilder) -> <init>
    41:41:com.google.common.graph.BaseGraph delegate() -> delegate
    46:46:boolean addNode(java.lang.Object) -> addNode
    51:51:boolean putEdge(java.lang.Object,java.lang.Object) -> putEdge
    56:57:boolean putEdge(com.google.common.graph.EndpointPair) -> putEdge
    62:62:boolean removeNode(java.lang.Object) -> removeNode
    67:67:boolean removeEdge(java.lang.Object,java.lang.Object) -> removeEdge
    72:73:boolean removeEdge(com.google.common.graph.EndpointPair) -> removeEdge
com.google.common.graph.ConfigurableMutableNetwork -> com.google.common.graph.t:
    47:48:void <init>(com.google.common.graph.NetworkBuilder) -> <init>
    53:60:boolean addNode(java.lang.Object) -> addNode
    70:72:com.google.common.graph.NetworkConnections addNodeInternal(java.lang.Object) -> a
    78:116:boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object) -> addEdge
    122:123:boolean addEdge(com.google.common.graph.EndpointPair,java.lang.Object) -> addEdge
    129:142:boolean removeNode(java.lang.Object) -> removeNode
    148:161:boolean removeEdge(java.lang.Object) -> removeEdge
    165:171:com.google.common.graph.NetworkConnections newConnections() -> a
com.google.common.graph.ConfigurableMutableValueGraph -> com.google.common.graph.u:
    com.google.common.graph.ElementOrder incidentEdgeOrder -> a
    48:50:void <init>(com.google.common.graph.AbstractGraphBuilder) -> <init>
    55:62:boolean addNode(java.lang.Object) -> addNode
    72:74:com.google.common.graph.GraphConnections addNodeInternal(java.lang.Object) -> a
    80:101:java.lang.Object putEdgeValue(java.lang.Object,java.lang.Object,java.lang.Object) -> putEdgeValue
    107:108:java.lang.Object putEdgeValue(com.google.common.graph.EndpointPair,java.lang.Object) -> putEdgeValue
    114:141:boolean removeNode(java.lang.Object) -> removeNode
    147:161:java.lang.Object removeEdge(java.lang.Object,java.lang.Object) -> removeEdge
    167:168:java.lang.Object removeEdge(com.google.common.graph.EndpointPair) -> removeEdge
    172:174:com.google.common.graph.GraphConnections newConnections() -> a
com.google.common.graph.ConfigurableNetwork -> com.google.common.graph.v:
    boolean isDirected -> a
    boolean allowsParallelEdges -> b
    boolean allowsSelfLoops -> c
    com.google.common.graph.ElementOrder nodeOrder -> d
    com.google.common.graph.ElementOrder edgeOrder -> e
    com.google.common.graph.MapIteratorCache nodeConnections -> nodeConnections
    com.google.common.graph.MapIteratorCache edgeToReferenceNode -> edgeToReferenceNode
    66:71:void <init>(com.google.common.graph.NetworkBuilder) -> <init>
    80:93:void <init>(com.google.common.graph.NetworkBuilder,java.util.Map,java.util.Map) -> <init>
    97:97:java.util.Set nodes() -> nodes
    102:102:java.util.Set edges() -> edges
    107:107:boolean isDirected() -> isDirected
    112:112:boolean allowsParallelEdges() -> allowsParallelEdges
    117:117:boolean allowsSelfLoops() -> allowsSelfLoops
    122:122:com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    127:127:com.google.common.graph.ElementOrder edgeOrder() -> edgeOrder
    132:132:java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    137:139:com.google.common.graph.EndpointPair incidentNodes(java.lang.Object) -> incidentNodes
    144:144:java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    149:154:java.util.Set edgesConnecting(java.lang.Object,java.lang.Object) -> edgesConnecting
    159:159:java.util.Set inEdges(java.lang.Object) -> inEdges
    164:164:java.util.Set outEdges(java.lang.Object) -> outEdges
    169:169:java.util.Set predecessors(java.lang.Object) -> predecessors
    174:174:java.util.Set successors(java.lang.Object) -> successors
    178:183:com.google.common.graph.NetworkConnections checkedConnections(java.lang.Object) -> checkedConnections
    187:192:java.lang.Object checkedReferenceNode(java.lang.Object) -> checkedReferenceNode
    196:196:boolean containsNode(java.lang.Object) -> containsNode
    200:200:boolean containsEdge(java.lang.Object) -> containsEdge
    51:51:java.lang.Iterable successors(java.lang.Object) -> successors
    51:51:java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.ConfigurableValueGraph -> com.google.common.graph.w:
    boolean isDirected -> a
    boolean allowsSelfLoops -> b
    com.google.common.graph.ElementOrder nodeOrder -> c
    com.google.common.graph.MapIteratorCache nodeConnections -> nodeConnections
    long edgeCount -> edgeCount
    57:62:void <init>(com.google.common.graph.AbstractGraphBuilder) -> <init>
    71:81:void <init>(com.google.common.graph.AbstractGraphBuilder,java.util.Map,long) -> <init>
    85:85:java.util.Set nodes() -> nodes
    90:90:boolean isDirected() -> isDirected
    95:95:boolean allowsSelfLoops() -> allowsSelfLoops
    100:100:com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    105:105:java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    110:110:java.util.Set predecessors(java.lang.Object) -> predecessors
    115:115:java.util.Set successors(java.lang.Object) -> successors
    120:122:java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    132:132:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    137:139:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair) -> hasEdgeConnecting
    144:144:java.lang.Object edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object) -> edgeValueOrDefault
    149:150:java.lang.Object edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object) -> edgeValueOrDefault
    155:155:long edgeCount() -> edgeCount
    159:164:com.google.common.graph.GraphConnections checkedConnections(java.lang.Object) -> checkedConnections
    168:168:boolean containsNode(java.lang.Object) -> containsNode
    172:173:boolean hasEdgeConnecting_internal(java.lang.Object,java.lang.Object) -> hasEdgeConnecting_internal
    177:179:java.lang.Object edgeValueOrDefault_internal(java.lang.Object,java.lang.Object,java.lang.Object) -> edgeValueOrDefault_internal
    46:46:java.lang.Iterable successors(java.lang.Object) -> successors
    46:46:java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.ConfigurableValueGraph$1 -> com.google.common.graph.x:
    com.google.common.graph.GraphConnections val$connections -> a
    122:122:void <init>(com.google.common.graph.ConfigurableValueGraph,com.google.common.graph.BaseGraph,java.lang.Object,com.google.common.graph.GraphConnections) -> <init>
    125:125:java.util.Iterator iterator() -> iterator
com.google.common.graph.DirectedGraphConnections -> com.google.common.graph.y:
    java.lang.Object PRED -> a
    java.util.Map adjacentNodeValues -> b
    java.util.List orderedNodeConnections -> c
    int predecessorCount -> d
    int successorCount -> e
    145:153:void <init>(java.util.Map,java.util.List,int,int) -> <init>
    157:171:com.google.common.graph.DirectedGraphConnections of(com.google.common.graph.ElementOrder) -> a
    180:225:com.google.common.graph.DirectedGraphConnections ofImmutable(java.lang.Object,java.lang.Iterable,com.google.common.base.Function) -> a
    232:235:java.util.Set adjacentNodes() -> a
    270:270:java.util.Set predecessors() -> b
    318:318:java.util.Set successors() -> c
    367:403:java.util.Iterator incidentEdgeIterator(java.lang.Object) -> a
    424:431:java.lang.Object value(java.lang.Object) -> b
    437:457:void removePredecessor(java.lang.Object) -> c
    462:483:java.lang.Object removeSuccessor(java.lang.Object) -> d
    488:512:void addPredecessor(java.lang.Object,java.lang.Object) -> a
    517:540:java.lang.Object addSuccessor(java.lang.Object,java.lang.Object) -> b
    544:544:boolean isPredecessor(java.lang.Object) -> g
    548:548:boolean isSuccessor(java.lang.Object) -> h
    53:53:java.util.List access$000(com.google.common.graph.DirectedGraphConnections) -> a
    53:53:java.util.Map access$100(com.google.common.graph.DirectedGraphConnections) -> b
    53:53:boolean access$200(java.lang.Object) -> e
    53:53:int access$300(com.google.common.graph.DirectedGraphConnections) -> c
    53:53:boolean access$400(java.lang.Object) -> f
    53:53:int access$500(com.google.common.graph.DirectedGraphConnections) -> d
    122:122:void <clinit>() -> <clinit>
com.google.common.graph.DirectedGraphConnections$1 -> com.google.common.graph.z:
    com.google.common.graph.DirectedGraphConnections this$0 -> a
    235:235:void <init>(com.google.common.graph.DirectedGraphConnections) -> <init>
    238:240:com.google.common.collect.UnmodifiableIterator iterator() -> a
    257:257:int size() -> size
    262:262:boolean contains(java.lang.Object) -> contains
    235:235:java.util.Iterator iterator() -> iterator
com.google.common.graph.DirectedGraphConnections$1$1 -> com.google.common.graph.A:
    java.util.Iterator val$nodeConnections -> a
    java.util.Set val$seenNodes -> b
    240:240:void <init>(com.google.common.graph.DirectedGraphConnections$1,java.util.Iterator,java.util.Set) -> <init>
    243:250:java.lang.Object computeNext() -> computeNext
com.google.common.graph.DirectedGraphConnections$2 -> com.google.common.graph.B:
    com.google.common.graph.DirectedGraphConnections this$0 -> a
    270:270:void <init>(com.google.common.graph.DirectedGraphConnections) -> <init>
    273:289:com.google.common.collect.UnmodifiableIterator iterator() -> a
    306:306:int size() -> size
    311:311:boolean contains(java.lang.Object) -> contains
    270:270:java.util.Iterator iterator() -> iterator
com.google.common.graph.DirectedGraphConnections$2$1 -> com.google.common.graph.C:
    java.util.Iterator val$entries -> a
    275:275:void <init>(com.google.common.graph.DirectedGraphConnections$2,java.util.Iterator) -> <init>
    278:284:java.lang.Object computeNext() -> computeNext
com.google.common.graph.DirectedGraphConnections$2$2 -> com.google.common.graph.D:
    java.util.Iterator val$nodeConnections -> a
    289:289:void <init>(com.google.common.graph.DirectedGraphConnections$2,java.util.Iterator) -> <init>
    292:298:java.lang.Object computeNext() -> computeNext
com.google.common.graph.DirectedGraphConnections$3 -> com.google.common.graph.E:
    com.google.common.graph.DirectedGraphConnections this$0 -> a
    318:318:void <init>(com.google.common.graph.DirectedGraphConnections) -> <init>
    321:337:com.google.common.collect.UnmodifiableIterator iterator() -> a
    354:354:int size() -> size
    359:359:boolean contains(java.lang.Object) -> contains
    318:318:java.util.Iterator iterator() -> iterator
com.google.common.graph.DirectedGraphConnections$3$1 -> com.google.common.graph.F:
    java.util.Iterator val$entries -> a
    323:323:void <init>(com.google.common.graph.DirectedGraphConnections$3,java.util.Iterator) -> <init>
    326:332:java.lang.Object computeNext() -> computeNext
com.google.common.graph.DirectedGraphConnections$3$2 -> com.google.common.graph.G:
    java.util.Iterator val$nodeConnections -> a
    337:337:void <init>(com.google.common.graph.DirectedGraphConnections$3,java.util.Iterator) -> <init>
    340:346:java.lang.Object computeNext() -> computeNext
com.google.common.graph.DirectedGraphConnections$4 -> com.google.common.graph.H:
    java.lang.Object val$thisNode -> a
    372:372:void <init>(com.google.common.graph.DirectedGraphConnections,java.lang.Object) -> <init>
    375:375:com.google.common.graph.EndpointPair apply(java.lang.Object) -> a
    372:372:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.DirectedGraphConnections$5 -> com.google.common.graph.I:
    java.lang.Object val$thisNode -> a
    380:380:void <init>(com.google.common.graph.DirectedGraphConnections,java.lang.Object) -> <init>
    383:383:com.google.common.graph.EndpointPair apply(java.lang.Object) -> a
    380:380:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.DirectedGraphConnections$6 -> com.google.common.graph.J:
    java.lang.Object val$thisNode -> a
    390:390:void <init>(com.google.common.graph.DirectedGraphConnections,java.lang.Object) -> <init>
    393:396:com.google.common.graph.EndpointPair apply(com.google.common.graph.DirectedGraphConnections$NodeConnection) -> a
    390:390:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.DirectedGraphConnections$7 -> com.google.common.graph.K:
    java.util.Iterator val$resultWithDoubleSelfLoop -> a
    java.util.concurrent.atomic.AtomicBoolean val$alreadySeenSelfLoop -> b
    403:403:void <init>(com.google.common.graph.DirectedGraphConnections,java.util.Iterator,java.util.concurrent.atomic.AtomicBoolean) -> <init>
    406:416:com.google.common.graph.EndpointPair computeNext() -> a
    403:403:java.lang.Object computeNext() -> computeNext
com.google.common.graph.DirectedGraphConnections$8 -> com.google.common.graph.L:
    int[] $SwitchMap$com$google$common$graph$ElementOrder$Type -> a
    160:160:void <clinit>() -> <clinit>
com.google.common.graph.DirectedGraphConnections$NodeConnection -> com.google.common.graph.M:
    java.lang.Object node -> a
    75:77:void <init>(java.lang.Object) -> <init>
com.google.common.graph.DirectedGraphConnections$NodeConnection$Pred -> com.google.common.graph.N:
    81:82:void <init>(java.lang.Object) -> <init>
    86:89:boolean equals(java.lang.Object) -> equals
    96:96:int hashCode() -> hashCode
com.google.common.graph.DirectedGraphConnections$NodeConnection$Succ -> com.google.common.graph.O:
    102:103:void <init>(java.lang.Object) -> <init>
    107:110:boolean equals(java.lang.Object) -> equals
    117:117:int hashCode() -> hashCode
com.google.common.graph.DirectedGraphConnections$PredAndSucc -> com.google.common.graph.P:
    java.lang.Object successorValue -> a
    61:63:void <init>(java.lang.Object) -> <init>
    58:58:java.lang.Object access$600(com.google.common.graph.DirectedGraphConnections$PredAndSucc) -> a
com.google.common.graph.DirectedMultiNetworkConnections -> com.google.common.graph.Q:
    java.lang.ref.Reference predecessorsReference -> c
    java.lang.ref.Reference successorsReference -> d
    46:47:void <init>(java.util.Map,java.util.Map,int) -> <init>
    50:50:com.google.common.graph.DirectedMultiNetworkConnections of() -> g
    58:59:com.google.common.graph.DirectedMultiNetworkConnections ofImmutable(java.util.Map,java.util.Map,int) -> a
    66:66:java.util.Set predecessors() -> e
    70:75:com.google.common.collect.Multiset predecessorsMultiset() -> h
    82:82:java.util.Set successors() -> f
    86:91:com.google.common.collect.Multiset successorsMultiset() -> i
    96:96:java.util.Set edgesConnecting(java.lang.Object) -> c
    106:111:java.lang.Object removeInEdge(java.lang.Object,boolean) -> a
    116:121:java.lang.Object removeOutEdge(java.lang.Object) -> b
    126:131:void addInEdge(java.lang.Object,java.lang.Object,boolean) -> a
    135:140:void addOutEdge(java.lang.Object,java.lang.Object) -> a
    143:143:java.lang.Object getReference(java.lang.ref.Reference) -> a
    42:42:com.google.common.collect.Multiset access$000(com.google.common.graph.DirectedMultiNetworkConnections) -> a
com.google.common.graph.DirectedMultiNetworkConnections$1 -> com.google.common.graph.R:
    java.lang.Object val$node -> a
    com.google.common.graph.DirectedMultiNetworkConnections this$0 -> b
    96:96:void <init>(com.google.common.graph.DirectedMultiNetworkConnections,java.util.Map,java.lang.Object,java.lang.Object) -> <init>
    99:99:int size() -> size
com.google.common.graph.DirectedNetworkConnections -> com.google.common.graph.S:
    39:40:void <init>(java.util.Map,java.util.Map,int) -> <init>
    43:44:com.google.common.graph.DirectedNetworkConnections of() -> g
    49:50:com.google.common.graph.DirectedNetworkConnections ofImmutable(java.util.Map,java.util.Map,int) -> a
    55:55:java.util.Set predecessors() -> e
    60:60:java.util.Set successors() -> f
    65:65:java.util.Set edgesConnecting(java.lang.Object) -> c
com.google.common.graph.EdgesConnecting -> com.google.common.graph.T:
    java.util.Map nodeToOutEdge -> a
    java.lang.Object targetNode -> b
    42:45:void <init>(java.util.Map,java.lang.Object) -> <init>
    49:52:com.google.common.collect.UnmodifiableIterator iterator() -> a
    57:57:int size() -> size
    62:63:boolean contains(java.lang.Object) -> contains
    67:67:java.lang.Object getConnectingEdge() -> b
    37:37:java.util.Iterator iterator() -> iterator
com.google.common.graph.ElementOrder -> com.google.common.graph.ElementOrder:
    com.google.common.graph.ElementOrder$Type type -> a
    java.util.Comparator comparator -> b
    73:77:void <init>(com.google.common.graph.ElementOrder$Type,java.util.Comparator) -> <init>
    81:81:com.google.common.graph.ElementOrder unordered() -> unordered
    120:120:com.google.common.graph.ElementOrder stable() -> a
    125:125:com.google.common.graph.ElementOrder insertion() -> insertion
    132:132:com.google.common.graph.ElementOrder natural() -> natural
    140:140:com.google.common.graph.ElementOrder sorted(java.util.Comparator) -> sorted
    145:145:com.google.common.graph.ElementOrder$Type type() -> type
    154:157:java.util.Comparator comparator() -> comparator
    162:170:boolean equals(java.lang.Object) -> equals
    175:175:int hashCode() -> hashCode
    180:184:java.lang.String toString() -> toString
    189:198:java.util.Map createMap(int) -> a
    204:204:com.google.common.graph.ElementOrder cast() -> b
com.google.common.graph.ElementOrder$1 -> com.google.common.graph.U:
    int[] $SwitchMap$com$google$common$graph$ElementOrder$Type -> a
    189:189:void <clinit>() -> <clinit>
com.google.common.graph.ElementOrder$Type -> com.google.common.graph.ElementOrder$Type:
    com.google.common.graph.ElementOrder$Type UNORDERED -> UNORDERED
    com.google.common.graph.ElementOrder$Type STABLE -> STABLE
    com.google.common.graph.ElementOrder$Type INSERTION -> INSERTION
    com.google.common.graph.ElementOrder$Type SORTED -> SORTED
    com.google.common.graph.ElementOrder$Type[] $VALUES -> a
    66:66:com.google.common.graph.ElementOrder$Type[] values() -> values
    66:66:com.google.common.graph.ElementOrder$Type valueOf(java.lang.String) -> valueOf
    66:66:void <init>(java.lang.String,int) -> <init>
    66:70:void <clinit>() -> <clinit>
com.google.common.graph.EndpointPair -> com.google.common.graph.EndpointPair:
    java.lang.Object nodeU -> a
    java.lang.Object nodeV -> b
    46:49:void <init>(java.lang.Object,java.lang.Object) -> <init>
    53:53:com.google.common.graph.EndpointPair ordered(java.lang.Object,java.lang.Object) -> ordered
    59:59:com.google.common.graph.EndpointPair unordered(java.lang.Object,java.lang.Object) -> unordered
    64:64:com.google.common.graph.EndpointPair of(com.google.common.graph.Graph,java.lang.Object,java.lang.Object) -> a
    69:69:com.google.common.graph.EndpointPair of(com.google.common.graph.Network,java.lang.Object,java.lang.Object) -> a
    java.lang.Object source() -> source
    java.lang.Object target() -> target
    91:91:java.lang.Object nodeU() -> nodeU
    99:99:java.lang.Object nodeV() -> nodeV
    108:113:java.lang.Object adjacentNode(java.lang.Object) -> adjacentNode
    boolean isOrdered() -> isOrdered
    126:126:com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    40:40:java.util.Iterator iterator() -> iterator
    42:42:void <init>(java.lang.Object,java.lang.Object,byte) -> <init>
com.google.common.graph.EndpointPair$Ordered -> com.google.common.graph.V:
    147:148:void <init>(java.lang.Object,java.lang.Object) -> <init>
    152:152:java.lang.Object source() -> source
    157:157:java.lang.Object target() -> target
    162:162:boolean isOrdered() -> isOrdered
    167:179:boolean equals(java.lang.Object) -> equals
    184:184:int hashCode() -> hashCode
    189:189:java.lang.String toString() -> toString
    145:145:java.util.Iterator iterator() -> iterator
    145:145:void <init>(java.lang.Object,java.lang.Object,byte) -> <init>
com.google.common.graph.EndpointPair$Unordered -> com.google.common.graph.W:
    195:196:void <init>(java.lang.Object,java.lang.Object) -> <init>
    200:200:java.lang.Object source() -> source
    205:205:java.lang.Object target() -> target
    210:210:boolean isOrdered() -> isOrdered
    215:239:boolean equals(java.lang.Object) -> equals
    244:244:int hashCode() -> hashCode
    249:249:java.lang.String toString() -> toString
    193:193:java.util.Iterator iterator() -> iterator
    193:193:void <init>(java.lang.Object,java.lang.Object,byte) -> <init>
com.google.common.graph.EndpointPairIterator -> com.google.common.graph.X:
    com.google.common.graph.BaseGraph graph -> c
    java.util.Iterator nodeIterator -> d
    java.lang.Object node -> a
    java.util.Iterator successorIterator -> b
    40:40:com.google.common.graph.EndpointPairIterator of(com.google.common.graph.BaseGraph) -> a
    36:46:void <init>(com.google.common.graph.BaseGraph) -> <init>
    53:59:boolean advance() -> a
    32:32:void <init>(com.google.common.graph.BaseGraph,byte) -> <init>
com.google.common.graph.EndpointPairIterator$Directed -> com.google.common.graph.Y:
    68:69:void <init>(com.google.common.graph.BaseGraph) -> <init>
    74:78:com.google.common.graph.EndpointPair computeNext() -> b
    66:66:java.lang.Object computeNext() -> computeNext
    66:66:void <init>(com.google.common.graph.BaseGraph,byte) -> <init>
com.google.common.graph.EndpointPairIterator$Undirected -> com.google.common.graph.Z:
    java.util.Set visitedNodes -> c
    114:116:void <init>(com.google.common.graph.BaseGraph) -> <init>
    121:131:com.google.common.graph.EndpointPair computeNext() -> b
    110:110:java.lang.Object computeNext() -> computeNext
    110:110:void <init>(com.google.common.graph.BaseGraph,byte) -> <init>
com.google.common.graph.ForwardingGraph -> com.google.common.graph.aa:
    27:27:void <init>() -> <init>
    com.google.common.graph.BaseGraph delegate() -> delegate
    33:33:java.util.Set nodes() -> nodes
    42:42:long edgeCount() -> edgeCount
    47:47:boolean isDirected() -> isDirected
    52:52:boolean allowsSelfLoops() -> allowsSelfLoops
    57:57:com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    62:62:java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    67:67:java.util.Set predecessors(java.lang.Object) -> predecessors
    72:72:java.util.Set successors(java.lang.Object) -> successors
    77:77:java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    82:82:int degree(java.lang.Object) -> degree
    87:87:int inDegree(java.lang.Object) -> inDegree
    92:92:int outDegree(java.lang.Object) -> outDegree
    97:97:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    102:102:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair) -> hasEdgeConnecting
    27:27:java.lang.Iterable successors(java.lang.Object) -> successors
    27:27:java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.ForwardingNetwork -> com.google.common.graph.ab:
    29:29:void <init>() -> <init>
    com.google.common.graph.Network delegate() -> a
    35:35:java.util.Set nodes() -> nodes
    40:40:java.util.Set edges() -> edges
    45:45:boolean isDirected() -> isDirected
    50:50:boolean allowsParallelEdges() -> allowsParallelEdges
    55:55:boolean allowsSelfLoops() -> allowsSelfLoops
    60:60:com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    65:65:com.google.common.graph.ElementOrder edgeOrder() -> edgeOrder
    70:70:java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    75:75:java.util.Set predecessors(java.lang.Object) -> predecessors
    80:80:java.util.Set successors(java.lang.Object) -> successors
    85:85:java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    90:90:java.util.Set inEdges(java.lang.Object) -> inEdges
    95:95:java.util.Set outEdges(java.lang.Object) -> outEdges
    100:100:com.google.common.graph.EndpointPair incidentNodes(java.lang.Object) -> incidentNodes
    105:105:java.util.Set adjacentEdges(java.lang.Object) -> adjacentEdges
    110:110:int degree(java.lang.Object) -> degree
    115:115:int inDegree(java.lang.Object) -> inDegree
    120:120:int outDegree(java.lang.Object) -> outDegree
    125:125:java.util.Set edgesConnecting(java.lang.Object,java.lang.Object) -> edgesConnecting
    130:130:java.util.Set edgesConnecting(com.google.common.graph.EndpointPair) -> edgesConnecting
    135:135:java.util.Optional edgeConnecting(java.lang.Object,java.lang.Object) -> edgeConnecting
    140:140:java.util.Optional edgeConnecting(com.google.common.graph.EndpointPair) -> edgeConnecting
    145:145:java.lang.Object edgeConnectingOrNull(java.lang.Object,java.lang.Object) -> edgeConnectingOrNull
    150:150:java.lang.Object edgeConnectingOrNull(com.google.common.graph.EndpointPair) -> edgeConnectingOrNull
    155:155:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    160:160:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair) -> hasEdgeConnecting
    29:29:java.lang.Iterable successors(java.lang.Object) -> successors
    29:29:java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.ForwardingValueGraph -> com.google.common.graph.ac:
    30:30:void <init>() -> <init>
    com.google.common.graph.ValueGraph delegate() -> a
    36:36:java.util.Set nodes() -> nodes
    45:45:long edgeCount() -> edgeCount
    50:50:boolean isDirected() -> isDirected
    55:55:boolean allowsSelfLoops() -> allowsSelfLoops
    60:60:com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    65:65:java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    70:70:java.util.Set predecessors(java.lang.Object) -> predecessors
    75:75:java.util.Set successors(java.lang.Object) -> successors
    80:80:int degree(java.lang.Object) -> degree
    85:85:int inDegree(java.lang.Object) -> inDegree
    90:90:int outDegree(java.lang.Object) -> outDegree
    95:95:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    100:100:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair) -> hasEdgeConnecting
    105:105:java.util.Optional edgeValue(java.lang.Object,java.lang.Object) -> edgeValue
    110:110:java.util.Optional edgeValue(com.google.common.graph.EndpointPair) -> edgeValue
    115:115:java.lang.Object edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object) -> edgeValueOrDefault
    120:120:java.lang.Object edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object) -> edgeValueOrDefault
    30:30:java.lang.Iterable successors(java.lang.Object) -> successors
    30:30:java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.Graph -> com.google.common.graph.Graph:
    java.util.Set nodes() -> nodes
    java.util.Set edges() -> edges
    boolean isDirected() -> isDirected
    boolean allowsSelfLoops() -> allowsSelfLoops
    com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set successors(java.lang.Object) -> successors
    java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    int degree(java.lang.Object) -> degree
    int inDegree(java.lang.Object) -> inDegree
    int outDegree(java.lang.Object) -> outDegree
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    boolean hasEdgeConnecting(com.google.common.graph.EndpointPair) -> hasEdgeConnecting
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    104:104:java.lang.Iterable successors(java.lang.Object) -> successors
    104:104:java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.GraphBuilder -> com.google.common.graph.GraphBuilder:
    71:72:void <init>(boolean) -> <init>
    76:76:com.google.common.graph.GraphBuilder directed() -> directed
    81:81:com.google.common.graph.GraphBuilder undirected() -> undirected
    92:94:com.google.common.graph.GraphBuilder from(com.google.common.graph.Graph) -> from
    109:110:com.google.common.graph.ImmutableGraph$Builder immutable() -> immutable
    121:122:com.google.common.graph.GraphBuilder allowsSelfLoops(boolean) -> allowsSelfLoops
    131:132:com.google.common.graph.GraphBuilder expectedNodeCount(int) -> expectedNodeCount
    141:143:com.google.common.graph.GraphBuilder nodeOrder(com.google.common.graph.ElementOrder) -> nodeOrder
    160:168:com.google.common.graph.GraphBuilder incidentEdgeOrder(com.google.common.graph.ElementOrder) -> a
    173:173:com.google.common.graph.MutableGraph build() -> build
    177:182:com.google.common.graph.GraphBuilder copy() -> a
    187:187:com.google.common.graph.GraphBuilder cast() -> b
com.google.common.graph.GraphConnections -> com.google.common.graph.ad:
    java.util.Set adjacentNodes() -> a
    java.util.Set predecessors() -> b
    java.util.Set successors() -> c
    java.util.Iterator incidentEdgeIterator(java.lang.Object) -> a
    java.lang.Object value(java.lang.Object) -> b
    void removePredecessor(java.lang.Object) -> c
    java.lang.Object removeSuccessor(java.lang.Object) -> d
    void addPredecessor(java.lang.Object,java.lang.Object) -> a
    java.lang.Object addSuccessor(java.lang.Object,java.lang.Object) -> b
com.google.common.graph.GraphConstants -> com.google.common.graph.ae:
com.google.common.graph.GraphConstants$Presence -> com.google.common.graph.af:
    com.google.common.graph.GraphConstants$Presence EDGE_EXISTS -> a
    com.google.common.graph.GraphConstants$Presence[] $VALUES -> b
    56:56:com.google.common.graph.GraphConstants$Presence[] values() -> values
    56:56:com.google.common.graph.GraphConstants$Presence valueOf(java.lang.String) -> valueOf
    56:56:void <init>(java.lang.String,int) -> <init>
    56:57:void <clinit>() -> <clinit>
com.google.common.graph.Graphs -> com.google.common.graph.Graphs:
    48:48:void <init>() -> <init>
    60:75:boolean hasCycle(com.google.common.graph.Graph) -> hasCycle
    88:93:boolean hasCycle(com.google.common.graph.Network) -> hasCycle
    103:119:boolean subgraphHasCycle(com.google.common.graph.Graph,java.util.Map,java.lang.Object,java.lang.Object) -> a
    130:135:boolean canTraverseWithoutReusingEdge(com.google.common.graph.Graph,java.lang.Object,java.lang.Object) -> a
    149:178:com.google.common.graph.Graph transitiveClosure(com.google.common.graph.Graph) -> transitiveClosure
    193:194:java.util.Set reachableNodes(com.google.common.graph.Graph,java.lang.Object) -> reachableNodes
    206:214:com.google.common.graph.Graph transpose(com.google.common.graph.Graph) -> transpose
    222:230:com.google.common.graph.ValueGraph transpose(com.google.common.graph.ValueGraph) -> transpose
    238:246:com.google.common.graph.Network transpose(com.google.common.graph.Network) -> transpose
    250:253:com.google.common.graph.EndpointPair transpose(com.google.common.graph.EndpointPair) -> a
    482:496:com.google.common.graph.MutableGraph inducedSubgraph(com.google.common.graph.Graph,java.lang.Iterable) -> inducedSubgraph
    509:524:com.google.common.graph.MutableValueGraph inducedSubgraph(com.google.common.graph.ValueGraph,java.lang.Iterable) -> inducedSubgraph
    537:552:com.google.common.graph.MutableNetwork inducedSubgraph(com.google.common.graph.Network,java.lang.Iterable) -> inducedSubgraph
    557:564:com.google.common.graph.MutableGraph copyOf(com.google.common.graph.Graph) -> copyOf
    569:578:com.google.common.graph.MutableValueGraph copyOf(com.google.common.graph.ValueGraph) -> copyOf
    583:595:com.google.common.graph.MutableNetwork copyOf(com.google.common.graph.Network) -> copyOf
    600:601:int checkNonNegative(int) -> a
    606:607:long checkNonNegative(long) -> a
    612:613:int checkPositive(int) -> b
    618:619:long checkPositive(long) -> b
com.google.common.graph.Graphs$NodeVisitState -> com.google.common.graph.ag:
    com.google.common.graph.Graphs$NodeVisitState PENDING -> a
    com.google.common.graph.Graphs$NodeVisitState COMPLETE -> b
    com.google.common.graph.Graphs$NodeVisitState[] $VALUES -> c
    627:627:com.google.common.graph.Graphs$NodeVisitState[] values() -> values
    627:627:com.google.common.graph.Graphs$NodeVisitState valueOf(java.lang.String) -> valueOf
    627:627:void <init>(java.lang.String,int) -> <init>
    627:629:void <clinit>() -> <clinit>
com.google.common.graph.Graphs$TransposedGraph -> com.google.common.graph.ah:
    com.google.common.graph.Graph graph -> a
    261:263:void <init>(com.google.common.graph.Graph) -> <init>
    267:267:com.google.common.graph.Graph delegate() -> a
    272:272:java.util.Set predecessors(java.lang.Object) -> predecessors
    277:277:java.util.Set successors(java.lang.Object) -> successors
    282:282:java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    299:299:int inDegree(java.lang.Object) -> inDegree
    304:304:int outDegree(java.lang.Object) -> outDegree
    309:309:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    314:314:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair) -> hasEdgeConnecting
    258:258:com.google.common.graph.BaseGraph delegate() -> delegate
    258:258:java.lang.Iterable successors(java.lang.Object) -> successors
    258:258:java.lang.Iterable predecessors(java.lang.Object) -> predecessors
    258:258:com.google.common.graph.Graph access$000(com.google.common.graph.Graphs$TransposedGraph) -> a
com.google.common.graph.Graphs$TransposedGraph$1 -> com.google.common.graph.ai:
    com.google.common.graph.Graphs$TransposedGraph this$0 -> a
    282:282:void <init>(com.google.common.graph.Graphs$TransposedGraph,com.google.common.graph.BaseGraph,java.lang.Object) -> <init>
    285:286:java.util.Iterator iterator() -> iterator
com.google.common.graph.Graphs$TransposedGraph$1$1 -> com.google.common.graph.aj:
    com.google.common.graph.Graphs$TransposedGraph$1 this$1 -> a
    287:287:void <init>(com.google.common.graph.Graphs$TransposedGraph$1) -> <init>
    290:290:com.google.common.graph.EndpointPair apply(com.google.common.graph.EndpointPair) -> a
    287:287:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.Graphs$TransposedNetwork -> com.google.common.graph.ak:
    com.google.common.graph.Network network -> a
    386:388:void <init>(com.google.common.graph.Network) -> <init>
    392:392:com.google.common.graph.Network delegate() -> a
    397:397:java.util.Set predecessors(java.lang.Object) -> predecessors
    402:402:java.util.Set successors(java.lang.Object) -> successors
    407:407:int inDegree(java.lang.Object) -> inDegree
    412:412:int outDegree(java.lang.Object) -> outDegree
    417:417:java.util.Set inEdges(java.lang.Object) -> inEdges
    422:422:java.util.Set outEdges(java.lang.Object) -> outEdges
    427:428:com.google.common.graph.EndpointPair incidentNodes(java.lang.Object) -> incidentNodes
    433:433:java.util.Set edgesConnecting(java.lang.Object,java.lang.Object) -> edgesConnecting
    438:438:java.util.Set edgesConnecting(com.google.common.graph.EndpointPair) -> edgesConnecting
    443:443:java.util.Optional edgeConnecting(java.lang.Object,java.lang.Object) -> edgeConnecting
    448:448:java.util.Optional edgeConnecting(com.google.common.graph.EndpointPair) -> edgeConnecting
    453:453:java.lang.Object edgeConnectingOrNull(java.lang.Object,java.lang.Object) -> edgeConnectingOrNull
    458:458:java.lang.Object edgeConnectingOrNull(com.google.common.graph.EndpointPair) -> edgeConnectingOrNull
    463:463:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    468:468:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair) -> hasEdgeConnecting
    383:383:java.lang.Iterable successors(java.lang.Object) -> successors
    383:383:java.lang.Iterable predecessors(java.lang.Object) -> predecessors
    383:383:com.google.common.graph.Network access$200(com.google.common.graph.Graphs$TransposedNetwork) -> a
com.google.common.graph.Graphs$TransposedValueGraph -> com.google.common.graph.al:
    com.google.common.graph.ValueGraph graph -> a
    323:325:void <init>(com.google.common.graph.ValueGraph) -> <init>
    329:329:com.google.common.graph.ValueGraph delegate() -> a
    334:334:java.util.Set predecessors(java.lang.Object) -> predecessors
    339:339:java.util.Set successors(java.lang.Object) -> successors
    344:344:int inDegree(java.lang.Object) -> inDegree
    349:349:int outDegree(java.lang.Object) -> outDegree
    354:354:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    359:359:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair) -> hasEdgeConnecting
    364:364:java.util.Optional edgeValue(java.lang.Object,java.lang.Object) -> edgeValue
    369:369:java.util.Optional edgeValue(com.google.common.graph.EndpointPair) -> edgeValue
    374:374:java.lang.Object edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object) -> edgeValueOrDefault
    379:379:java.lang.Object edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object) -> edgeValueOrDefault
    320:320:java.lang.Iterable successors(java.lang.Object) -> successors
    320:320:java.lang.Iterable predecessors(java.lang.Object) -> predecessors
    320:320:com.google.common.graph.ValueGraph access$100(com.google.common.graph.Graphs$TransposedValueGraph) -> a
com.google.common.graph.ImmutableGraph -> com.google.common.graph.ImmutableGraph:
    com.google.common.graph.BaseGraph backingGraph -> a
    52:54:void <init>(com.google.common.graph.BaseGraph) -> <init>
    58:62:com.google.common.graph.ImmutableGraph copyOf(com.google.common.graph.Graph) -> copyOf
    72:72:com.google.common.graph.ImmutableGraph copyOf(com.google.common.graph.ImmutableGraph) -> copyOf
    80:84:com.google.common.collect.ImmutableMap getNodeConnections(com.google.common.graph.Graph) -> a
    89:94:com.google.common.graph.GraphConnections connectionsOf(com.google.common.graph.Graph,java.lang.Object) -> a
    99:99:com.google.common.graph.BaseGraph delegate() -> delegate
    46:46:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair) -> hasEdgeConnecting
    46:46:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    46:46:int outDegree(java.lang.Object) -> outDegree
    46:46:int inDegree(java.lang.Object) -> inDegree
    46:46:int degree(java.lang.Object) -> degree
    46:46:java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    46:46:java.util.Set successors(java.lang.Object) -> successors
    46:46:java.util.Set predecessors(java.lang.Object) -> predecessors
    46:46:java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    46:46:com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    46:46:boolean allowsSelfLoops() -> allowsSelfLoops
    46:46:boolean isDirected() -> isDirected
    46:46:java.util.Set nodes() -> nodes
com.google.common.graph.ImmutableGraph$Builder -> com.google.common.graph.ImmutableGraph$Builder:
    com.google.common.graph.MutableGraph mutableGraph -> a
    127:131:void <init>(com.google.common.graph.GraphBuilder) -> <init>
    142:143:com.google.common.graph.ImmutableGraph$Builder addNode(java.lang.Object) -> addNode
    161:162:com.google.common.graph.ImmutableGraph$Builder putEdge(java.lang.Object,java.lang.Object) -> putEdge
    184:185:com.google.common.graph.ImmutableGraph$Builder putEdge(com.google.common.graph.EndpointPair) -> putEdge
    192:192:com.google.common.graph.ImmutableGraph build() -> build
com.google.common.graph.ImmutableNetwork -> com.google.common.graph.ImmutableNetwork:
    52:54:void <init>(com.google.common.graph.Network) -> <init>
    58:58:com.google.common.graph.ImmutableNetwork copyOf(com.google.common.graph.Network) -> copyOf
    70:70:com.google.common.graph.ImmutableNetwork copyOf(com.google.common.graph.ImmutableNetwork) -> copyOf
    75:75:com.google.common.graph.ImmutableGraph asGraph() -> asGraph
    82:86:java.util.Map getNodeConnections(com.google.common.graph.Network) -> a
    93:97:java.util.Map getEdgeToReferenceNode(com.google.common.graph.Network) -> b
    101:113:com.google.common.graph.NetworkConnections connectionsOf(com.google.common.graph.Network,java.lang.Object) -> a
    118:118:com.google.common.base.Function sourceNodeFn(com.google.common.graph.Network) -> c
    127:127:com.google.common.base.Function targetNodeFn(com.google.common.graph.Network) -> d
    136:136:com.google.common.base.Function adjacentNodeFn(com.google.common.graph.Network,java.lang.Object) -> b
    46:46:java.util.Set successors(java.lang.Object) -> successors
    46:46:java.util.Set predecessors(java.lang.Object) -> predecessors
    46:46:java.util.Set outEdges(java.lang.Object) -> outEdges
    46:46:java.util.Set inEdges(java.lang.Object) -> inEdges
    46:46:java.util.Set edgesConnecting(java.lang.Object,java.lang.Object) -> edgesConnecting
    46:46:java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    46:46:com.google.common.graph.EndpointPair incidentNodes(java.lang.Object) -> incidentNodes
    46:46:java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    46:46:com.google.common.graph.ElementOrder edgeOrder() -> edgeOrder
    46:46:com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    46:46:boolean allowsSelfLoops() -> allowsSelfLoops
    46:46:boolean allowsParallelEdges() -> allowsParallelEdges
    46:46:boolean isDirected() -> isDirected
    46:46:java.util.Set edges() -> edges
    46:46:java.util.Set nodes() -> nodes
    46:46:com.google.common.graph.Graph asGraph() -> asGraph
com.google.common.graph.ImmutableNetwork$1 -> com.google.common.graph.am:
    com.google.common.graph.Network val$network -> a
    118:118:void <init>(com.google.common.graph.Network) -> <init>
    121:121:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.ImmutableNetwork$2 -> com.google.common.graph.an:
    com.google.common.graph.Network val$network -> a
    127:127:void <init>(com.google.common.graph.Network) -> <init>
    130:130:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.ImmutableNetwork$3 -> com.google.common.graph.ao:
    com.google.common.graph.Network val$network -> a
    java.lang.Object val$node -> b
    136:136:void <init>(com.google.common.graph.Network,java.lang.Object) -> <init>
    139:139:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.ImmutableNetwork$Builder -> com.google.common.graph.ImmutableNetwork$Builder:
    com.google.common.graph.MutableNetwork mutableNetwork -> a
    171:173:void <init>(com.google.common.graph.NetworkBuilder) -> <init>
    184:185:com.google.common.graph.ImmutableNetwork$Builder addNode(java.lang.Object) -> addNode
    211:212:com.google.common.graph.ImmutableNetwork$Builder addEdge(java.lang.Object,java.lang.Object,java.lang.Object) -> addEdge
    242:243:com.google.common.graph.ImmutableNetwork$Builder addEdge(com.google.common.graph.EndpointPair,java.lang.Object) -> addEdge
    251:251:com.google.common.graph.ImmutableNetwork build() -> build
com.google.common.graph.ImmutableValueGraph -> com.google.common.graph.ImmutableValueGraph:
    49:50:void <init>(com.google.common.graph.ValueGraph) -> <init>
    54:54:com.google.common.graph.ImmutableValueGraph copyOf(com.google.common.graph.ValueGraph) -> copyOf
    66:66:com.google.common.graph.ImmutableValueGraph copyOf(com.google.common.graph.ImmutableValueGraph) -> copyOf
    71:71:com.google.common.graph.ImmutableGraph asGraph() -> asGraph
    79:83:com.google.common.collect.ImmutableMap getNodeConnections(com.google.common.graph.ValueGraph) -> a
    88:99:com.google.common.graph.GraphConnections connectionsOf(com.google.common.graph.ValueGraph,java.lang.Object) -> a
    43:43:java.lang.Object edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object) -> edgeValueOrDefault
    43:43:java.lang.Object edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object) -> edgeValueOrDefault
    43:43:boolean hasEdgeConnecting(com.google.common.graph.EndpointPair) -> hasEdgeConnecting
    43:43:boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    43:43:java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    43:43:java.util.Set successors(java.lang.Object) -> successors
    43:43:java.util.Set predecessors(java.lang.Object) -> predecessors
    43:43:java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    43:43:com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    43:43:boolean allowsSelfLoops() -> allowsSelfLoops
    43:43:boolean isDirected() -> isDirected
    43:43:java.util.Set nodes() -> nodes
    43:43:com.google.common.graph.Graph asGraph() -> asGraph
com.google.common.graph.ImmutableValueGraph$1 -> com.google.common.graph.ap:
    com.google.common.graph.ValueGraph val$graph -> a
    java.lang.Object val$node -> b
    89:89:void <init>(com.google.common.graph.ValueGraph,java.lang.Object) -> <init>
    92:92:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.ImmutableValueGraph$Builder -> com.google.common.graph.ImmutableValueGraph$Builder:
    com.google.common.graph.MutableValueGraph mutableValueGraph -> a
    127:129:void <init>(com.google.common.graph.ValueGraphBuilder) -> <init>
    140:141:com.google.common.graph.ImmutableValueGraph$Builder addNode(java.lang.Object) -> addNode
    162:163:com.google.common.graph.ImmutableValueGraph$Builder putEdgeValue(java.lang.Object,java.lang.Object,java.lang.Object) -> putEdgeValue
    187:188:com.google.common.graph.ImmutableValueGraph$Builder putEdgeValue(com.google.common.graph.EndpointPair,java.lang.Object) -> putEdgeValue
    196:196:com.google.common.graph.ImmutableValueGraph build() -> build
com.google.common.graph.IncidentEdgeSet -> com.google.common.graph.aq:
    java.lang.Object node -> b
    com.google.common.graph.BaseGraph graph -> c
    31:34:void <init>(com.google.common.graph.BaseGraph,java.lang.Object) -> <init>
    38:38:boolean remove(java.lang.Object) -> remove
    43:48:int size() -> size
    54:77:boolean contains(java.lang.Object) -> contains
com.google.common.graph.MapIteratorCache -> com.google.common.graph.ar:
    java.util.Map backingMap -> a
    java.util.Map$Entry cacheEntry -> b
    58:60:void <init>(java.util.Map) -> <init>
    64:65:java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    70:71:java.lang.Object remove(java.lang.Object) -> a
    80:81:java.lang.Object get(java.lang.Object) -> b
    85:85:java.lang.Object getWithoutCaching(java.lang.Object) -> c
    89:89:boolean containsKey(java.lang.Object) -> d
    93:93:java.util.Set unmodifiableKeySet() -> a
    128:134:java.lang.Object getIfCached(java.lang.Object) -> e
    138:139:void clearCache() -> b
    44:44:java.util.Map access$000(com.google.common.graph.MapIteratorCache) -> a
    44:44:java.util.Map$Entry access$102(com.google.common.graph.MapIteratorCache,java.util.Map$Entry) -> a
com.google.common.graph.MapIteratorCache$1 -> com.google.common.graph.as:
    com.google.common.graph.MapIteratorCache this$0 -> a
    93:93:void <init>(com.google.common.graph.MapIteratorCache) -> <init>
    96:98:com.google.common.collect.UnmodifiableIterator iterator() -> a
    115:115:int size() -> size
    120:120:boolean contains(java.lang.Object) -> contains
    93:93:java.util.Iterator iterator() -> iterator
com.google.common.graph.MapIteratorCache$1$1 -> com.google.common.graph.at:
    java.util.Iterator val$entryIterator -> a
    com.google.common.graph.MapIteratorCache$1 this$1 -> b
    98:98:void <init>(com.google.common.graph.MapIteratorCache$1,java.util.Iterator) -> <init>
    101:101:boolean hasNext() -> hasNext
    106:108:java.lang.Object next() -> next
com.google.common.graph.MapRetrievalCache -> com.google.common.graph.au:
    com.google.common.graph.MapRetrievalCache$CacheEntry cacheEntry1 -> a
    com.google.common.graph.MapRetrievalCache$CacheEntry cacheEntry2 -> b
    34:35:void <init>(java.util.Map) -> <init>
    40:49:java.lang.Object get(java.lang.Object) -> b
    56:77:java.lang.Object getIfCached(java.lang.Object) -> e
    82:85:void clearCache() -> b
    88:89:void addToCache(java.lang.Object,java.lang.Object) -> b
    93:95:void addToCache(com.google.common.graph.MapRetrievalCache$CacheEntry) -> a
com.google.common.graph.MapRetrievalCache$CacheEntry -> com.google.common.graph.av:
    java.lang.Object key -> a
    java.lang.Object value -> b
    101:104:void <init>(java.lang.Object,java.lang.Object) -> <init>
com.google.common.graph.MultiEdgesConnecting -> com.google.common.graph.aw:
    java.util.Map outEdgeToNode -> a
    java.lang.Object targetNode -> b
    43:46:void <init>(java.util.Map,java.lang.Object) -> <init>
    50:51:com.google.common.collect.UnmodifiableIterator iterator() -> a
    67:67:boolean contains(java.lang.Object) -> contains
    38:38:java.util.Iterator iterator() -> iterator
    38:38:java.lang.Object access$000(com.google.common.graph.MultiEdgesConnecting) -> a
com.google.common.graph.MultiEdgesConnecting$1 -> com.google.common.graph.ax:
    java.util.Iterator val$entries -> a
    com.google.common.graph.MultiEdgesConnecting this$0 -> b
    51:51:void <init>(com.google.common.graph.MultiEdgesConnecting,java.util.Iterator) -> <init>
    54:60:java.lang.Object computeNext() -> computeNext
com.google.common.graph.MutableGraph -> com.google.common.graph.MutableGraph:
    boolean addNode(java.lang.Object) -> addNode
    boolean putEdge(java.lang.Object,java.lang.Object) -> putEdge
    boolean putEdge(com.google.common.graph.EndpointPair) -> putEdge
    boolean removeNode(java.lang.Object) -> removeNode
    boolean removeEdge(java.lang.Object,java.lang.Object) -> removeEdge
    boolean removeEdge(com.google.common.graph.EndpointPair) -> removeEdge
com.google.common.graph.MutableNetwork -> com.google.common.graph.MutableNetwork:
    boolean addNode(java.lang.Object) -> addNode
    boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object) -> addEdge
    boolean addEdge(com.google.common.graph.EndpointPair,java.lang.Object) -> addEdge
    boolean removeNode(java.lang.Object) -> removeNode
    boolean removeEdge(java.lang.Object) -> removeEdge
com.google.common.graph.MutableValueGraph -> com.google.common.graph.MutableValueGraph:
    boolean addNode(java.lang.Object) -> addNode
    java.lang.Object putEdgeValue(java.lang.Object,java.lang.Object,java.lang.Object) -> putEdgeValue
    java.lang.Object putEdgeValue(com.google.common.graph.EndpointPair,java.lang.Object) -> putEdgeValue
    boolean removeNode(java.lang.Object) -> removeNode
    java.lang.Object removeEdge(java.lang.Object,java.lang.Object) -> removeEdge
    java.lang.Object removeEdge(com.google.common.graph.EndpointPair) -> removeEdge
com.google.common.graph.Network -> com.google.common.graph.Network:
    java.util.Set nodes() -> nodes
    java.util.Set edges() -> edges
    com.google.common.graph.Graph asGraph() -> asGraph
    boolean isDirected() -> isDirected
    boolean allowsParallelEdges() -> allowsParallelEdges
    boolean allowsSelfLoops() -> allowsSelfLoops
    com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    com.google.common.graph.ElementOrder edgeOrder() -> edgeOrder
    java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set successors(java.lang.Object) -> successors
    java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    java.util.Set inEdges(java.lang.Object) -> inEdges
    java.util.Set outEdges(java.lang.Object) -> outEdges
    int degree(java.lang.Object) -> degree
    int inDegree(java.lang.Object) -> inDegree
    int outDegree(java.lang.Object) -> outDegree
    com.google.common.graph.EndpointPair incidentNodes(java.lang.Object) -> incidentNodes
    java.util.Set adjacentEdges(java.lang.Object) -> adjacentEdges
    java.util.Set edgesConnecting(java.lang.Object,java.lang.Object) -> edgesConnecting
    java.util.Set edgesConnecting(com.google.common.graph.EndpointPair) -> edgesConnecting
    java.util.Optional edgeConnecting(java.lang.Object,java.lang.Object) -> edgeConnecting
    java.util.Optional edgeConnecting(com.google.common.graph.EndpointPair) -> edgeConnecting
    java.lang.Object edgeConnectingOrNull(java.lang.Object,java.lang.Object) -> edgeConnectingOrNull
    java.lang.Object edgeConnectingOrNull(com.google.common.graph.EndpointPair) -> edgeConnectingOrNull
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    boolean hasEdgeConnecting(com.google.common.graph.EndpointPair) -> hasEdgeConnecting
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    105:105:java.lang.Iterable successors(java.lang.Object) -> successors
    105:105:java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.NetworkBuilder -> com.google.common.graph.NetworkBuilder:
    boolean allowsParallelEdges -> f
    com.google.common.graph.ElementOrder edgeOrder -> g
    com.google.common.base.Optional expectedEdgeCount -> h
    71:78:void <init>(boolean) -> <init>
    82:82:com.google.common.graph.NetworkBuilder directed() -> directed
    87:87:com.google.common.graph.NetworkBuilder undirected() -> undirected
    99:103:com.google.common.graph.NetworkBuilder from(com.google.common.graph.Network) -> from
    114:115:com.google.common.graph.ImmutableNetwork$Builder immutable() -> immutable
    125:126:com.google.common.graph.NetworkBuilder allowsParallelEdges(boolean) -> allowsParallelEdges
    137:138:com.google.common.graph.NetworkBuilder allowsSelfLoops(boolean) -> allowsSelfLoops
    147:148:com.google.common.graph.NetworkBuilder expectedNodeCount(int) -> expectedNodeCount
    157:158:com.google.common.graph.NetworkBuilder expectedEdgeCount(int) -> expectedEdgeCount
    167:169:com.google.common.graph.NetworkBuilder nodeOrder(com.google.common.graph.ElementOrder) -> nodeOrder
    178:180:com.google.common.graph.NetworkBuilder edgeOrder(com.google.common.graph.ElementOrder) -> edgeOrder
    185:185:com.google.common.graph.MutableNetwork build() -> build
    190:190:com.google.common.graph.NetworkBuilder cast() -> a
com.google.common.graph.NetworkConnections -> com.google.common.graph.ay:
    java.util.Set adjacentNodes() -> a
    java.util.Set predecessors() -> e
    java.util.Set successors() -> f
    java.util.Set incidentEdges() -> b
    java.util.Set inEdges() -> c
    java.util.Set outEdges() -> d
    java.util.Set edgesConnecting(java.lang.Object) -> c
    java.lang.Object adjacentNode(java.lang.Object) -> a
    java.lang.Object removeInEdge(java.lang.Object,boolean) -> a
    java.lang.Object removeOutEdge(java.lang.Object) -> b
    void addInEdge(java.lang.Object,java.lang.Object,boolean) -> a
    void addOutEdge(java.lang.Object,java.lang.Object) -> a
com.google.common.graph.PredecessorsFunction -> com.google.common.graph.PredecessorsFunction:
    java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.SuccessorsFunction -> com.google.common.graph.SuccessorsFunction:
    java.lang.Iterable successors(java.lang.Object) -> successors
com.google.common.graph.Traverser -> com.google.common.graph.Traverser:
    92:93:com.google.common.graph.Traverser forGraph(com.google.common.graph.SuccessorsFunction) -> forGraph
    170:177:com.google.common.graph.Traverser forTree(com.google.common.graph.SuccessorsFunction) -> forTree
    java.lang.Iterable breadthFirst(java.lang.Object) -> breadthFirst
    java.lang.Iterable breadthFirst(java.lang.Iterable) -> breadthFirst
    java.lang.Iterable depthFirstPreOrder(java.lang.Object) -> depthFirstPreOrder
    java.lang.Iterable depthFirstPreOrder(java.lang.Iterable) -> depthFirstPreOrder
    java.lang.Iterable depthFirstPostOrder(java.lang.Object) -> depthFirstPostOrder
    java.lang.Iterable depthFirstPostOrder(java.lang.Iterable) -> depthFirstPostOrder
    316:316:void <init>() -> <init>
    65:65:void <init>(byte) -> <init>
com.google.common.graph.Traverser$GraphTraverser -> com.google.common.graph.az:
    com.google.common.graph.SuccessorsFunction graph -> a
    321:323:void <init>(com.google.common.graph.SuccessorsFunction) -> <init>
    327:328:java.lang.Iterable breadthFirst(java.lang.Object) -> breadthFirst
    333:340:java.lang.Iterable breadthFirst(java.lang.Iterable) -> breadthFirst
    350:351:java.lang.Iterable depthFirstPreOrder(java.lang.Object) -> depthFirstPreOrder
    356:363:java.lang.Iterable depthFirstPreOrder(java.lang.Iterable) -> depthFirstPreOrder
    373:374:java.lang.Iterable depthFirstPostOrder(java.lang.Object) -> depthFirstPostOrder
    379:386:java.lang.Iterable depthFirstPostOrder(java.lang.Iterable) -> depthFirstPostOrder
    398:399:void checkThatNodeIsInGraph(java.lang.Object) -> a
    318:318:com.google.common.graph.SuccessorsFunction access$100(com.google.common.graph.Traverser$GraphTraverser) -> a
com.google.common.graph.Traverser$GraphTraverser$1 -> com.google.common.graph.aA:
    java.lang.Iterable val$startNodes -> a
    com.google.common.graph.Traverser$GraphTraverser this$0 -> b
    340:340:void <init>(com.google.common.graph.Traverser$GraphTraverser,java.lang.Iterable) -> <init>
    343:343:java.util.Iterator iterator() -> iterator
com.google.common.graph.Traverser$GraphTraverser$2 -> com.google.common.graph.aB:
    java.lang.Iterable val$startNodes -> a
    com.google.common.graph.Traverser$GraphTraverser this$0 -> b
    363:363:void <init>(com.google.common.graph.Traverser$GraphTraverser,java.lang.Iterable) -> <init>
    366:366:java.util.Iterator iterator() -> iterator
com.google.common.graph.Traverser$GraphTraverser$3 -> com.google.common.graph.aC:
    java.lang.Iterable val$startNodes -> a
    com.google.common.graph.Traverser$GraphTraverser this$0 -> b
    386:386:void <init>(com.google.common.graph.Traverser$GraphTraverser,java.lang.Iterable) -> <init>
    389:389:java.util.Iterator iterator() -> iterator
com.google.common.graph.Traverser$GraphTraverser$BreadthFirstIterator -> com.google.common.graph.aD:
    java.util.Queue queue -> a
    java.util.Set visited -> b
    com.google.common.graph.Traverser$GraphTraverser this$0 -> c
    402:412:void <init>(com.google.common.graph.Traverser$GraphTraverser,java.lang.Iterable) -> <init>
    416:416:boolean hasNext() -> hasNext
    421:427:java.lang.Object next() -> next
com.google.common.graph.Traverser$GraphTraverser$DepthFirstIterator -> com.google.common.graph.aE:
    java.util.Deque stack -> a
    java.util.Set visited -> b
    int order$4aca38da -> c
    com.google.common.graph.Traverser$GraphTraverser this$0 -> d
    432:439:void <init>(com.google.common.graph.Traverser$GraphTraverser,java.lang.Iterable,int) -> <init>
    444:464:java.lang.Object computeNext() -> computeNext
    468:468:com.google.common.graph.Traverser$GraphTraverser$DepthFirstIterator$NodeAndSuccessors withSuccessors(java.lang.Object) -> a
com.google.common.graph.Traverser$GraphTraverser$DepthFirstIterator$NodeAndSuccessors -> com.google.common.graph.aF:
    java.lang.Object node -> a
    java.util.Iterator successorIterator -> b
    476:479:void <init>(com.google.common.graph.Traverser$GraphTraverser$DepthFirstIterator,java.lang.Object,java.lang.Iterable) -> <init>
com.google.common.graph.Traverser$Order -> com.google.common.graph.aG:
    int PREORDER$4aca38da -> a
    int POSTORDER$4aca38da -> b
    int[] $VALUES$143be521 -> c
    657:659:void <clinit>() -> <clinit>
com.google.common.graph.Traverser$TreeTraverser -> com.google.common.graph.aH:
    com.google.common.graph.SuccessorsFunction tree -> a
    487:489:void <init>(com.google.common.graph.SuccessorsFunction) -> <init>
    493:494:java.lang.Iterable breadthFirst(java.lang.Object) -> breadthFirst
    499:506:java.lang.Iterable breadthFirst(java.lang.Iterable) -> breadthFirst
    516:517:java.lang.Iterable depthFirstPreOrder(java.lang.Object) -> depthFirstPreOrder
    522:529:java.lang.Iterable depthFirstPreOrder(java.lang.Iterable) -> depthFirstPreOrder
    539:540:java.lang.Iterable depthFirstPostOrder(java.lang.Object) -> depthFirstPostOrder
    545:552:java.lang.Iterable depthFirstPostOrder(java.lang.Iterable) -> depthFirstPostOrder
    564:565:void checkThatNodeIsInTree(java.lang.Object) -> a
    484:484:com.google.common.graph.SuccessorsFunction access$200(com.google.common.graph.Traverser$TreeTraverser) -> a
com.google.common.graph.Traverser$TreeTraverser$1 -> com.google.common.graph.aI:
    java.lang.Iterable val$startNodes -> a
    com.google.common.graph.Traverser$TreeTraverser this$0 -> b
    506:506:void <init>(com.google.common.graph.Traverser$TreeTraverser,java.lang.Iterable) -> <init>
    509:509:java.util.Iterator iterator() -> iterator
com.google.common.graph.Traverser$TreeTraverser$2 -> com.google.common.graph.aJ:
    java.lang.Iterable val$startNodes -> a
    com.google.common.graph.Traverser$TreeTraverser this$0 -> b
    529:529:void <init>(com.google.common.graph.Traverser$TreeTraverser,java.lang.Iterable) -> <init>
    532:532:java.util.Iterator iterator() -> iterator
com.google.common.graph.Traverser$TreeTraverser$3 -> com.google.common.graph.aK:
    java.lang.Iterable val$startNodes -> a
    com.google.common.graph.Traverser$TreeTraverser this$0 -> b
    552:552:void <init>(com.google.common.graph.Traverser$TreeTraverser,java.lang.Iterable) -> <init>
    555:555:java.util.Iterator iterator() -> iterator
com.google.common.graph.Traverser$TreeTraverser$BreadthFirstIterator -> com.google.common.graph.aL:
    java.util.Queue queue -> a
    com.google.common.graph.Traverser$TreeTraverser this$0 -> b
    568:574:void <init>(com.google.common.graph.Traverser$TreeTraverser,java.lang.Iterable) -> <init>
    578:578:boolean hasNext() -> hasNext
    583:585:java.lang.Object next() -> next
com.google.common.graph.Traverser$TreeTraverser$DepthFirstPostOrderIterator -> com.google.common.graph.aM:
    java.util.ArrayDeque stack -> a
    com.google.common.graph.Traverser$TreeTraverser this$0 -> b
    617:621:void <init>(com.google.common.graph.Traverser$TreeTraverser,java.lang.Iterable) -> <init>
    625:637:java.lang.Object computeNext() -> computeNext
    641:641:com.google.common.graph.Traverser$TreeTraverser$DepthFirstPostOrderIterator$NodeAndChildren withChildren(java.lang.Object) -> a
com.google.common.graph.Traverser$TreeTraverser$DepthFirstPostOrderIterator$NodeAndChildren -> com.google.common.graph.aN:
    java.lang.Object node -> a
    java.util.Iterator childIterator -> b
    649:652:void <init>(com.google.common.graph.Traverser$TreeTraverser$DepthFirstPostOrderIterator,java.lang.Object,java.lang.Iterable) -> <init>
com.google.common.graph.Traverser$TreeTraverser$DepthFirstPreOrderIterator -> com.google.common.graph.aO:
    java.util.Deque stack -> a
    com.google.common.graph.Traverser$TreeTraverser this$0 -> b
    590:594:void <init>(com.google.common.graph.Traverser$TreeTraverser,java.lang.Iterable) -> <init>
    598:598:boolean hasNext() -> hasNext
    603:612:java.lang.Object next() -> next
com.google.common.graph.UndirectedGraphConnections -> com.google.common.graph.aP:
    java.util.Map adjacentNodeValues -> a
    42:44:void <init>(java.util.Map) -> <init>
    47:47:com.google.common.graph.UndirectedGraphConnections of() -> d
    51:51:com.google.common.graph.UndirectedGraphConnections ofImmutable(java.util.Map) -> a
    56:56:java.util.Set adjacentNodes() -> a
    61:61:java.util.Set predecessors() -> b
    66:66:java.util.Set successors() -> c
    71:72:java.util.Iterator incidentEdgeIterator(java.lang.Object) -> a
    83:83:java.lang.Object value(java.lang.Object) -> b
    89:90:void removePredecessor(java.lang.Object) -> c
    94:94:java.lang.Object removeSuccessor(java.lang.Object) -> d
    100:101:void addPredecessor(java.lang.Object,java.lang.Object) -> a
    105:105:java.lang.Object addSuccessor(java.lang.Object,java.lang.Object) -> b
com.google.common.graph.UndirectedGraphConnections$1 -> com.google.common.graph.aQ:
    java.lang.Object val$thisNode -> a
    73:73:void <init>(com.google.common.graph.UndirectedGraphConnections,java.lang.Object) -> <init>
    76:76:com.google.common.graph.EndpointPair apply(java.lang.Object) -> a
    73:73:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.UndirectedMultiNetworkConnections -> com.google.common.graph.aR:
    java.lang.ref.Reference adjacentNodesReference -> b
    46:47:void <init>(java.util.Map) -> <init>
    50:50:com.google.common.graph.UndirectedMultiNetworkConnections of() -> g
    55:55:com.google.common.graph.UndirectedMultiNetworkConnections ofImmutable(java.util.Map) -> a
    62:62:java.util.Set adjacentNodes() -> a
    66:71:com.google.common.collect.Multiset adjacentNodesMultiset() -> h
    76:76:java.util.Set edgesConnecting(java.lang.Object) -> c
    86:89:java.lang.Object removeInEdge(java.lang.Object,boolean) -> a
    94:99:java.lang.Object removeOutEdge(java.lang.Object) -> b
    104:107:void addInEdge(java.lang.Object,java.lang.Object,boolean) -> a
    111:116:void addOutEdge(java.lang.Object,java.lang.Object) -> a
    119:119:java.lang.Object getReference(java.lang.ref.Reference) -> a
    42:42:com.google.common.collect.Multiset access$000(com.google.common.graph.UndirectedMultiNetworkConnections) -> a
com.google.common.graph.UndirectedMultiNetworkConnections$1 -> com.google.common.graph.aS:
    java.lang.Object val$node -> a
    com.google.common.graph.UndirectedMultiNetworkConnections this$0 -> b
    76:76:void <init>(com.google.common.graph.UndirectedMultiNetworkConnections,java.util.Map,java.lang.Object,java.lang.Object) -> <init>
    79:79:int size() -> size
com.google.common.graph.UndirectedNetworkConnections -> com.google.common.graph.aT:
    38:39:void <init>(java.util.Map) -> <init>
    42:42:com.google.common.graph.UndirectedNetworkConnections of() -> g
    46:46:com.google.common.graph.UndirectedNetworkConnections ofImmutable(java.util.Map) -> a
    51:51:java.util.Set adjacentNodes() -> a
    56:56:java.util.Set edgesConnecting(java.lang.Object) -> c
com.google.common.graph.ValueGraph -> com.google.common.graph.ValueGraph:
    java.util.Set nodes() -> nodes
    java.util.Set edges() -> edges
    com.google.common.graph.Graph asGraph() -> asGraph
    boolean isDirected() -> isDirected
    boolean allowsSelfLoops() -> allowsSelfLoops
    com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set successors(java.lang.Object) -> successors
    java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    int degree(java.lang.Object) -> degree
    int inDegree(java.lang.Object) -> inDegree
    int outDegree(java.lang.Object) -> outDegree
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    boolean hasEdgeConnecting(com.google.common.graph.EndpointPair) -> hasEdgeConnecting
    java.util.Optional edgeValue(java.lang.Object,java.lang.Object) -> edgeValue
    java.util.Optional edgeValue(com.google.common.graph.EndpointPair) -> edgeValue
    java.lang.Object edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object) -> edgeValueOrDefault
    java.lang.Object edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object) -> edgeValueOrDefault
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    110:110:java.lang.Iterable successors(java.lang.Object) -> successors
    110:110:java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.ValueGraphBuilder -> com.google.common.graph.ValueGraphBuilder:
    72:73:void <init>(boolean) -> <init>
    77:77:com.google.common.graph.ValueGraphBuilder directed() -> directed
    82:82:com.google.common.graph.ValueGraphBuilder undirected() -> undirected
    94:96:com.google.common.graph.ValueGraphBuilder from(com.google.common.graph.ValueGraph) -> from
    108:109:com.google.common.graph.ImmutableValueGraph$Builder immutable() -> immutable
    120:121:com.google.common.graph.ValueGraphBuilder allowsSelfLoops(boolean) -> allowsSelfLoops
    130:131:com.google.common.graph.ValueGraphBuilder expectedNodeCount(int) -> expectedNodeCount
    140:142:com.google.common.graph.ValueGraphBuilder nodeOrder(com.google.common.graph.ElementOrder) -> nodeOrder
    150:150:com.google.common.graph.MutableValueGraph build() -> build
    155:155:com.google.common.graph.ValueGraphBuilder cast() -> a
com.google.common.hash.AbstractByteHasher -> com.google.common.hash.a:
    java.nio.ByteBuffer scratch -> a
    35:36:void <init>() -> <init>
    void update(byte) -> a
    43:44:void update(byte[]) -> a
    48:51:void update(byte[],int,int) -> a
    55:63:void update(java.nio.ByteBuffer) -> a
    68:72:com.google.common.hash.Hasher update(int) -> a
    77:78:com.google.common.hash.Hasher putByte(byte) -> putByte
    83:85:com.google.common.hash.Hasher putBytes(byte[]) -> putBytes
    90:92:com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    97:98:com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer) -> putBytes
    103:104:com.google.common.hash.Hasher putShort(short) -> putShort
    109:110:com.google.common.hash.Hasher putInt(int) -> putInt
    115:116:com.google.common.hash.Hasher putLong(long) -> putLong
    121:122:com.google.common.hash.Hasher putChar(char) -> putChar
    34:34:com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    34:34:com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    34:34:com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    34:34:com.google.common.hash.PrimitiveSink putShort(short) -> putShort
    34:34:com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer) -> putBytes
    34:34:com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    34:34:com.google.common.hash.PrimitiveSink putBytes(byte[]) -> putBytes
    34:34:com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
com.google.common.hash.AbstractCompositeHashFunction -> com.google.common.hash.b:
    com.google.common.hash.HashFunction[] functions -> a
    37:42:void <init>(com.google.common.hash.HashFunction[]) -> <init>
    com.google.common.hash.HashCode makeHash(com.google.common.hash.Hasher[]) -> a
    54:58:com.google.common.hash.Hasher newHasher() -> newHasher
    63:68:com.google.common.hash.Hasher newHasher(int) -> newHasher
    72:72:com.google.common.hash.Hasher fromHashers(com.google.common.hash.Hasher[]) -> b
com.google.common.hash.AbstractCompositeHashFunction$1 -> com.google.common.hash.c:
    com.google.common.hash.Hasher[] val$hashers -> a
    com.google.common.hash.AbstractCompositeHashFunction this$0 -> b
    72:72:void <init>(com.google.common.hash.AbstractCompositeHashFunction,com.google.common.hash.Hasher[]) -> <init>
    75:78:com.google.common.hash.Hasher putByte(byte) -> putByte
    83:86:com.google.common.hash.Hasher putBytes(byte[]) -> putBytes
    91:94:com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    99:104:com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer) -> putBytes
    109:112:com.google.common.hash.Hasher putShort(short) -> putShort
    117:120:com.google.common.hash.Hasher putInt(int) -> putInt
    125:128:com.google.common.hash.Hasher putLong(long) -> putLong
    133:136:com.google.common.hash.Hasher putFloat(float) -> putFloat
    141:144:com.google.common.hash.Hasher putDouble(double) -> putDouble
    149:152:com.google.common.hash.Hasher putBoolean(boolean) -> putBoolean
    157:160:com.google.common.hash.Hasher putChar(char) -> putChar
    165:168:com.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    173:176:com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    181:184:com.google.common.hash.Hasher putObject(java.lang.Object,com.google.common.hash.Funnel) -> putObject
    189:189:com.google.common.hash.HashCode hash() -> hash
    72:72:com.google.common.hash.PrimitiveSink putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    72:72:com.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    72:72:com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    72:72:com.google.common.hash.PrimitiveSink putBoolean(boolean) -> putBoolean
    72:72:com.google.common.hash.PrimitiveSink putDouble(double) -> putDouble
    72:72:com.google.common.hash.PrimitiveSink putFloat(float) -> putFloat
    72:72:com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    72:72:com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    72:72:com.google.common.hash.PrimitiveSink putShort(short) -> putShort
    72:72:com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer) -> putBytes
    72:72:com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    72:72:com.google.common.hash.PrimitiveSink putBytes(byte[]) -> putBytes
    72:72:com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
com.google.common.hash.AbstractHashFunction -> com.google.common.hash.d:
    30:30:void <init>() -> <init>
    33:33:com.google.common.hash.HashCode hashObject(java.lang.Object,com.google.common.hash.Funnel) -> hashObject
    38:39:com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence) -> hashUnencodedChars
    44:44:com.google.common.hash.HashCode hashString(java.lang.CharSequence,java.nio.charset.Charset) -> hashString
    49:49:com.google.common.hash.HashCode hashInt(int) -> hashInt
    54:54:com.google.common.hash.HashCode hashLong(long) -> hashLong
    59:59:com.google.common.hash.HashCode hashBytes(byte[]) -> hashBytes
    64:65:com.google.common.hash.HashCode hashBytes(byte[],int,int) -> hashBytes
    70:70:com.google.common.hash.HashCode hashBytes(java.nio.ByteBuffer) -> hashBytes
    75:77:com.google.common.hash.Hasher newHasher(int) -> newHasher
com.google.common.hash.AbstractHasher -> com.google.common.hash.e:
    29:29:void <init>() -> <init>
    32:32:com.google.common.hash.Hasher putBoolean(boolean) -> putBoolean
    37:37:com.google.common.hash.Hasher putDouble(double) -> putDouble
    42:42:com.google.common.hash.Hasher putFloat(float) -> putFloat
    47:50:com.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    55:55:com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    60:60:com.google.common.hash.Hasher putBytes(byte[]) -> putBytes
    65:69:com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    74:82:com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer) -> putBytes
    87:89:com.google.common.hash.Hasher putShort(short) -> putShort
    94:98:com.google.common.hash.Hasher putInt(int) -> putInt
    103:106:com.google.common.hash.Hasher putLong(long) -> putLong
    111:113:com.google.common.hash.Hasher putChar(char) -> putChar
    118:119:com.google.common.hash.Hasher putObject(java.lang.Object,com.google.common.hash.Funnel) -> putObject
    28:28:com.google.common.hash.PrimitiveSink putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    28:28:com.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    28:28:com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    28:28:com.google.common.hash.PrimitiveSink putBoolean(boolean) -> putBoolean
    28:28:com.google.common.hash.PrimitiveSink putDouble(double) -> putDouble
    28:28:com.google.common.hash.PrimitiveSink putFloat(float) -> putFloat
    28:28:com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    28:28:com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    28:28:com.google.common.hash.PrimitiveSink putShort(short) -> putShort
    28:28:com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer) -> putBytes
    28:28:com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    28:28:com.google.common.hash.PrimitiveSink putBytes(byte[]) -> putBytes
com.google.common.hash.AbstractNonStreamingHashFunction -> com.google.common.hash.f:
    33:33:void <init>() -> <init>
    36:36:com.google.common.hash.Hasher newHasher() -> newHasher
    41:42:com.google.common.hash.Hasher newHasher(int) -> newHasher
    47:47:com.google.common.hash.HashCode hashInt(int) -> hashInt
    52:52:com.google.common.hash.HashCode hashLong(long) -> hashLong
    57:62:com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence) -> hashUnencodedChars
    67:67:com.google.common.hash.HashCode hashString(java.lang.CharSequence,java.nio.charset.Charset) -> hashString
    com.google.common.hash.HashCode hashBytes(byte[],int,int) -> hashBytes
    75:75:com.google.common.hash.HashCode hashBytes(java.nio.ByteBuffer) -> hashBytes
com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher -> com.google.common.hash.g:
    com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream -> a
    com.google.common.hash.AbstractNonStreamingHashFunction this$0 -> b
    82:84:void <init>(com.google.common.hash.AbstractNonStreamingHashFunction,int) -> <init>
    88:89:com.google.common.hash.Hasher putByte(byte) -> putByte
    94:95:com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    100:101:com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer) -> putBytes
    106:106:com.google.common.hash.HashCode hash() -> hash
    79:79:com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer) -> putBytes
    79:79:com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    79:79:com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream -> com.google.common.hash.h:
    113:114:void <init>(int) -> <init>
    117:123:void write(java.nio.ByteBuffer) -> a
    126:126:byte[] byteArray() -> a
    130:130:int length() -> b
com.google.common.hash.AbstractStreamingHasher -> com.google.common.hash.i:
    java.nio.ByteBuffer buffer -> a
    int bufferSize -> b
    int chunkSize -> c
    50:51:void <init>(int) -> <init>
    62:71:void <init>(int,int) -> <init>
    void process(java.nio.ByteBuffer) -> a
    83:91:void processRemaining(java.nio.ByteBuffer) -> b
    95:95:com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    100:106:com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer) -> putBytes
    111:131:com.google.common.hash.Hasher putBytesInternal(java.nio.ByteBuffer) -> c
    146:148:com.google.common.hash.Hasher putByte(byte) -> putByte
    153:155:com.google.common.hash.Hasher putShort(short) -> putShort
    160:162:com.google.common.hash.Hasher putChar(char) -> putChar
    167:169:com.google.common.hash.Hasher putInt(int) -> putInt
    174:176:com.google.common.hash.Hasher putLong(long) -> putLong
    181:187:com.google.common.hash.HashCode hash() -> hash
    com.google.common.hash.HashCode makeHash() -> a
    199:203:void munchIfFull() -> b
    206:213:void munch() -> c
    31:31:com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    31:31:com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    31:31:com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    31:31:com.google.common.hash.PrimitiveSink putShort(short) -> putShort
    31:31:com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer) -> putBytes
    31:31:com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    31:31:com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
com.google.common.hash.BloomFilter -> com.google.common.hash.BloomFilter:
    com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits -> a
    int numHashFunctions -> b
    com.google.common.hash.Funnel funnel -> c
    com.google.common.hash.BloomFilter$Strategy strategy -> d
    114:122:void <init>(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray,int,com.google.common.hash.Funnel,com.google.common.hash.BloomFilter$Strategy) -> <init>
    131:131:com.google.common.hash.BloomFilter copy() -> copy
    139:139:boolean mightContain(java.lang.Object) -> mightContain
    149:149:boolean apply(java.lang.Object) -> apply
    165:165:boolean put(java.lang.Object) -> put
    181:181:double expectedFpp() -> expectedFpp
    192:203:long approximateElementCount() -> approximateElementCount
    209:209:long bitSize() -> a
    228:233:boolean isCompatible(com.google.common.hash.BloomFilter) -> isCompatible
    246:269:void putAll(com.google.common.hash.BloomFilter) -> putAll
    273:283:boolean equals(java.lang.Object) -> equals
    288:288:int hashCode() -> hashCode
    314:314:java.util.stream.Collector toBloomFilter(com.google.common.hash.Funnel,long) -> toBloomFilter
    341:346:java.util.stream.Collector toBloomFilter(com.google.common.hash.Funnel,long,double) -> toBloomFilter
    379:379:com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,int,double) -> create
    405:405:com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,long,double) -> create
    411:431:com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,long,double,com.google.common.hash.BloomFilter$Strategy) -> a
    455:455:com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,int) -> create
    479:479:com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,long) -> create
    506:506:int optimalNumOfHashFunctions(long,long) -> a
    521:524:long optimalNumOfBits(long,double) -> a
    528:528:java.lang.Object writeReplace() -> writeReplace
    564:571:void writeTo(java.io.OutputStream) -> writeTo
    586:615:com.google.common.hash.BloomFilter readFrom(java.io.InputStream,com.google.common.hash.Funnel) -> readFrom
    350:351:com.google.common.hash.BloomFilter lambda$toBloomFilter$1(com.google.common.hash.BloomFilter,com.google.common.hash.BloomFilter) -> a
    347:347:com.google.common.hash.BloomFilter lambda$toBloomFilter$0(com.google.common.hash.Funnel,long,double) -> a
    67:67:com.google.common.hash.BloomFilterStrategies$LockFreeBitArray access$000(com.google.common.hash.BloomFilter) -> a
    67:67:int access$100(com.google.common.hash.BloomFilter) -> b
    67:67:com.google.common.hash.Funnel access$200(com.google.common.hash.BloomFilter) -> c
    67:67:com.google.common.hash.BloomFilter$Strategy access$300(com.google.common.hash.BloomFilter) -> d
    67:67:void <init>(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray,int,com.google.common.hash.Funnel,com.google.common.hash.BloomFilter$Strategy,byte) -> <init>
com.google.common.hash.BloomFilter$SerialForm -> com.google.common.hash.j:
    long[] data -> a
    int numHashFunctions -> b
    com.google.common.hash.Funnel funnel -> c
    com.google.common.hash.BloomFilter$Strategy strategy -> d
    long serialVersionUID -> serialVersionUID
    537:542:void <init>(com.google.common.hash.BloomFilter) -> <init>
    545:545:java.lang.Object readResolve() -> readResolve
com.google.common.hash.BloomFilter$Strategy -> com.google.common.hash.k:
    boolean put(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray) -> a
    boolean mightContain(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray) -> b
    int ordinal() -> ordinal
com.google.common.hash.BloomFilterStrategies -> com.google.common.hash.l:
    com.google.common.hash.BloomFilterStrategies MURMUR128_MITZ_32 -> b
    com.google.common.hash.BloomFilterStrategies MURMUR128_MITZ_64 -> a
    com.google.common.hash.BloomFilterStrategies[] $VALUES -> c
    39:39:com.google.common.hash.BloomFilterStrategies[] values() -> values
    39:39:com.google.common.hash.BloomFilterStrategies valueOf(java.lang.String) -> valueOf
    39:39:void <init>(java.lang.String,int) -> <init>
    39:39:void <init>(java.lang.String,int,byte) -> <init>
    39:93:void <clinit>() -> <clinit>
com.google.common.hash.BloomFilterStrategies$1 -> com.google.common.hash.m:
    45:45:void <init>(java.lang.String,int) -> <init>
    49:63:boolean put(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray) -> a
    69:84:boolean mightContain(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray) -> b
com.google.common.hash.BloomFilterStrategies$2 -> com.google.common.hash.n:
    93:93:void <init>(java.lang.String,int) -> <init>
    97:109:boolean put(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray) -> a
    115:128:boolean mightContain(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray) -> b
    132:132:long lowerEight(byte[]) -> a
    137:137:long upperEight(byte[]) -> b
com.google.common.hash.BloomFilterStrategies$LockFreeBitArray -> com.google.common.hash.o:
    java.util.concurrent.atomic.AtomicLongArray data -> a
    com.google.common.hash.LongAddable bitCount -> b
    153:160:void <init>(long) -> <init>
    163:172:void <init>(long[]) -> <init>
    176:195:boolean set(long) -> a
    199:199:boolean get(long) -> b
    208:212:long[] toPlainArray(java.util.concurrent.atomic.AtomicLongArray) -> a
    217:217:long bitSize() -> a
    229:229:long bitCount() -> b
    233:233:com.google.common.hash.BloomFilterStrategies$LockFreeBitArray copy() -> c
    246:271:void putAll(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray) -> a
    275:280:boolean equals(java.lang.Object) -> equals
    286:286:int hashCode() -> hashCode
com.google.common.hash.ChecksumHashFunction -> com.google.common.hash.p:
    com.google.common.hash.ImmutableSupplier checksumSupplier -> a
    int bits -> b
    java.lang.String toString -> c
    long serialVersionUID -> serialVersionUID
    36:41:void <init>(com.google.common.hash.ImmutableSupplier,int,java.lang.String) -> <init>
    45:45:int bits() -> bits
    50:50:com.google.common.hash.Hasher newHasher() -> newHasher
    55:55:java.lang.String toString() -> toString
    30:30:int access$100(com.google.common.hash.ChecksumHashFunction) -> a
com.google.common.hash.ChecksumHashFunction$ChecksumHasher -> com.google.common.hash.q:
    java.util.zip.Checksum checksum -> a
    com.google.common.hash.ChecksumHashFunction this$0 -> b
    62:64:void <init>(com.google.common.hash.ChecksumHashFunction,java.util.zip.Checksum) -> <init>
    68:69:void update(byte) -> a
    73:74:void update(byte[],int,int) -> a
    78:87:com.google.common.hash.HashCode hash() -> hash
    59:59:void <init>(com.google.common.hash.ChecksumHashFunction,java.util.zip.Checksum,byte) -> <init>
com.google.common.hash.Crc32cHashFunction -> com.google.common.hash.r:
    com.google.common.hash.HashFunction CRC_32_C -> a
    26:26:void <init>() -> <init>
    31:31:int bits() -> bits
    36:36:com.google.common.hash.Hasher newHasher() -> newHasher
    41:41:java.lang.String toString() -> toString
    27:27:void <clinit>() -> <clinit>
com.google.common.hash.Crc32cHashFunction$Crc32cHasher -> com.google.common.hash.s:
    int[] CRC_TABLE -> a
    int crc -> b
    44:114:void <init>() -> <init>
    118:121:void update(byte) -> a
    125:125:com.google.common.hash.HashCode hash() -> hash
    47:47:void <clinit>() -> <clinit>
com.google.common.hash.FarmHashFingerprint64 -> com.google.common.hash.t:
    com.google.common.hash.HashFunction FARMHASH_FINGERPRINT_64 -> a
    41:41:void <init>() -> <init>
    51:52:com.google.common.hash.HashCode hashBytes(byte[],int,int) -> hashBytes
    57:57:int bits() -> bits
    62:62:java.lang.String toString() -> toString
    69:78:long fingerprint(byte[],int,int) -> a
    83:83:long shiftMix(long) -> a
    87:92:long hashLength16(long,long,long) -> a
    102:115:void weakHashLength32WithSeeds(byte[],int,long,long,long[]) -> a
    118:139:long hashLength0to16(byte[],int,int) -> b
    143:149:long hashLength17to32(byte[],int,int) -> c
    153:165:long hashLength33To64(byte[],int,int) -> d
    172:213:long hashLength65Plus(byte[],int,int) -> e
    42:42:void <clinit>() -> <clinit>
com.google.common.hash.Funnel -> com.google.common.hash.Funnel:
    void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
com.google.common.hash.Funnels -> com.google.common.hash.Funnels:
    32:32:void <init>() -> <init>
    36:36:com.google.common.hash.Funnel byteArrayFunnel() -> byteArrayFunnel
    61:61:com.google.common.hash.Funnel unencodedCharsFunnel() -> unencodedCharsFunnel
    85:85:com.google.common.hash.Funnel stringFunnel(java.nio.charset.Charset) -> stringFunnel
    144:144:com.google.common.hash.Funnel integerFunnel() -> integerFunnel
    168:168:com.google.common.hash.Funnel sequentialFunnel(com.google.common.hash.Funnel) -> sequentialFunnel
    211:211:com.google.common.hash.Funnel longFunnel() -> longFunnel
    239:239:java.io.OutputStream asOutputStream(com.google.common.hash.PrimitiveSink) -> asOutputStream
com.google.common.hash.Funnels$ByteArrayFunnel -> com.google.common.hash.u:
    com.google.common.hash.Funnels$ByteArrayFunnel INSTANCE -> a
    com.google.common.hash.Funnels$ByteArrayFunnel[] $VALUES -> b
    39:39:com.google.common.hash.Funnels$ByteArrayFunnel[] values() -> values
    39:39:com.google.common.hash.Funnels$ByteArrayFunnel valueOf(java.lang.String) -> valueOf
    39:39:void <init>(java.lang.String,int) -> <init>
    44:45:void funnel(byte[],com.google.common.hash.PrimitiveSink) -> a
    49:49:java.lang.String toString() -> toString
    39:39:void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
    39:40:void <clinit>() -> <clinit>
com.google.common.hash.Funnels$IntegerFunnel -> com.google.common.hash.v:
    com.google.common.hash.Funnels$IntegerFunnel INSTANCE -> a
    com.google.common.hash.Funnels$IntegerFunnel[] $VALUES -> b
    147:147:com.google.common.hash.Funnels$IntegerFunnel[] values() -> values
    147:147:com.google.common.hash.Funnels$IntegerFunnel valueOf(java.lang.String) -> valueOf
    147:147:void <init>(java.lang.String,int) -> <init>
    152:153:void funnel(java.lang.Integer,com.google.common.hash.PrimitiveSink) -> a
    157:157:java.lang.String toString() -> toString
    147:147:void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
    147:148:void <clinit>() -> <clinit>
com.google.common.hash.Funnels$LongFunnel -> com.google.common.hash.w:
    com.google.common.hash.Funnels$LongFunnel INSTANCE -> a
    com.google.common.hash.Funnels$LongFunnel[] $VALUES -> b
    214:214:com.google.common.hash.Funnels$LongFunnel[] values() -> values
    214:214:com.google.common.hash.Funnels$LongFunnel valueOf(java.lang.String) -> valueOf
    214:214:void <init>(java.lang.String,int) -> <init>
    219:220:void funnel(java.lang.Long,com.google.common.hash.PrimitiveSink) -> a
    224:224:java.lang.String toString() -> toString
    214:214:void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
    214:215:void <clinit>() -> <clinit>
com.google.common.hash.Funnels$SequentialFunnel -> com.google.common.hash.x:
    com.google.common.hash.Funnel elementFunnel -> a
    174:176:void <init>(com.google.common.hash.Funnel) -> <init>
    180:183:void funnel(java.lang.Iterable,com.google.common.hash.PrimitiveSink) -> a
    187:187:java.lang.String toString() -> toString
    192:196:boolean equals(java.lang.Object) -> equals
    201:201:int hashCode() -> hashCode
    171:171:void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
com.google.common.hash.Funnels$SinkAsStream -> com.google.common.hash.y:
    com.google.common.hash.PrimitiveSink sink -> a
    245:247:void <init>(com.google.common.hash.PrimitiveSink) -> <init>
    251:252:void write(int) -> write
    256:257:void write(byte[]) -> write
    261:262:void write(byte[],int,int) -> write
    266:266:java.lang.String toString() -> toString
com.google.common.hash.Funnels$StringCharsetFunnel -> com.google.common.hash.z:
    java.nio.charset.Charset charset -> a
    91:93:void <init>(java.nio.charset.Charset) -> <init>
    97:98:void funnel(java.lang.CharSequence,com.google.common.hash.PrimitiveSink) -> a
    102:102:java.lang.String toString() -> toString
    107:111:boolean equals(java.lang.Object) -> equals
    116:116:int hashCode() -> hashCode
    120:120:java.lang.Object writeReplace() -> writeReplace
    88:88:void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm -> com.google.common.hash.A:
    java.lang.String charsetCanonicalName -> a
    long serialVersionUID -> serialVersionUID
    126:128:void <init>(java.nio.charset.Charset) -> <init>
    131:131:java.lang.Object readResolve() -> readResolve
com.google.common.hash.Funnels$UnencodedCharsFunnel -> com.google.common.hash.B:
    com.google.common.hash.Funnels$UnencodedCharsFunnel INSTANCE -> a
    com.google.common.hash.Funnels$UnencodedCharsFunnel[] $VALUES -> b
    64:64:com.google.common.hash.Funnels$UnencodedCharsFunnel[] values() -> values
    64:64:com.google.common.hash.Funnels$UnencodedCharsFunnel valueOf(java.lang.String) -> valueOf
    64:64:void <init>(java.lang.String,int) -> <init>
    69:70:void funnel(java.lang.CharSequence,com.google.common.hash.PrimitiveSink) -> a
    74:74:java.lang.String toString() -> toString
    64:64:void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
    64:65:void <clinit>() -> <clinit>
com.google.common.hash.HashCode -> com.google.common.hash.HashCode:
    char[] hexDigits -> a
    38:38:void <init>() -> <init>
    int bits() -> bits
    int asInt() -> asInt
    long asLong() -> asLong
    long padToLong() -> padToLong
    byte[] asBytes() -> asBytes
    87:90:int writeBytesTo(byte[],int,int) -> writeBytesTo
    void writeBytesToImpl(byte[],int,int) -> a
    101:101:byte[] getBytesInternal() -> a
    boolean equalsSameBits(com.google.common.hash.HashCode) -> a
    117:117:com.google.common.hash.HashCode fromInt(int) -> fromInt
    174:174:com.google.common.hash.HashCode fromLong(long) -> fromLong
    240:241:com.google.common.hash.HashCode fromBytes(byte[]) -> fromBytes
    249:249:com.google.common.hash.HashCode fromBytesNoCopy(byte[]) -> a
    338:351:com.google.common.hash.HashCode fromString(java.lang.String) -> fromString
    355:361:int decode(char) -> a
    373:377:boolean equals(java.lang.Object) -> equals
    389:398:int hashCode() -> hashCode
    414:419:java.lang.String toString() -> toString
    422:422:void <clinit>() -> <clinit>
com.google.common.hash.HashCode$BytesHashCode -> com.google.common.hash.C:
    byte[] bytes -> a
    long serialVersionUID -> serialVersionUID
    255:257:void <init>(byte[]) -> <init>
    261:261:int bits() -> bits
    266:266:byte[] asBytes() -> asBytes
    271:275:int asInt() -> asInt
    283:287:long asLong() -> asLong
    292:296:long padToLong() -> padToLong
    301:302:void writeBytesToImpl(byte[],int,int) -> a
    306:306:byte[] getBytesInternal() -> a
    313:321:boolean equalsSameBits(com.google.common.hash.HashCode) -> a
com.google.common.hash.HashCode$IntHashCode -> com.google.common.hash.D:
    int hash -> a
    long serialVersionUID -> serialVersionUID
    123:125:void <init>(int) -> <init>
    129:129:int bits() -> bits
    134:134:byte[] asBytes() -> asBytes
    139:139:int asInt() -> asInt
    144:144:long asLong() -> asLong
    149:149:long padToLong() -> padToLong
    154:157:void writeBytesToImpl(byte[],int,int) -> a
    161:161:boolean equalsSameBits(com.google.common.hash.HashCode) -> a
com.google.common.hash.HashCode$LongHashCode -> com.google.common.hash.E:
    long hash -> a
    long serialVersionUID -> serialVersionUID
    180:182:void <init>(long) -> <init>
    186:186:int bits() -> bits
    191:191:byte[] asBytes() -> asBytes
    205:205:int asInt() -> asInt
    210:210:long asLong() -> asLong
    215:215:long padToLong() -> padToLong
    220:223:void writeBytesToImpl(byte[],int,int) -> a
    227:227:boolean equalsSameBits(com.google.common.hash.HashCode) -> a
com.google.common.hash.HashFunction -> com.google.common.hash.HashFunction:
    com.google.common.hash.Hasher newHasher() -> newHasher
    com.google.common.hash.Hasher newHasher(int) -> newHasher
    com.google.common.hash.HashCode hashInt(int) -> hashInt
    com.google.common.hash.HashCode hashLong(long) -> hashLong
    com.google.common.hash.HashCode hashBytes(byte[]) -> hashBytes
    com.google.common.hash.HashCode hashBytes(byte[],int,int) -> hashBytes
    com.google.common.hash.HashCode hashBytes(java.nio.ByteBuffer) -> hashBytes
    com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence) -> hashUnencodedChars
    com.google.common.hash.HashCode hashString(java.lang.CharSequence,java.nio.charset.Charset) -> hashString
    com.google.common.hash.HashCode hashObject(java.lang.Object,com.google.common.hash.Funnel) -> hashObject
    int bits() -> bits
com.google.common.hash.Hasher -> com.google.common.hash.Hasher:
    com.google.common.hash.Hasher putByte(byte) -> putByte
    com.google.common.hash.Hasher putBytes(byte[]) -> putBytes
    com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer) -> putBytes
    com.google.common.hash.Hasher putShort(short) -> putShort
    com.google.common.hash.Hasher putInt(int) -> putInt
    com.google.common.hash.Hasher putLong(long) -> putLong
    com.google.common.hash.Hasher putFloat(float) -> putFloat
    com.google.common.hash.Hasher putDouble(double) -> putDouble
    com.google.common.hash.Hasher putBoolean(boolean) -> putBoolean
    com.google.common.hash.Hasher putChar(char) -> putChar
    com.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    com.google.common.hash.Hasher putObject(java.lang.Object,com.google.common.hash.Funnel) -> putObject
    com.google.common.hash.HashCode hash() -> hash
    int hashCode() -> hashCode
    55:55:com.google.common.hash.PrimitiveSink putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    55:55:com.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    55:55:com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    55:55:com.google.common.hash.PrimitiveSink putBoolean(boolean) -> putBoolean
    55:55:com.google.common.hash.PrimitiveSink putDouble(double) -> putDouble
    55:55:com.google.common.hash.PrimitiveSink putFloat(float) -> putFloat
    55:55:com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    55:55:com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    55:55:com.google.common.hash.PrimitiveSink putShort(short) -> putShort
    55:55:com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer) -> putBytes
    55:55:com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    55:55:com.google.common.hash.PrimitiveSink putBytes(byte[]) -> putBytes
    55:55:com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
com.google.common.hash.Hashing -> com.google.common.hash.Hashing:
    int GOOD_FAST_HASH_SEED -> a
    65:83:com.google.common.hash.HashFunction goodFastHash(int) -> goodFastHash
    101:101:com.google.common.hash.HashFunction murmur3_32(int) -> murmur3_32
    112:112:com.google.common.hash.HashFunction murmur3_32() -> murmur3_32
    123:123:com.google.common.hash.HashFunction murmur3_128(int) -> murmur3_128
    134:134:com.google.common.hash.HashFunction murmur3_128() -> murmur3_128
    144:144:com.google.common.hash.HashFunction sipHash24() -> sipHash24
    154:154:com.google.common.hash.HashFunction sipHash24(long,long) -> sipHash24
    171:171:com.google.common.hash.HashFunction md5() -> md5
    192:192:com.google.common.hash.HashFunction sha1() -> sha1
    201:201:com.google.common.hash.HashFunction sha256() -> sha256
    215:215:com.google.common.hash.HashFunction sha384() -> sha384
    225:225:com.google.common.hash.HashFunction sha512() -> sha512
    243:243:com.google.common.hash.HashFunction hmacMd5(java.security.Key) -> hmacMd5
    256:256:com.google.common.hash.HashFunction hmacMd5(byte[]) -> hmacMd5
    269:269:com.google.common.hash.HashFunction hmacSha1(java.security.Key) -> hmacSha1
    282:282:com.google.common.hash.HashFunction hmacSha1(byte[]) -> hmacSha1
    295:295:com.google.common.hash.HashFunction hmacSha256(java.security.Key) -> hmacSha256
    308:308:com.google.common.hash.HashFunction hmacSha256(byte[]) -> hmacSha256
    321:321:com.google.common.hash.HashFunction hmacSha512(java.security.Key) -> hmacSha512
    334:334:com.google.common.hash.HashFunction hmacSha512(byte[]) -> hmacSha512
    338:340:java.lang.String hmacToString(java.lang.String,java.security.Key) -> a
    354:354:com.google.common.hash.HashFunction crc32c() -> crc32c
    370:370:com.google.common.hash.HashFunction crc32() -> crc32
    386:386:com.google.common.hash.HashFunction adler32() -> adler32
    430:430:com.google.common.hash.HashFunction farmHashFingerprint64() -> farmHashFingerprint64
    465:465:int consistentHash(com.google.common.hash.HashCode,int) -> consistentHash
    500:511:int consistentHash(long,int) -> consistentHash
    526:538:com.google.common.hash.HashCode combineOrdered(java.lang.Iterable) -> combineOrdered
    551:562:com.google.common.hash.HashCode combineUnordered(java.lang.Iterable) -> combineUnordered
    567:568:int checkPositiveAndMakeMultipleOf32(int) -> a
    584:588:com.google.common.hash.HashFunction concatenating(com.google.common.hash.HashFunction,com.google.common.hash.HashFunction,com.google.common.hash.HashFunction[]) -> concatenating
    602:609:com.google.common.hash.HashFunction concatenating(java.lang.Iterable) -> concatenating
    677:677:void <init>() -> <init>
    91:91:void <clinit>() -> <clinit>
com.google.common.hash.Hashing$ChecksumType -> com.google.common.hash.F:
    com.google.common.hash.Hashing$ChecksumType CRC_32 -> a
    com.google.common.hash.Hashing$ChecksumType ADLER_32 -> b
    com.google.common.hash.HashFunction hashFunction -> c
    com.google.common.hash.Hashing$ChecksumType[] $VALUES -> d
    389:389:com.google.common.hash.Hashing$ChecksumType[] values() -> values
    389:389:com.google.common.hash.Hashing$ChecksumType valueOf(java.lang.String) -> valueOf
    406:408:void <init>(java.lang.String,int,java.lang.String) -> <init>
    390:390:void <init>(java.lang.String,int,java.lang.String,byte) -> <init>
    389:397:void <clinit>() -> <clinit>
com.google.common.hash.Hashing$ChecksumType$1 -> com.google.common.hash.G:
    391:391:void <init>(java.lang.String,int,java.lang.String) -> <init>
    394:394:java.util.zip.Checksum get() -> a
    391:391:java.lang.Object get() -> get
com.google.common.hash.Hashing$ChecksumType$2 -> com.google.common.hash.H:
    397:397:void <init>(java.lang.String,int,java.lang.String) -> <init>
    400:400:java.util.zip.Checksum get() -> a
    397:397:java.lang.Object get() -> get
com.google.common.hash.Hashing$ConcatenatedHashFunction -> com.google.common.hash.I:
    615:623:void <init>(com.google.common.hash.HashFunction[]) -> <init>
    627:633:com.google.common.hash.HashCode makeHash(com.google.common.hash.Hasher[]) -> a
    638:642:int bits() -> bits
    647:651:boolean equals(java.lang.Object) -> equals
    656:656:int hashCode() -> hashCode
    612:612:void <init>(com.google.common.hash.HashFunction[],byte) -> <init>
com.google.common.hash.Hashing$LinearCongruentialGenerator -> com.google.common.hash.J:
    long state -> a
    667:669:void <init>(long) -> <init>
    672:673:double nextDouble() -> a
com.google.common.hash.Hashing$Md5Holder -> com.google.common.hash.K:
    com.google.common.hash.HashFunction MD5 -> a
    175:175:void <clinit>() -> <clinit>
com.google.common.hash.Hashing$Sha1Holder -> com.google.common.hash.L:
    com.google.common.hash.HashFunction SHA_1 -> a
    196:196:void <clinit>() -> <clinit>
com.google.common.hash.Hashing$Sha256Holder -> com.google.common.hash.M:
    com.google.common.hash.HashFunction SHA_256 -> a
    205:205:void <clinit>() -> <clinit>
com.google.common.hash.Hashing$Sha384Holder -> com.google.common.hash.N:
    com.google.common.hash.HashFunction SHA_384 -> a
    219:219:void <clinit>() -> <clinit>
com.google.common.hash.Hashing$Sha512Holder -> com.google.common.hash.O:
    com.google.common.hash.HashFunction SHA_512 -> a
    229:229:void <clinit>() -> <clinit>
com.google.common.hash.HashingInputStream -> com.google.common.hash.HashingInputStream:
    com.google.common.hash.Hasher hasher -> a
    42:44:void <init>(com.google.common.hash.HashFunction,java.io.InputStream) -> <init>
    53:57:int read() -> read
    67:71:int read(byte[],int,int) -> read
    81:81:boolean markSupported() -> markSupported
    86:86:void mark(int) -> mark
    95:95:void reset() -> reset
    103:103:com.google.common.hash.HashCode hash() -> hash
com.google.common.hash.HashingOutputStream -> com.google.common.hash.HashingOutputStream:
    com.google.common.hash.Hasher hasher -> a
    45:47:void <init>(com.google.common.hash.HashFunction,java.io.OutputStream) -> <init>
    51:53:void write(int) -> write
    57:59:void write(byte[],int,int) -> write
    66:66:com.google.common.hash.HashCode hash() -> hash
    74:75:void close() -> close
com.google.common.hash.ImmutableSupplier -> com.google.common.hash.P:
com.google.common.hash.LittleEndianByteArray -> com.google.common.hash.Q:
    com.google.common.hash.LittleEndianByteArray$LittleEndianBytes byteArray -> a
    boolean $assertionsDisabled -> b
    42:44:long load64(byte[],int) -> a
    94:94:int load32(byte[],int) -> b
    259:259:void <init>() -> <init>
    27:256:void <clinit>() -> <clinit>
com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes -> com.google.common.hash.R:
    com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes INSTANCE -> a
    com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes[] $VALUES -> b
    206:206:com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes[] values() -> values
    206:206:com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes valueOf(java.lang.String) -> valueOf
    206:206:void <init>(java.lang.String,int) -> <init>
    206:206:void <init>(java.lang.String,int,byte) -> <init>
    206:207:void <clinit>() -> <clinit>
com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes$1 -> com.google.common.hash.S:
    207:207:void <init>(java.lang.String,int) -> <init>
    210:210:long getLongLittleEndian(byte[],int) -> a
com.google.common.hash.LittleEndianByteArray$LittleEndianBytes -> com.google.common.hash.T:
    long getLongLittleEndian(byte[],int) -> a
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray -> com.google.common.hash.U:
    com.google.common.hash.LittleEndianByteArray$UnsafeByteArray UNSAFE_LITTLE_ENDIAN -> a
    com.google.common.hash.LittleEndianByteArray$UnsafeByteArray UNSAFE_BIG_ENDIAN -> b
    sun.misc.Unsafe theUnsafe -> c
    int BYTE_ARRAY_BASE_OFFSET -> d
    com.google.common.hash.LittleEndianByteArray$UnsafeByteArray[] $VALUES -> e
    126:126:com.google.common.hash.LittleEndianByteArray$UnsafeByteArray[] values() -> values
    126:126:com.google.common.hash.LittleEndianByteArray$UnsafeByteArray valueOf(java.lang.String) -> valueOf
    126:126:void <init>(java.lang.String,int) -> <init>
    169:190:sun.misc.Unsafe getUnsafe() -> c
    126:126:void <init>(java.lang.String,int,byte) -> <init>
    126:126:int access$100() -> a
    126:126:sun.misc.Unsafe access$200() -> b
    126:202:void <clinit>() -> <clinit>
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$1 -> com.google.common.hash.V:
    128:128:void <init>(java.lang.String,int) -> <init>
    131:131:long getLongLittleEndian(byte[],int) -> a
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$2 -> com.google.common.hash.W:
    139:139:void <init>(java.lang.String,int) -> <init>
    142:144:long getLongLittleEndian(byte[],int) -> a
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$3 -> com.google.common.hash.X:
    175:175:void <init>() -> <init>
    178:186:sun.misc.Unsafe run() -> a
    175:175:java.lang.Object run() -> run
com.google.common.hash.LongAddable -> com.google.common.hash.Y:
    void increment() -> a
    void add(long) -> a
    long sum() -> b
com.google.common.hash.LongAddables -> com.google.common.hash.Z:
    com.google.common.base.Supplier SUPPLIER -> a
    52:52:com.google.common.hash.LongAddable create() -> a
    31:49:void <clinit>() -> <clinit>
com.google.common.hash.LongAddables$1 -> com.google.common.hash.aa:
    33:33:void <init>() -> <init>
    36:36:com.google.common.hash.LongAddable get() -> a
    33:33:java.lang.Object get() -> get
com.google.common.hash.LongAddables$2 -> com.google.common.hash.ab:
    41:41:void <init>() -> <init>
    44:44:com.google.common.hash.LongAddable get() -> a
    41:41:java.lang.Object get() -> get
com.google.common.hash.LongAddables$PureJavaLongAddable -> com.google.common.hash.ac:
    55:55:void <init>() -> <init>
    58:59:void increment() -> a
    63:64:void add(long) -> a
    68:68:long sum() -> b
    55:55:void <init>(byte) -> <init>
com.google.common.hash.LongAdder -> com.google.common.hash.ad:
    long serialVersionUID -> serialVersionUID
    47:47:long fn(long,long) -> a
    51:51:void <init>() -> <init>
    65:73:void add(long) -> a
    78:79:void increment() -> a
    95:104:long sum() -> b
    149:149:java.lang.String toString() -> toString
    159:159:long longValue() -> longValue
    165:165:int intValue() -> intValue
    171:171:float floatValue() -> floatValue
    177:177:double doubleValue() -> doubleValue
    181:183:void writeObject(java.io.ObjectOutputStream) -> writeObject
    186:190:void readObject(java.io.ObjectInputStream) -> readObject
com.google.common.hash.MacHashFunction -> com.google.common.hash.ae:
    javax.crypto.Mac prototype -> a
    java.security.Key key -> b
    java.lang.String toString -> c
    int bits -> d
    boolean supportsClone -> e
    45:51:void <init>(java.lang.String,java.security.Key,java.lang.String) -> <init>
    55:55:int bits() -> bits
    60:63:boolean supportsClone(javax.crypto.Mac) -> a
    69:75:javax.crypto.Mac getMac(java.lang.String,java.security.Key) -> a
    81:88:com.google.common.hash.Hasher newHasher() -> newHasher
    93:93:java.lang.String toString() -> toString
com.google.common.hash.MacHashFunction$MacHasher -> com.google.common.hash.af:
    javax.crypto.Mac mac -> a
    boolean done -> b
    101:103:void <init>(javax.crypto.Mac) -> <init>
    107:109:void update(byte) -> a
    113:115:void update(byte[]) -> a
    119:121:void update(byte[],int,int) -> a
    125:128:void update(java.nio.ByteBuffer) -> a
    131:132:void checkNotDone() -> a
    136:138:com.google.common.hash.HashCode hash() -> hash
    97:97:void <init>(javax.crypto.Mac,byte) -> <init>
com.google.common.hash.MessageDigestHashFunction -> com.google.common.hash.ag:
    java.security.MessageDigest prototype -> a
    int bytes -> b
    boolean supportsClone -> c
    java.lang.String toString -> d
    44:49:void <init>(java.lang.String,java.lang.String) -> <init>
    51:59:void <init>(java.lang.String,int,java.lang.String) -> <init>
    63:66:boolean supportsClone(java.security.MessageDigest) -> a
    72:72:int bits() -> bits
    77:77:java.lang.String toString() -> toString
    82:84:java.security.MessageDigest getMessageDigest(java.lang.String) -> a
    90:97:com.google.common.hash.Hasher newHasher() -> newHasher
    119:119:java.lang.Object writeReplace() -> writeReplace
com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher -> com.google.common.hash.ah:
    java.security.MessageDigest digest -> a
    int bytes -> b
    boolean done -> c
    128:131:void <init>(java.security.MessageDigest,int) -> <init>
    135:137:void update(byte) -> a
    141:143:void update(byte[],int,int) -> a
    147:149:void update(java.nio.ByteBuffer) -> a
    152:153:void checkNotDone() -> a
    157:161:com.google.common.hash.HashCode hash() -> hash
    123:123:void <init>(java.security.MessageDigest,int,byte) -> <init>
com.google.common.hash.MessageDigestHashFunction$SerializedForm -> com.google.common.hash.ai:
    java.lang.String algorithmName -> a
    int bytes -> b
    java.lang.String toString -> c
    long serialVersionUID -> serialVersionUID
    105:109:void <init>(java.lang.String,int,java.lang.String) -> <init>
    112:112:java.lang.Object readResolve() -> readResolve
    100:100:void <init>(java.lang.String,int,java.lang.String,byte) -> <init>
com.google.common.hash.Murmur3_128HashFunction -> com.google.common.hash.aj:
    com.google.common.hash.HashFunction MURMUR3_128 -> a
    com.google.common.hash.HashFunction GOOD_FAST_HASH_128 -> b
    int seed -> c
    long serialVersionUID -> serialVersionUID
    53:55:void <init>(int) -> <init>
    59:59:int bits() -> bits
    64:64:com.google.common.hash.Hasher newHasher() -> newHasher
    69:69:java.lang.String toString() -> toString
    74:78:boolean equals(java.lang.Object) -> equals
    83:83:int hashCode() -> hashCode
    45:47:void <clinit>() -> <clinit>
com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher -> com.google.common.hash.ak:
    long h1 -> a
    long h2 -> b
    int length -> c
    95:99:void <init>(int) -> <init>
    103:107:void process(java.nio.ByteBuffer) -> a
    110:121:void bmix64(long,long) -> a
    125:166:void processRemaining(java.nio.ByteBuffer) -> b
    170:187:com.google.common.hash.HashCode makeHash() -> a
    191:196:long fmix64(long) -> a
    200:203:long mixK1(long) -> b
    207:210:long mixK2(long) -> c
com.google.common.hash.Murmur3_32HashFunction -> com.google.common.hash.al:
    com.google.common.hash.HashFunction MURMUR3_32 -> a
    com.google.common.hash.HashFunction GOOD_FAST_HASH_32 -> b
    int seed -> c
    long serialVersionUID -> serialVersionUID
    67:69:void <init>(int) -> <init>
    73:73:int bits() -> bits
    78:78:com.google.common.hash.Hasher newHasher() -> newHasher
    83:83:java.lang.String toString() -> toString
    88:92:boolean equals(java.lang.Object) -> equals
    97:97:int hashCode() -> hashCode
    102:105:com.google.common.hash.HashCode hashInt(int) -> hashInt
    110:119:com.google.common.hash.HashCode hashLong(long) -> hashLong
    124:140:com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence) -> hashUnencodedChars
    146:208:com.google.common.hash.HashCode hashString(java.lang.CharSequence,java.nio.charset.Charset) -> hashString
    214:227:com.google.common.hash.HashCode hashBytes(byte[],int,int) -> hashBytes
    231:231:int getIntLittleEndian(byte[],int) -> b
    235:238:int mixK1(int) -> c
    242:245:int mixH1(int,int) -> c
    250:256:com.google.common.hash.HashCode fmix(int,int) -> d
    394:394:long codePointToFourUtf8Bytes(int) -> d
    401:401:long charToThreeUtf8Bytes(char) -> c
    407:407:long charToTwoUtf8Bytes(char) -> d
    54:54:int access$000(int) -> a
    54:54:int access$100(int,int) -> a
    54:54:int access$200(byte[],int) -> a
    54:54:long access$300(char) -> a
    54:54:long access$400(char) -> b
    54:54:long access$500(int) -> b
    54:54:com.google.common.hash.HashCode access$600(int,int) -> b
    55:57:void <clinit>() -> <clinit>
com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher -> com.google.common.hash.am:
    int h1 -> a
    long buffer -> b
    int shift -> c
    int length -> d
    boolean isDone -> e
    267:271:void <init>(int) -> <init>
    275:284:void update(int,long) -> a
    288:289:com.google.common.hash.Hasher putByte(byte) -> putByte
    294:302:com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    307:316:com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer) -> putBytes
    321:322:com.google.common.hash.Hasher putInt(int) -> putInt
    327:329:com.google.common.hash.Hasher putLong(long) -> putLong
    334:335:com.google.common.hash.Hasher putChar(char) -> putChar
    341:380:com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    386:389:com.google.common.hash.HashCode hash() -> hash
    259:259:com.google.common.hash.PrimitiveSink putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    259:259:com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    259:259:com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    259:259:com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    259:259:com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer) -> putBytes
    259:259:com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    259:259:com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
com.google.common.hash.PrimitiveSink -> com.google.common.hash.PrimitiveSink:
    com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
    com.google.common.hash.PrimitiveSink putBytes(byte[]) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer) -> putBytes
    com.google.common.hash.PrimitiveSink putShort(short) -> putShort
    com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    com.google.common.hash.PrimitiveSink putFloat(float) -> putFloat
    com.google.common.hash.PrimitiveSink putDouble(double) -> putDouble
    com.google.common.hash.PrimitiveSink putBoolean(boolean) -> putBoolean
    com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    com.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    com.google.common.hash.PrimitiveSink putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
com.google.common.hash.SipHashFunction -> com.google.common.hash.an:
    com.google.common.hash.HashFunction SIP_HASH_24 -> a
    int c -> b
    int d -> c
    long k0 -> d
    long k1 -> e
    long serialVersionUID -> serialVersionUID
    55:64:void <init>(int,int,long,long) -> <init>
    68:68:int bits() -> bits
    73:73:com.google.common.hash.Hasher newHasher() -> newHasher
    80:80:java.lang.String toString() -> toString
    85:89:boolean equals(java.lang.Object) -> equals
    94:94:int hashCode() -> hashCode
    38:38:void <clinit>() -> <clinit>
com.google.common.hash.SipHashFunction$SipHasher -> com.google.common.hash.ao:
    int c -> a
    int d -> b
    long v0 -> c
    long v1 -> d
    long v2 -> e
    long v3 -> f
    long b -> g
    long finalM -> h
    109:129:void <init>(int,int,long,long) -> <init>
    133:135:void process(java.nio.ByteBuffer) -> a
    139:143:void processRemaining(java.nio.ByteBuffer) -> b
    148:154:com.google.common.hash.HashCode makeHash() -> a
    158:161:void processM(long) -> a
    164:180:void sipRound(int) -> a
com.google.common.hash.Striped64 -> com.google.common.hash.ap:
    java.lang.ThreadLocal threadHashCode -> a
    java.util.Random rng -> e
    int NCPU -> f
    com.google.common.hash.Striped64$Cell[] cells -> b
    long base -> c
    int busy -> d
    sun.misc.Unsafe UNSAFE -> g
    long baseOffset -> h
    long busyOffset -> i
    149:149:void <init>() -> <init>
    153:153:boolean casBase(long,long) -> b
    158:158:boolean casBusy() -> a
    long fn(long,long) -> a
    182:251:void retryUpdate(long,int[],boolean) -> a
    290:308:sun.misc.Unsafe getUnsafe() -> b
    24:24:sun.misc.Unsafe access$000() -> c
    128:280:void <clinit>() -> <clinit>
com.google.common.hash.Striped64$1 -> com.google.common.hash.aq:
    295:295:void <init>() -> <init>
    298:304:sun.misc.Unsafe run() -> a
    295:295:java.lang.Object run() -> run
com.google.common.hash.Striped64$Cell -> com.google.common.hash.ar:
    long value -> a
    sun.misc.Unsafe UNSAFE -> b
    long valueOffset -> c
    100:102:void <init>(long) -> <init>
    105:105:boolean cas(long,long) -> a
    114:120:void <clinit>() -> <clinit>
com.google.common.html.HtmlEscapers -> com.google.common.html.HtmlEscapers:
    com.google.common.escape.Escaper HTML_ESCAPER -> a
    52:52:com.google.common.escape.Escaper htmlEscaper() -> htmlEscaper
    68:68:void <init>() -> <init>
    58:66:void <clinit>() -> <clinit>
com.google.common.io.AppendableWriter -> com.google.common.io.a:
    java.lang.Appendable target -> a
    boolean closed -> b
    44:46:void <init>(java.lang.Appendable) -> <init>
    54:58:void write(char[],int,int) -> write
    66:68:void write(int) -> write
    72:74:void write(java.lang.String) -> write
    78:81:void write(java.lang.String,int,int) -> write
    85:89:void flush() -> flush
    93:97:void close() -> close
    101:103:java.io.Writer append(char) -> append
    108:110:java.io.Writer append(java.lang.CharSequence) -> append
    115:117:java.io.Writer append(java.lang.CharSequence,int,int) -> append
    121:124:void checkNotClosed() -> a
    34:34:java.lang.Appendable append(char) -> append
    34:34:java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    34:34:java.lang.Appendable append(java.lang.CharSequence) -> append
com.google.common.io.BaseEncoding -> com.google.common.io.BaseEncoding:
    com.google.common.io.BaseEncoding BASE64 -> a
    com.google.common.io.BaseEncoding BASE64_URL -> b
    com.google.common.io.BaseEncoding BASE32 -> c
    com.google.common.io.BaseEncoding BASE32_HEX -> d
    com.google.common.io.BaseEncoding BASE16 -> e
    128:128:void <init>() -> <init>
    148:148:java.lang.String encode(byte[]) -> encode
    156:163:java.lang.String encode(byte[],int,int) -> encode
    java.io.OutputStream encodingStream(java.io.Writer) -> encodingStream
    179:180:com.google.common.io.ByteSink encodingSink(com.google.common.io.CharSink) -> encodingSink
    191:196:byte[] extract(byte[],int) -> a
    boolean canDecode(java.lang.CharSequence) -> canDecode
    217:219:byte[] decode(java.lang.CharSequence) -> decode
    231:234:byte[] decodeChecked(java.lang.CharSequence) -> b
    java.io.InputStream decodingStream(java.io.Reader) -> decodingStream
    250:251:com.google.common.io.ByteSource decodingSource(com.google.common.io.CharSource) -> decodingSource
    int maxEncodedSize(int) -> a
    void encodeTo(java.lang.Appendable,byte[],int,int) -> a
    int maxDecodedSize(int) -> b
    int decodeTo(byte[],java.lang.CharSequence) -> a
    270:270:java.lang.CharSequence trimTrailingPadding(java.lang.CharSequence) -> a
    com.google.common.io.BaseEncoding omitPadding() -> omitPadding
    com.google.common.io.BaseEncoding withPadChar(char) -> withPadChar
    com.google.common.io.BaseEncoding withSeparator(java.lang.String,int) -> withSeparator
    com.google.common.io.BaseEncoding upperCase() -> upperCase
    com.google.common.io.BaseEncoding lowerCase() -> lowerCase
    338:338:com.google.common.io.BaseEncoding base64() -> base64
    360:360:com.google.common.io.BaseEncoding base64Url() -> base64Url
    379:379:com.google.common.io.BaseEncoding base32() -> base32
    398:398:com.google.common.io.BaseEncoding base32Hex() -> base32Hex
    417:417:com.google.common.io.BaseEncoding base16() -> base16
    997:999:java.io.Reader ignoringReader(java.io.Reader,java.lang.String) -> a
    1023:1026:java.lang.Appendable separatingAppendable(java.lang.Appendable,java.lang.String,int) -> a
    1055:1057:java.io.Writer separatingWriter(java.io.Writer,java.lang.String,int) -> a
    320:401:void <clinit>() -> <clinit>
com.google.common.io.BaseEncoding$1 -> com.google.common.io.b:
    com.google.common.io.CharSink val$encodedSink -> a
    com.google.common.io.BaseEncoding this$0 -> b
    180:180:void <init>(com.google.common.io.BaseEncoding,com.google.common.io.CharSink) -> <init>
    183:183:java.io.OutputStream openStream() -> openStream
com.google.common.io.BaseEncoding$2 -> com.google.common.io.c:
    com.google.common.io.CharSource val$encodedSource -> a
    com.google.common.io.BaseEncoding this$0 -> b
    251:251:void <init>(com.google.common.io.BaseEncoding,com.google.common.io.CharSource) -> <init>
    254:254:java.io.InputStream openStream() -> openStream
com.google.common.io.BaseEncoding$3 -> com.google.common.io.d:
    java.io.Reader val$delegate -> a
    java.lang.String val$toIgnore -> b
    999:999:void <init>(java.io.Reader,java.lang.String) -> <init>
    1004:1006:int read() -> read
    1011:1011:int read(char[],int,int) -> read
    1016:1017:void close() -> close
com.google.common.io.BaseEncoding$4 -> com.google.common.io.e:
    int charsUntilSeparator -> a
    int val$afterEveryChars -> b
    java.lang.Appendable val$delegate -> c
    java.lang.String val$separator -> d
    1026:1027:void <init>(int,java.lang.Appendable,java.lang.String) -> <init>
    1031:1037:java.lang.Appendable append(char) -> append
    1042:1042:java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    1047:1047:java.lang.Appendable append(java.lang.CharSequence) -> append
com.google.common.io.BaseEncoding$5 -> com.google.common.io.f:
    java.lang.Appendable val$seperatingAppendable -> a
    java.io.Writer val$delegate -> b
    1057:1057:void <init>(java.lang.Appendable,java.io.Writer) -> <init>
    1060:1061:void write(int) -> write
    1065:1065:void write(char[],int,int) -> write
    1070:1071:void flush() -> flush
    1075:1076:void close() -> close
com.google.common.io.BaseEncoding$Alphabet -> com.google.common.io.g:
    java.lang.String name -> e
    char[] chars -> f
    int mask -> a
    int bitsPerChar -> b
    int charsPerChunk -> c
    int bytesPerChunk -> d
    byte[] decodabet -> g
    boolean[] validPadding -> h
    431:469:void <init>(java.lang.String,char[]) -> <init>
    472:472:char encode(int) -> a
    476:476:boolean isValidPaddingStartPosition(int) -> b
    480:480:boolean canDecode(char) -> a
    484:495:int decode(char) -> b
    499:504:boolean hasLowerCase() -> c
    508:513:boolean hasUpperCase() -> d
    517:525:com.google.common.io.BaseEncoding$Alphabet upperCase() -> a
    530:538:com.google.common.io.BaseEncoding$Alphabet lowerCase() -> b
    543:543:boolean matches(char) -> c
    548:548:java.lang.String toString() -> toString
    553:557:boolean equals(java.lang.Object) -> equals
    562:562:int hashCode() -> hashCode
    420:420:char[] access$000(com.google.common.io.BaseEncoding$Alphabet) -> a
com.google.common.io.BaseEncoding$Base16Encoding -> com.google.common.io.h:
    char[] encoding -> c
    895:896:void <init>(java.lang.String,java.lang.String) -> <init>
    892:905:void <init>(com.google.common.io.BaseEncoding$Alphabet) -> <init>
    909:916:void encodeTo(java.lang.Appendable,byte[],int,int) -> a
    920:929:int decodeTo(byte[],java.lang.CharSequence) -> a
    934:934:com.google.common.io.BaseEncoding newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character) -> a
com.google.common.io.BaseEncoding$Base64Encoding -> com.google.common.io.i:
    940:941:void <init>(java.lang.String,java.lang.String,java.lang.Character) -> <init>
    944:946:void <init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character) -> <init>
    950:963:void encodeTo(java.lang.Appendable,byte[],int,int) -> a
    967:986:int decodeTo(byte[],java.lang.CharSequence) -> a
    991:991:com.google.common.io.BaseEncoding newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character) -> a
com.google.common.io.BaseEncoding$DecodingException -> com.google.common.io.BaseEncoding$DecodingException:
    138:139:void <init>(java.lang.String) -> <init>
com.google.common.io.BaseEncoding$SeparatedBaseEncoding -> com.google.common.io.j:
    com.google.common.io.BaseEncoding delegate -> a
    java.lang.String separator -> b
    int afterEveryChars -> c
    1085:1091:void <init>(com.google.common.io.BaseEncoding,java.lang.String,int) -> <init>
    1095:1095:java.lang.CharSequence trimTrailingPadding(java.lang.CharSequence) -> a
    1100:1102:int maxEncodedSize(int) -> a
    1108:1108:java.io.OutputStream encodingStream(java.io.Writer) -> encodingStream
    1113:1114:void encodeTo(java.lang.Appendable,byte[],int,int) -> a
    1118:1118:int maxDecodedSize(int) -> b
    1123:1130:boolean canDecode(java.lang.CharSequence) -> canDecode
    1135:1142:int decodeTo(byte[],java.lang.CharSequence) -> a
    1148:1148:java.io.InputStream decodingStream(java.io.Reader) -> decodingStream
    1153:1153:com.google.common.io.BaseEncoding omitPadding() -> omitPadding
    1158:1158:com.google.common.io.BaseEncoding withPadChar(char) -> withPadChar
    1163:1163:com.google.common.io.BaseEncoding withSeparator(java.lang.String,int) -> withSeparator
    1168:1168:com.google.common.io.BaseEncoding upperCase() -> upperCase
    1173:1173:com.google.common.io.BaseEncoding lowerCase() -> lowerCase
    1178:1178:java.lang.String toString() -> toString
com.google.common.io.BaseEncoding$StandardBaseEncoding -> com.google.common.io.k:
    com.google.common.io.BaseEncoding$Alphabet alphabet -> a
    java.lang.Character paddingChar -> b
    com.google.common.io.BaseEncoding upperCase -> c
    com.google.common.io.BaseEncoding lowerCase -> d
    573:574:void <init>(java.lang.String,java.lang.String,java.lang.Character) -> <init>
    576:583:void <init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character) -> <init>
    587:587:int maxEncodedSize(int) -> a
    593:594:java.io.OutputStream encodingStream(java.io.Writer) -> encodingStream
    637:642:void encodeTo(java.lang.Appendable,byte[],int,int) -> a
    645:667:void encodeChunkTo(java.lang.Appendable,byte[],int,int) -> b
    671:671:int maxDecodedSize(int) -> b
    676:687:java.lang.CharSequence trimTrailingPadding(java.lang.CharSequence) -> a
    692:702:boolean canDecode(java.lang.CharSequence) -> canDecode
    707:727:int decodeTo(byte[],java.lang.CharSequence) -> a
    733:734:java.io.InputStream decodingStream(java.io.Reader) -> decodingStream
    804:804:com.google.common.io.BaseEncoding omitPadding() -> omitPadding
    809:813:com.google.common.io.BaseEncoding withPadChar(char) -> withPadChar
    819:831:com.google.common.io.BaseEncoding withSeparator(java.lang.String,int) -> withSeparator
    839:844:com.google.common.io.BaseEncoding upperCase() -> upperCase
    849:854:com.google.common.io.BaseEncoding lowerCase() -> lowerCase
    858:858:com.google.common.io.BaseEncoding newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character) -> a
    863:872:java.lang.String toString() -> toString
    877:882:boolean equals(java.lang.Object) -> equals
    887:887:int hashCode() -> hashCode
com.google.common.io.BaseEncoding$StandardBaseEncoding$1 -> com.google.common.io.l:
    int bitBuffer -> a
    int bitBufferLength -> b
    int writtenChars -> c
    java.io.Writer val$out -> d
    com.google.common.io.BaseEncoding$StandardBaseEncoding this$0 -> e
    594:597:void <init>(com.google.common.io.BaseEncoding$StandardBaseEncoding,java.io.Writer) -> <init>
    601:610:void write(int) -> write
    614:615:void flush() -> flush
    619:631:void close() -> close
com.google.common.io.BaseEncoding$StandardBaseEncoding$2 -> com.google.common.io.m:
    int bitBuffer -> a
    int bitBufferLength -> b
    int readChars -> c
    boolean hitPadding -> d
    java.io.Reader val$reader -> e
    com.google.common.io.BaseEncoding$StandardBaseEncoding this$0 -> f
    734:738:void <init>(com.google.common.io.BaseEncoding$StandardBaseEncoding,java.io.Reader) -> <init>
    743:771:int read() -> read
    781:792:int read(byte[],int,int) -> read
    797:798:void close() -> close
com.google.common.io.ByteArrayDataInput -> com.google.common.io.ByteArrayDataInput:
    void readFully(byte[]) -> readFully
    void readFully(byte[],int,int) -> readFully
    int skipBytes(int) -> skipBytes
    boolean readBoolean() -> readBoolean
    byte readByte() -> readByte
    int readUnsignedByte() -> readUnsignedByte
    short readShort() -> readShort
    int readUnsignedShort() -> readUnsignedShort
    char readChar() -> readChar
    int readInt() -> readInt
    long readLong() -> readLong
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    java.lang.String readLine() -> readLine
    java.lang.String readUTF() -> readUTF
com.google.common.io.ByteArrayDataOutput -> com.google.common.io.ByteArrayDataOutput:
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void writeBoolean(boolean) -> writeBoolean
    void writeByte(int) -> writeByte
    void writeShort(int) -> writeShort
    void writeChar(int) -> writeChar
    void writeInt(int) -> writeInt
    void writeLong(long) -> writeLong
    void writeFloat(float) -> writeFloat
    void writeDouble(double) -> writeDouble
    void writeChars(java.lang.String) -> writeChars
    void writeUTF(java.lang.String) -> writeUTF
    void writeBytes(java.lang.String) -> writeBytes
    byte[] toByteArray() -> toByteArray
com.google.common.io.ByteProcessor -> com.google.common.io.ByteProcessor:
    boolean processBytes(byte[],int,int) -> processBytes
    java.lang.Object getResult() -> getResult
com.google.common.io.ByteSink -> com.google.common.io.ByteSink:
    52:52:void <init>() -> <init>
    59:59:com.google.common.io.CharSink asCharSink(java.nio.charset.Charset) -> asCharSink
    java.io.OutputStream openStream() -> openStream
    85:86:java.io.OutputStream openBufferedStream() -> openBufferedStream
    97:109:void write(byte[]) -> write
    120:132:long writeFrom(java.io.InputStream) -> writeFrom
com.google.common.io.ByteSink$AsCharSink -> com.google.common.io.n:
    java.nio.charset.Charset charset -> a
    com.google.common.io.ByteSink this$0 -> b
    143:145:void <init>(com.google.common.io.ByteSink,java.nio.charset.Charset) -> <init>
    149:149:java.io.Writer openStream() -> openStream
    154:154:java.lang.String toString() -> toString
    139:139:void <init>(com.google.common.io.ByteSink,java.nio.charset.Charset,byte) -> <init>
com.google.common.io.ByteSource -> com.google.common.io.ByteSource:
    67:67:void <init>() -> <init>
    79:79:com.google.common.io.CharSource asCharSource(java.nio.charset.Charset) -> asCharSource
    java.io.InputStream openStream() -> openStream
    105:106:java.io.InputStream openBufferedStream() -> openBufferedStream
    121:121:com.google.common.io.ByteSource slice(long,long) -> slice
    138:150:boolean isEmpty() -> isEmpty
    169:169:com.google.common.base.Optional sizeIfKnown() -> sizeIfKnown
    192:215:long size() -> size
    220:225:long countBySkipping(java.io.InputStream) -> a
    238:248:long copyTo(java.io.OutputStream) -> copyTo
    260:271:long copyTo(com.google.common.io.ByteSink) -> copyTo
    280:291:byte[] read() -> read
    306:316:java.lang.Object read(com.google.common.io.ByteProcessor) -> read
    325:327:com.google.common.hash.HashCode hash(com.google.common.hash.HashFunction) -> hash
    337:359:boolean contentEquals(com.google.common.io.ByteSource) -> contentEquals
    374:374:com.google.common.io.ByteSource concat(java.lang.Iterable) -> concat
    396:396:com.google.common.io.ByteSource concat(java.util.Iterator) -> concat
    412:412:com.google.common.io.ByteSource concat(com.google.common.io.ByteSource[]) -> concat
    427:427:com.google.common.io.ByteSource wrap(byte[]) -> wrap
    436:436:com.google.common.io.ByteSource empty() -> empty
com.google.common.io.ByteSource$AsCharSource -> com.google.common.io.o:
    java.nio.charset.Charset charset -> a
    com.google.common.io.ByteSource this$0 -> b
    446:448:void <init>(com.google.common.io.ByteSource,java.nio.charset.Charset) -> <init>
    452:455:com.google.common.io.ByteSource asByteSource(java.nio.charset.Charset) -> asByteSource
    460:460:java.io.Reader openStream() -> openStream
    472:472:java.lang.String read() -> read
    477:477:java.lang.String toString() -> toString
com.google.common.io.ByteSource$ByteArrayByteSource -> com.google.common.io.p:
    byte[] bytes -> a
    int offset -> b
    int length -> c
    565:566:void <init>(byte[]) -> <init>
    569:573:void <init>(byte[],int,int) -> <init>
    577:577:java.io.InputStream openStream() -> openStream
    582:582:java.io.InputStream openBufferedStream() -> openBufferedStream
    587:587:boolean isEmpty() -> isEmpty
    592:592:long size() -> size
    597:597:com.google.common.base.Optional sizeIfKnown() -> sizeIfKnown
    602:602:byte[] read() -> read
    608:609:java.lang.Object read(com.google.common.io.ByteProcessor) -> read
    614:615:long copyTo(java.io.OutputStream) -> copyTo
    620:620:com.google.common.hash.HashCode hash(com.google.common.hash.HashFunction) -> hash
    625:631:com.google.common.io.ByteSource slice(long,long) -> slice
    636:637:java.lang.String toString() -> toString
com.google.common.io.ByteSource$ConcatenatedByteSource -> com.google.common.io.q:
    java.lang.Iterable sources -> a
    671:673:void <init>(java.lang.Iterable) -> <init>
    677:677:java.io.InputStream openStream() -> openStream
    682:687:boolean isEmpty() -> isEmpty
    692:716:com.google.common.base.Optional sizeIfKnown() -> sizeIfKnown
    721:733:long size() -> size
    738:738:java.lang.String toString() -> toString
com.google.common.io.ByteSource$EmptyByteSource -> com.google.common.io.r:
    com.google.common.io.ByteSource$EmptyByteSource INSTANCE -> b
    647:648:void <init>() -> <init>
    652:653:com.google.common.io.CharSource asCharSource(java.nio.charset.Charset) -> asCharSource
    658:658:byte[] read() -> read
    663:663:java.lang.String toString() -> toString
    644:644:void <clinit>() -> <clinit>
com.google.common.io.ByteSource$SlicedByteSource -> com.google.common.io.s:
    long offset -> a
    long length -> b
    com.google.common.io.ByteSource this$0 -> c
    487:492:void <init>(com.google.common.io.ByteSource,long,long) -> <init>
    496:496:java.io.InputStream openStream() -> openStream
    501:501:java.io.InputStream openBufferedStream() -> openBufferedStream
    505:525:java.io.InputStream sliceStream(java.io.InputStream) -> a
    530:533:com.google.common.io.ByteSource slice(long,long) -> slice
    538:538:boolean isEmpty() -> isEmpty
    543:549:com.google.common.base.Optional sizeIfKnown() -> sizeIfKnown
    554:554:java.lang.String toString() -> toString
com.google.common.io.ByteStreams -> com.google.common.io.ByteStreams:
    java.io.OutputStream NULL_OUTPUT_STREAM -> a
    59:59:byte[] createBuffer() -> a
    91:91:void <init>() -> <init>
    104:116:long copy(java.io.InputStream,java.io.OutputStream) -> copy
    130:154:long copy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel) -> copy
    173:195:byte[] toByteArrayInternal(java.io.InputStream,java.util.Deque,int) -> a
    200:209:byte[] combineBuffers(java.util.Deque,int) -> a
    220:221:byte[] toByteArray(java.io.InputStream) -> toByteArray
    230:259:byte[] toByteArray(java.io.InputStream,long) -> a
    271:277:long exhaust(java.io.InputStream) -> exhaust
    286:286:com.google.common.io.ByteArrayDataInput newDataInput(byte[]) -> newDataInput
    298:299:com.google.common.io.ByteArrayDataInput newDataInput(byte[],int) -> newDataInput
    311:311:com.google.common.io.ByteArrayDataInput newDataInput(java.io.ByteArrayInputStream) -> newDataInput
    462:462:com.google.common.io.ByteArrayDataOutput newDataOutput() -> newDataOutput
    475:478:com.google.common.io.ByteArrayDataOutput newDataOutput(int) -> newDataOutput
    495:495:com.google.common.io.ByteArrayDataOutput newDataOutput(java.io.ByteArrayOutputStream) -> newDataOutput
    671:671:java.io.OutputStream nullOutputStream() -> nullOutputStream
    684:684:java.io.InputStream limit(java.io.InputStream,long) -> limit
    771:772:void readFully(java.io.InputStream,byte[]) -> readFully
    788:793:void readFully(java.io.InputStream,byte[],int,int) -> readFully
    806:811:void skipFully(java.io.InputStream,long) -> skipFully
    819:846:long skipUpTo(java.io.InputStream,long) -> b
    857:858:long skipSafely(java.io.InputStream,long) -> c
    873:881:java.lang.Object readBytes(java.io.InputStream,com.google.common.io.ByteProcessor) -> readBytes
    913:927:int read(java.io.InputStream,byte[],int,int) -> read
    640:640:void <clinit>() -> <clinit>
com.google.common.io.ByteStreams$1 -> com.google.common.io.t:
    641:641:void <init>() -> <init>
    644:644:void write(int) -> write
    649:650:void write(byte[]) -> write
    655:656:void write(byte[],int,int) -> write
    660:660:java.lang.String toString() -> toString
com.google.common.io.ByteStreams$ByteArrayDataInputStream -> com.google.common.io.u:
    java.io.DataInput input -> a
    317:319:void <init>(java.io.ByteArrayInputStream) -> <init>
    324:328:void readFully(byte[]) -> readFully
    333:337:void readFully(byte[],int,int) -> readFully
    342:344:int skipBytes(int) -> skipBytes
    351:353:boolean readBoolean() -> readBoolean
    360:364:byte readByte() -> readByte
    371:373:int readUnsignedByte() -> readUnsignedByte
    380:382:short readShort() -> readShort
    389:391:int readUnsignedShort() -> readUnsignedShort
    398:400:char readChar() -> readChar
    407:409:int readInt() -> readInt
    416:418:long readLong() -> readLong
    425:427:float readFloat() -> readFloat
    434:436:double readDouble() -> readDouble
    443:445:java.lang.String readLine() -> readLine
    452:454:java.lang.String readUTF() -> readUTF
com.google.common.io.ByteStreams$ByteArrayDataOutputStream -> com.google.common.io.v:
    java.io.DataOutput output -> a
    java.io.ByteArrayOutputStream byteArrayOutputStream -> b
    503:506:void <init>(java.io.ByteArrayOutputStream) -> <init>
    511:515:void write(int) -> write
    520:524:void write(byte[]) -> write
    529:533:void write(byte[],int,int) -> write
    538:542:void writeBoolean(boolean) -> writeBoolean
    547:551:void writeByte(int) -> writeByte
    556:560:void writeBytes(java.lang.String) -> writeBytes
    565:569:void writeChar(int) -> writeChar
    574:578:void writeChars(java.lang.String) -> writeChars
    583:587:void writeDouble(double) -> writeDouble
    592:596:void writeFloat(float) -> writeFloat
    601:605:void writeInt(int) -> writeInt
    610:614:void writeLong(long) -> writeLong
    619:623:void writeShort(int) -> writeShort
    628:632:void writeUTF(java.lang.String) -> writeUTF
    636:636:byte[] toByteArray() -> toByteArray
com.google.common.io.ByteStreams$LimitedInputStream -> com.google.common.io.w:
    long left -> a
    long mark -> b
    690:697:void <init>(java.io.InputStream,long) -> <init>
    701:701:int available() -> available
    707:709:void mark(int) -> mark
    713:721:int read() -> read
    726:735:int read(byte[],int,int) -> read
    740:749:void reset() -> reset
    753:756:long skip(long) -> skip
com.google.common.io.CharSequenceReader -> com.google.common.io.x:
    java.lang.CharSequence seq -> a
    int pos -> b
    int mark -> c
    41:43:void <init>(java.lang.CharSequence) -> <init>
    46:49:void checkOpen() -> a
    52:52:boolean hasRemaining() -> b
    56:56:int remaining() -> c
    61:70:int read(java.nio.CharBuffer) -> read
    75:76:int read() -> read
    81:90:int read(char[],int,int) -> read
    95:99:long skip(long) -> skip
    104:105:boolean ready() -> ready
    110:110:boolean markSupported() -> markSupported
    115:118:void mark(int) -> mark
    122:124:void reset() -> reset
    128:129:void close() -> close
com.google.common.io.CharSink -> com.google.common.io.CharSink:
    57:57:void <init>() -> <init>
    java.io.Writer openStream() -> openStream
    81:82:java.io.Writer openBufferedStream() -> openBufferedStream
    93:105:void write(java.lang.CharSequence) -> write
    115:116:void writeLines(java.lang.Iterable) -> writeLines
    126:127:void writeLines(java.lang.Iterable,java.lang.String) -> writeLines
    139:140:void writeLines(java.util.stream.Stream) -> writeLines
    152:153:void writeLines(java.util.stream.Stream,java.lang.String) -> writeLines
    157:164:void writeLines(java.util.Iterator,java.lang.String) -> a
    176:188:long writeFrom(java.lang.Readable) -> writeFrom
com.google.common.io.CharSource -> com.google.common.io.CharSource:
    75:75:void <init>() -> <init>
    90:90:com.google.common.io.ByteSource asByteSource(java.nio.charset.Charset) -> asByteSource
    java.io.Reader openStream() -> openStream
    112:113:java.io.BufferedReader openBufferedStream() -> openBufferedStream
    147:150:java.util.stream.Stream lines() -> lines
    176:176:com.google.common.base.Optional lengthIfKnown() -> lengthIfKnown
    200:213:long length() -> length
    217:222:long countBySkipping(java.io.Reader) -> a
    235:245:long copyTo(java.lang.Appendable) -> copyTo
    257:268:long copyTo(com.google.common.io.CharSink) -> copyTo
    277:285:java.lang.String read() -> read
    299:307:java.lang.String readFirstLine() -> readFirstLine
    322:335:com.google.common.collect.ImmutableList readLines() -> readLines
    355:365:java.lang.Object readLines(com.google.common.io.LineProcessor) -> readLines
    383:389:void forEachLine(java.util.function.Consumer) -> forEachLine
    404:416:boolean isEmpty() -> isEmpty
    431:431:com.google.common.io.CharSource concat(java.lang.Iterable) -> concat
    453:453:com.google.common.io.CharSource concat(java.util.Iterator) -> concat
    469:469:com.google.common.io.CharSource concat(com.google.common.io.CharSource[]) -> concat
    480:480:com.google.common.io.CharSource wrap(java.lang.CharSequence) -> wrap
    491:491:com.google.common.io.CharSource empty() -> empty
    153:157:void lambda$lines$0(java.io.BufferedReader) -> a
com.google.common.io.CharSource$AsByteSource -> com.google.common.io.y:
    java.nio.charset.Charset charset -> a
    com.google.common.io.CharSource this$0 -> b
    499:501:void <init>(com.google.common.io.CharSource,java.nio.charset.Charset) -> <init>
    505:508:com.google.common.io.CharSource asCharSource(java.nio.charset.Charset) -> asCharSource
    513:513:java.io.InputStream openStream() -> openStream
    518:518:java.lang.String toString() -> toString
com.google.common.io.CharSource$CharSequenceCharSource -> com.google.common.io.z:
    com.google.common.base.Splitter LINE_SPLITTER -> b
    java.lang.CharSequence seq -> a
    528:530:void <init>(java.lang.CharSequence) -> <init>
    534:534:java.io.Reader openStream() -> openStream
    539:539:java.lang.String read() -> read
    544:544:boolean isEmpty() -> isEmpty
    549:549:long length() -> length
    554:554:com.google.common.base.Optional lengthIfKnown() -> lengthIfKnown
    562:562:java.util.Iterator linesIterator() -> b
    581:581:java.util.stream.Stream lines() -> lines
    586:587:java.lang.String readFirstLine() -> readFirstLine
    592:592:com.google.common.collect.ImmutableList readLines() -> readLines
    597:603:java.lang.Object readLines(com.google.common.io.LineProcessor) -> readLines
    608:608:java.lang.String toString() -> toString
    522:522:com.google.common.base.Splitter access$100() -> a
    524:524:void <clinit>() -> <clinit>
com.google.common.io.CharSource$CharSequenceCharSource$1 -> com.google.common.io.A:
    java.util.Iterator lines -> a
    com.google.common.io.CharSource$CharSequenceCharSource this$0 -> b
    562:563:void <init>(com.google.common.io.CharSource$CharSequenceCharSource) -> <init>
    567:574:java.lang.String computeNext() -> a
    562:562:java.lang.Object computeNext() -> computeNext
com.google.common.io.CharSource$ConcatenatedCharSource -> com.google.common.io.B:
    java.lang.Iterable sources -> a
    677:679:void <init>(java.lang.Iterable) -> <init>
    683:683:java.io.Reader openStream() -> openStream
    688:693:boolean isEmpty() -> isEmpty
    698:706:com.google.common.base.Optional lengthIfKnown() -> lengthIfKnown
    711:715:long length() -> length
    720:720:java.lang.String toString() -> toString
com.google.common.io.CharSource$EmptyCharSource -> com.google.common.io.C:
    com.google.common.io.CharSource$EmptyCharSource INSTANCE -> b
    664:665:void <init>() -> <init>
    669:669:java.lang.String toString() -> toString
    659:659:com.google.common.io.CharSource$EmptyCharSource access$000() -> b
    661:661:void <clinit>() -> <clinit>
com.google.common.io.CharSource$StringCharSource -> com.google.common.io.D:
    629:630:void <init>(java.lang.String) -> <init>
    634:634:java.io.Reader openStream() -> openStream
    639:640:long copyTo(java.lang.Appendable) -> copyTo
    645:655:long copyTo(com.google.common.io.CharSink) -> copyTo
com.google.common.io.CharStreams -> com.google.common.io.CharStreams:
    54:54:java.nio.CharBuffer createBuffer() -> a
    57:57:void <init>() -> <init>
    72:90:long copy(java.lang.Readable,java.lang.Appendable) -> copy
    114:123:long copyReaderToBuilder(java.io.Reader,java.lang.StringBuilder) -> a
    142:151:long copyReaderToWriter(java.io.Reader,java.io.Writer) -> a
    163:163:java.lang.String toString(java.lang.Readable) -> toString
    175:181:java.lang.StringBuilder toStringBuilder(java.lang.Readable) -> a
    197:203:java.util.List readLines(java.lang.Readable) -> readLines
    218:228:java.lang.Object readLines(java.lang.Readable,com.google.common.io.LineProcessor) -> readLines
    240:247:long exhaust(java.lang.Readable) -> exhaust
    261:269:void skipFully(java.io.Reader,long) -> skipFully
    278:278:java.io.Writer nullWriter() -> nullWriter
    347:350:java.io.Writer asWriter(java.lang.Appendable) -> asWriter
com.google.common.io.CharStreams$NullWriter -> com.google.common.io.E:
    com.google.common.io.CharStreams$NullWriter INSTANCE -> a
    281:281:void <init>() -> <init>
    286:286:void write(int) -> write
    290:291:void write(char[]) -> write
    295:296:void write(char[],int,int) -> write
    300:301:void write(java.lang.String) -> write
    305:306:void write(java.lang.String,int,int) -> write
    310:311:java.io.Writer append(java.lang.CharSequence) -> append
    316:317:java.io.Writer append(java.lang.CharSequence,int,int) -> append
    322:322:java.io.Writer append(char) -> append
    326:326:void flush() -> flush
    329:329:void close() -> close
    333:333:java.lang.String toString() -> toString
    281:281:java.lang.Appendable append(char) -> append
    281:281:java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    281:281:java.lang.Appendable append(java.lang.CharSequence) -> append
    281:281:com.google.common.io.CharStreams$NullWriter access$000() -> a
    283:283:void <clinit>() -> <clinit>
com.google.common.io.Closeables -> com.google.common.io.Closeables:
    java.util.logging.Logger logger -> a
    39:39:void <init>() -> <init>
    74:86:void close(java.io.Closeable,boolean) -> close
    104:108:void closeQuietly(java.io.InputStream) -> closeQuietly
    125:129:void closeQuietly(java.io.Reader) -> closeQuietly
    37:37:void <clinit>() -> <clinit>
com.google.common.io.Closer -> com.google.common.io.Closer:
    com.google.common.io.Closer$Suppressor SUPPRESSOR -> a
    com.google.common.io.Closer$Suppressor suppressor -> b
    java.util.Deque stack -> c
    java.lang.Throwable thrown -> d
    102:102:com.google.common.io.Closer create() -> create
    108:114:void <init>(com.google.common.io.Closer$Suppressor) -> <init>
    125:129:java.io.Closeable register(java.io.Closeable) -> register
    146:149:java.lang.RuntimeException rethrow(java.lang.Throwable) -> rethrow
    168:172:java.lang.RuntimeException rethrow(java.lang.Throwable,java.lang.Class) -> rethrow
    192:196:java.lang.RuntimeException rethrow(java.lang.Throwable,java.lang.Class,java.lang.Class) -> rethrow
    208:228:void close() -> close
    95:96:void <clinit>() -> <clinit>
com.google.common.io.Closer$LoggingSuppressor -> com.google.common.io.F:
    com.google.common.io.Closer$LoggingSuppressor INSTANCE -> a
    243:243:void <init>() -> <init>
    250:252:void suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable) -> a
    245:245:void <clinit>() -> <clinit>
com.google.common.io.Closer$SuppressingSuppressor -> com.google.common.io.G:
    com.google.common.io.Closer$SuppressingSuppressor INSTANCE -> a
    java.lang.reflect.Method addSuppressed -> b
    260:260:void <init>() -> <init>
    265:265:boolean isAvailable() -> a
    272:274:java.lang.reflect.Method addSuppressedMethodOrNull() -> b
    281:290:void suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable) -> a
    262:268:void <clinit>() -> <clinit>
com.google.common.io.Closer$Suppressor -> com.google.common.io.H:
    void suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable) -> a
com.google.common.io.CountingInputStream -> com.google.common.io.CountingInputStream:
    long count -> a
    long mark -> b
    36:45:void <init>(java.io.InputStream) -> <init>
    49:49:long getCount() -> getCount
    54:58:int read() -> read
    63:67:int read(byte[],int,int) -> read
    72:74:long skip(long) -> skip
    79:82:void mark(int) -> mark
    86:95:void reset() -> reset
com.google.common.io.CountingOutputStream -> com.google.common.io.CountingOutputStream:
    long count -> a
    43:44:void <init>(java.io.OutputStream) -> <init>
    48:48:long getCount() -> getCount
    53:55:void write(byte[],int,int) -> write
    59:61:void write(int) -> write
    68:69:void close() -> close
com.google.common.io.FileBackedOutputStream -> com.google.common.io.FileBackedOutputStream:
    int fileThreshold -> a
    boolean resetOnFinalize -> b
    com.google.common.io.ByteSource source -> c
    java.io.File parentDirectory -> d
    java.io.OutputStream out -> e
    com.google.common.io.FileBackedOutputStream$MemoryOutput memory -> f
    java.io.File file -> g
    93:94:void <init>(int) -> <init>
    105:106:void <init>(int,boolean) -> <init>
    109:142:void <init>(int,boolean,java.io.File) -> <init>
    150:150:com.google.common.io.ByteSource asByteSource() -> asByteSource
    154:157:java.io.InputStream openInputStream() -> a
    169:185:void reset() -> reset
    189:191:void write(int) -> write
    195:196:void write(byte[]) -> write
    200:202:void write(byte[],int,int) -> write
    206:207:void close() -> close
    211:212:void flush() -> flush
    220:236:void update(int) -> a
    53:53:java.io.InputStream access$100(com.google.common.io.FileBackedOutputStream) -> a
com.google.common.io.FileBackedOutputStream$1 -> com.google.common.io.I:
    com.google.common.io.FileBackedOutputStream this$0 -> a
    118:118:void <init>(com.google.common.io.FileBackedOutputStream) -> <init>
    121:121:java.io.InputStream openStream() -> openStream
    127:131:void finalize() -> finalize
com.google.common.io.FileBackedOutputStream$2 -> com.google.common.io.J:
    com.google.common.io.FileBackedOutputStream this$0 -> a
    135:135:void <init>(com.google.common.io.FileBackedOutputStream) -> <init>
    138:138:java.io.InputStream openStream() -> openStream
com.google.common.io.FileBackedOutputStream$MemoryOutput -> com.google.common.io.K:
    70:70:void <init>() -> <init>
    72:72:byte[] getBuffer() -> a
    76:76:int getCount() -> b
    70:70:void <init>(byte) -> <init>
com.google.common.io.FileWriteMode -> com.google.common.io.FileWriteMode:
    com.google.common.io.FileWriteMode APPEND -> APPEND
    com.google.common.io.FileWriteMode[] $VALUES -> a
    25:25:com.google.common.io.FileWriteMode[] values() -> values
    25:25:com.google.common.io.FileWriteMode valueOf(java.lang.String) -> valueOf
    26:26:void <init>(java.lang.String,int) -> <init>
    25:28:void <clinit>() -> <clinit>
com.google.common.io.Files -> com.google.common.io.Files:
    com.google.common.graph.SuccessorsFunction FILE_TREE -> a
    72:72:void <init>() -> <init>
    87:89:java.io.BufferedReader newReader(java.io.File,java.nio.charset.Charset) -> newReader
    106:108:java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset) -> newWriter
    117:117:com.google.common.io.ByteSource asByteSource(java.io.File) -> asByteSource
    178:178:com.google.common.io.ByteSink asByteSink(java.io.File,com.google.common.io.FileWriteMode[]) -> asByteSink
    209:209:com.google.common.io.CharSource asCharSource(java.io.File,java.nio.charset.Charset) -> asCharSource
    221:221:com.google.common.io.CharSink asCharSink(java.io.File,java.nio.charset.Charset,com.google.common.io.FileWriteMode[]) -> asCharSink
    237:237:byte[] toByteArray(java.io.File) -> toByteArray
    254:254:java.lang.String toString(java.io.File,java.nio.charset.Charset) -> toString
    269:270:void write(byte[],java.io.File) -> write
    286:287:void write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset) -> write
    301:302:void copy(java.io.File,java.io.OutputStream) -> copy
    325:327:void copy(java.io.File,java.io.File) -> copy
    344:345:void copy(java.io.File,java.nio.charset.Charset,java.lang.Appendable) -> copy
    362:363:void append(java.lang.CharSequence,java.io.File,java.nio.charset.Charset) -> append
    372:388:boolean equal(java.io.File,java.io.File) -> equal
    412:422:java.io.File createTempDir() -> createTempDir
    443:447:void touch(java.io.File) -> touch
    460:475:void createParentDirs(java.io.File) -> createParentDirs
    491:504:void move(java.io.File,java.io.File) -> move
    522:522:java.lang.String readFirstLine(java.io.File,java.nio.charset.Charset) -> readFirstLine
    545:546:java.util.List readLines(java.io.File,java.nio.charset.Charset) -> readLines
    581:581:java.lang.Object readLines(java.io.File,java.nio.charset.Charset,com.google.common.io.LineProcessor) -> readLines
    601:601:java.lang.Object readBytes(java.io.File,com.google.common.io.ByteProcessor) -> readBytes
    619:619:com.google.common.hash.HashCode hash(java.io.File,com.google.common.hash.HashFunction) -> hash
    639:640:java.nio.MappedByteBuffer map(java.io.File) -> map
    662:662:java.nio.MappedByteBuffer map(java.io.File,java.nio.channels.FileChannel$MapMode) -> map
    686:687:java.nio.MappedByteBuffer map(java.io.File,java.nio.channels.FileChannel$MapMode,long) -> map
    692:705:java.nio.MappedByteBuffer mapInternal(java.io.File,java.nio.channels.FileChannel$MapMode,long) -> a
    730:772:java.lang.String simplifyPath(java.lang.String) -> simplifyPath
    791:794:java.lang.String getFileExtension(java.lang.String) -> getFileExtension
    809:812:java.lang.String getNameWithoutExtension(java.lang.String) -> getNameWithoutExtension
    869:869:com.google.common.graph.Traverser fileTraverser() -> fileTraverser
    882:889:java.lang.Iterable fileTreeChildren(java.io.File) -> b
    899:899:com.google.common.base.Predicate isDirectory() -> isDirectory
    909:909:com.google.common.base.Predicate isFile() -> isFile
    67:67:java.lang.Iterable access$200(java.io.File) -> a
    832:872:void <clinit>() -> <clinit>
com.google.common.io.Files$1 -> com.google.common.io.L:
    java.util.List result -> a
    547:548:void <init>() -> <init>
    552:553:boolean processLine(java.lang.String) -> processLine
    558:558:java.util.List getResult() -> a
    547:547:java.lang.Object getResult() -> getResult
com.google.common.io.Files$2 -> com.google.common.io.M:
    833:833:void <init>() -> <init>
    836:836:java.lang.Iterable children(java.io.File) -> a
    841:841:java.lang.String toString() -> toString
    833:833:java.lang.Iterable children(java.lang.Object) -> children
com.google.common.io.Files$3 -> com.google.common.io.N:
    873:873:void <init>() -> <init>
    876:876:java.lang.Iterable successors(java.io.File) -> a
    873:873:java.lang.Iterable successors(java.lang.Object) -> successors
com.google.common.io.Files$FileByteSink -> com.google.common.io.O:
    java.io.File file -> a
    com.google.common.collect.ImmutableSet modes -> b
    186:189:void <init>(java.io.File,com.google.common.io.FileWriteMode[]) -> <init>
    193:193:java.io.FileOutputStream openStream() -> a
    198:198:java.lang.String toString() -> toString
    181:181:java.io.OutputStream openStream() -> openStream
    181:181:void <init>(java.io.File,com.google.common.io.FileWriteMode[],byte) -> <init>
com.google.common.io.Files$FileByteSource -> com.google.common.io.P:
    java.io.File file -> a
    124:126:void <init>(java.io.File) -> <init>
    130:130:java.io.FileInputStream openStream() -> a
    135:138:com.google.common.base.Optional sizeIfKnown() -> sizeIfKnown
    144:147:long size() -> size
    152:160:byte[] read() -> read
    165:165:java.lang.String toString() -> toString
    120:120:java.io.InputStream openStream() -> openStream
    120:120:void <init>(java.io.File,byte) -> <init>
com.google.common.io.Files$FilePredicate -> com.google.common.io.Q:
    com.google.common.io.Files$FilePredicate IS_DIRECTORY -> a
    com.google.common.io.Files$FilePredicate IS_FILE -> b
    com.google.common.io.Files$FilePredicate[] $VALUES -> c
    912:912:com.google.common.io.Files$FilePredicate[] values() -> values
    912:912:com.google.common.io.Files$FilePredicate valueOf(java.lang.String) -> valueOf
    912:912:void <init>(java.lang.String,int) -> <init>
    912:912:void <init>(java.lang.String,int,byte) -> <init>
    912:925:void <clinit>() -> <clinit>
com.google.common.io.Files$FilePredicate$1 -> com.google.common.io.R:
    913:913:void <init>(java.lang.String,int) -> <init>
    916:916:boolean apply(java.io.File) -> a
    921:921:java.lang.String toString() -> toString
    913:913:boolean apply(java.lang.Object) -> apply
com.google.common.io.Files$FilePredicate$2 -> com.google.common.io.S:
    925:925:void <init>(java.lang.String,int) -> <init>
    928:928:boolean apply(java.io.File) -> a
    933:933:java.lang.String toString() -> toString
    925:925:boolean apply(java.lang.Object) -> apply
com.google.common.io.Flushables -> com.google.common.io.Flushables:
    java.util.logging.Logger logger -> a
    35:35:void <init>() -> <init>
    52:60:void flush(java.io.Flushable,boolean) -> flush
    70:74:void flushQuietly(java.io.Flushable) -> flushQuietly
    33:33:void <clinit>() -> <clinit>
com.google.common.io.InsecureRecursiveDeleteException -> com.google.common.io.InsecureRecursiveDeleteException:
    44:45:void <init>(java.lang.String) -> <init>
com.google.common.io.LineBuffer -> com.google.common.io.T:
    java.lang.StringBuilder line -> a
    boolean sawReturn -> b
    33:35:void <init>() -> <init>
    50:83:void add(char[],int,int) -> a
    88:92:boolean finishLine(boolean) -> a
    102:105:void finish() -> a
    void handleLine$16da05f7(java.lang.String) -> a
com.google.common.io.LineProcessor -> com.google.common.io.LineProcessor:
    boolean processLine(java.lang.String) -> processLine
    java.lang.Object getResult() -> getResult
com.google.common.io.LineReader -> com.google.common.io.LineReader:
    java.lang.Readable readable -> a
    java.io.Reader reader -> b
    java.nio.CharBuffer cbuf -> c
    char[] buf -> d
    java.util.Queue lines -> e
    com.google.common.io.LineBuffer lineBuf -> f
    43:59:void <init>(java.lang.Readable) -> <init>
    72:83:java.lang.String readLine() -> readLine
    40:40:java.util.Queue access$000(com.google.common.io.LineReader) -> a
com.google.common.io.LineReader$1 -> com.google.common.io.U:
    com.google.common.io.LineReader this$0 -> a
    48:48:void <init>(com.google.common.io.LineReader) -> <init>
    51:52:void handleLine$16da05f7(java.lang.String) -> a
com.google.common.io.LittleEndianDataInputStream -> com.google.common.io.LittleEndianDataInputStream:
    51:52:void <init>(java.io.InputStream) -> <init>
    58:58:java.lang.String readLine() -> readLine
    63:64:void readFully(byte[]) -> readFully
    68:69:void readFully(byte[],int,int) -> readFully
    73:73:int skipBytes(int) -> skipBytes
    79:84:int readUnsignedByte() -> readUnsignedByte
    98:101:int readUnsignedShort() -> readUnsignedShort
    115:120:int readInt() -> readInt
    134:143:long readLong() -> readLong
    157:157:float readFloat() -> readFloat
    171:171:double readDouble() -> readDouble
    177:177:java.lang.String readUTF() -> readUTF
    191:191:short readShort() -> readShort
    205:205:char readChar() -> readChar
    211:211:byte readByte() -> readByte
    217:217:boolean readBoolean() -> readBoolean
    229:235:byte readAndCheckByte() -> a
com.google.common.io.LittleEndianDataOutputStream -> com.google.common.io.LittleEndianDataOutputStream:
    48:49:void <init>(java.io.OutputStream) -> <init>
    54:55:void write(byte[],int,int) -> write
    59:60:void writeBoolean(boolean) -> writeBoolean
    64:65:void writeByte(int) -> writeByte
    74:75:void writeBytes(java.lang.String) -> writeBytes
    85:86:void writeChar(int) -> writeChar
    96:99:void writeChars(java.lang.String) -> writeChars
    109:110:void writeDouble(double) -> writeDouble
    120:121:void writeFloat(float) -> writeFloat
    131:135:void writeInt(int) -> writeInt
    145:147:void writeLong(long) -> writeLong
    157:159:void writeShort(int) -> writeShort
    163:164:void writeUTF(java.lang.String) -> writeUTF
    171:172:void close() -> close
com.google.common.io.MoreFiles -> com.google.common.io.MoreFiles:
    com.google.common.graph.SuccessorsFunction FILE_TREE -> a
    73:73:void <init>() -> <init>
    84:84:com.google.common.io.ByteSource asByteSource(java.nio.file.Path,java.nio.file.OpenOption[]) -> asByteSource
    200:200:com.google.common.io.ByteSink asByteSink(java.nio.file.Path,java.nio.file.OpenOption[]) -> asByteSink
    235:235:com.google.common.io.CharSource asCharSource(java.nio.file.Path,java.nio.charset.Charset,java.nio.file.OpenOption[]) -> asCharSource
    249:249:com.google.common.io.CharSink asCharSink(java.nio.file.Path,java.nio.charset.Charset,java.nio.file.OpenOption[]) -> asCharSink
    261:264:com.google.common.collect.ImmutableList listFiles(java.nio.file.Path) -> listFiles
    292:292:com.google.common.graph.Traverser fileTraverser() -> fileTraverser
    304:312:java.lang.Iterable fileTreeChildren(java.nio.file.Path) -> b
    320:321:com.google.common.base.Predicate isDirectory(java.nio.file.LinkOption[]) -> isDirectory
    337:339:boolean isDirectory(java.nio.file.SecureDirectoryStream,java.nio.file.Path,java.nio.file.LinkOption[]) -> a
    347:348:com.google.common.base.Predicate isRegularFile(java.nio.file.LinkOption[]) -> isRegularFile
    369:387:boolean equal(java.nio.file.Path,java.nio.file.Path) -> equal
    396:412:void touch(java.nio.file.Path) -> touch
    428:448:void createParentDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[]) -> createParentDirectories
    463:472:java.lang.String getFileExtension(java.nio.file.Path) -> getFileExtension
    481:490:java.lang.String getNameWithoutExtension(java.nio.file.Path) -> getNameWithoutExtension
    523:554:void deleteRecursively(java.nio.file.Path,com.google.common.io.RecursiveDeleteOption[]) -> deleteRecursively
    589:609:void deleteDirectoryContents(java.nio.file.Path,com.google.common.io.RecursiveDeleteOption[]) -> deleteDirectoryContents
    617:635:java.util.Collection deleteRecursivelySecure(java.nio.file.SecureDirectoryStream,java.nio.file.Path) -> a
    645:653:java.util.Collection deleteDirectoryContentsSecure(java.nio.file.SecureDirectoryStream) -> a
    662:678:java.util.Collection deleteRecursivelyInsecure(java.nio.file.Path) -> c
    689:697:java.util.Collection deleteDirectoryContentsInsecure(java.nio.file.DirectoryStream) -> a
    707:735:java.nio.file.Path getParentPath(java.nio.file.Path) -> d
    742:745:void checkAllowsInsecure(java.nio.file.Path,com.google.common.io.RecursiveDeleteOption[]) -> a
    753:757:java.util.Collection addException(java.util.Collection,java.io.IOException) -> a
    767:772:java.util.Collection concat(java.util.Collection,java.util.Collection) -> a
    784:792:void throwDeleteFailed(java.nio.file.Path,java.util.Collection) -> a
    71:71:java.lang.Iterable access$300(java.nio.file.Path) -> a
    295:295:void <clinit>() -> <clinit>
com.google.common.io.MoreFiles$1 -> com.google.common.io.V:
    296:296:void <init>() -> <init>
    299:299:java.lang.Iterable successors(java.nio.file.Path) -> a
    296:296:java.lang.Iterable successors(java.lang.Object) -> successors
com.google.common.io.MoreFiles$2 -> com.google.common.io.W:
    java.nio.file.LinkOption[] val$optionsCopy -> a
    321:321:void <init>(java.nio.file.LinkOption[]) -> <init>
    324:324:boolean apply(java.nio.file.Path) -> a
    329:329:java.lang.String toString() -> toString
    321:321:boolean apply(java.lang.Object) -> apply
com.google.common.io.MoreFiles$3 -> com.google.common.io.X:
    java.nio.file.LinkOption[] val$optionsCopy -> a
    348:348:void <init>(java.nio.file.LinkOption[]) -> <init>
    351:351:boolean apply(java.nio.file.Path) -> a
    356:356:java.lang.String toString() -> toString
    348:348:boolean apply(java.lang.Object) -> apply
com.google.common.io.MoreFiles$PathByteSink -> com.google.common.io.Y:
    java.nio.file.Path path -> a
    java.nio.file.OpenOption[] options -> b
    208:212:void <init>(java.nio.file.Path,java.nio.file.OpenOption[]) -> <init>
    216:216:java.io.OutputStream openStream() -> openStream
    221:221:java.lang.String toString() -> toString
    203:203:void <init>(java.nio.file.Path,java.nio.file.OpenOption[],byte) -> <init>
com.google.common.io.MoreFiles$PathByteSource -> com.google.common.io.Z:
    java.nio.file.LinkOption[] FOLLOW_LINKS -> a
    java.nio.file.Path path -> b
    java.nio.file.OpenOption[] options -> c
    boolean followLinks -> d
    95:100:void <init>(java.nio.file.Path,java.nio.file.OpenOption[]) -> <init>
    103:108:boolean followLinks(java.nio.file.OpenOption[]) -> a
    113:113:java.io.InputStream openStream() -> openStream
    117:117:java.nio.file.attribute.BasicFileAttributes readAttributes() -> a
    127:139:com.google.common.base.Optional sizeIfKnown() -> sizeIfKnown
    144:154:long size() -> size
    159:161:byte[] read() -> read
    166:180:com.google.common.io.CharSource asCharSource(java.nio.charset.Charset) -> asCharSource
    185:185:java.lang.String toString() -> toString
    87:87:void <init>(java.nio.file.Path,java.nio.file.OpenOption[],byte) -> <init>
    87:87:java.nio.file.Path access$100(com.google.common.io.MoreFiles$PathByteSource) -> a
    89:89:void <clinit>() -> <clinit>
com.google.common.io.MoreFiles$PathByteSource$1 -> com.google.common.io.aa:
    com.google.common.io.MoreFiles$PathByteSource this$0 -> b
    171:171:void <init>(com.google.common.io.MoreFiles$PathByteSource,java.nio.charset.Charset) -> <init>
    175:175:java.util.stream.Stream lines() -> lines
com.google.common.io.MultiInputStream -> com.google.common.io.ab:
    java.util.Iterator it -> a
    java.io.InputStream in -> b
    43:46:void <init>(java.util.Iterator) -> <init>
    50:57:void close() -> close
    61:65:void advance() -> a
    69:72:int available() -> available
    77:77:boolean markSupported() -> markSupported
    82:89:int read() -> read
    94:101:int read(byte[],int,int) -> read
    106:116:long skip(long) -> skip
com.google.common.io.MultiReader -> com.google.common.io.ac:
    java.util.Iterator it -> a
    java.io.Reader current -> b
    35:38:void <init>(java.util.Iterator) -> <init>
    42:46:void advance() -> a
    50:58:int read(char[],int,int) -> read
    63:73:long skip(long) -> skip
    78:78:boolean ready() -> ready
    83:90:void close() -> close
com.google.common.io.PatternFilenameFilter -> com.google.common.io.PatternFilenameFilter:
    java.util.regex.Pattern pattern -> a
    46:47:void <init>(java.lang.String) -> <init>
    54:56:void <init>(java.util.regex.Pattern) -> <init>
    60:60:boolean accept(java.io.File,java.lang.String) -> accept
com.google.common.io.ReaderInputStream -> com.google.common.io.ad:
    java.io.Reader reader -> a
    java.nio.charset.CharsetEncoder encoder -> b
    byte[] singleByte -> c
    java.nio.CharBuffer charBuffer -> d
    java.nio.ByteBuffer byteBuffer -> e
    boolean endOfInput -> f
    boolean draining -> g
    boolean doneFlushing -> h
    82:89:void <init>(java.io.Reader,java.nio.charset.Charset,int) -> <init>
    50:110:void <init>(java.io.Reader,java.nio.charset.CharsetEncoder,int) -> <init>
    114:115:void close() -> close
    119:119:int read() -> read
    127:184:int read(byte[],int,int) -> read
    190:194:java.nio.CharBuffer grow(java.nio.CharBuffer) -> a
    207:225:void readMoreChars() -> a
    229:229:int availableCapacity(java.nio.Buffer) -> a
    238:244:void startDraining(boolean) -> a
    251:253:int drain(byte[],int,int) -> a
com.google.common.io.RecursiveDeleteOption -> com.google.common.io.RecursiveDeleteOption:
    com.google.common.io.RecursiveDeleteOption ALLOW_INSECURE -> ALLOW_INSECURE
    com.google.common.io.RecursiveDeleteOption[] $VALUES -> a
    31:31:com.google.common.io.RecursiveDeleteOption[] values() -> values
    31:31:com.google.common.io.RecursiveDeleteOption valueOf(java.lang.String) -> valueOf
    34:34:void <init>(java.lang.String,int) -> <init>
    31:47:void <clinit>() -> <clinit>
com.google.common.io.Resources -> com.google.common.io.Resources:
    48:48:void <init>() -> <init>
    56:56:com.google.common.io.ByteSource asByteSource(java.net.URL) -> asByteSource
    85:85:com.google.common.io.CharSource asCharSource(java.net.URL,java.nio.charset.Charset) -> asCharSource
    96:96:byte[] toByteArray(java.net.URL) -> toByteArray
    109:109:java.lang.String toString(java.net.URL,java.nio.charset.Charset) -> toString
    126:126:java.lang.Object readLines(java.net.URL,java.nio.charset.Charset,com.google.common.io.LineProcessor) -> readLines
    145:145:java.util.List readLines(java.net.URL,java.nio.charset.Charset) -> readLines
    172:173:void copy(java.net.URL,java.io.OutputStream) -> copy
    192:196:java.net.URL getResource(java.lang.String) -> getResource
    206:209:java.net.URL getResource(java.lang.Class,java.lang.String) -> getResource
com.google.common.io.Resources$1 -> com.google.common.io.ae:
    java.util.List result -> a
    148:149:void <init>() -> <init>
    153:154:boolean processLine(java.lang.String) -> processLine
    159:159:java.util.List getResult() -> a
    148:148:java.lang.Object getResult() -> getResult
com.google.common.io.Resources$UrlByteSource -> com.google.common.io.af:
    java.net.URL url -> a
    64:66:void <init>(java.net.URL) -> <init>
    70:70:java.io.InputStream openStream() -> openStream
    75:75:java.lang.String toString() -> toString
    60:60:void <init>(java.net.URL,byte) -> <init>
com.google.common.math.BigIntegerMath -> com.google.common.math.BigIntegerMath:
    java.math.BigInteger SQRT2_PRECOMPUTED_BITS -> a
    double LN_10 -> b
    double LN_2 -> c
    59:59:java.math.BigInteger ceilingPowerOfTwo(java.math.BigInteger) -> ceilingPowerOfTwo
    71:71:java.math.BigInteger floorPowerOfTwo(java.math.BigInteger) -> floorPowerOfTwo
    76:77:boolean isPowerOfTwo(java.math.BigInteger) -> isPowerOfTwo
    90:124:int log2(java.math.BigInteger,java.math.RoundingMode) -> log2
    149:210:int log10(java.math.BigInteger,java.math.RoundingMode) -> log10
    227:256:java.math.BigInteger sqrt(java.math.BigInteger,java.math.RoundingMode) -> sqrt
    282:301:java.math.BigInteger sqrtFloor(java.math.BigInteger) -> a
    306:306:java.math.BigInteger sqrtApproxWithDoubles(java.math.BigInteger) -> b
    318:320:java.math.BigInteger divide(java.math.BigInteger,java.math.BigInteger,java.math.RoundingMode) -> divide
    336:387:java.math.BigInteger factorial(int) -> factorial
    391:391:java.math.BigInteger listProduct(java.util.List) -> a
    395:407:java.math.BigInteger listProduct(java.util.List,int,int) -> a
    420:464:java.math.BigInteger binomial(int,int) -> binomial
    470:470:boolean fitsInLong(java.math.BigInteger) -> c
    473:473:void <init>() -> <init>
    136:215:void <clinit>() -> <clinit>
com.google.common.math.BigIntegerMath$1 -> com.google.common.math.a:
    int[] $SwitchMap$java$math$RoundingMode -> a
    92:92:void <clinit>() -> <clinit>
com.google.common.math.DoubleMath -> com.google.common.math.DoubleMath:
    double LN_2 -> a
    double[] everySixteenthFactorial -> b
    56:112:double roundIntermediate(double,java.math.RoundingMode) -> a
    132:135:int roundToInt(double,java.math.RoundingMode) -> roundToInt
    157:160:long roundToLong(double,java.math.RoundingMode) -> roundToLong
    184:191:java.math.BigInteger roundToBigInteger(double,java.math.RoundingMode) -> roundToBigInteger
    200:204:boolean isPowerOfTwo(double) -> isPowerOfTwo
    224:224:double log2(double) -> log2
    239:274:int log2(double,java.math.RoundingMode) -> log2
    287:289:boolean isMathematicalInteger(double) -> isMathematicalInteger
    302:312:double factorial(int) -> factorial
    360:364:boolean fuzzyEquals(double,double,double) -> fuzzyEquals
    381:388:int fuzzyCompare(double,double,double) -> fuzzyCompare
    408:417:double mean(double[]) -> mean
    434:442:double mean(int[]) -> mean
    460:468:double mean(long[]) -> mean
    488:488:double mean(java.lang.Iterable) -> mean
    508:517:double mean(java.util.Iterator) -> mean
    523:524:double checkFinite(double) -> a
    527:527:void <init>() -> <init>
    277:319:void <clinit>() -> <clinit>
com.google.common.math.DoubleMath$1 -> com.google.common.math.b:
    int[] $SwitchMap$java$math$RoundingMode -> a
    59:59:void <clinit>() -> <clinit>
com.google.common.math.DoubleUtils -> com.google.common.math.c:
    63:67:long getSignificand(double) -> a
    71:71:boolean isFinite(double) -> b
    75:75:boolean isNormal(double) -> c
    83:84:double scaleNormalize(double) -> d
    89:128:double bigToDouble(java.math.BigInteger) -> a
    133:134:double ensureNonNegative(double) -> e
    1032:1035:int com.google.common.math.MathPreconditions.checkPositive(java.lang.String,int):32:35 -> a
    1039:1042:long com.google.common.math.MathPreconditions.checkPositive(java.lang.String,long):39:42 -> a
    1046:1049:java.math.BigInteger com.google.common.math.MathPreconditions.checkPositive(java.lang.String,java.math.BigInteger):46:49 -> a
    1053:1056:int com.google.common.math.MathPreconditions.checkNonNegative(java.lang.String,int):53:56 -> b
    1060:1063:long com.google.common.math.MathPreconditions.checkNonNegative(java.lang.String,long):60:63 -> b
    1067:1070:java.math.BigInteger com.google.common.math.MathPreconditions.checkNonNegative(java.lang.String,java.math.BigInteger):67:70 -> b
    1074:1077:double com.google.common.math.MathPreconditions.checkNonNegative(java.lang.String,double):74:77 -> a
    1081:1084:void com.google.common.math.MathPreconditions.checkRoundingUnnecessary(boolean):81:84 -> a
    1087:1091:void com.google.common.math.MathPreconditions.checkInRangeForRoundingInputs(boolean,double,java.math.RoundingMode):87:91 -> a
    1094:1097:void com.google.common.math.MathPreconditions.checkNoOverflow(boolean,java.lang.String,int,int):94:97 -> a
    1100:1103:void com.google.common.math.MathPreconditions.checkNoOverflow(boolean,java.lang.String,long,long):100:103 -> a
com.google.common.math.IntMath -> com.google.common.math.IntMath:
    byte[] maxLog10ForLeadingZeros -> a
    int[] powersOf10 -> b
    int[] halfPowersOf10 -> c
    int[] factorials -> d
    int[] biggestBinomials -> e
    67:71:int ceilingPowerOfTwo(int) -> ceilingPowerOfTwo
    83:84:int floorPowerOfTwo(int) -> floorPowerOfTwo
    94:94:boolean isPowerOfTwo(int) -> isPowerOfTwo
    106:106:int lessThanBranchFree(int,int) -> a
    119:143:int log2(int,java.math.RoundingMode) -> log2
    160:179:int log10(int,java.math.RoundingMode) -> log10
    191:196:int log10Floor(int) -> a
    228:255:int pow(int,int) -> pow
    270:298:int sqrt(int,java.math.RoundingMode) -> sqrt
    305:305:int sqrtFloor(int) -> b
    317:369:int divide(int,int,java.math.RoundingMode) -> divide
    391:395:int mod(int,int) -> mod
    410:446:int gcd(int,int) -> gcd
    455:457:int checkedAdd(int,int) -> checkedAdd
    466:468:int checkedSubtract(int,int) -> checkedSubtract
    477:479:int checkedMultiply(int,int) -> checkedMultiply
    491:522:int checkedPow(int,int) -> checkedPow
    536:536:int saturatedAdd(int,int) -> saturatedAdd
    547:547:int saturatedSubtract(int,int) -> saturatedSubtract
    558:558:int saturatedMultiply(int,int) -> saturatedMultiply
    569:608:int saturatedPow(int,int) -> saturatedPow
    623:624:int factorial(int) -> factorial
    650:670:int binomial(int,int) -> binomial
    706:706:int mean(int,int) -> mean
    724:724:boolean isPrime(int) -> isPrime
    727:727:void <init>() -> <init>
    201:676:void <clinit>() -> <clinit>
com.google.common.math.IntMath$1 -> com.google.common.math.d:
    int[] $SwitchMap$java$math$RoundingMode -> a
    120:120:void <clinit>() -> <clinit>
com.google.common.math.LinearTransformation -> com.google.common.math.LinearTransformation:
    38:38:void <init>() -> <init>
    46:47:com.google.common.math.LinearTransformation$LinearTransformationBuilder mapping(double,double) -> mapping
    105:106:com.google.common.math.LinearTransformation vertical(double) -> vertical
    114:116:com.google.common.math.LinearTransformation horizontal(double) -> horizontal
    126:126:com.google.common.math.LinearTransformation forNaN() -> forNaN
    boolean isVertical() -> isVertical
    boolean isHorizontal() -> isHorizontal
    double slope() -> slope
    double transform(double) -> transform
    com.google.common.math.LinearTransformation inverse() -> inverse
com.google.common.math.LinearTransformation$LinearTransformationBuilder -> com.google.common.math.LinearTransformation$LinearTransformationBuilder:
    double x1 -> a
    double y1 -> b
    63:66:void <init>(double,double) -> <init>
    75:80:com.google.common.math.LinearTransformation and(double,double) -> and
    90:95:com.google.common.math.LinearTransformation withSlope(double) -> withSlope
    58:58:void <init>(double,double,byte) -> <init>
com.google.common.math.LinearTransformation$NaNLinearTransformation -> com.google.common.math.e:
    com.google.common.math.LinearTransformation$NaNLinearTransformation INSTANCE -> a
    270:270:void <init>() -> <init>
    276:276:boolean isVertical() -> isVertical
    281:281:boolean isHorizontal() -> isHorizontal
    286:286:double slope() -> slope
    291:291:double transform(double) -> transform
    296:296:com.google.common.math.LinearTransformation inverse() -> inverse
    301:301:java.lang.String toString() -> toString
    272:272:void <clinit>() -> <clinit>
com.google.common.math.LinearTransformation$RegularLinearTransformation -> com.google.common.math.f:
    double slope -> a
    double yIntercept -> b
    com.google.common.math.LinearTransformation inverse -> c
    166:170:void <init>(double,double) -> <init>
    172:176:void <init>(double,double,com.google.common.math.LinearTransformation) -> <init>
    180:180:boolean isVertical() -> isVertical
    185:185:boolean isHorizontal() -> isHorizontal
    190:190:double slope() -> slope
    195:195:double transform(double) -> transform
    200:201:com.google.common.math.LinearTransformation inverse() -> inverse
    206:206:java.lang.String toString() -> toString
    210:213:com.google.common.math.LinearTransformation createInverse() -> a
com.google.common.math.LinearTransformation$VerticalLinearTransformation -> com.google.common.math.g:
    double x -> a
    com.google.common.math.LinearTransformation inverse -> b
    224:227:void <init>(double) -> <init>
    229:232:void <init>(double,com.google.common.math.LinearTransformation) -> <init>
    236:236:boolean isVertical() -> isVertical
    241:241:boolean isHorizontal() -> isHorizontal
    246:246:double slope() -> slope
    251:251:double transform(double) -> transform
    256:257:com.google.common.math.LinearTransformation inverse() -> inverse
    262:262:java.lang.String toString() -> toString
    266:266:com.google.common.math.LinearTransformation createInverse() -> a
com.google.common.math.LongMath -> com.google.common.math.LongMath:
    byte[] maxLog10ForLeadingZeros -> c
    long[] powersOf10 -> d
    long[] halfPowersOf10 -> e
    long[] factorials -> a
    int[] biggestBinomials -> b
    int[] biggestSimpleBinomials -> f
    long[][] millerRabinBaseSets -> g
    67:71:long ceilingPowerOfTwo(long) -> ceilingPowerOfTwo
    83:87:long floorPowerOfTwo(long) -> floorPowerOfTwo
    97:97:boolean isPowerOfTwo(long) -> isPowerOfTwo
    108:108:int lessThanBranchFree(long,long) -> a
    121:145:int log2(long,java.math.RoundingMode) -> log2
    163:182:int log10(long,java.math.RoundingMode) -> log10
    195:200:int log10Floor(long) -> a
    269:298:long pow(long,int) -> pow
    313:371:long sqrt(long,java.math.RoundingMode) -> sqrt
    385:434:long divide(long,long,java.math.RoundingMode) -> divide
    458:458:int mod(long,int) -> mod
    481:485:long mod(long,long) -> mod
    500:536:long gcd(long,long) -> gcd
    546:548:long checkedAdd(long,long) -> checkedAdd
    558:560:long checkedSubtract(long,long) -> checkedSubtract
    570:592:long checkedMultiply(long,long) -> checkedMultiply
    603:637:long checkedPow(long,int) -> checkedPow
    651:658:long saturatedAdd(long,long) -> saturatedAdd
    669:676:long saturatedSubtract(long,long) -> saturatedSubtract
    688:706:long saturatedMultiply(long,long) -> saturatedMultiply
    717:758:long saturatedPow(long,int) -> saturatedPow
    774:775:long factorial(int) -> factorial
    809:863:long binomial(int,int) -> binomial
    870:878:long multiplyFraction(long,long,long) -> a
    963:963:boolean fitsInInt(long) -> b
    976:976:long mean(long,long) -> mean
    1003:1031:boolean isPrime(long) -> isPrime
    1206:1206:void <init>() -> <init>
    205:1041:void <clinit>() -> <clinit>
com.google.common.math.LongMath$1 -> com.google.common.math.h:
    int[] $SwitchMap$java$math$RoundingMode -> a
    122:122:void <clinit>() -> <clinit>
com.google.common.math.LongMath$MillerRabinTester -> com.google.common.math.i:
    com.google.common.math.LongMath$MillerRabinTester SMALL -> a
    com.google.common.math.LongMath$MillerRabinTester LARGE -> b
    com.google.common.math.LongMath$MillerRabinTester[] $VALUES -> c
    1066:1066:com.google.common.math.LongMath$MillerRabinTester[] values() -> values
    1066:1066:com.google.common.math.LongMath$MillerRabinTester valueOf(java.lang.String) -> valueOf
    1066:1066:void <init>(java.lang.String,int) -> <init>
    1158:1158:boolean test(long,long) -> a
    long mulMod(long,long,long) -> a
    long squareMod(long,long) -> b
    1169:1176:long powMod(long,long,long) -> b
    1181:1202:boolean testWitness(long,long) -> c
    1066:1066:void <init>(java.lang.String,int,byte) -> <init>
    1066:1086:void <clinit>() -> <clinit>
com.google.common.math.LongMath$MillerRabinTester$1 -> com.google.common.math.j:
    1068:1068:void <init>(java.lang.String,int) -> <init>
    1077:1077:long mulMod(long,long,long) -> a
    1082:1082:long squareMod(long,long) -> b
com.google.common.math.LongMath$MillerRabinTester$2 -> com.google.common.math.k:
    1086:1086:void <init>(java.lang.String,int) -> <init>
    1089:1089:long plusMod(long,long,long) -> b
    1094:1102:long times2ToThe32Mod(long,long) -> c
    1107:1128:long mulMod(long,long,long) -> a
    1133:1151:long squareMod(long,long) -> b
com.google.common.math.PairedStats -> com.google.common.math.PairedStats:
    com.google.common.math.Stats xStats -> a
    com.google.common.math.Stats yStats -> b
    double sumOfProductsOfDeltas -> c
    long serialVersionUID -> serialVersionUID
    60:64:void <init>(com.google.common.math.Stats,com.google.common.math.Stats,double) -> <init>
    68:68:long count() -> count
    73:73:com.google.common.math.Stats xStats() -> xStats
    78:78:com.google.common.math.Stats yStats() -> yStats
    96:97:double populationCovariance() -> populationCovariance
    114:115:double sampleCovariance() -> sampleCovariance
    135:147:double pearsonsCorrelationCoefficient() -> pearsonsCorrelationCoefficient
    182:196:com.google.common.math.LinearTransformation leastSquaresFit() -> leastSquaresFit
    217:226:boolean equals(java.lang.Object) -> equals
    237:237:int hashCode() -> hashCode
    242:252:java.lang.String toString() -> toString
    257:257:double sumOfProductsOfDeltas() -> a
    261:264:double ensurePositive(double) -> a
    269:275:double ensureInUnitRange(double) -> b
    290:294:byte[] toByteArray() -> toByteArray
    305:315:com.google.common.math.PairedStats fromByteArray(byte[]) -> fromByteArray
com.google.common.math.PairedStatsAccumulator -> com.google.common.math.PairedStatsAccumulator:
    com.google.common.math.StatsAccumulator xStats -> a
    com.google.common.math.StatsAccumulator yStats -> b
    double sumOfProductsOfDeltas -> c
    35:41:void <init>() -> <init>
    56:65:void add(double,double) -> add
    72:90:void addAll(com.google.common.math.PairedStats) -> addAll
    94:94:com.google.common.math.PairedStats snapshot() -> snapshot
    99:99:long count() -> count
    104:104:com.google.common.math.Stats xStats() -> xStats
    109:109:com.google.common.math.Stats yStats() -> yStats
    127:128:double populationCovariance() -> populationCovariance
    145:146:double sampleCovariance() -> sampleCovariance
    166:178:double pearsonsCorrelationCoefficient() -> pearsonsCorrelationCoefficient
    213:227:com.google.common.math.LinearTransformation leastSquaresFit() -> leastSquaresFit
    232:235:double ensurePositive(double) -> a
    240:240:double ensureInUnitRange(double) -> b
com.google.common.math.Quantiles -> com.google.common.math.Quantiles:
    131:131:void <init>() -> <init>
    135:135:com.google.common.math.Quantiles$ScaleAndIndex median() -> median
    140:140:com.google.common.math.Quantiles$Scale quartiles() -> quartiles
    145:145:com.google.common.math.Quantiles$Scale percentiles() -> percentiles
    155:155:com.google.common.math.Quantiles$Scale scale(int) -> scale
    455:460:boolean containsNaN(double[]) -> b
    469:481:double interpolate(double,double,double,double) -> b
    485:489:void checkIndex(int,int) -> b
    492:497:double[] longsToDoubles(long[]) -> b
    501:506:double[] intsToDoubles(int[]) -> b
    533:557:void selectInPlace(int,double[],int,int) -> b
    569:586:int partition(double[],int,int) -> a
    596:612:void movePivotToStartOfSlice(double[],int,int) -> b
    622:645:void selectAllInPlace(int[],int,int,double[],int,int) -> b
    658:688:int chooseNextSelection(int[],int,int,int,int) -> a
    694:697:void swap(double[],int,int) -> c
    131:131:void access$300(int,int) -> a
    131:131:double[] access$400(long[]) -> a
    131:131:double[] access$500(int[]) -> a
    131:131:boolean access$600(double[]) -> a
    131:131:void access$700(int,double[],int,int) -> a
    131:131:double access$800(double,double,double,double) -> a
    131:131:void access$900(int[],int,int,double[],int,int) -> a
com.google.common.math.Quantiles$Scale -> com.google.common.math.Quantiles$Scale:
    int scale -> a
    168:171:void <init>(int) -> <init>
    179:179:com.google.common.math.Quantiles$ScaleAndIndex index(int) -> index
    192:192:com.google.common.math.Quantiles$ScaleAndIndexes indexes(int[]) -> indexes
    205:205:com.google.common.math.Quantiles$ScaleAndIndexes indexes(java.util.Collection) -> indexes
    164:164:void <init>(int,byte) -> <init>
com.google.common.math.Quantiles$ScaleAndIndex -> com.google.common.math.Quantiles$ScaleAndIndex:
    int scale -> a
    int index -> b
    220:224:void <init>(int,int) -> <init>
    235:235:double compute(java.util.Collection) -> compute
    246:246:double compute(double[]) -> compute
    258:258:double compute(long[]) -> compute
    269:269:double compute(int[]) -> compute
    280:303:double computeInPlace(double[]) -> computeInPlace
    215:215:void <init>(int,int,byte) -> <init>
com.google.common.math.Quantiles$ScaleAndIndexes -> com.google.common.math.Quantiles$ScaleAndIndexes:
    int scale -> a
    int[] indexes -> b
    319:326:void <init>(int,int[]) -> <init>
    340:340:java.util.Map compute(java.util.Collection) -> compute
    354:354:java.util.Map compute(double[]) -> compute
    369:369:java.util.Map compute(long[]) -> compute
    383:383:java.util.Map compute(int[]) -> compute
    397:449:java.util.Map computeInPlace(double[]) -> computeInPlace
    314:314:void <init>(int,int[],byte) -> <init>
com.google.common.math.Stats -> com.google.common.math.Stats:
    long count -> a
    double mean -> b
    double sumOfSquaresOfDeltas -> c
    double min -> d
    double max -> e
    long serialVersionUID -> serialVersionUID
    89:95:void <init>(long,double,double,double,double) -> <init>
    104:106:com.google.common.math.Stats of(java.lang.Iterable) -> of
    117:119:com.google.common.math.Stats of(java.util.Iterator) -> of
    128:130:com.google.common.math.Stats of(double[]) -> of
    139:141:com.google.common.math.Stats of(int[]) -> of
    151:153:com.google.common.math.Stats of(long[]) -> of
    167:169:com.google.common.math.Stats of(java.util.stream.DoubleStream) -> of
    183:185:com.google.common.math.Stats of(java.util.stream.IntStream) -> of
    200:202:com.google.common.math.Stats of(java.util.stream.LongStream) -> of
    217:217:java.util.stream.Collector toStats() -> toStats
    230:230:long count() -> count
    255:256:double mean() -> mean
    272:272:double sum() -> sum
    291:298:double populationVariance() -> populationVariance
    318:318:double populationStandardDeviation() -> populationStandardDeviation
    338:342:double sampleVariance() -> sampleVariance
    364:364:double sampleStandardDeviation() -> sampleStandardDeviation
    381:382:double min() -> min
    399:400:double max() -> max
    420:431:boolean equals(java.lang.Object) -> equals
    442:442:int hashCode() -> hashCode
    447:456:java.lang.String toString() -> toString
    461:461:double sumOfSquaresOfDeltas() -> a
    475:475:double meanOf(java.lang.Iterable) -> meanOf
    489:502:double meanOf(java.util.Iterator) -> meanOf
    515:526:double meanOf(double[]) -> meanOf
    539:550:double meanOf(int[]) -> meanOf
    564:575:double meanOf(long[]) -> meanOf
    590:592:byte[] toByteArray() -> toByteArray
    606:618:void writeTo(java.nio.ByteBuffer) -> a
    628:634:com.google.common.math.Stats fromByteArray(byte[]) -> fromByteArray
    648:659:com.google.common.math.Stats readFrom(java.nio.ByteBuffer) -> b
    221:222:com.google.common.math.StatsAccumulator lambda$toStats$1(com.google.common.math.StatsAccumulator,com.google.common.math.StatsAccumulator) -> a
    219:219:void lambda$toStats$0(com.google.common.math.StatsAccumulator,java.lang.Number) -> a
com.google.common.math.StatsAccumulator -> com.google.common.math.StatsAccumulator:
    long count -> a
    double mean -> b
    double sumOfSquaresOfDeltas -> c
    double min -> d
    double max -> e
    40:48:void <init>() -> <init>
    52:74:void add(double) -> add
    83:86:void addAll(java.lang.Iterable) -> addAll
    95:98:void addAll(java.util.Iterator) -> addAll
    106:109:void addAll(double[]) -> addAll
    117:120:void addAll(int[]) -> addAll
    129:132:void addAll(long[]) -> addAll
    141:142:void addAll(java.util.stream.DoubleStream) -> addAll
    151:152:void addAll(java.util.stream.IntStream) -> addAll
    162:163:void addAll(java.util.stream.LongStream) -> addAll
    170:174:void addAll(com.google.common.math.Stats) -> addAll
    183:187:void addAll(com.google.common.math.StatsAccumulator) -> addAll
    195:215:void merge(long,double,double,double,double) -> a
    219:219:com.google.common.math.Stats snapshot() -> snapshot
    224:224:long count() -> count
    246:247:double mean() -> mean
    263:263:double sum() -> sum
    282:289:double populationVariance() -> populationVariance
    309:309:double populationStandardDeviation() -> populationStandardDeviation
    329:333:double sampleVariance() -> sampleVariance
    355:355:double sampleStandardDeviation() -> sampleStandardDeviation
    372:373:double min() -> min
    390:391:double max() -> max
    395:395:double sumOfSquaresOfDeltas() -> a
    417:425:double calculateNewMeanNonFinite(double,double) -> a
com.google.common.net.HostAndPort -> com.google.common.net.HostAndPort:
    java.lang.String host -> a
    int port -> b
    boolean hasBracketlessColons -> c
    long serialVersionUID -> serialVersionUID
    78:82:void <init>(java.lang.String,int,boolean) -> <init>
    94:94:java.lang.String getHost() -> getHost
    99:99:boolean hasPort() -> hasPort
    110:111:int getPort() -> getPort
    116:116:int getPortOrDefault(int) -> getPortOrDefault
    132:135:com.google.common.net.HostAndPort fromParts(java.lang.String,int) -> fromParts
    150:152:com.google.common.net.HostAndPort fromHost(java.lang.String) -> fromHost
    166:201:com.google.common.net.HostAndPort fromString(java.lang.String) -> fromString
    212:239:java.lang.String[] getHostAndPortFromBracketedHost(java.lang.String) -> a
    253:257:com.google.common.net.HostAndPort withDefaultPort(int) -> withDefaultPort
    275:276:com.google.common.net.HostAndPort requireBracketsForIPv6() -> requireBracketsForIPv6
    281:288:boolean equals(java.lang.Object) -> equals
    293:293:int hashCode() -> hashCode
    300:309:java.lang.String toString() -> toString
    314:314:boolean isValidPort(int) -> a
com.google.common.net.HostSpecifier -> com.google.common.net.HostSpecifier:
    java.lang.String canonicalForm -> a
    50:52:void <init>(java.lang.String) -> <init>
    73:101:com.google.common.net.HostSpecifier fromValid(java.lang.String) -> fromValid
    114:122:com.google.common.net.HostSpecifier from(java.lang.String) -> from
    132:135:boolean isValid(java.lang.String) -> isValid
    141:150:boolean equals(java.lang.Object) -> equals
    155:155:int hashCode() -> hashCode
    166:166:java.lang.String toString() -> toString
com.google.common.net.HttpHeaders -> com.google.common.net.HttpHeaders:
    java.lang.String CACHE_CONTROL -> CACHE_CONTROL
    java.lang.String CONTENT_LENGTH -> CONTENT_LENGTH
    java.lang.String CONTENT_TYPE -> CONTENT_TYPE
    java.lang.String DATE -> DATE
    java.lang.String PRAGMA -> PRAGMA
    java.lang.String VIA -> VIA
    java.lang.String WARNING -> WARNING
    java.lang.String ACCEPT -> ACCEPT
    java.lang.String ACCEPT_CHARSET -> ACCEPT_CHARSET
    java.lang.String ACCEPT_ENCODING -> ACCEPT_ENCODING
    java.lang.String ACCEPT_LANGUAGE -> ACCEPT_LANGUAGE
    java.lang.String ACCESS_CONTROL_REQUEST_HEADERS -> ACCESS_CONTROL_REQUEST_HEADERS
    java.lang.String ACCESS_CONTROL_REQUEST_METHOD -> ACCESS_CONTROL_REQUEST_METHOD
    java.lang.String AUTHORIZATION -> AUTHORIZATION
    java.lang.String CONNECTION -> CONNECTION
    java.lang.String COOKIE -> COOKIE
    java.lang.String CROSS_ORIGIN_RESOURCE_POLICY -> CROSS_ORIGIN_RESOURCE_POLICY
    java.lang.String EARLY_DATA -> EARLY_DATA
    java.lang.String EXPECT -> EXPECT
    java.lang.String FROM -> FROM
    java.lang.String FORWARDED -> FORWARDED
    java.lang.String FOLLOW_ONLY_WHEN_PRERENDER_SHOWN -> FOLLOW_ONLY_WHEN_PRERENDER_SHOWN
    java.lang.String HOST -> HOST
    java.lang.String HTTP2_SETTINGS -> HTTP2_SETTINGS
    java.lang.String IF_MATCH -> IF_MATCH
    java.lang.String IF_MODIFIED_SINCE -> IF_MODIFIED_SINCE
    java.lang.String IF_NONE_MATCH -> IF_NONE_MATCH
    java.lang.String IF_RANGE -> IF_RANGE
    java.lang.String IF_UNMODIFIED_SINCE -> IF_UNMODIFIED_SINCE
    java.lang.String LAST_EVENT_ID -> LAST_EVENT_ID
    java.lang.String MAX_FORWARDS -> MAX_FORWARDS
    java.lang.String ORIGIN -> ORIGIN
    java.lang.String PROXY_AUTHORIZATION -> PROXY_AUTHORIZATION
    java.lang.String RANGE -> RANGE
    java.lang.String REFERER -> REFERER
    java.lang.String REFERRER_POLICY -> REFERRER_POLICY
    java.lang.String SERVICE_WORKER -> SERVICE_WORKER
    java.lang.String TE -> TE
    java.lang.String UPGRADE -> UPGRADE
    java.lang.String UPGRADE_INSECURE_REQUESTS -> UPGRADE_INSECURE_REQUESTS
    java.lang.String USER_AGENT -> USER_AGENT
    java.lang.String ACCEPT_RANGES -> ACCEPT_RANGES
    java.lang.String ACCESS_CONTROL_ALLOW_HEADERS -> ACCESS_CONTROL_ALLOW_HEADERS
    java.lang.String ACCESS_CONTROL_ALLOW_METHODS -> ACCESS_CONTROL_ALLOW_METHODS
    java.lang.String ACCESS_CONTROL_ALLOW_ORIGIN -> ACCESS_CONTROL_ALLOW_ORIGIN
    java.lang.String ACCESS_CONTROL_ALLOW_CREDENTIALS -> ACCESS_CONTROL_ALLOW_CREDENTIALS
    java.lang.String ACCESS_CONTROL_EXPOSE_HEADERS -> ACCESS_CONTROL_EXPOSE_HEADERS
    java.lang.String ACCESS_CONTROL_MAX_AGE -> ACCESS_CONTROL_MAX_AGE
    java.lang.String AGE -> AGE
    java.lang.String ALLOW -> ALLOW
    java.lang.String CONTENT_DISPOSITION -> CONTENT_DISPOSITION
    java.lang.String CONTENT_ENCODING -> CONTENT_ENCODING
    java.lang.String CONTENT_LANGUAGE -> CONTENT_LANGUAGE
    java.lang.String CONTENT_LOCATION -> CONTENT_LOCATION
    java.lang.String CONTENT_MD5 -> CONTENT_MD5
    java.lang.String CONTENT_RANGE -> CONTENT_RANGE
    java.lang.String CONTENT_SECURITY_POLICY -> CONTENT_SECURITY_POLICY
    java.lang.String CONTENT_SECURITY_POLICY_REPORT_ONLY -> CONTENT_SECURITY_POLICY_REPORT_ONLY
    java.lang.String X_CONTENT_SECURITY_POLICY -> X_CONTENT_SECURITY_POLICY
    java.lang.String X_CONTENT_SECURITY_POLICY_REPORT_ONLY -> X_CONTENT_SECURITY_POLICY_REPORT_ONLY
    java.lang.String X_WEBKIT_CSP -> X_WEBKIT_CSP
    java.lang.String X_WEBKIT_CSP_REPORT_ONLY -> X_WEBKIT_CSP_REPORT_ONLY
    java.lang.String CROSS_ORIGIN_OPENER_POLICY -> CROSS_ORIGIN_OPENER_POLICY
    java.lang.String ETAG -> ETAG
    java.lang.String EXPIRES -> EXPIRES
    java.lang.String LAST_MODIFIED -> LAST_MODIFIED
    java.lang.String LINK -> LINK
    java.lang.String LOCATION -> LOCATION
    java.lang.String ORIGIN_TRIAL -> ORIGIN_TRIAL
    java.lang.String P3P -> P3P
    java.lang.String PROXY_AUTHENTICATE -> PROXY_AUTHENTICATE
    java.lang.String REFRESH -> REFRESH
    java.lang.String REPORT_TO -> REPORT_TO
    java.lang.String RETRY_AFTER -> RETRY_AFTER
    java.lang.String SERVER -> SERVER
    java.lang.String SERVER_TIMING -> SERVER_TIMING
    java.lang.String SERVICE_WORKER_ALLOWED -> SERVICE_WORKER_ALLOWED
    java.lang.String SET_COOKIE -> SET_COOKIE
    java.lang.String SET_COOKIE2 -> SET_COOKIE2
    java.lang.String SOURCE_MAP -> SOURCE_MAP
    java.lang.String STRICT_TRANSPORT_SECURITY -> STRICT_TRANSPORT_SECURITY
    java.lang.String TIMING_ALLOW_ORIGIN -> TIMING_ALLOW_ORIGIN
    java.lang.String TRAILER -> TRAILER
    java.lang.String TRANSFER_ENCODING -> TRANSFER_ENCODING
    java.lang.String VARY -> VARY
    java.lang.String WWW_AUTHENTICATE -> WWW_AUTHENTICATE
    java.lang.String DNT -> DNT
    java.lang.String X_CONTENT_TYPE_OPTIONS -> X_CONTENT_TYPE_OPTIONS
    java.lang.String X_DO_NOT_TRACK -> X_DO_NOT_TRACK
    java.lang.String X_FORWARDED_FOR -> X_FORWARDED_FOR
    java.lang.String X_FORWARDED_PROTO -> X_FORWARDED_PROTO
    java.lang.String X_FORWARDED_HOST -> X_FORWARDED_HOST
    java.lang.String X_FORWARDED_PORT -> X_FORWARDED_PORT
    java.lang.String X_FRAME_OPTIONS -> X_FRAME_OPTIONS
    java.lang.String X_POWERED_BY -> X_POWERED_BY
    java.lang.String PUBLIC_KEY_PINS -> PUBLIC_KEY_PINS
    java.lang.String PUBLIC_KEY_PINS_REPORT_ONLY -> PUBLIC_KEY_PINS_REPORT_ONLY
    java.lang.String X_REQUESTED_WITH -> X_REQUESTED_WITH
    java.lang.String X_USER_IP -> X_USER_IP
    java.lang.String X_DOWNLOAD_OPTIONS -> X_DOWNLOAD_OPTIONS
    java.lang.String X_XSS_PROTECTION -> X_XSS_PROTECTION
    java.lang.String X_DNS_PREFETCH_CONTROL -> X_DNS_PREFETCH_CONTROL
    java.lang.String PING_FROM -> PING_FROM
    java.lang.String PING_TO -> PING_TO
    java.lang.String PURPOSE -> PURPOSE
    java.lang.String X_PURPOSE -> X_PURPOSE
    java.lang.String X_MOZ -> X_MOZ
    java.lang.String SEC_FETCH_DEST -> SEC_FETCH_DEST
    java.lang.String SEC_FETCH_MODE -> SEC_FETCH_MODE
    java.lang.String SEC_FETCH_SITE -> SEC_FETCH_SITE
    java.lang.String SEC_FETCH_USER -> SEC_FETCH_USER
    java.lang.String SEC_METADATA -> SEC_METADATA
    java.lang.String SEC_TOKEN_BINDING -> SEC_TOKEN_BINDING
    java.lang.String SEC_PROVIDED_TOKEN_BINDING_ID -> SEC_PROVIDED_TOKEN_BINDING_ID
    java.lang.String SEC_REFERRED_TOKEN_BINDING_ID -> SEC_REFERRED_TOKEN_BINDING_ID
    java.lang.String SEC_WEBSOCKET_ACCEPT -> SEC_WEBSOCKET_ACCEPT
    java.lang.String SEC_WEBSOCKET_EXTENSIONS -> SEC_WEBSOCKET_EXTENSIONS
    java.lang.String SEC_WEBSOCKET_KEY -> SEC_WEBSOCKET_KEY
    java.lang.String SEC_WEBSOCKET_PROTOCOL -> SEC_WEBSOCKET_PROTOCOL
    java.lang.String SEC_WEBSOCKET_VERSION -> SEC_WEBSOCKET_VERSION
    java.lang.String CDN_LOOP -> CDN_LOOP
    37:37:void <init>() -> <init>
com.google.common.net.HttpHeaders$ReferrerPolicyValues -> com.google.common.net.HttpHeaders$ReferrerPolicyValues:
    java.lang.String NO_REFERRER -> NO_REFERRER
    java.lang.String NO_REFFERER_WHEN_DOWNGRADE -> NO_REFFERER_WHEN_DOWNGRADE
    java.lang.String SAME_ORIGIN -> SAME_ORIGIN
    java.lang.String ORIGIN -> ORIGIN
    java.lang.String STRICT_ORIGIN -> STRICT_ORIGIN
    java.lang.String ORIGIN_WHEN_CROSS_ORIGIN -> ORIGIN_WHEN_CROSS_ORIGIN
    java.lang.String STRICT_ORIGIN_WHEN_CROSS_ORIGIN -> STRICT_ORIGIN_WHEN_CROSS_ORIGIN
    java.lang.String UNSAFE_URL -> UNSAFE_URL
    153:153:void <init>() -> <init>
com.google.common.net.InetAddresses -> com.google.common.net.InetAddresses:
    com.google.common.base.Splitter IPV4_SPLITTER -> a
    com.google.common.base.Splitter IPV6_SPLITTER -> b
    java.net.Inet4Address LOOPBACK4 -> c
    java.net.Inet4Address ANY4 -> d
    110:110:void <init>() -> <init>
    120:126:java.net.Inet4Address getInet4Address(byte[]) -> a
    142:149:java.net.InetAddress forString(java.lang.String) -> forString
    160:160:boolean isInetAddress(java.lang.String) -> isInetAddress
    166:201:byte[] ipStringToBytes(java.lang.String) -> a
    205:215:byte[] textToNumericFormatV4(java.lang.String) -> b
    220:278:byte[] textToNumericFormatV6(java.lang.String) -> c
    282:291:java.lang.String convertDottedQuadToHex(java.lang.String) -> d
    296:302:byte parseOctet(java.lang.String) -> e
    307:311:short parseHextet(java.lang.String) -> f
    326:328:java.net.InetAddress bytesToInetAddress(byte[]) -> b
    348:360:java.lang.String toAddrString(java.net.InetAddress) -> toAddrString
    372:392:void compressLongestRunOfZeroes(int[]) -> a
    407:423:java.lang.String hextetsToIPv6String(int[]) -> b
    446:449:java.lang.String toUriString(java.net.InetAddress) -> toUriString
    467:472:java.net.InetAddress forUriString(java.lang.String) -> forUriString
    476:495:java.net.InetAddress forUriStringNoThrow(java.lang.String) -> g
    506:506:boolean isUriInetAddress(java.lang.String) -> isUriInetAddress
    528:540:boolean isCompatIPv4Address(java.net.Inet6Address) -> isCompatIPv4Address
    551:554:java.net.Inet4Address getCompatIPv4Address(java.net.Inet6Address) -> getCompatIPv4Address
    570:571:boolean is6to4Address(java.net.Inet6Address) -> is6to4Address
    582:584:java.net.Inet4Address get6to4IPv4Address(java.net.Inet6Address) -> get6to4IPv4Address
    658:659:boolean isTeredoAddress(java.net.Inet6Address) -> isTeredoAddress
    673:690:com.google.common.net.InetAddresses$TeredoInfo getTeredoInfo(java.net.Inet6Address) -> getTeredoInfo
    710:723:boolean isIsatapAddress(java.net.Inet6Address) -> isIsatapAddress
    734:736:java.net.Inet4Address getIsatapIPv4Address(java.net.Inet6Address) -> getIsatapIPv4Address
    752:752:boolean hasEmbeddedIPv4ClientAddress(java.net.Inet6Address) -> hasEmbeddedIPv4ClientAddress
    768:780:java.net.Inet4Address getEmbeddedIPv4ClientAddress(java.net.Inet6Address) -> getEmbeddedIPv4ClientAddress
    802:816:boolean isMappedIPv4Address(java.lang.String) -> isMappedIPv4Address
    843:883:java.net.Inet4Address getCoercedIPv4Address(java.net.InetAddress) -> getCoercedIPv4Address
    905:905:int coerceToInteger(java.net.InetAddress) -> coerceToInteger
    918:918:java.math.BigInteger toBigInteger(java.net.InetAddress) -> toBigInteger
    928:928:java.net.Inet4Address fromInteger(int) -> fromInteger
    940:940:java.net.Inet4Address fromIPv4BigInteger(java.math.BigInteger) -> fromIPv4BigInteger
    951:951:java.net.Inet6Address fromIPv6BigInteger(java.math.BigInteger) -> fromIPv6BigInteger
    965:992:java.net.InetAddress fromBigInteger(java.math.BigInteger,boolean) -> a
    1007:1011:java.net.InetAddress fromLittleEndianByteArray(byte[]) -> fromLittleEndianByteArray
    1024:1034:java.net.InetAddress decrement(java.net.InetAddress) -> decrement
    1047:1057:java.net.InetAddress increment(java.net.InetAddress) -> increment
    1069:1075:boolean isMaximum(java.net.InetAddress) -> isMaximum
    1080:1080:java.lang.IllegalArgumentException formatIllegalArgumentException(java.lang.String,java.lang.Object[]) -> a
    102:102:java.net.Inet4Address access$000() -> a
    105:108:void <clinit>() -> <clinit>
com.google.common.net.InetAddresses$TeredoInfo -> com.google.common.net.InetAddresses$TeredoInfo:
    java.net.Inet4Address server -> a
    java.net.Inet4Address client -> b
    int port -> c
    int flags -> d
    618:630:void <init>(java.net.Inet4Address,java.net.Inet4Address,int,int) -> <init>
    633:633:java.net.Inet4Address getServer() -> getServer
    637:637:java.net.Inet4Address getClient() -> getClient
    641:641:int getPort() -> getPort
    645:645:int getFlags() -> getFlags
com.google.common.net.InternetDomainName -> com.google.common.net.InternetDomainName:
    com.google.common.base.CharMatcher DOTS_MATCHER -> a
    com.google.common.base.Splitter DOT_SPLITTER -> b
    com.google.common.base.Joiner DOT_JOINER -> c
    java.lang.String name -> d
    com.google.common.collect.ImmutableList parts -> e
    int publicSuffixIndex -> f
    int registrySuffixIndex -> g
    com.google.common.base.CharMatcher DASH_MATCHER -> h
    com.google.common.base.CharMatcher DIGIT_MATCHER -> i
    com.google.common.base.CharMatcher LETTER_MATCHER -> j
    com.google.common.base.CharMatcher PART_CHAR_MATCHER -> k
    132:153:void <init>(java.lang.String) -> <init>
    165:187:int findSuffixOfType(com.google.common.base.Optional) -> a
    210:210:com.google.common.net.InternetDomainName from(java.lang.String) -> from
    220:235:boolean validateSyntax(java.util.List) -> a
    261:299:boolean validatePart(java.lang.String,boolean) -> a
    308:308:com.google.common.collect.ImmutableList parts() -> parts
    332:332:boolean isPublicSuffix() -> isPublicSuffix
    348:348:boolean hasPublicSuffix() -> hasPublicSuffix
    358:358:com.google.common.net.InternetDomainName publicSuffix() -> publicSuffix
    374:374:boolean isUnderPublicSuffix() -> isUnderPublicSuffix
    390:390:boolean isTopPrivateDomain() -> isTopPrivateDomain
    410:414:com.google.common.net.InternetDomainName topPrivateDomain() -> topPrivateDomain
    441:441:boolean isRegistrySuffix() -> isRegistrySuffix
    456:456:boolean hasRegistrySuffix() -> hasRegistrySuffix
    466:466:com.google.common.net.InternetDomainName registrySuffix() -> registrySuffix
    478:478:boolean isUnderRegistrySuffix() -> isUnderRegistrySuffix
    493:493:boolean isTopDomainUnderRegistrySuffix() -> isTopDomainUnderRegistrySuffix
    512:516:com.google.common.net.InternetDomainName topDomainUnderRegistrySuffix() -> topDomainUnderRegistrySuffix
    521:521:boolean hasParent() -> hasParent
    532:533:com.google.common.net.InternetDomainName parent() -> parent
    544:544:com.google.common.net.InternetDomainName ancestor(int) -> a
    557:557:com.google.common.net.InternetDomainName child(java.lang.String) -> child
    585:588:boolean isValid(java.lang.String) -> isValid
    598:601:boolean matchesWildcardSuffixType(com.google.common.base.Optional,java.lang.String) -> a
    610:610:boolean matchesType(com.google.common.base.Optional,com.google.common.base.Optional) -> a
    616:616:java.lang.String toString() -> toString
    626:635:boolean equals(java.lang.Object) -> equals
    640:640:int hashCode() -> hashCode
    79:246:void <clinit>() -> <clinit>
com.google.common.net.MediaType -> com.google.common.net.MediaType:
    com.google.common.collect.ImmutableListMultimap UTF_8_CONSTANT_PARAMETERS -> a
    com.google.common.base.CharMatcher TOKEN_MATCHER -> b
    com.google.common.base.CharMatcher QUOTED_TEXT_MATCHER -> c
    com.google.common.base.CharMatcher LINEAR_WHITE_SPACE -> d
    java.util.Map KNOWN_TYPES -> e
    com.google.common.net.MediaType ANY_TYPE -> ANY_TYPE
    com.google.common.net.MediaType ANY_TEXT_TYPE -> ANY_TEXT_TYPE
    com.google.common.net.MediaType ANY_IMAGE_TYPE -> ANY_IMAGE_TYPE
    com.google.common.net.MediaType ANY_AUDIO_TYPE -> ANY_AUDIO_TYPE
    com.google.common.net.MediaType ANY_VIDEO_TYPE -> ANY_VIDEO_TYPE
    com.google.common.net.MediaType ANY_APPLICATION_TYPE -> ANY_APPLICATION_TYPE
    com.google.common.net.MediaType CACHE_MANIFEST_UTF_8 -> CACHE_MANIFEST_UTF_8
    com.google.common.net.MediaType CSS_UTF_8 -> CSS_UTF_8
    com.google.common.net.MediaType CSV_UTF_8 -> CSV_UTF_8
    com.google.common.net.MediaType HTML_UTF_8 -> HTML_UTF_8
    com.google.common.net.MediaType I_CALENDAR_UTF_8 -> I_CALENDAR_UTF_8
    com.google.common.net.MediaType PLAIN_TEXT_UTF_8 -> PLAIN_TEXT_UTF_8
    com.google.common.net.MediaType TEXT_JAVASCRIPT_UTF_8 -> TEXT_JAVASCRIPT_UTF_8
    com.google.common.net.MediaType TSV_UTF_8 -> TSV_UTF_8
    com.google.common.net.MediaType VCARD_UTF_8 -> VCARD_UTF_8
    com.google.common.net.MediaType WML_UTF_8 -> WML_UTF_8
    com.google.common.net.MediaType XML_UTF_8 -> XML_UTF_8
    com.google.common.net.MediaType VTT_UTF_8 -> VTT_UTF_8
    com.google.common.net.MediaType BMP -> BMP
    com.google.common.net.MediaType CRW -> CRW
    com.google.common.net.MediaType GIF -> GIF
    com.google.common.net.MediaType ICO -> ICO
    com.google.common.net.MediaType JPEG -> JPEG
    com.google.common.net.MediaType PNG -> PNG
    com.google.common.net.MediaType PSD -> PSD
    com.google.common.net.MediaType SVG_UTF_8 -> SVG_UTF_8
    com.google.common.net.MediaType TIFF -> TIFF
    com.google.common.net.MediaType WEBP -> WEBP
    com.google.common.net.MediaType HEIF -> HEIF
    com.google.common.net.MediaType JP2K -> JP2K
    com.google.common.net.MediaType MP4_AUDIO -> MP4_AUDIO
    com.google.common.net.MediaType MPEG_AUDIO -> MPEG_AUDIO
    com.google.common.net.MediaType OGG_AUDIO -> OGG_AUDIO
    com.google.common.net.MediaType WEBM_AUDIO -> WEBM_AUDIO
    com.google.common.net.MediaType L16_AUDIO -> L16_AUDIO
    com.google.common.net.MediaType L24_AUDIO -> L24_AUDIO
    com.google.common.net.MediaType BASIC_AUDIO -> BASIC_AUDIO
    com.google.common.net.MediaType AAC_AUDIO -> AAC_AUDIO
    com.google.common.net.MediaType VORBIS_AUDIO -> VORBIS_AUDIO
    com.google.common.net.MediaType WMA_AUDIO -> WMA_AUDIO
    com.google.common.net.MediaType WAX_AUDIO -> WAX_AUDIO
    com.google.common.net.MediaType VND_REAL_AUDIO -> VND_REAL_AUDIO
    com.google.common.net.MediaType VND_WAVE_AUDIO -> VND_WAVE_AUDIO
    com.google.common.net.MediaType MP4_VIDEO -> MP4_VIDEO
    com.google.common.net.MediaType MPEG_VIDEO -> MPEG_VIDEO
    com.google.common.net.MediaType OGG_VIDEO -> OGG_VIDEO
    com.google.common.net.MediaType QUICKTIME -> QUICKTIME
    com.google.common.net.MediaType WEBM_VIDEO -> WEBM_VIDEO
    com.google.common.net.MediaType WMV -> WMV
    com.google.common.net.MediaType FLV_VIDEO -> FLV_VIDEO
    com.google.common.net.MediaType THREE_GPP_VIDEO -> THREE_GPP_VIDEO
    com.google.common.net.MediaType THREE_GPP2_VIDEO -> THREE_GPP2_VIDEO
    com.google.common.net.MediaType APPLICATION_XML_UTF_8 -> APPLICATION_XML_UTF_8
    com.google.common.net.MediaType ATOM_UTF_8 -> ATOM_UTF_8
    com.google.common.net.MediaType BZIP2 -> BZIP2
    com.google.common.net.MediaType DART_UTF_8 -> DART_UTF_8
    com.google.common.net.MediaType APPLE_PASSBOOK -> APPLE_PASSBOOK
    com.google.common.net.MediaType EOT -> EOT
    com.google.common.net.MediaType EPUB -> EPUB
    com.google.common.net.MediaType FORM_DATA -> FORM_DATA
    com.google.common.net.MediaType KEY_ARCHIVE -> KEY_ARCHIVE
    com.google.common.net.MediaType APPLICATION_BINARY -> APPLICATION_BINARY
    com.google.common.net.MediaType GEO_JSON -> GEO_JSON
    com.google.common.net.MediaType GZIP -> GZIP
    com.google.common.net.MediaType HAL_JSON -> HAL_JSON
    com.google.common.net.MediaType JAVASCRIPT_UTF_8 -> JAVASCRIPT_UTF_8
    com.google.common.net.MediaType JOSE -> JOSE
    com.google.common.net.MediaType JOSE_JSON -> JOSE_JSON
    com.google.common.net.MediaType JSON_UTF_8 -> JSON_UTF_8
    com.google.common.net.MediaType MANIFEST_JSON_UTF_8 -> MANIFEST_JSON_UTF_8
    com.google.common.net.MediaType KML -> KML
    com.google.common.net.MediaType KMZ -> KMZ
    com.google.common.net.MediaType MBOX -> MBOX
    com.google.common.net.MediaType APPLE_MOBILE_CONFIG -> APPLE_MOBILE_CONFIG
    com.google.common.net.MediaType MICROSOFT_EXCEL -> MICROSOFT_EXCEL
    com.google.common.net.MediaType MICROSOFT_OUTLOOK -> MICROSOFT_OUTLOOK
    com.google.common.net.MediaType MICROSOFT_POWERPOINT -> MICROSOFT_POWERPOINT
    com.google.common.net.MediaType MICROSOFT_WORD -> MICROSOFT_WORD
    com.google.common.net.MediaType MEDIA_PRESENTATION_DESCRIPTION -> MEDIA_PRESENTATION_DESCRIPTION
    com.google.common.net.MediaType WASM_APPLICATION -> WASM_APPLICATION
    com.google.common.net.MediaType NACL_APPLICATION -> NACL_APPLICATION
    com.google.common.net.MediaType NACL_PORTABLE_APPLICATION -> NACL_PORTABLE_APPLICATION
    com.google.common.net.MediaType OCTET_STREAM -> OCTET_STREAM
    com.google.common.net.MediaType OGG_CONTAINER -> OGG_CONTAINER
    com.google.common.net.MediaType OOXML_DOCUMENT -> OOXML_DOCUMENT
    com.google.common.net.MediaType OOXML_PRESENTATION -> OOXML_PRESENTATION
    com.google.common.net.MediaType OOXML_SHEET -> OOXML_SHEET
    com.google.common.net.MediaType OPENDOCUMENT_GRAPHICS -> OPENDOCUMENT_GRAPHICS
    com.google.common.net.MediaType OPENDOCUMENT_PRESENTATION -> OPENDOCUMENT_PRESENTATION
    com.google.common.net.MediaType OPENDOCUMENT_SPREADSHEET -> OPENDOCUMENT_SPREADSHEET
    com.google.common.net.MediaType OPENDOCUMENT_TEXT -> OPENDOCUMENT_TEXT
    com.google.common.net.MediaType OPENSEARCH_DESCRIPTION_UTF_8 -> OPENSEARCH_DESCRIPTION_UTF_8
    com.google.common.net.MediaType PDF -> PDF
    com.google.common.net.MediaType POSTSCRIPT -> POSTSCRIPT
    com.google.common.net.MediaType PROTOBUF -> PROTOBUF
    com.google.common.net.MediaType RDF_XML_UTF_8 -> RDF_XML_UTF_8
    com.google.common.net.MediaType RTF_UTF_8 -> RTF_UTF_8
    com.google.common.net.MediaType SFNT -> SFNT
    com.google.common.net.MediaType SHOCKWAVE_FLASH -> SHOCKWAVE_FLASH
    com.google.common.net.MediaType SKETCHUP -> SKETCHUP
    com.google.common.net.MediaType SOAP_XML_UTF_8 -> SOAP_XML_UTF_8
    com.google.common.net.MediaType TAR -> TAR
    com.google.common.net.MediaType WOFF -> WOFF
    com.google.common.net.MediaType WOFF2 -> WOFF2
    com.google.common.net.MediaType XHTML_UTF_8 -> XHTML_UTF_8
    com.google.common.net.MediaType XRD_UTF_8 -> XRD_UTF_8
    com.google.common.net.MediaType ZIP -> ZIP
    java.lang.String type -> f
    java.lang.String subtype -> g
    com.google.common.collect.ImmutableListMultimap parameters -> h
    java.lang.String toString -> i
    int hashCode -> j
    com.google.common.base.Optional parsedCharset -> k
    com.google.common.base.Joiner$MapJoiner PARAMETER_JOINER -> l
    110:113:com.google.common.net.MediaType createConstant(java.lang.String,java.lang.String) -> a
    117:119:com.google.common.net.MediaType createConstantUtf8(java.lang.String,java.lang.String) -> b
    123:124:com.google.common.net.MediaType addKnownType(com.google.common.net.MediaType) -> a
    708:712:void <init>(java.lang.String,java.lang.String,com.google.common.collect.ImmutableListMultimap) -> <init>
    716:716:java.lang.String type() -> type
    721:721:java.lang.String subtype() -> subtype
    726:726:com.google.common.collect.ImmutableListMultimap parameters() -> parameters
    730:731:java.util.Map parametersAsMap() -> b
    750:765:com.google.common.base.Optional charset() -> charset
    773:773:com.google.common.net.MediaType withoutParameters() -> withoutParameters
    782:782:com.google.common.net.MediaType withParameters(com.google.common.collect.Multimap) -> withParameters
    793:812:com.google.common.net.MediaType withParameters(java.lang.String,java.lang.Iterable) -> withParameters
    824:824:com.google.common.net.MediaType withParameter(java.lang.String,java.lang.String) -> withParameter
    837:841:com.google.common.net.MediaType withCharset(java.nio.charset.Charset) -> withCharset
    846:846:boolean hasWildcard() -> hasWildcard
    879:881:boolean is(com.google.common.net.MediaType) -> is
    891:893:com.google.common.net.MediaType create(java.lang.String,java.lang.String) -> create
    898:913:com.google.common.net.MediaType create(java.lang.String,java.lang.String,com.google.common.collect.Multimap) -> a
    962:964:java.lang.String normalizeToken(java.lang.String) -> b
    968:970:java.lang.String normalizeParameterValue(java.lang.String,java.lang.String) -> c
    979:1013:com.google.common.net.MediaType parse(java.lang.String) -> parse
    1066:1075:boolean equals(java.lang.Object) -> equals
    1082:1087:int hashCode() -> hashCode
    1099:1104:java.lang.String toString() -> toString
    1108:1124:java.lang.String computeToString() -> c
    1128:1136:java.lang.String escapeAndQuote(java.lang.String) -> c
    78:78:com.google.common.base.CharMatcher access$000() -> a
    78:78:java.lang.String access$100(java.lang.String) -> a
    80:1090:void <clinit>() -> <clinit>
com.google.common.net.MediaType$1 -> com.google.common.net.a:
    732:732:void <init>(com.google.common.net.MediaType) -> <init>
    735:735:com.google.common.collect.ImmutableMultiset apply(java.util.Collection) -> a
    732:732:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.net.MediaType$2 -> com.google.common.net.b:
    1114:1114:void <init>(com.google.common.net.MediaType) -> <init>
    1117:1119:java.lang.String apply(java.lang.String) -> a
    1114:1114:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.net.MediaType$Tokenizer -> com.google.common.net.c:
    java.lang.String input -> a
    int position -> b
    1019:1023:void <init>(java.lang.String) -> <init>
    1026:1029:java.lang.String consumeTokenIfPresent(com.google.common.base.CharMatcher) -> a
    1033:1036:java.lang.String consumeToken(com.google.common.base.CharMatcher) -> b
    1040:1044:char consumeCharacter(com.google.common.base.CharMatcher) -> c
    1048:1051:char consumeCharacter(char) -> a
    1055:1056:char previewChar() -> a
    1060:1060:boolean hasMore() -> b
com.google.common.net.PercentEscaper -> com.google.common.net.PercentEscaper:
    char[] PLUS_SIGN -> a
    char[] UPPER_HEX_DIGITS -> b
    boolean plusForSpace -> c
    boolean[] safeOctets -> d
    85:103:void <init>(java.lang.String,boolean) -> <init>
    111:120:boolean[] createSafeOctets(java.lang.String) -> a
    129:136:int nextEscapeIndex(java.lang.CharSequence,int,int) -> nextEscapeIndex
    145:153:java.lang.String escape(java.lang.String) -> escape
    161:230:char[] escape(int) -> escape
    57:60:void <clinit>() -> <clinit>
com.google.common.net.UrlEscapers -> com.google.common.net.UrlEscapers:
    com.google.common.escape.Escaper URL_FORM_PARAMETER_ESCAPER -> a
    com.google.common.escape.Escaper URL_PATH_SEGMENT_ESCAPER -> b
    com.google.common.escape.Escaper URL_FRAGMENT_ESCAPER -> c
    34:34:void <init>() -> <init>
    75:75:com.google.common.escape.Escaper urlFormParameterEscaper() -> urlFormParameterEscaper
    111:111:com.google.common.escape.Escaper urlPathSegmentEscaper() -> urlPathSegmentEscaper
    143:143:com.google.common.escape.Escaper urlFragmentEscaper() -> urlFragmentEscaper
    78:146:void <clinit>() -> <clinit>
com.google.common.primitives.Booleans -> com.google.common.primitives.Booleans:
    46:46:void <init>() -> <init>
    84:84:java.util.Comparator trueFirst() -> trueFirst
    97:97:java.util.Comparator falseFirst() -> falseFirst
    110:110:int hashCode(boolean) -> hashCode
    127:127:int compare(boolean,boolean) -> compare
    142:147:boolean contains(boolean[],boolean) -> contains
    162:162:int indexOf(boolean[],boolean) -> indexOf
    167:172:int indexOf(boolean[],boolean,int,int) -> c
    186:201:int indexOf(boolean[],boolean[]) -> indexOf
    213:213:int lastIndexOf(boolean[],boolean) -> lastIndexOf
    218:223:int lastIndexOf(boolean[],boolean,int,int) -> d
    235:245:boolean[] concat(boolean[][]) -> concat
    262:264:boolean[] ensureCapacity(boolean[],int,int) -> ensureCapacity
    277:288:java.lang.String join(java.lang.String,boolean[]) -> join
    305:305:java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    344:355:boolean[] toArray(java.util.Collection) -> toArray
    371:374:java.util.List asList(boolean[]) -> asList
    514:520:int countTrue(boolean[]) -> countTrue
    530:532:void reverse(boolean[]) -> reverse
    545:552:void reverse(boolean[],int,int) -> reverse
    45:45:int access$000(boolean[],boolean,int,int) -> a
    45:45:int access$100(boolean[],boolean,int,int) -> b
com.google.common.primitives.Booleans$BooleanArrayAsList -> com.google.common.primitives.a:
    boolean[] array -> a
    int start -> b
    int end -> c
    long serialVersionUID -> serialVersionUID
    385:386:void <init>(boolean[]) -> <init>
    388:392:void <init>(boolean[],int,int) -> <init>
    396:396:int size() -> size
    401:401:boolean isEmpty() -> isEmpty
    406:407:java.lang.Boolean get(int) -> a
    413:414:boolean contains(java.lang.Object) -> contains
    420:426:int indexOf(java.lang.Object) -> indexOf
    432:438:int lastIndexOf(java.lang.Object) -> lastIndexOf
    443:447:java.lang.Boolean set(int,java.lang.Boolean) -> a
    452:457:java.util.List subList(int,int) -> subList
    462:478:boolean equals(java.lang.Object) -> equals
    483:487:int hashCode() -> hashCode
    492:497:java.lang.String toString() -> toString
    501:501:boolean[] toBooleanArray() -> a
    377:377:java.lang.Object set(int,java.lang.Object) -> set
    377:377:java.lang.Object get(int) -> get
com.google.common.primitives.Booleans$BooleanComparator -> com.google.common.primitives.b:
    com.google.common.primitives.Booleans$BooleanComparator TRUE_FIRST -> a
    com.google.common.primitives.Booleans$BooleanComparator FALSE_FIRST -> b
    int trueValue -> c
    java.lang.String toString -> d
    com.google.common.primitives.Booleans$BooleanComparator[] $VALUES -> e
    49:49:com.google.common.primitives.Booleans$BooleanComparator[] values() -> values
    49:49:com.google.common.primitives.Booleans$BooleanComparator valueOf(java.lang.String) -> valueOf
    56:59:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    63:65:int compare(java.lang.Boolean,java.lang.Boolean) -> a
    70:70:java.lang.String toString() -> toString
    49:49:int compare(java.lang.Object,java.lang.Object) -> compare
    49:51:void <clinit>() -> <clinit>
com.google.common.primitives.Booleans$LexicographicalComparator -> com.google.common.primitives.c:
    com.google.common.primitives.Booleans$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.Booleans$LexicographicalComparator[] $VALUES -> b
    308:308:com.google.common.primitives.Booleans$LexicographicalComparator[] values() -> values
    308:308:com.google.common.primitives.Booleans$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    308:308:void <init>(java.lang.String,int) -> <init>
    313:320:int compare(boolean[],boolean[]) -> a
    325:325:java.lang.String toString() -> toString
    308:308:int compare(java.lang.Object,java.lang.Object) -> compare
    308:309:void <clinit>() -> <clinit>
com.google.common.primitives.Bytes -> com.google.common.primitives.Bytes:
    48:48:void <init>() -> <init>
    60:60:int hashCode(byte) -> hashCode
    71:76:boolean contains(byte[],byte) -> contains
    88:88:int indexOf(byte[],byte) -> indexOf
    93:98:int indexOf(byte[],byte,int,int) -> c
    112:127:int indexOf(byte[],byte[]) -> indexOf
    139:139:int lastIndexOf(byte[],byte) -> lastIndexOf
    144:149:int lastIndexOf(byte[],byte,int,int) -> d
    160:170:byte[] concat(byte[][]) -> concat
    187:189:byte[] ensureCapacity(byte[],int,int) -> ensureCapacity
    206:217:byte[] toArray(java.util.Collection) -> toArray
    233:236:java.util.List asList(byte[]) -> asList
    375:377:void reverse(byte[]) -> reverse
    390:397:void reverse(byte[],int,int) -> reverse
    47:47:int access$000(byte[],byte,int,int) -> a
    47:47:int access$100(byte[],byte,int,int) -> b
com.google.common.primitives.Bytes$ByteArrayAsList -> com.google.common.primitives.d:
    byte[] array -> a
    int start -> b
    int end -> c
    long serialVersionUID -> serialVersionUID
    247:248:void <init>(byte[]) -> <init>
    250:254:void <init>(byte[],int,int) -> <init>
    258:258:int size() -> size
    263:263:boolean isEmpty() -> isEmpty
    268:269:java.lang.Byte get(int) -> a
    275:275:boolean contains(java.lang.Object) -> contains
    281:287:int indexOf(java.lang.Object) -> indexOf
    293:299:int lastIndexOf(java.lang.Object) -> lastIndexOf
    304:308:java.lang.Byte set(int,java.lang.Byte) -> a
    313:318:java.util.List subList(int,int) -> subList
    323:339:boolean equals(java.lang.Object) -> equals
    344:348:int hashCode() -> hashCode
    353:358:java.lang.String toString() -> toString
    362:362:byte[] toByteArray() -> a
    239:239:java.lang.Object set(int,java.lang.Object) -> set
    239:239:java.lang.Object get(int) -> get
com.google.common.primitives.Chars -> com.google.common.primitives.Chars:
    int BYTES -> BYTES
    50:50:void <init>() -> <init>
    69:69:int hashCode(char) -> hashCode
    81:83:char checkedCast(long) -> checkedCast
    95:101:char saturatedCast(long) -> saturatedCast
    117:117:int compare(char,char) -> compare
    128:133:boolean contains(char[],char) -> contains
    145:145:int indexOf(char[],char) -> indexOf
    150:155:int indexOf(char[],char,int,int) -> c
    169:184:int indexOf(char[],char[]) -> indexOf
    196:196:int lastIndexOf(char[],char) -> lastIndexOf
    201:206:int lastIndexOf(char[],char,int,int) -> d
    218:225:char min(char[]) -> min
    237:244:char max(char[]) -> max
    262:263:char constrainToRange(char,char,char) -> constrainToRange
    274:284:char[] concat(char[][]) -> concat
    298:298:byte[] toByteArray(char) -> toByteArray
    313:314:char fromByteArray(byte[]) -> fromByteArray
    325:325:char fromBytes(byte,byte) -> fromBytes
    342:344:char[] ensureCapacity(char[],int,int) -> ensureCapacity
    356:367:java.lang.String join(java.lang.String,char[]) -> join
    385:385:java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    422:433:char[] toArray(java.util.Collection) -> toArray
    442:444:void sortDescending(char[]) -> sortDescending
    453:457:void sortDescending(char[],int,int) -> sortDescending
    466:468:void reverse(char[]) -> reverse
    481:488:void reverse(char[],int,int) -> reverse
    503:506:java.util.List asList(char[]) -> asList
    49:49:int access$000(char[],char,int,int) -> a
    49:49:int access$100(char[],char,int,int) -> b
com.google.common.primitives.Chars$CharArrayAsList -> com.google.common.primitives.e:
    char[] array -> a
    int start -> b
    int end -> c
    long serialVersionUID -> serialVersionUID
    517:518:void <init>(char[]) -> <init>
    520:524:void <init>(char[],int,int) -> <init>
    528:528:int size() -> size
    533:533:boolean isEmpty() -> isEmpty
    538:539:java.lang.Character get(int) -> a
    545:546:boolean contains(java.lang.Object) -> contains
    552:558:int indexOf(java.lang.Object) -> indexOf
    564:570:int lastIndexOf(java.lang.Object) -> lastIndexOf
    575:579:java.lang.Character set(int,java.lang.Character) -> a
    584:589:java.util.List subList(int,int) -> subList
    594:610:boolean equals(java.lang.Object) -> equals
    615:619:int hashCode() -> hashCode
    624:629:java.lang.String toString() -> toString
    633:633:char[] toCharArray() -> a
    509:509:java.lang.Object set(int,java.lang.Object) -> set
    509:509:java.lang.Object get(int) -> get
com.google.common.primitives.Chars$LexicographicalComparator -> com.google.common.primitives.f:
    com.google.common.primitives.Chars$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.Chars$LexicographicalComparator[] $VALUES -> b
    388:388:com.google.common.primitives.Chars$LexicographicalComparator[] values() -> values
    388:388:com.google.common.primitives.Chars$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    388:388:void <init>(java.lang.String,int) -> <init>
    393:400:int compare(char[],char[]) -> a
    405:405:java.lang.String toString() -> toString
    388:388:int compare(java.lang.Object,java.lang.Object) -> compare
    388:389:void <clinit>() -> <clinit>
com.google.common.primitives.Doubles -> com.google.common.primitives.Doubles:
    int BYTES -> BYTES
    java.util.regex.Pattern FLOATING_POINT_PATTERN -> a
    52:52:void <init>() -> <init>
    73:73:int hashCode(double) -> hashCode
    94:94:int compare(double,double) -> compare
    106:106:boolean isFinite(double) -> isFinite
    118:123:boolean contains(double[],double) -> contains
    136:136:int indexOf(double[],double) -> indexOf
    141:146:int indexOf(double[],double,int,int) -> c
    162:177:int indexOf(double[],double[]) -> indexOf
    190:190:int lastIndexOf(double[],double) -> lastIndexOf
    195:200:int lastIndexOf(double[],double,int,int) -> d
    213:218:double min(double[]) -> min
    231:236:double max(double[]) -> max
    254:255:double constrainToRange(double,double,double) -> constrainToRange
    267:277:double[] concat(double[][]) -> concat
    314:314:com.google.common.base.Converter stringConverter() -> stringConverter
    331:333:double[] ensureCapacity(double[],int,int) -> ensureCapacity
    349:360:java.lang.String join(java.lang.String,double[]) -> join
    377:377:java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    410:412:void sortDescending(double[]) -> sortDescending
    424:428:void sortDescending(double[],int,int) -> sortDescending
    437:439:void reverse(double[]) -> reverse
    452:459:void reverse(double[],int,int) -> reverse
    475:486:double[] toArray(java.util.Collection) -> toArray
    508:511:java.util.List asList(double[]) -> asList
    668:680:java.util.regex.Pattern fpPattern() -> a
    703:713:java.lang.Double tryParse(java.lang.String) -> tryParse
    51:51:int access$000(double[],double,int,int) -> a
    51:51:int access$100(double[],double,int,int) -> b
    657:657:void <clinit>() -> <clinit>
com.google.common.primitives.Doubles$DoubleArrayAsList -> com.google.common.primitives.g:
    double[] array -> a
    int start -> b
    int end -> c
    long serialVersionUID -> serialVersionUID
    522:523:void <init>(double[]) -> <init>
    525:529:void <init>(double[],int,int) -> <init>
    533:533:int size() -> size
    538:538:boolean isEmpty() -> isEmpty
    543:544:java.lang.Double get(int) -> a
    549:549:java.util.Spliterator$OfDouble spliterator() -> b
    555:556:boolean contains(java.lang.Object) -> contains
    562:568:int indexOf(java.lang.Object) -> indexOf
    574:580:int lastIndexOf(java.lang.Object) -> lastIndexOf
    585:589:java.lang.Double set(int,java.lang.Double) -> a
    594:599:java.util.List subList(int,int) -> subList
    604:620:boolean equals(java.lang.Object) -> equals
    625:629:int hashCode() -> hashCode
    634:639:java.lang.String toString() -> toString
    643:643:double[] toDoubleArray() -> a
    514:514:java.lang.Object set(int,java.lang.Object) -> set
    514:514:java.lang.Object get(int) -> get
    514:514:java.util.Spliterator spliterator() -> spliterator
com.google.common.primitives.Doubles$DoubleConverter -> com.google.common.primitives.h:
    com.google.common.primitives.Doubles$DoubleConverter INSTANCE -> a
    long serialVersionUID -> serialVersionUID
    280:280:void <init>() -> <init>
    286:286:java.lang.Double doForward(java.lang.String) -> a
    291:291:java.lang.String doBackward(java.lang.Double) -> a
    296:296:java.lang.String toString() -> toString
    300:300:java.lang.Object readResolve() -> readResolve
    280:280:java.lang.Object doBackward(java.lang.Object) -> doBackward
    280:280:java.lang.Object doForward(java.lang.Object) -> doForward
    282:282:void <clinit>() -> <clinit>
com.google.common.primitives.Doubles$LexicographicalComparator -> com.google.common.primitives.i:
    com.google.common.primitives.Doubles$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.Doubles$LexicographicalComparator[] $VALUES -> b
    380:380:com.google.common.primitives.Doubles$LexicographicalComparator[] values() -> values
    380:380:com.google.common.primitives.Doubles$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    380:380:void <init>(java.lang.String,int) -> <init>
    385:392:int compare(double[],double[]) -> a
    397:397:java.lang.String toString() -> toString
    380:380:int compare(java.lang.Object,java.lang.Object) -> compare
    380:381:void <clinit>() -> <clinit>
com.google.common.primitives.Floats -> com.google.common.primitives.Floats:
    int BYTES -> BYTES
    50:50:void <init>() -> <init>
    72:72:int hashCode(float) -> hashCode
    89:89:int compare(float,float) -> compare
    101:101:boolean isFinite(float) -> isFinite
    113:118:boolean contains(float[],float) -> contains
    131:131:int indexOf(float[],float) -> indexOf
    136:141:int indexOf(float[],float,int,int) -> c
    157:172:int indexOf(float[],float[]) -> indexOf
    185:185:int lastIndexOf(float[],float) -> lastIndexOf
    190:195:int lastIndexOf(float[],float,int,int) -> d
    208:213:float min(float[]) -> min
    226:231:float max(float[]) -> max
    249:250:float constrainToRange(float,float,float) -> constrainToRange
    262:272:float[] concat(float[][]) -> concat
    309:309:com.google.common.base.Converter stringConverter() -> stringConverter
    326:328:float[] ensureCapacity(float[],int,int) -> ensureCapacity
    344:355:java.lang.String join(java.lang.String,float[]) -> join
    372:372:java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    405:407:void sortDescending(float[]) -> sortDescending
    419:423:void sortDescending(float[],int,int) -> sortDescending
    432:434:void reverse(float[]) -> reverse
    447:454:void reverse(float[],int,int) -> reverse
    470:481:float[] toArray(java.util.Collection) -> toArray
    500:503:java.util.List asList(float[]) -> asList
    655:665:java.lang.Float tryParse(java.lang.String) -> tryParse
    49:49:int access$000(float[],float,int,int) -> a
    49:49:int access$100(float[],float,int,int) -> b
com.google.common.primitives.Floats$FloatArrayAsList -> com.google.common.primitives.j:
    float[] array -> a
    int start -> b
    int end -> c
    long serialVersionUID -> serialVersionUID
    514:515:void <init>(float[]) -> <init>
    517:521:void <init>(float[],int,int) -> <init>
    525:525:int size() -> size
    530:530:boolean isEmpty() -> isEmpty
    535:536:java.lang.Float get(int) -> a
    542:542:boolean contains(java.lang.Object) -> contains
    548:554:int indexOf(java.lang.Object) -> indexOf
    560:566:int lastIndexOf(java.lang.Object) -> lastIndexOf
    571:575:java.lang.Float set(int,java.lang.Float) -> a
    580:585:java.util.List subList(int,int) -> subList
    590:606:boolean equals(java.lang.Object) -> equals
    611:615:int hashCode() -> hashCode
    620:625:java.lang.String toString() -> toString
    629:629:float[] toFloatArray() -> a
    506:506:java.lang.Object set(int,java.lang.Object) -> set
    506:506:java.lang.Object get(int) -> get
com.google.common.primitives.Floats$FloatConverter -> com.google.common.primitives.k:
    com.google.common.primitives.Floats$FloatConverter INSTANCE -> a
    long serialVersionUID -> serialVersionUID
    275:275:void <init>() -> <init>
    281:281:java.lang.Float doForward(java.lang.String) -> a
    286:286:java.lang.String doBackward(java.lang.Float) -> a
    291:291:java.lang.String toString() -> toString
    295:295:java.lang.Object readResolve() -> readResolve
    275:275:java.lang.Object doBackward(java.lang.Object) -> doBackward
    275:275:java.lang.Object doForward(java.lang.Object) -> doForward
    277:277:void <clinit>() -> <clinit>
com.google.common.primitives.Floats$LexicographicalComparator -> com.google.common.primitives.l:
    com.google.common.primitives.Floats$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.Floats$LexicographicalComparator[] $VALUES -> b
    375:375:com.google.common.primitives.Floats$LexicographicalComparator[] values() -> values
    375:375:com.google.common.primitives.Floats$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    375:375:void <init>(java.lang.String,int) -> <init>
    380:387:int compare(float[],float[]) -> a
    392:392:java.lang.String toString() -> toString
    375:375:int compare(java.lang.Object,java.lang.Object) -> compare
    375:376:void <clinit>() -> <clinit>
com.google.common.primitives.ImmutableDoubleArray -> com.google.common.primitives.ImmutableDoubleArray:
    com.google.common.primitives.ImmutableDoubleArray EMPTY -> a
    double[] array -> b
    int start -> c
    int end -> d
    96:96:com.google.common.primitives.ImmutableDoubleArray of() -> of
    101:101:com.google.common.primitives.ImmutableDoubleArray of(double) -> of
    106:106:com.google.common.primitives.ImmutableDoubleArray of(double,double) -> of
    111:111:com.google.common.primitives.ImmutableDoubleArray of(double,double,double) -> of
    116:116:com.google.common.primitives.ImmutableDoubleArray of(double,double,double,double) -> of
    121:121:com.google.common.primitives.ImmutableDoubleArray of(double,double,double,double,double) -> of
    127:127:com.google.common.primitives.ImmutableDoubleArray of(double,double,double,double,double,double) -> of
    140:145:com.google.common.primitives.ImmutableDoubleArray of(double,double[]) -> of
    150:152:com.google.common.primitives.ImmutableDoubleArray copyOf(double[]) -> copyOf
    157:157:com.google.common.primitives.ImmutableDoubleArray copyOf(java.util.Collection) -> copyOf
    168:171:com.google.common.primitives.ImmutableDoubleArray copyOf(java.lang.Iterable) -> copyOf
    177:178:com.google.common.primitives.ImmutableDoubleArray copyOf(java.util.stream.DoubleStream) -> copyOf
    192:193:com.google.common.primitives.ImmutableDoubleArray$Builder builder(int) -> builder
    205:205:com.google.common.primitives.ImmutableDoubleArray$Builder builder() -> builder
    350:351:void <init>(double[]) -> <init>
    353:357:void <init>(double[],int,int) -> <init>
    361:361:int length() -> length
    366:366:boolean isEmpty() -> isEmpty
    376:377:double get(int) -> get
    386:391:int indexOf(double) -> indexOf
    400:405:int lastIndexOf(double) -> lastIndexOf
    413:413:boolean contains(double) -> contains
    418:422:void forEach(java.util.function.DoubleConsumer) -> forEach
    426:426:java.util.stream.DoubleStream stream() -> stream
    431:431:double[] toArray() -> toArray
    442:443:com.google.common.primitives.ImmutableDoubleArray subArray(int,int) -> subArray
    449:449:java.util.Spliterator$OfDouble spliterator() -> b
    465:465:java.util.List asList() -> asList
    555:570:boolean equals(java.lang.Object) -> equals
    575:575:boolean areEqual(double,double) -> b
    581:586:int hashCode() -> hashCode
    595:605:java.lang.String toString() -> toString
    615:615:com.google.common.primitives.ImmutableDoubleArray trimmed() -> trimmed
    619:619:boolean isPartialView() -> c
    623:623:java.lang.Object writeReplace() -> writeReplace
    627:627:java.lang.Object readResolve() -> readResolve
    91:91:double[] access$000(com.google.common.primitives.ImmutableDoubleArray) -> a
    91:91:int access$100(com.google.common.primitives.ImmutableDoubleArray) -> b
    91:91:com.google.common.primitives.ImmutableDoubleArray access$200() -> a
    91:91:void <init>(double[],int,int,byte) -> <init>
    91:91:java.util.Spliterator$OfDouble access$500(com.google.common.primitives.ImmutableDoubleArray) -> c
    91:91:boolean access$600(double,double) -> a
    92:92:void <clinit>() -> <clinit>
com.google.common.primitives.ImmutableDoubleArray$1 -> com.google.common.primitives.m:
    java.lang.String rawValue -> a
    int radix -> b
    1025:1028:void com.google.common.primitives.ParseRequest.<init>(java.lang.String,int):25:28 -> <init>
    1031:1053:com.google.common.primitives.ParseRequest com.google.common.primitives.ParseRequest.fromString(java.lang.String):31:53 -> a
com.google.common.primitives.ImmutableDoubleArray$AsList -> com.google.common.primitives.n:
    com.google.common.primitives.ImmutableDoubleArray parent -> a
    471:473:void <init>(com.google.common.primitives.ImmutableDoubleArray) -> <init>
    479:479:int size() -> size
    484:484:java.lang.Double get(int) -> a
    489:489:boolean contains(java.lang.Object) -> contains
    494:494:int indexOf(java.lang.Object) -> indexOf
    499:499:int lastIndexOf(java.lang.Object) -> lastIndexOf
    504:504:java.util.List subList(int,int) -> subList
    510:510:java.util.Spliterator spliterator() -> spliterator
    515:534:boolean equals(java.lang.Object) -> equals
    540:540:int hashCode() -> hashCode
    545:545:java.lang.String toString() -> toString
    468:468:java.lang.Object get(int) -> get
    468:468:void <init>(com.google.common.primitives.ImmutableDoubleArray,byte) -> <init>
com.google.common.primitives.ImmutableDoubleArray$Builder -> com.google.common.primitives.ImmutableDoubleArray$Builder:
    double[] array -> a
    int count -> b
    215:219:void <init>(int) -> <init>
    226:229:com.google.common.primitives.ImmutableDoubleArray$Builder add(double) -> add
    237:240:com.google.common.primitives.ImmutableDoubleArray$Builder addAll(double[]) -> addAll
    248:254:com.google.common.primitives.ImmutableDoubleArray$Builder addAll(java.lang.Iterable) -> addAll
    262:266:com.google.common.primitives.ImmutableDoubleArray$Builder addAll(java.util.Collection) -> addAll
    274:280:com.google.common.primitives.ImmutableDoubleArray$Builder addAll(java.util.stream.DoubleStream) -> addAll
    288:291:com.google.common.primitives.ImmutableDoubleArray$Builder addAll(com.google.common.primitives.ImmutableDoubleArray) -> addAll
    295:301:void ensureRoomFor(int) -> a
    305:316:int expandedCapacity(int,int) -> a
    329:329:com.google.common.primitives.ImmutableDoubleArray build() -> build
com.google.common.primitives.ImmutableIntArray -> com.google.common.primitives.ImmutableIntArray:
    com.google.common.primitives.ImmutableIntArray EMPTY -> a
    int[] array -> b
    int start -> c
    int end -> d
    96:96:com.google.common.primitives.ImmutableIntArray of() -> of
    101:101:com.google.common.primitives.ImmutableIntArray of(int) -> of
    106:106:com.google.common.primitives.ImmutableIntArray of(int,int) -> of
    111:111:com.google.common.primitives.ImmutableIntArray of(int,int,int) -> of
    116:116:com.google.common.primitives.ImmutableIntArray of(int,int,int,int) -> of
    121:121:com.google.common.primitives.ImmutableIntArray of(int,int,int,int,int) -> of
    126:126:com.google.common.primitives.ImmutableIntArray of(int,int,int,int,int,int) -> of
    139:144:com.google.common.primitives.ImmutableIntArray of(int,int[]) -> of
    149:149:com.google.common.primitives.ImmutableIntArray copyOf(int[]) -> copyOf
    154:154:com.google.common.primitives.ImmutableIntArray copyOf(java.util.Collection) -> copyOf
    165:168:com.google.common.primitives.ImmutableIntArray copyOf(java.lang.Iterable) -> copyOf
    174:175:com.google.common.primitives.ImmutableIntArray copyOf(java.util.stream.IntStream) -> copyOf
    189:190:com.google.common.primitives.ImmutableIntArray$Builder builder(int) -> builder
    202:202:com.google.common.primitives.ImmutableIntArray$Builder builder() -> builder
    347:348:void <init>(int[]) -> <init>
    350:354:void <init>(int[],int,int) -> <init>
    358:358:int length() -> length
    363:363:boolean isEmpty() -> isEmpty
    373:374:int get(int) -> get
    382:387:int indexOf(int) -> indexOf
    395:400:int lastIndexOf(int) -> lastIndexOf
    408:408:boolean contains(int) -> contains
    413:417:void forEach(java.util.function.IntConsumer) -> forEach
    421:421:java.util.stream.IntStream stream() -> stream
    426:426:int[] toArray() -> toArray
    437:438:com.google.common.primitives.ImmutableIntArray subArray(int,int) -> subArray
    444:444:java.util.Spliterator$OfInt spliterator() -> b
    460:460:java.util.List asList() -> asList
    550:565:boolean equals(java.lang.Object) -> equals
    571:576:int hashCode() -> hashCode
    585:595:java.lang.String toString() -> toString
    605:605:com.google.common.primitives.ImmutableIntArray trimmed() -> trimmed
    609:609:boolean isPartialView() -> c
    613:613:java.lang.Object writeReplace() -> writeReplace
    617:617:java.lang.Object readResolve() -> readResolve
    91:91:int[] access$000(com.google.common.primitives.ImmutableIntArray) -> a
    91:91:int access$100(com.google.common.primitives.ImmutableIntArray) -> b
    91:91:com.google.common.primitives.ImmutableIntArray access$200() -> a
    91:91:void <init>(int[],int,int,byte) -> <init>
    91:91:java.util.Spliterator$OfInt access$500(com.google.common.primitives.ImmutableIntArray) -> c
    92:92:void <clinit>() -> <clinit>
com.google.common.primitives.ImmutableIntArray$AsList -> com.google.common.primitives.o:
    com.google.common.primitives.ImmutableIntArray parent -> a
    466:468:void <init>(com.google.common.primitives.ImmutableIntArray) -> <init>
    474:474:int size() -> size
    479:479:java.lang.Integer get(int) -> a
    484:484:boolean contains(java.lang.Object) -> contains
    489:489:int indexOf(java.lang.Object) -> indexOf
    494:494:int lastIndexOf(java.lang.Object) -> lastIndexOf
    499:499:java.util.List subList(int,int) -> subList
    505:505:java.util.Spliterator spliterator() -> spliterator
    510:529:boolean equals(java.lang.Object) -> equals
    535:535:int hashCode() -> hashCode
    540:540:java.lang.String toString() -> toString
    463:463:java.lang.Object get(int) -> get
    463:463:void <init>(com.google.common.primitives.ImmutableIntArray,byte) -> <init>
com.google.common.primitives.ImmutableIntArray$Builder -> com.google.common.primitives.ImmutableIntArray$Builder:
    int[] array -> a
    int count -> b
    212:216:void <init>(int) -> <init>
    223:226:com.google.common.primitives.ImmutableIntArray$Builder add(int) -> add
    234:237:com.google.common.primitives.ImmutableIntArray$Builder addAll(int[]) -> addAll
    245:251:com.google.common.primitives.ImmutableIntArray$Builder addAll(java.lang.Iterable) -> addAll
    259:263:com.google.common.primitives.ImmutableIntArray$Builder addAll(java.util.Collection) -> addAll
    271:277:com.google.common.primitives.ImmutableIntArray$Builder addAll(java.util.stream.IntStream) -> addAll
    285:288:com.google.common.primitives.ImmutableIntArray$Builder addAll(com.google.common.primitives.ImmutableIntArray) -> addAll
    292:298:void ensureRoomFor(int) -> a
    302:313:int expandedCapacity(int,int) -> a
    326:326:com.google.common.primitives.ImmutableIntArray build() -> build
com.google.common.primitives.ImmutableLongArray -> com.google.common.primitives.ImmutableLongArray:
    com.google.common.primitives.ImmutableLongArray EMPTY -> a
    long[] array -> b
    int start -> c
    int end -> d
    96:96:com.google.common.primitives.ImmutableLongArray of() -> of
    101:101:com.google.common.primitives.ImmutableLongArray of(long) -> of
    106:106:com.google.common.primitives.ImmutableLongArray of(long,long) -> of
    111:111:com.google.common.primitives.ImmutableLongArray of(long,long,long) -> of
    116:116:com.google.common.primitives.ImmutableLongArray of(long,long,long,long) -> of
    121:121:com.google.common.primitives.ImmutableLongArray of(long,long,long,long,long) -> of
    126:126:com.google.common.primitives.ImmutableLongArray of(long,long,long,long,long,long) -> of
    139:144:com.google.common.primitives.ImmutableLongArray of(long,long[]) -> of
    149:151:com.google.common.primitives.ImmutableLongArray copyOf(long[]) -> copyOf
    156:156:com.google.common.primitives.ImmutableLongArray copyOf(java.util.Collection) -> copyOf
    167:170:com.google.common.primitives.ImmutableLongArray copyOf(java.lang.Iterable) -> copyOf
    176:177:com.google.common.primitives.ImmutableLongArray copyOf(java.util.stream.LongStream) -> copyOf
    191:192:com.google.common.primitives.ImmutableLongArray$Builder builder(int) -> builder
    204:204:com.google.common.primitives.ImmutableLongArray$Builder builder() -> builder
    349:350:void <init>(long[]) -> <init>
    352:356:void <init>(long[],int,int) -> <init>
    360:360:int length() -> length
    365:365:boolean isEmpty() -> isEmpty
    375:376:long get(int) -> get
    384:389:int indexOf(long) -> indexOf
    397:402:int lastIndexOf(long) -> lastIndexOf
    410:410:boolean contains(long) -> contains
    415:419:void forEach(java.util.function.LongConsumer) -> forEach
    423:423:java.util.stream.LongStream stream() -> stream
    428:428:long[] toArray() -> toArray
    439:440:com.google.common.primitives.ImmutableLongArray subArray(int,int) -> subArray
    446:446:java.util.Spliterator$OfLong spliterator() -> b
    462:462:java.util.List asList() -> asList
    552:567:boolean equals(java.lang.Object) -> equals
    573:578:int hashCode() -> hashCode
    587:597:java.lang.String toString() -> toString
    607:607:com.google.common.primitives.ImmutableLongArray trimmed() -> trimmed
    611:611:boolean isPartialView() -> c
    615:615:java.lang.Object writeReplace() -> writeReplace
    619:619:java.lang.Object readResolve() -> readResolve
    91:91:long[] access$000(com.google.common.primitives.ImmutableLongArray) -> a
    91:91:int access$100(com.google.common.primitives.ImmutableLongArray) -> b
    91:91:com.google.common.primitives.ImmutableLongArray access$200() -> a
    91:91:void <init>(long[],int,int,byte) -> <init>
    91:91:java.util.Spliterator$OfLong access$500(com.google.common.primitives.ImmutableLongArray) -> c
    92:92:void <clinit>() -> <clinit>
com.google.common.primitives.ImmutableLongArray$AsList -> com.google.common.primitives.p:
    com.google.common.primitives.ImmutableLongArray parent -> a
    468:470:void <init>(com.google.common.primitives.ImmutableLongArray) -> <init>
    476:476:int size() -> size
    481:481:java.lang.Long get(int) -> a
    486:486:boolean contains(java.lang.Object) -> contains
    491:491:int indexOf(java.lang.Object) -> indexOf
    496:496:int lastIndexOf(java.lang.Object) -> lastIndexOf
    501:501:java.util.List subList(int,int) -> subList
    507:507:java.util.Spliterator spliterator() -> spliterator
    512:531:boolean equals(java.lang.Object) -> equals
    537:537:int hashCode() -> hashCode
    542:542:java.lang.String toString() -> toString
    465:465:java.lang.Object get(int) -> get
    465:465:void <init>(com.google.common.primitives.ImmutableLongArray,byte) -> <init>
com.google.common.primitives.ImmutableLongArray$Builder -> com.google.common.primitives.ImmutableLongArray$Builder:
    long[] array -> a
    int count -> b
    214:218:void <init>(int) -> <init>
    225:228:com.google.common.primitives.ImmutableLongArray$Builder add(long) -> add
    236:239:com.google.common.primitives.ImmutableLongArray$Builder addAll(long[]) -> addAll
    247:253:com.google.common.primitives.ImmutableLongArray$Builder addAll(java.lang.Iterable) -> addAll
    261:265:com.google.common.primitives.ImmutableLongArray$Builder addAll(java.util.Collection) -> addAll
    273:279:com.google.common.primitives.ImmutableLongArray$Builder addAll(java.util.stream.LongStream) -> addAll
    287:290:com.google.common.primitives.ImmutableLongArray$Builder addAll(com.google.common.primitives.ImmutableLongArray) -> addAll
    294:300:void ensureRoomFor(int) -> a
    304:315:int expandedCapacity(int,int) -> a
    328:328:com.google.common.primitives.ImmutableLongArray build() -> build
com.google.common.primitives.Ints -> com.google.common.primitives.Ints:
    int BYTES -> BYTES
    int MAX_POWER_OF_TWO -> MAX_POWER_OF_TWO
    49:49:void <init>() -> <init>
    75:75:int hashCode(int) -> hashCode
    87:89:int checkedCast(long) -> checkedCast
    101:107:int saturatedCast(long) -> saturatedCast
    123:123:int compare(int,int) -> compare
    134:139:boolean contains(int[],int) -> contains
    151:151:int indexOf(int[],int) -> indexOf
    156:161:int indexOf(int[],int,int,int) -> c
    175:190:int indexOf(int[],int[]) -> indexOf
    202:202:int lastIndexOf(int[],int) -> lastIndexOf
    207:212:int lastIndexOf(int[],int,int,int) -> d
    224:231:int min(int[]) -> min
    243:250:int max(int[]) -> max
    268:269:int constrainToRange(int,int,int) -> constrainToRange
    280:290:int[] concat(int[][]) -> concat
    303:303:byte[] toByteArray(int) -> toByteArray
    320:321:int fromByteArray(byte[]) -> fromByteArray
    331:331:int fromBytes(byte,byte,byte,byte) -> fromBytes
    373:373:com.google.common.base.Converter stringConverter() -> stringConverter
    390:392:int[] ensureCapacity(int[],int,int) -> ensureCapacity
    404:415:java.lang.String join(java.lang.String,int[]) -> join
    431:431:java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    461:463:void sortDescending(int[]) -> sortDescending
    472:476:void sortDescending(int[],int,int) -> sortDescending
    485:487:void reverse(int[]) -> reverse
    500:507:void reverse(int[],int,int) -> reverse
    523:534:int[] toArray(java.util.Collection) -> toArray
    553:556:java.util.List asList(int[]) -> asList
    712:712:java.lang.Integer tryParse(java.lang.String) -> tryParse
    737:741:java.lang.Integer tryParse(java.lang.String,int) -> tryParse
    48:48:int access$000(int[],int,int,int) -> a
    48:48:int access$100(int[],int,int,int) -> b
com.google.common.primitives.Ints$IntArrayAsList -> com.google.common.primitives.q:
    int[] array -> a
    int start -> b
    int end -> c
    long serialVersionUID -> serialVersionUID
    567:568:void <init>(int[]) -> <init>
    570:574:void <init>(int[],int,int) -> <init>
    578:578:int size() -> size
    583:583:boolean isEmpty() -> isEmpty
    588:589:java.lang.Integer get(int) -> a
    594:594:java.util.Spliterator$OfInt spliterator() -> b
    600:600:boolean contains(java.lang.Object) -> contains
    606:612:int indexOf(java.lang.Object) -> indexOf
    618:624:int lastIndexOf(java.lang.Object) -> lastIndexOf
    629:633:java.lang.Integer set(int,java.lang.Integer) -> a
    638:643:java.util.List subList(int,int) -> subList
    648:664:boolean equals(java.lang.Object) -> equals
    669:673:int hashCode() -> hashCode
    678:683:java.lang.String toString() -> toString
    687:687:int[] toIntArray() -> a
    559:559:java.lang.Object set(int,java.lang.Object) -> set
    559:559:java.lang.Object get(int) -> get
    559:559:java.util.Spliterator spliterator() -> spliterator
com.google.common.primitives.Ints$IntConverter -> com.google.common.primitives.r:
    com.google.common.primitives.Ints$IntConverter INSTANCE -> a
    long serialVersionUID -> serialVersionUID
    334:334:void <init>() -> <init>
    340:340:java.lang.Integer doForward(java.lang.String) -> a
    345:345:java.lang.String doBackward(java.lang.Integer) -> a
    350:350:java.lang.String toString() -> toString
    354:354:java.lang.Object readResolve() -> readResolve
    334:334:java.lang.Object doBackward(java.lang.Object) -> doBackward
    334:334:java.lang.Object doForward(java.lang.Object) -> doForward
    336:336:void <clinit>() -> <clinit>
com.google.common.primitives.Ints$LexicographicalComparator -> com.google.common.primitives.s:
    com.google.common.primitives.Ints$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.Ints$LexicographicalComparator[] $VALUES -> b
    434:434:com.google.common.primitives.Ints$LexicographicalComparator[] values() -> values
    434:434:com.google.common.primitives.Ints$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    434:434:void <init>(java.lang.String,int) -> <init>
    439:446:int compare(int[],int[]) -> a
    451:451:java.lang.String toString() -> toString
    434:434:int compare(java.lang.Object,java.lang.Object) -> compare
    434:435:void <clinit>() -> <clinit>
com.google.common.primitives.Longs -> com.google.common.primitives.Longs:
    int BYTES -> BYTES
    long MAX_POWER_OF_TWO -> MAX_POWER_OF_TWO
    49:49:void <init>() -> <init>
    79:79:int hashCode(long) -> hashCode
    95:95:int compare(long,long) -> compare
    106:111:boolean contains(long[],long) -> contains
    123:123:int indexOf(long[],long) -> indexOf
    128:133:int indexOf(long[],long,int,int) -> c
    147:162:int indexOf(long[],long[]) -> indexOf
    174:174:int lastIndexOf(long[],long) -> lastIndexOf
    179:184:int lastIndexOf(long[],long,int,int) -> d
    196:203:long min(long[]) -> min
    215:222:long max(long[]) -> max
    240:241:long constrainToRange(long,long,long) -> constrainToRange
    252:262:long[] concat(long[][]) -> concat
    278:283:byte[] toByteArray(long) -> toByteArray
    298:299:long fromByteArray(byte[]) -> fromByteArray
    311:311:long fromBytes(byte,byte,byte,byte,byte,byte,byte,byte) -> fromBytes
    367:367:java.lang.Long tryParse(java.lang.String) -> tryParse
    392:429:java.lang.Long tryParse(java.lang.String,int) -> tryParse
    471:471:com.google.common.base.Converter stringConverter() -> stringConverter
    488:490:long[] ensureCapacity(long[],int,int) -> ensureCapacity
    502:513:java.lang.String join(java.lang.String,long[]) -> join
    530:530:java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    560:562:void sortDescending(long[]) -> sortDescending
    571:575:void sortDescending(long[],int,int) -> sortDescending
    584:586:void reverse(long[]) -> reverse
    599:606:void reverse(long[],int,int) -> reverse
    622:633:long[] toArray(java.util.Collection) -> toArray
    652:655:java.util.List asList(long[]) -> asList
    48:48:int access$000(long[],long,int,int) -> a
    48:48:int access$100(long[],long,int,int) -> b
com.google.common.primitives.Longs$AsciiDigits -> com.google.common.primitives.t:
    byte[] asciiDigits -> a
    344:344:int digit(char) -> a
    331:341:void <clinit>() -> <clinit>
com.google.common.primitives.Longs$LexicographicalComparator -> com.google.common.primitives.u:
    com.google.common.primitives.Longs$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.Longs$LexicographicalComparator[] $VALUES -> b
    533:533:com.google.common.primitives.Longs$LexicographicalComparator[] values() -> values
    533:533:com.google.common.primitives.Longs$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    533:533:void <init>(java.lang.String,int) -> <init>
    538:545:int compare(long[],long[]) -> a
    550:550:java.lang.String toString() -> toString
    533:533:int compare(java.lang.Object,java.lang.Object) -> compare
    533:534:void <clinit>() -> <clinit>
com.google.common.primitives.Longs$LongArrayAsList -> com.google.common.primitives.v:
    long[] array -> a
    int start -> b
    int end -> c
    long serialVersionUID -> serialVersionUID
    666:667:void <init>(long[]) -> <init>
    669:673:void <init>(long[],int,int) -> <init>
    677:677:int size() -> size
    682:682:boolean isEmpty() -> isEmpty
    687:688:java.lang.Long get(int) -> a
    693:693:java.util.Spliterator$OfLong spliterator() -> b
    699:699:boolean contains(java.lang.Object) -> contains
    705:711:int indexOf(java.lang.Object) -> indexOf
    717:723:int lastIndexOf(java.lang.Object) -> lastIndexOf
    728:732:java.lang.Long set(int,java.lang.Long) -> a
    737:742:java.util.List subList(int,int) -> subList
    747:763:boolean equals(java.lang.Object) -> equals
    768:772:int hashCode() -> hashCode
    777:782:java.lang.String toString() -> toString
    786:786:long[] toLongArray() -> a
    658:658:java.lang.Object set(int,java.lang.Object) -> set
    658:658:java.lang.Object get(int) -> get
    658:658:java.util.Spliterator spliterator() -> spliterator
com.google.common.primitives.Longs$LongConverter -> com.google.common.primitives.w:
    com.google.common.primitives.Longs$LongConverter INSTANCE -> a
    long serialVersionUID -> serialVersionUID
    433:433:void <init>() -> <init>
    438:438:java.lang.Long doForward(java.lang.String) -> a
    443:443:java.lang.String doBackward(java.lang.Long) -> a
    448:448:java.lang.String toString() -> toString
    452:452:java.lang.Object readResolve() -> readResolve
    433:433:java.lang.Object doBackward(java.lang.Object) -> doBackward
    433:433:java.lang.Object doForward(java.lang.Object) -> doForward
    434:434:void <clinit>() -> <clinit>
com.google.common.primitives.Primitives -> com.google.common.primitives.Primitives:
    java.util.Map PRIMITIVE_TO_WRAPPER_TYPE -> a
    java.util.Map WRAPPER_TO_PRIMITIVE_TYPE -> b
    34:34:void <init>() -> <init>
    67:69:void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class) -> a
    79:79:java.util.Set allPrimitiveTypes() -> allPrimitiveTypes
    88:88:java.util.Set allWrapperTypes() -> allWrapperTypes
    98:98:boolean isWrapperType(java.lang.Class) -> isWrapperType
    112:117:java.lang.Class wrap(java.lang.Class) -> wrap
    131:136:java.lang.Class unwrap(java.lang.Class) -> unwrap
    45:60:void <clinit>() -> <clinit>
com.google.common.primitives.Shorts -> com.google.common.primitives.Shorts:
    int BYTES -> BYTES
    short MAX_POWER_OF_TWO -> MAX_POWER_OF_TWO
    48:48:void <init>() -> <init>
    74:74:int hashCode(short) -> hashCode
    86:88:short checkedCast(long) -> checkedCast
    99:105:short saturatedCast(long) -> saturatedCast
    121:121:int compare(short,short) -> compare
    132:137:boolean contains(short[],short) -> contains
    149:149:int indexOf(short[],short) -> indexOf
    154:159:int indexOf(short[],short,int,int) -> c
    173:188:int indexOf(short[],short[]) -> indexOf
    200:200:int lastIndexOf(short[],short) -> lastIndexOf
    205:210:int lastIndexOf(short[],short,int,int) -> d
    222:229:short min(short[]) -> min
    241:248:short max(short[]) -> max
    266:267:short constrainToRange(short,short,short) -> constrainToRange
    279:289:short[] concat(short[][]) -> concat
    303:303:byte[] toByteArray(short) -> toByteArray
    318:319:short fromByteArray(byte[]) -> fromByteArray
    330:330:short fromBytes(byte,byte) -> fromBytes
    372:372:com.google.common.base.Converter stringConverter() -> stringConverter
    389:391:short[] ensureCapacity(short[],int,int) -> ensureCapacity
    404:415:java.lang.String join(java.lang.String,short[]) -> join
    432:432:java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    462:464:void sortDescending(short[]) -> sortDescending
    473:477:void sortDescending(short[],int,int) -> sortDescending
    486:488:void reverse(short[]) -> reverse
    501:508:void reverse(short[],int,int) -> reverse
    524:535:short[] toArray(java.util.Collection) -> toArray
    551:554:java.util.List asList(short[]) -> asList
    47:47:int access$000(short[],short,int,int) -> a
    47:47:int access$100(short[],short,int,int) -> b
com.google.common.primitives.Shorts$LexicographicalComparator -> com.google.common.primitives.x:
    com.google.common.primitives.Shorts$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.Shorts$LexicographicalComparator[] $VALUES -> b
    435:435:com.google.common.primitives.Shorts$LexicographicalComparator[] values() -> values
    435:435:com.google.common.primitives.Shorts$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    435:435:void <init>(java.lang.String,int) -> <init>
    440:447:int compare(short[],short[]) -> a
    452:452:java.lang.String toString() -> toString
    435:435:int compare(java.lang.Object,java.lang.Object) -> compare
    435:436:void <clinit>() -> <clinit>
com.google.common.primitives.Shorts$ShortArrayAsList -> com.google.common.primitives.y:
    short[] array -> a
    int start -> b
    int end -> c
    long serialVersionUID -> serialVersionUID
    565:566:void <init>(short[]) -> <init>
    568:572:void <init>(short[],int,int) -> <init>
    576:576:int size() -> size
    581:581:boolean isEmpty() -> isEmpty
    586:587:java.lang.Short get(int) -> a
    593:593:boolean contains(java.lang.Object) -> contains
    599:605:int indexOf(java.lang.Object) -> indexOf
    611:617:int lastIndexOf(java.lang.Object) -> lastIndexOf
    622:626:java.lang.Short set(int,java.lang.Short) -> a
    631:636:java.util.List subList(int,int) -> subList
    641:657:boolean equals(java.lang.Object) -> equals
    662:666:int hashCode() -> hashCode
    671:676:java.lang.String toString() -> toString
    680:680:short[] toShortArray() -> a
    557:557:java.lang.Object set(int,java.lang.Object) -> set
    557:557:java.lang.Object get(int) -> get
com.google.common.primitives.Shorts$ShortConverter -> com.google.common.primitives.z:
    com.google.common.primitives.Shorts$ShortConverter INSTANCE -> a
    long serialVersionUID -> serialVersionUID
    333:333:void <init>() -> <init>
    339:339:java.lang.Short doForward(java.lang.String) -> a
    344:344:java.lang.String doBackward(java.lang.Short) -> a
    349:349:java.lang.String toString() -> toString
    353:353:java.lang.Object readResolve() -> readResolve
    333:333:java.lang.Object doBackward(java.lang.Object) -> doBackward
    333:333:java.lang.Object doForward(java.lang.Object) -> doForward
    335:335:void <clinit>() -> <clinit>
com.google.common.primitives.SignedBytes -> com.google.common.primitives.SignedBytes:
    byte MAX_POWER_OF_TWO -> MAX_POWER_OF_TWO
    40:40:void <init>() -> <init>
    58:60:byte checkedCast(long) -> checkedCast
    71:77:byte saturatedCast(long) -> saturatedCast
    94:94:int compare(byte,byte) -> compare
    106:113:byte min(byte[]) -> min
    125:132:byte max(byte[]) -> max
    144:155:java.lang.String join(java.lang.String,byte[]) -> join
    173:173:java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    203:205:void sortDescending(byte[]) -> sortDescending
    214:218:void sortDescending(byte[],int,int) -> sortDescending
com.google.common.primitives.SignedBytes$LexicographicalComparator -> com.google.common.primitives.A:
    com.google.common.primitives.SignedBytes$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.SignedBytes$LexicographicalComparator[] $VALUES -> b
    176:176:com.google.common.primitives.SignedBytes$LexicographicalComparator[] values() -> values
    176:176:com.google.common.primitives.SignedBytes$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    176:176:void <init>(java.lang.String,int) -> <init>
    181:188:int compare(byte[],byte[]) -> a
    193:193:java.lang.String toString() -> toString
    176:176:int compare(java.lang.Object,java.lang.Object) -> compare
    176:177:void <clinit>() -> <clinit>
com.google.common.primitives.UnsignedBytes -> com.google.common.primitives.UnsignedBytes:
    byte MAX_POWER_OF_TWO -> MAX_POWER_OF_TWO
    byte MAX_VALUE -> MAX_VALUE
    47:47:void <init>() -> <init>
    74:74:int toInt(byte) -> toInt
    87:88:byte checkedCast(long) -> checkedCast
    100:106:byte saturatedCast(long) -> saturatedCast
    120:120:int compare(byte,byte) -> compare
    132:140:byte min(byte[]) -> min
    152:160:byte max(byte[]) -> max
    170:170:java.lang.String toString(byte) -> toString
    185:190:java.lang.String toString(byte,int) -> toString
    205:205:byte parseUnsignedByte(java.lang.String) -> parseUnsignedByte
    223:228:byte parseUnsignedByte(java.lang.String,int) -> parseUnsignedByte
    242:253:java.lang.String join(java.lang.String,byte[]) -> join
    271:271:java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    276:276:java.util.Comparator lexicographicalComparatorJavaImpl() -> a
    451:451:byte flip(byte) -> a
    460:462:void sort(byte[]) -> sort
    471:480:void sort(byte[],int,int) -> sort
    489:491:void sortDescending(byte[]) -> sortDescending
    500:509:void sortDescending(byte[],int,int) -> sortDescending
com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder -> com.google.common.primitives.B:
    java.lang.String UNSAFE_COMPARATOR_NAME -> b
    java.util.Comparator BEST_COMPARATOR -> a
    287:287:void <init>() -> <init>
    438:445:java.util.Comparator getBestComparator() -> a
    288:291:void <clinit>() -> <clinit>
com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator -> com.google.common.primitives.C:
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator INSTANCE -> a
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator[] $VALUES -> b
    411:411:com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator[] values() -> values
    411:411:com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator valueOf(java.lang.String) -> valueOf
    411:411:void <init>(java.lang.String,int) -> <init>
    416:423:int compare(byte[],byte[]) -> a
    428:428:java.lang.String toString() -> toString
    411:411:int compare(java.lang.Object,java.lang.Object) -> compare
    411:412:void <clinit>() -> <clinit>
com.google.common.primitives.UnsignedInteger -> com.google.common.primitives.UnsignedInteger:
    com.google.common.primitives.UnsignedInteger ZERO -> ZERO
    com.google.common.primitives.UnsignedInteger ONE -> ONE
    com.google.common.primitives.UnsignedInteger MAX_VALUE -> MAX_VALUE
    int value -> a
    49:52:void <init>(int) -> <init>
    67:67:com.google.common.primitives.UnsignedInteger fromIntBits(int) -> fromIntBits
    75:79:com.google.common.primitives.UnsignedInteger valueOf(long) -> valueOf
    89:94:com.google.common.primitives.UnsignedInteger valueOf(java.math.BigInteger) -> valueOf
    105:105:com.google.common.primitives.UnsignedInteger valueOf(java.lang.String) -> valueOf
    116:116:com.google.common.primitives.UnsignedInteger valueOf(java.lang.String,int) -> valueOf
    126:126:com.google.common.primitives.UnsignedInteger plus(com.google.common.primitives.UnsignedInteger) -> plus
    136:136:com.google.common.primitives.UnsignedInteger minus(com.google.common.primitives.UnsignedInteger) -> minus
    148:148:com.google.common.primitives.UnsignedInteger times(com.google.common.primitives.UnsignedInteger) -> times
    158:158:com.google.common.primitives.UnsignedInteger dividedBy(com.google.common.primitives.UnsignedInteger) -> dividedBy
    168:168:com.google.common.primitives.UnsignedInteger mod(com.google.common.primitives.UnsignedInteger) -> mod
    180:180:int intValue() -> intValue
    186:186:long longValue() -> longValue
    195:195:float floatValue() -> floatValue
    204:204:double doubleValue() -> doubleValue
    209:209:java.math.BigInteger bigIntegerValue() -> bigIntegerValue
    219:220:int compareTo(com.google.common.primitives.UnsignedInteger) -> compareTo
    225:225:int hashCode() -> hashCode
    230:234:boolean equals(java.lang.Object) -> equals
    240:240:java.lang.String toString() -> toString
    249:249:java.lang.String toString(int) -> toString
    41:41:int compareTo(java.lang.Object) -> compareTo
    43:45:void <clinit>() -> <clinit>
com.google.common.primitives.UnsignedInts -> com.google.common.primitives.UnsignedInts:
    53:53:void <init>() -> <init>
    56:56:int flip(int) -> a
    71:71:int compare(int,int) -> compare
    80:80:long toLong(int) -> toLong
    94:95:int checkedCast(long) -> checkedCast
    108:113:int saturatedCast(long) -> saturatedCast
    126:134:int min(int[]) -> min
    146:154:int max(int[]) -> max
    166:177:java.lang.String join(java.lang.String,int[]) -> join
    191:191:java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    220:222:void sort(int[]) -> sort
    231:240:void sort(int[],int,int) -> sort
    249:251:void sortDescending(int[]) -> sortDescending
    260:269:void sortDescending(int[],int,int) -> sortDescending
    282:282:int divide(int,int) -> divide
    296:296:int remainder(int,int) -> remainder
    316:324:int decode(java.lang.String) -> decode
    339:339:int parseUnsignedInt(java.lang.String) -> parseUnsignedInt
    357:363:int parseUnsignedInt(java.lang.String,int) -> parseUnsignedInt
    372:372:java.lang.String toString(int) -> toString
    387:388:java.lang.String toString(int,int) -> toString
com.google.common.primitives.UnsignedInts$LexicographicalComparator -> com.google.common.primitives.D:
    com.google.common.primitives.UnsignedInts$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.UnsignedInts$LexicographicalComparator[] $VALUES -> b
    194:194:com.google.common.primitives.UnsignedInts$LexicographicalComparator[] values() -> values
    194:194:com.google.common.primitives.UnsignedInts$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    194:194:void <init>(java.lang.String,int) -> <init>
    199:205:int compare(int[],int[]) -> a
    210:210:java.lang.String toString() -> toString
    194:194:int compare(java.lang.Object,java.lang.Object) -> compare
    194:195:void <clinit>() -> <clinit>
com.google.common.primitives.UnsignedLong -> com.google.common.primitives.UnsignedLong:
    com.google.common.primitives.UnsignedLong ZERO -> ZERO
    com.google.common.primitives.UnsignedLong ONE -> ONE
    com.google.common.primitives.UnsignedLong MAX_VALUE -> MAX_VALUE
    long value -> a
    51:53:void <init>(long) -> <init>
    70:70:com.google.common.primitives.UnsignedLong fromLongBits(long) -> fromLongBits
    81:82:com.google.common.primitives.UnsignedLong valueOf(long) -> valueOf
    93:98:com.google.common.primitives.UnsignedLong valueOf(java.math.BigInteger) -> valueOf
    110:110:com.google.common.primitives.UnsignedLong valueOf(java.lang.String) -> valueOf
    123:123:com.google.common.primitives.UnsignedLong valueOf(java.lang.String,int) -> valueOf
    133:133:com.google.common.primitives.UnsignedLong plus(com.google.common.primitives.UnsignedLong) -> plus
    143:143:com.google.common.primitives.UnsignedLong minus(com.google.common.primitives.UnsignedLong) -> minus
    153:153:com.google.common.primitives.UnsignedLong times(com.google.common.primitives.UnsignedLong) -> times
    162:162:com.google.common.primitives.UnsignedLong dividedBy(com.google.common.primitives.UnsignedLong) -> dividedBy
    171:171:com.google.common.primitives.UnsignedLong mod(com.google.common.primitives.UnsignedLong) -> mod
    177:177:int intValue() -> intValue
    189:189:long longValue() -> longValue
    199:203:float floatValue() -> floatValue
    213:217:double doubleValue() -> doubleValue
    222:226:java.math.BigInteger bigIntegerValue() -> bigIntegerValue
    231:232:int compareTo(com.google.common.primitives.UnsignedLong) -> compareTo
    237:237:int hashCode() -> hashCode
    242:246:boolean equals(java.lang.Object) -> equals
    252:252:java.lang.String toString() -> toString
    261:261:java.lang.String toString(int) -> toString
    40:40:int compareTo(java.lang.Object) -> compareTo
    45:47:void <clinit>() -> <clinit>
com.google.common.primitives.UnsignedLongs -> com.google.common.primitives.UnsignedLongs:
    long MAX_VALUE -> MAX_VALUE
    54:54:void <init>() -> <init>
    64:64:long flip(long) -> a
    79:79:int compare(long,long) -> compare
    91:99:long min(long[]) -> min
    111:119:long max(long[]) -> max
    131:142:java.lang.String join(java.lang.String,long[]) -> join
    157:157:java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    186:188:void sort(long[]) -> sort
    197:206:void sort(long[],int,int) -> sort
    215:217:void sortDescending(long[]) -> sortDescending
    226:235:void sortDescending(long[],int,int) -> sortDescending
    248:269:long divide(long,long) -> divide
    284:305:long remainder(long,long) -> remainder
    320:320:long parseUnsignedLong(java.lang.String) -> parseUnsignedLong
    338:359:long parseUnsignedLong(java.lang.String,int) -> parseUnsignedLong
    380:388:long decode(java.lang.String) -> decode
    442:442:java.lang.String toString(long) -> toString
    457:497:java.lang.String toString(long,int) -> toString
com.google.common.primitives.UnsignedLongs$LexicographicalComparator -> com.google.common.primitives.E:
    com.google.common.primitives.UnsignedLongs$LexicographicalComparator INSTANCE -> a
    com.google.common.primitives.UnsignedLongs$LexicographicalComparator[] $VALUES -> b
    160:160:com.google.common.primitives.UnsignedLongs$LexicographicalComparator[] values() -> values
    160:160:com.google.common.primitives.UnsignedLongs$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    160:160:void <init>(java.lang.String,int) -> <init>
    165:171:int compare(long[],long[]) -> a
    176:176:java.lang.String toString() -> toString
    160:160:int compare(java.lang.Object,java.lang.Object) -> compare
    160:161:void <clinit>() -> <clinit>
com.google.common.primitives.UnsignedLongs$ParseOverflowDetection -> com.google.common.primitives.F:
    long[] maxValueDivs -> b
    int[] maxValueMods -> c
    int[] maxSafeDigits -> a
    420:432:boolean overflowInParse(long,int,int) -> a
    400:411:void <clinit>() -> <clinit>
com.google.common.reflect.AbstractInvocationHandler -> com.google.common.reflect.AbstractInvocationHandler:
    java.lang.Object[] NO_ARGS -> a
    42:42:void <init>() -> <init>
    64:86:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    java.lang.Object handleInvocation(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> handleInvocation
    113:113:boolean equals(java.lang.Object) -> equals
    122:122:int hashCode() -> hashCode
    132:132:java.lang.String toString() -> toString
    136:143:boolean isProxyOfSameInterfaces(java.lang.Object,java.lang.Class) -> a
    44:44:void <clinit>() -> <clinit>
com.google.common.reflect.ClassPath -> com.google.common.reflect.ClassPath:
    java.util.logging.Logger logger -> a
    com.google.common.base.Predicate IS_TOP_LEVEL -> b
    com.google.common.base.Splitter CLASS_PATH_ATTRIBUTE_SEPARATOR -> c
    com.google.common.collect.ImmutableSet resources -> d
    97:99:void <init>(com.google.common.collect.ImmutableSet) -> <init>
    118:120:com.google.common.reflect.ClassPath from(java.lang.ClassLoader) -> from
    128:128:com.google.common.collect.ImmutableSet getResources() -> getResources
    137:137:com.google.common.collect.ImmutableSet getAllClasses() -> getAllClasses
    142:142:com.google.common.collect.ImmutableSet getTopLevelClasses() -> getTopLevelClasses
    147:154:com.google.common.collect.ImmutableSet getTopLevelClasses(java.lang.String) -> getTopLevelClasses
    162:170:com.google.common.collect.ImmutableSet getTopLevelClassesRecursive(java.lang.String) -> getTopLevelClassesRecursive
    577:578:java.lang.String getClassName(java.lang.String) -> a
    584:588:java.io.File toFile(java.net.URL) -> a
    78:78:java.util.logging.Logger access$100() -> a
    78:78:com.google.common.base.Splitter access$200() -> b
    79:91:void <clinit>() -> <clinit>
com.google.common.reflect.ClassPath$1 -> com.google.common.reflect.a:
    82:82:void <init>() -> <init>
    85:85:boolean apply(com.google.common.reflect.ClassPath$ClassInfo) -> a
    82:82:boolean apply(java.lang.Object) -> apply
com.google.common.reflect.ClassPath$ClassInfo -> com.google.common.reflect.ClassPath$ClassInfo:
    java.lang.String className -> b
    273:275:void <init>(java.lang.String,java.lang.ClassLoader) -> <init>
    284:284:java.lang.String getPackageName() -> getPackageName
    294:307:java.lang.String getSimpleName() -> getSimpleName
    317:317:java.lang.String getName() -> getName
    328:331:java.lang.Class load() -> load
    337:337:java.lang.String toString() -> toString
    269:269:java.lang.String access$000(com.google.common.reflect.ClassPath$ClassInfo) -> a
com.google.common.reflect.ClassPath$DefaultScanner -> com.google.common.reflect.b:
    com.google.common.collect.SetMultimap resources -> a
    505:507:void <init>() -> <init>
    510:514:com.google.common.collect.ImmutableSet getResources() -> a
    519:527:void scanJarFile(java.lang.ClassLoader,java.util.jar.JarFile) -> a
    531:534:void scanDirectory(java.lang.ClassLoader,java.io.File) -> a
    551:572:void scanDirectory(java.io.File,java.lang.ClassLoader,java.lang.String,java.util.Set) -> a
com.google.common.reflect.ClassPath$ResourceInfo -> com.google.common.reflect.ClassPath$ResourceInfo:
    java.lang.String resourceName -> b
    java.lang.ClassLoader loader -> a
    186:189:com.google.common.reflect.ClassPath$ResourceInfo of(java.lang.String,java.lang.ClassLoader) -> a
    193:196:void <init>(java.lang.String,java.lang.ClassLoader) -> <init>
    207:211:java.net.URL url() -> url
    222:222:com.google.common.io.ByteSource asByteSource() -> asByteSource
    234:234:com.google.common.io.CharSource asCharSource(java.nio.charset.Charset) -> asCharSource
    239:239:java.lang.String getResourceName() -> getResourceName
    244:244:int hashCode() -> hashCode
    249:253:boolean equals(java.lang.Object) -> equals
    259:259:java.lang.String toString() -> toString
com.google.common.reflect.ClassPath$Scanner -> com.google.common.reflect.c:
    java.util.Set scannedUris -> a
    346:350:void <init>() -> <init>
    353:356:void scan(java.lang.ClassLoader) -> a
    360:363:void scan(java.io.File,java.lang.ClassLoader) -> a
    void scanDirectory(java.lang.ClassLoader,java.io.File) -> a
    void scanJarFile(java.lang.ClassLoader,java.util.jar.JarFile) -> a
    373:386:void scanFrom(java.io.File,java.lang.ClassLoader) -> b
    391:407:void scanJar(java.io.File,java.lang.ClassLoader) -> c
    418:439:com.google.common.collect.ImmutableSet getClassPathFromManifest(java.io.File,java.util.jar.Manifest) -> a
    444:458:com.google.common.collect.ImmutableMap getClassPathEntries(java.lang.ClassLoader) -> b
    462:468:com.google.common.collect.ImmutableList getClassLoaderUrls(java.lang.ClassLoader) -> c
    477:489:com.google.common.collect.ImmutableList parseJavaClassPath() -> a
    500:500:java.net.URL getClassPathEntry(java.io.File,java.lang.String) -> a
com.google.common.reflect.Element -> com.google.common.reflect.d:
    java.lang.reflect.AccessibleObject accessibleObject -> a
    java.lang.reflect.Member member -> b
    39:43:void <init>(java.lang.reflect.AccessibleObject) -> <init>
    46:46:com.google.common.reflect.TypeToken getOwnerType() -> getOwnerType
    51:51:boolean isAnnotationPresent(java.lang.Class) -> isAnnotationPresent
    56:56:java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> getAnnotation
    61:61:java.lang.annotation.Annotation[] getAnnotations() -> getAnnotations
    66:66:java.lang.annotation.Annotation[] getDeclaredAnnotations() -> getDeclaredAnnotations
    71:72:void setAccessible(boolean) -> setAccessible
    76:76:boolean isAccessible() -> isAccessible
    81:81:java.lang.Class getDeclaringClass() -> getDeclaringClass
    86:86:java.lang.String getName() -> getName
    91:91:int getModifiers() -> getModifiers
    96:96:boolean isSynthetic() -> isSynthetic
    101:101:boolean isPublic() -> isPublic
    106:106:boolean isProtected() -> isProtected
    111:111:boolean isPackagePrivate() -> isPackagePrivate
    116:116:boolean isPrivate() -> isPrivate
    121:121:boolean isStatic() -> isStatic
    132:132:boolean isFinal() -> isFinal
    137:137:boolean isAbstract() -> isAbstract
    142:142:boolean isNative() -> isNative
    147:147:boolean isSynchronized() -> isSynchronized
    162:166:boolean equals(java.lang.Object) -> equals
    171:171:int hashCode() -> hashCode
    176:176:java.lang.String toString() -> toString
com.google.common.reflect.ImmutableTypeToInstanceMap -> com.google.common.reflect.ImmutableTypeToInstanceMap:
    com.google.common.collect.ImmutableMap delegate -> a
    36:36:com.google.common.reflect.ImmutableTypeToInstanceMap of() -> of
    41:41:com.google.common.reflect.ImmutableTypeToInstanceMap$Builder builder() -> builder
    99:101:void <init>(com.google.common.collect.ImmutableMap) -> <init>
    105:105:java.lang.Object getInstance(com.google.common.reflect.TypeToken) -> getInstance
    110:110:java.lang.Object getInstance(java.lang.Class) -> getInstance
    123:123:java.lang.Object putInstance(com.google.common.reflect.TypeToken,java.lang.Object) -> putInstance
    136:136:java.lang.Object putInstance(java.lang.Class,java.lang.Object) -> putInstance
    149:149:java.lang.Object put(com.google.common.reflect.TypeToken,java.lang.Object) -> put
    161:161:void putAll(java.util.Map) -> putAll
    166:166:java.util.Map delegate() -> delegate
    171:171:java.lang.Object trustedGet(com.google.common.reflect.TypeToken) -> a
    30:30:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    30:30:java.lang.Object delegate() -> delegate
    31:31:void <init>(com.google.common.collect.ImmutableMap,byte) -> <init>
com.google.common.reflect.ImmutableTypeToInstanceMap$Builder -> com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:
    com.google.common.collect.ImmutableMap$Builder mapBuilder -> a
    62:65:void <init>() -> <init>
    73:74:com.google.common.reflect.ImmutableTypeToInstanceMap$Builder put(java.lang.Class,java.lang.Object) -> put
    83:84:com.google.common.reflect.ImmutableTypeToInstanceMap$Builder put(com.google.common.reflect.TypeToken,java.lang.Object) -> put
    93:93:com.google.common.reflect.ImmutableTypeToInstanceMap build() -> build
    61:61:void <init>(byte) -> <init>
com.google.common.reflect.Invokable -> com.google.common.reflect.Invokable:
    62:63:void <init>(java.lang.reflect.AccessibleObject) -> <init>
    67:67:com.google.common.reflect.Invokable from(java.lang.reflect.Method) -> from
    72:72:com.google.common.reflect.Invokable from(java.lang.reflect.Constructor) -> from
    boolean isOverridable() -> isOverridable
    boolean isVarArgs() -> isVarArgs
    102:102:java.lang.Object invoke(java.lang.Object,java.lang.Object[]) -> invoke
    109:109:com.google.common.reflect.TypeToken getReturnType() -> getReturnType
    118:127:com.google.common.collect.ImmutableList getParameters() -> getParameters
    132:140:com.google.common.collect.ImmutableList getExceptionTypes() -> getExceptionTypes
    152:152:com.google.common.reflect.Invokable returning(java.lang.Class) -> returning
    157:163:com.google.common.reflect.Invokable returning(com.google.common.reflect.TypeToken) -> returning
    169:169:java.lang.Class getDeclaringClass() -> getDeclaringClass
    177:177:com.google.common.reflect.TypeToken getOwnerType() -> getOwnerType
    java.lang.Object invokeInternal(java.lang.Object,java.lang.Object[]) -> a
    java.lang.reflect.Type[] getGenericParameterTypes() -> a
    java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes() -> b
    java.lang.reflect.Type[] getGenericExceptionTypes() -> c
    java.lang.annotation.Annotation[][] getParameterAnnotations() -> d
    java.lang.reflect.Type getGenericReturnType() -> e
    java.lang.reflect.AnnotatedType getAnnotatedReturnType() -> getAnnotatedReturnType
    58:58:java.lang.String toString() -> toString
    58:58:int hashCode() -> hashCode
    58:58:boolean equals(java.lang.Object) -> equals
com.google.common.reflect.Invokable$ConstructorInvokable -> com.google.common.reflect.e:
    java.lang.reflect.Constructor constructor -> a
    265:267:void <init>(java.lang.reflect.Constructor) -> <init>
    273:275:java.lang.Object invokeInternal(java.lang.Object,java.lang.Object[]) -> a
    285:290:java.lang.reflect.Type getGenericReturnType() -> e
    296:305:java.lang.reflect.Type[] getGenericParameterTypes() -> a
    310:310:java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes() -> b
    315:315:java.lang.reflect.AnnotatedType getAnnotatedReturnType() -> getAnnotatedReturnType
    320:320:java.lang.reflect.Type[] getGenericExceptionTypes() -> c
    325:325:java.lang.annotation.Annotation[][] getParameterAnnotations() -> d
    339:346:java.lang.reflect.TypeVariable[] getTypeParameters() -> getTypeParameters
    351:351:boolean isOverridable() -> isOverridable
    356:356:boolean isVarArgs() -> isVarArgs
    360:377:boolean mayNeedHiddenThis() -> f
com.google.common.reflect.Invokable$MethodInvokable -> com.google.common.reflect.f:
    java.lang.reflect.Method method -> a
    201:203:void <init>(java.lang.reflect.Method) -> <init>
    208:208:java.lang.Object invokeInternal(java.lang.Object,java.lang.Object[]) -> a
    213:213:java.lang.reflect.Type getGenericReturnType() -> e
    218:218:java.lang.reflect.Type[] getGenericParameterTypes() -> a
    223:223:java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes() -> b
    228:228:java.lang.reflect.AnnotatedType getAnnotatedReturnType() -> getAnnotatedReturnType
    233:233:java.lang.reflect.Type[] getGenericExceptionTypes() -> c
    238:238:java.lang.annotation.Annotation[][] getParameterAnnotations() -> d
    243:243:java.lang.reflect.TypeVariable[] getTypeParameters() -> getTypeParameters
    248:251:boolean isOverridable() -> isOverridable
    256:256:boolean isVarArgs() -> isVarArgs
com.google.common.reflect.MutableTypeToInstanceMap -> com.google.common.reflect.MutableTypeToInstanceMap:
    java.util.Map backingMap -> a
    39:42:void <init>() -> <init>
    46:46:java.lang.Object getInstance(java.lang.Class) -> getInstance
    51:51:java.lang.Object getInstance(com.google.common.reflect.TypeToken) -> getInstance
    57:57:java.lang.Object putInstance(java.lang.Class,java.lang.Object) -> putInstance
    63:63:java.lang.Object putInstance(com.google.common.reflect.TypeToken,java.lang.Object) -> putInstance
    76:76:java.lang.Object put(com.google.common.reflect.TypeToken,java.lang.Object) -> put
    88:88:void putAll(java.util.Map) -> putAll
    93:93:java.util.Set entrySet() -> entrySet
    98:98:java.util.Map delegate() -> delegate
    103:103:java.lang.Object trustedPut(com.google.common.reflect.TypeToken,java.lang.Object) -> a
    108:108:java.lang.Object trustedGet(com.google.common.reflect.TypeToken) -> a
    38:38:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    38:38:java.lang.Object delegate() -> delegate
com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry -> com.google.common.reflect.g:
    java.util.Map$Entry delegate -> a
    116:116:java.util.Set transformEntries(java.util.Set) -> a
    140:140:java.util.Iterator transformEntries(java.util.Iterator) -> b
    150:152:void <init>(java.util.Map$Entry) -> <init>
    156:156:java.util.Map$Entry delegate() -> delegate
    161:161:java.lang.Object setValue(java.lang.Object) -> setValue
    111:111:java.lang.Object delegate() -> delegate
    111:111:java.util.Iterator access$000(java.util.Iterator) -> a
    111:111:void <init>(java.util.Map$Entry,byte) -> <init>
com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1 -> com.google.common.reflect.h:
    java.util.Set val$entries -> a
    116:116:void <init>(java.util.Set) -> <init>
    119:119:java.util.Set delegate() -> delegate
    124:124:java.util.Iterator iterator() -> iterator
    129:129:java.lang.Object[] toArray() -> toArray
    134:134:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    116:116:java.util.Collection delegate() -> delegate
    116:116:java.lang.Object delegate() -> delegate
com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2 -> com.google.common.reflect.i:
    142:142:void <init>() -> <init>
    145:145:java.util.Map$Entry apply(java.util.Map$Entry) -> a
    142:142:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.reflect.Parameter -> com.google.common.reflect.Parameter:
    com.google.common.reflect.Invokable declaration -> a
    int position -> b
    com.google.common.reflect.TypeToken type -> c
    com.google.common.collect.ImmutableList annotations -> d
    java.lang.reflect.AnnotatedType annotatedType -> e
    47:53:void <init>(com.google.common.reflect.Invokable,int,com.google.common.reflect.TypeToken,java.lang.annotation.Annotation[],java.lang.reflect.AnnotatedType) -> <init>
    57:57:com.google.common.reflect.TypeToken getType() -> getType
    62:62:com.google.common.reflect.Invokable getDeclaringInvokable() -> getDeclaringInvokable
    67:67:boolean isAnnotationPresent(java.lang.Class) -> isAnnotationPresent
    72:78:java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> getAnnotation
    83:83:java.lang.annotation.Annotation[] getAnnotations() -> getAnnotations
    90:90:java.lang.annotation.Annotation[] getAnnotationsByType(java.lang.Class) -> getAnnotationsByType
    97:97:java.lang.annotation.Annotation[] getDeclaredAnnotations() -> getDeclaredAnnotations
    104:105:java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class) -> getDeclaredAnnotation
    112:112:java.lang.annotation.Annotation[] getDeclaredAnnotationsByType(java.lang.Class) -> getDeclaredAnnotationsByType
    118:118:java.lang.reflect.AnnotatedType getAnnotatedType() -> getAnnotatedType
    123:127:boolean equals(java.lang.Object) -> equals
    132:132:int hashCode() -> hashCode
    137:137:java.lang.String toString() -> toString
com.google.common.reflect.Reflection -> com.google.common.reflect.Reflection:
    38:38:java.lang.String getPackageName(java.lang.Class) -> getPackageName
    47:48:java.lang.String getPackageName(java.lang.String) -> getPackageName
    63:70:void initialize(java.lang.Class[]) -> initialize
    82:87:java.lang.Object newProxy(java.lang.Class,java.lang.reflect.InvocationHandler) -> newProxy
    90:90:void <init>() -> <init>
com.google.common.reflect.TypeCapture -> com.google.common.reflect.j:
    27:27:void <init>() -> <init>
    31:33:java.lang.reflect.Type capture() -> a
com.google.common.reflect.TypeParameter -> com.google.common.reflect.TypeParameter:
    java.lang.reflect.TypeVariable typeVariable -> a
    42:46:void <init>() -> <init>
    50:50:int hashCode() -> hashCode
    55:59:boolean equals(java.lang.Object) -> equals
    64:64:java.lang.String toString() -> toString
com.google.common.reflect.TypeResolver -> com.google.common.reflect.TypeResolver:
    com.google.common.reflect.TypeResolver$TypeTable typeTable -> a
    59:61:void <init>() -> <init>
    63:65:void <init>(com.google.common.reflect.TypeResolver$TypeTable) -> <init>
    75:75:com.google.common.reflect.TypeResolver covariantly(java.lang.reflect.Type) -> a
    90:91:com.google.common.reflect.TypeResolver invariantly(java.lang.reflect.Type) -> b
    114:116:com.google.common.reflect.TypeResolver where(java.lang.reflect.Type,java.lang.reflect.Type) -> where
    121:121:com.google.common.reflect.TypeResolver where(java.util.Map) -> a
    126:208:void populateTypeMappings(java.util.Map,java.lang.reflect.Type,java.lang.reflect.Type) -> b
    215:226:java.lang.reflect.Type resolveType(java.lang.reflect.Type) -> resolveType
    231:234:java.lang.reflect.Type[] resolveTypesInPlace(java.lang.reflect.Type[]) -> a
    238:242:java.lang.reflect.Type[] resolveTypes(java.lang.reflect.Type[]) -> b
    246:248:java.lang.reflect.WildcardType resolveWildcardType(java.lang.reflect.WildcardType) -> a
    252:254:java.lang.reflect.Type resolveGenericArrayType(java.lang.reflect.GenericArrayType) -> a
    258:264:java.lang.reflect.ParameterizedType resolveParameterizedType(java.lang.reflect.ParameterizedType) -> a
    270:272:java.lang.Object expectArgument(java.lang.Class,java.lang.Object) -> b
    55:55:void access$000(java.util.Map,java.lang.reflect.Type,java.lang.reflect.Type) -> a
    55:55:java.lang.Object access$100(java.lang.Class,java.lang.Object) -> a
    55:55:void <init>(com.google.common.reflect.TypeResolver$TypeTable,byte) -> <init>
    55:55:java.lang.reflect.Type[] access$300(com.google.common.reflect.TypeResolver,java.lang.reflect.Type[]) -> a
com.google.common.reflect.TypeResolver$1 -> com.google.common.reflect.k:
    java.util.Map val$mappings -> a
    java.lang.reflect.Type val$to -> b
    129:129:void <init>(java.util.Map,java.lang.reflect.Type) -> <init>
    132:133:void visitTypeVariable(java.lang.reflect.TypeVariable) -> a
    137:157:void visitWildcardType(java.lang.reflect.WildcardType) -> a
    161:185:void visitParameterizedType(java.lang.reflect.ParameterizedType) -> a
    189:195:void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> a
    199:205:void visitClass(java.lang.Class) -> a
com.google.common.reflect.TypeResolver$TypeMappingIntrospector -> com.google.common.reflect.l:
    java.util.Map mappings -> a
    372:374:void <init>() -> <init>
    381:384:com.google.common.collect.ImmutableMap getTypeMappings(java.lang.reflect.Type) -> a
    389:391:void visitClass(java.lang.Class) -> a
    395:404:void visitParameterizedType(java.lang.reflect.ParameterizedType) -> a
    408:409:void visitTypeVariable(java.lang.reflect.TypeVariable) -> a
    413:414:void visitWildcardType(java.lang.reflect.WildcardType) -> a
    417:437:void map(com.google.common.reflect.TypeResolver$TypeVariableKey,java.lang.reflect.Type) -> a
com.google.common.reflect.TypeResolver$TypeTable -> com.google.common.reflect.m:
    com.google.common.collect.ImmutableMap map -> a
    280:282:void <init>() -> <init>
    284:286:void <init>(com.google.common.collect.ImmutableMap) -> <init>
    290:298:com.google.common.reflect.TypeResolver$TypeTable where(java.util.Map) -> a
    302:313:java.lang.reflect.Type resolve(java.lang.reflect.TypeVariable) -> a
    325:368:java.lang.reflect.Type resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable) -> a
com.google.common.reflect.TypeResolver$TypeTable$1 -> com.google.common.reflect.n:
    java.lang.reflect.TypeVariable val$var -> a
    com.google.common.reflect.TypeResolver$TypeTable val$unguarded -> b
    304:304:void <init>(com.google.common.reflect.TypeResolver$TypeTable,java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable) -> <init>
    307:310:java.lang.reflect.Type resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable) -> a
com.google.common.reflect.TypeResolver$TypeVariableKey -> com.google.common.reflect.o:
    java.lang.reflect.TypeVariable var -> a
    554:556:void <init>(java.lang.reflect.TypeVariable) -> <init>
    560:560:int hashCode() -> hashCode
    565:569:boolean equals(java.lang.Object) -> equals
    575:575:java.lang.String toString() -> toString
    580:583:com.google.common.reflect.TypeResolver$TypeVariableKey forLookup(java.lang.reflect.Type) -> a
    592:595:boolean equalsType(java.lang.reflect.Type) -> b
    600:601:boolean equalsTypeVariable(java.lang.reflect.TypeVariable) -> a
com.google.common.reflect.TypeResolver$WildcardCapturer -> com.google.common.reflect.p:
    com.google.common.reflect.TypeResolver$WildcardCapturer INSTANCE -> a
    java.util.concurrent.atomic.AtomicInteger id -> b
    454:455:void <init>() -> <init>
    457:459:void <init>(java.util.concurrent.atomic.AtomicInteger) -> <init>
    462:497:java.lang.reflect.Type capture(java.lang.reflect.Type) -> a
    501:503:java.lang.reflect.TypeVariable captureAsTypeVariable(java.lang.reflect.Type[]) -> a
    507:507:com.google.common.reflect.TypeResolver$WildcardCapturer forTypeVariable(java.lang.reflect.TypeVariable) -> a
    527:527:com.google.common.reflect.TypeResolver$WildcardCapturer notForTypeVariable() -> a
    531:534:java.lang.reflect.Type captureNullable(java.lang.reflect.Type) -> b
    447:447:void <init>(java.util.concurrent.atomic.AtomicInteger,byte) -> <init>
    449:449:void <clinit>() -> <clinit>
com.google.common.reflect.TypeResolver$WildcardCapturer$1 -> com.google.common.reflect.q:
    java.lang.reflect.TypeVariable val$typeParam -> b
    507:507:void <init>(com.google.common.reflect.TypeResolver$WildcardCapturer,java.util.concurrent.atomic.AtomicInteger,java.lang.reflect.TypeVariable) -> <init>
    510:521:java.lang.reflect.TypeVariable captureAsTypeVariable(java.lang.reflect.Type[]) -> a
com.google.common.reflect.TypeToInstanceMap -> com.google.common.reflect.TypeToInstanceMap:
    java.lang.Object getInstance(java.lang.Class) -> getInstance
    java.lang.Object getInstance(com.google.common.reflect.TypeToken) -> getInstance
    java.lang.Object putInstance(java.lang.Class,java.lang.Object) -> putInstance
    java.lang.Object putInstance(com.google.common.reflect.TypeToken,java.lang.Object) -> putInstance
com.google.common.reflect.TypeToken -> com.google.common.reflect.TypeToken:
    java.lang.reflect.Type runtimeType -> a
    com.google.common.reflect.TypeResolver invariantTypeResolver -> b
    com.google.common.reflect.TypeResolver covariantTypeResolver -> c
    long serialVersionUID -> serialVersionUID
    124:134:void <init>() -> <init>
    155:162:void <init>(java.lang.Class) -> <init>
    164:166:void <init>(java.lang.reflect.Type) -> <init>
    170:170:com.google.common.reflect.TypeToken of(java.lang.Class) -> of
    175:175:com.google.common.reflect.TypeToken of(java.lang.reflect.Type) -> of
    195:198:java.lang.Class getRawType() -> getRawType
    203:203:java.lang.reflect.Type getType() -> getType
    225:231:com.google.common.reflect.TypeToken where(com.google.common.reflect.TypeParameter,com.google.common.reflect.TypeToken) -> where
    253:253:com.google.common.reflect.TypeToken where(com.google.common.reflect.TypeParameter,java.lang.Class) -> where
    266:269:com.google.common.reflect.TypeToken resolveType(java.lang.reflect.Type) -> resolveType
    273:277:com.google.common.reflect.TypeToken resolveSupertype(java.lang.reflect.Type) -> a
    293:307:com.google.common.reflect.TypeToken getGenericSuperclass() -> b
    311:317:com.google.common.reflect.TypeToken boundAsSuperclass(java.lang.reflect.Type) -> b
    333:346:com.google.common.collect.ImmutableList getGenericInterfaces() -> c
    350:358:com.google.common.collect.ImmutableList boundsAsInterfaces(java.lang.reflect.Type[]) -> a
    373:373:com.google.common.reflect.TypeToken$TypeSet getTypes() -> getTypes
    382:399:com.google.common.reflect.TypeToken getSupertype(java.lang.Class) -> getSupertype
    408:425:com.google.common.reflect.TypeToken getSubtype(java.lang.Class) -> getSubtype
    437:437:boolean isSupertypeOf(com.google.common.reflect.TypeToken) -> isSupertypeOf
    449:449:boolean isSupertypeOf(java.lang.reflect.Type) -> isSupertypeOf
    461:461:boolean isSubtypeOf(com.google.common.reflect.TypeToken) -> isSubtypeOf
    473:503:boolean isSubtypeOf(java.lang.reflect.Type) -> isSubtypeOf
    512:512:boolean isArray() -> isArray
    521:521:boolean isPrimitive() -> isPrimitive
    531:536:com.google.common.reflect.TypeToken wrap() -> wrap
    540:540:boolean isWrapper() -> e
    550:555:com.google.common.reflect.TypeToken unwrap() -> unwrap
    563:567:com.google.common.reflect.TypeToken getComponentType() -> getComponentType
    576:581:com.google.common.reflect.Invokable method(java.lang.reflect.Method) -> method
    615:620:com.google.common.reflect.Invokable constructor(java.lang.reflect.Constructor) -> constructor
    821:825:boolean equals(java.lang.Object) -> equals
    830:830:int hashCode() -> hashCode
    835:835:java.lang.String toString() -> toString
    842:842:java.lang.Object writeReplace() -> writeReplace
    851:875:com.google.common.reflect.TypeToken rejectTypeVariables() -> d
    879:884:boolean someRawTypeIsSubclassOf(java.lang.Class) -> a
    888:909:boolean isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType) -> a
    913:924:boolean isSubtypeOfArrayType(java.lang.reflect.GenericArrayType) -> a
    929:939:boolean isSupertypeOfArray(java.lang.reflect.GenericArrayType) -> b
    970:983:boolean is(java.lang.reflect.Type,java.lang.reflect.TypeVariable) -> a
    1005:1007:java.lang.reflect.Type canonicalizeTypeArg(java.lang.reflect.TypeVariable,java.lang.reflect.Type) -> a
    1011:1018:java.lang.reflect.Type canonicalizeWildcardsInType(java.lang.reflect.Type) -> c
    1026:1033:java.lang.reflect.WildcardType canonicalizeWildcardType(java.lang.reflect.TypeVariable,java.lang.reflect.WildcardType) -> a
    1038:1044:java.lang.reflect.ParameterizedType canonicalizeWildcardsInParameterizedType(java.lang.reflect.ParameterizedType) -> b
    1049:1049:com.google.common.reflect.TypeToken$Bounds every(java.lang.reflect.Type[]) -> b
    1054:1054:com.google.common.reflect.TypeToken$Bounds any(java.lang.reflect.Type[]) -> c
    1087:1117:com.google.common.collect.ImmutableSet getRawTypes() -> f
    1121:1127:boolean isOwnedBySubtypeOf(java.lang.reflect.Type) -> d
    1135:1140:java.lang.reflect.Type getOwnerTypeIfPresent() -> g
    1153:1175:com.google.common.reflect.TypeToken toGenericType(java.lang.Class) -> b
    1180:1184:com.google.common.reflect.TypeResolver getCovariantTypeResolver() -> h
    1188:1192:com.google.common.reflect.TypeResolver getInvariantTypeResolver() -> i
    1197:1206:com.google.common.reflect.TypeToken getSupertypeFromUpperBounds(java.lang.Class,java.lang.reflect.Type[]) -> a
    1210:1216:com.google.common.reflect.TypeToken getSubtypeFromLowerBounds(java.lang.Class,java.lang.reflect.Type[]) -> b
    1223:1233:com.google.common.reflect.TypeToken getArraySupertype(java.lang.Class) -> c
    1238:1244:com.google.common.reflect.TypeToken getArraySubtype(java.lang.Class) -> d
    1252:1271:java.lang.reflect.Type resolveTypeArgsForSubclass(java.lang.Class) -> e
    1279:1279:java.lang.reflect.Type newArrayClassOrGenericArrayType(java.lang.reflect.Type) -> e
    102:102:com.google.common.reflect.TypeResolver access$000(com.google.common.reflect.TypeToken) -> a
    102:102:com.google.common.reflect.TypeResolver access$100(com.google.common.reflect.TypeToken) -> b
    102:102:com.google.common.collect.ImmutableSet access$300(com.google.common.reflect.TypeToken) -> c
    102:102:java.lang.reflect.Type access$500(com.google.common.reflect.TypeToken) -> d
    102:102:void <init>(java.lang.reflect.Type,byte) -> <init>
com.google.common.reflect.TypeToken$1 -> com.google.common.reflect.r:
    com.google.common.reflect.TypeToken this$0 -> a
    581:581:void <init>(com.google.common.reflect.TypeToken,java.lang.reflect.Method) -> <init>
    584:584:java.lang.reflect.Type getGenericReturnType() -> e
    589:589:java.lang.reflect.Type[] getGenericParameterTypes() -> a
    594:594:java.lang.reflect.Type[] getGenericExceptionTypes() -> c
    599:599:com.google.common.reflect.TypeToken getOwnerType() -> getOwnerType
    604:604:java.lang.String toString() -> toString
com.google.common.reflect.TypeToken$2 -> com.google.common.reflect.s:
    com.google.common.reflect.TypeToken this$0 -> a
    620:620:void <init>(com.google.common.reflect.TypeToken,java.lang.reflect.Constructor) -> <init>
    623:623:java.lang.reflect.Type getGenericReturnType() -> e
    628:628:java.lang.reflect.Type[] getGenericParameterTypes() -> a
    633:633:java.lang.reflect.Type[] getGenericExceptionTypes() -> c
    638:638:com.google.common.reflect.TypeToken getOwnerType() -> getOwnerType
    643:643:java.lang.String toString() -> toString
com.google.common.reflect.TypeToken$3 -> com.google.common.reflect.t:
    com.google.common.reflect.TypeToken this$0 -> a
    851:851:void <init>(com.google.common.reflect.TypeToken) -> <init>
    854:855:void visitTypeVariable(java.lang.reflect.TypeVariable) -> a
    860:862:void visitWildcardType(java.lang.reflect.WildcardType) -> a
    866:868:void visitParameterizedType(java.lang.reflect.ParameterizedType) -> a
    872:873:void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> a
com.google.common.reflect.TypeToken$4 -> com.google.common.reflect.u:
    com.google.common.collect.ImmutableSet$Builder val$builder -> a
    1088:1088:void <init>(com.google.common.reflect.TypeToken,com.google.common.collect.ImmutableSet$Builder) -> <init>
    1091:1092:void visitTypeVariable(java.lang.reflect.TypeVariable) -> a
    1096:1097:void visitWildcardType(java.lang.reflect.WildcardType) -> a
    1101:1102:void visitParameterizedType(java.lang.reflect.ParameterizedType) -> a
    1106:1107:void visitClass(java.lang.Class) -> a
    1111:1112:void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> a
com.google.common.reflect.TypeToken$Bounds -> com.google.common.reflect.v:
    java.lang.reflect.Type[] bounds -> a
    boolean target -> b
    1061:1064:void <init>(java.lang.reflect.Type[],boolean) -> <init>
    1067:1072:boolean isSubtypeOf(java.lang.reflect.Type) -> a
    1076:1082:boolean isSupertypeOf(java.lang.reflect.Type) -> b
com.google.common.reflect.TypeToken$ClassSet -> com.google.common.reflect.w:
    com.google.common.collect.ImmutableSet classes -> a
    long serialVersionUID -> serialVersionUID
    com.google.common.reflect.TypeToken this$0 -> b
    753:753:void <init>(com.google.common.reflect.TypeToken) -> <init>
    759:770:java.util.Set delegate() -> delegate
    776:776:com.google.common.reflect.TypeToken$TypeSet classes() -> classes
    783:785:java.util.Set rawTypes() -> rawTypes
    790:790:com.google.common.reflect.TypeToken$TypeSet interfaces() -> interfaces
    794:794:java.lang.Object readResolve() -> readResolve
    753:753:java.util.Collection delegate() -> delegate
    753:753:java.lang.Object delegate() -> delegate
    753:753:void <init>(com.google.common.reflect.TypeToken,byte) -> <init>
com.google.common.reflect.TypeToken$InterfaceSet -> com.google.common.reflect.x:
    com.google.common.reflect.TypeToken$TypeSet allTypes -> a
    com.google.common.collect.ImmutableSet interfaces -> b
    long serialVersionUID -> serialVersionUID
    com.google.common.reflect.TypeToken this$0 -> c
    704:706:void <init>(com.google.common.reflect.TypeToken,com.google.common.reflect.TypeToken$TypeSet) -> <init>
    710:715:java.util.Set delegate() -> delegate
    721:721:com.google.common.reflect.TypeToken$TypeSet interfaces() -> interfaces
    728:738:java.util.Set rawTypes() -> rawTypes
    743:743:com.google.common.reflect.TypeToken$TypeSet classes() -> classes
    747:747:java.lang.Object readResolve() -> readResolve
    699:699:java.util.Collection delegate() -> delegate
    699:699:java.lang.Object delegate() -> delegate
com.google.common.reflect.TypeToken$InterfaceSet$1 -> com.google.common.reflect.y:
    732:732:void <init>(com.google.common.reflect.TypeToken$InterfaceSet) -> <init>
    735:735:boolean apply(java.lang.Class) -> a
    732:732:boolean apply(java.lang.Object) -> apply
com.google.common.reflect.TypeToken$SimpleTypeToken -> com.google.common.reflect.z:
    long serialVersionUID -> serialVersionUID
    1285:1286:void <init>(java.lang.reflect.Type) -> <init>
com.google.common.reflect.TypeToken$TypeCollector -> com.google.common.reflect.A:
    com.google.common.reflect.TypeToken$TypeCollector FOR_GENERIC_TYPE -> a
    com.google.common.reflect.TypeToken$TypeCollector FOR_RAW_TYPE -> b
    1296:1296:void <init>() -> <init>
    1338:1338:com.google.common.reflect.TypeToken$TypeCollector classesOnly() -> a
    1358:1358:com.google.common.collect.ImmutableList collectTypes(java.lang.Object) -> a
    1363:1367:com.google.common.collect.ImmutableList collectTypes(java.lang.Iterable) -> a
    1373:1393:int collectTypes(java.lang.Object,java.util.Map) -> a
    1398:1405:com.google.common.collect.ImmutableList sortKeysByValue(java.util.Map,java.util.Comparator) -> a
    java.lang.Class getRawType(java.lang.Object) -> b
    java.lang.Iterable getInterfaces(java.lang.Object) -> c
    java.lang.Object getSuperclass(java.lang.Object) -> d
    1296:1296:void <init>(byte) -> <init>
    1298:1317:void <clinit>() -> <clinit>
com.google.common.reflect.TypeToken$TypeCollector$1 -> com.google.common.reflect.B:
    1299:1299:void <init>() -> <init>
    1302:1302:java.lang.Class getRawType(com.google.common.reflect.TypeToken) -> a
    1307:1307:java.lang.Iterable getInterfaces(com.google.common.reflect.TypeToken) -> b
    1313:1313:com.google.common.reflect.TypeToken getSuperclass(com.google.common.reflect.TypeToken) -> c
    1299:1299:java.lang.Object getSuperclass(java.lang.Object) -> d
    1299:1299:java.lang.Iterable getInterfaces(java.lang.Object) -> c
    1299:1299:java.lang.Class getRawType(java.lang.Object) -> b
com.google.common.reflect.TypeToken$TypeCollector$2 -> com.google.common.reflect.C:
    1318:1318:void <init>() -> <init>
    1321:1321:java.lang.Class getRawType(java.lang.Class) -> a
    1326:1326:java.lang.Iterable getInterfaces(java.lang.Class) -> b
    1332:1332:java.lang.Class getSuperclass(java.lang.Class) -> c
    1318:1318:java.lang.Object getSuperclass(java.lang.Object) -> d
    1318:1318:java.lang.Iterable getInterfaces(java.lang.Object) -> c
    1318:1318:java.lang.Class getRawType(java.lang.Object) -> b
com.google.common.reflect.TypeToken$TypeCollector$3 -> com.google.common.reflect.D:
    1338:1338:void <init>(com.google.common.reflect.TypeToken$TypeCollector,com.google.common.reflect.TypeToken$TypeCollector) -> <init>
    1341:1341:java.lang.Iterable getInterfaces(java.lang.Object) -> c
    1346:1352:com.google.common.collect.ImmutableList collectTypes(java.lang.Iterable) -> a
com.google.common.reflect.TypeToken$TypeCollector$4 -> com.google.common.reflect.E:
    java.util.Comparator val$valueComparator -> a
    java.util.Map val$map -> b
    1399:1399:void <init>(java.util.Comparator,java.util.Map) -> <init>
    1402:1402:int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector -> com.google.common.reflect.F:
    com.google.common.reflect.TypeToken$TypeCollector delegate -> c
    1418:1420:void <init>(com.google.common.reflect.TypeToken$TypeCollector) -> <init>
    1424:1424:java.lang.Class getRawType(java.lang.Object) -> b
    1429:1429:java.lang.Iterable getInterfaces(java.lang.Object) -> c
    1434:1434:java.lang.Object getSuperclass(java.lang.Object) -> d
com.google.common.reflect.TypeToken$TypeFilter -> com.google.common.reflect.G:
    com.google.common.reflect.TypeToken$TypeFilter IGNORE_TYPE_VARIABLE_OR_WILDCARD -> a
    com.google.common.reflect.TypeToken$TypeFilter INTERFACE_ONLY -> b
    com.google.common.reflect.TypeToken$TypeFilter[] $VALUES -> c
    800:800:com.google.common.reflect.TypeToken$TypeFilter[] values() -> values
    800:800:com.google.common.reflect.TypeToken$TypeFilter valueOf(java.lang.String) -> valueOf
    800:800:void <init>(java.lang.String,int) -> <init>
    800:800:void <init>(java.lang.String,int,byte) -> <init>
    800:808:void <clinit>() -> <clinit>
com.google.common.reflect.TypeToken$TypeFilter$1 -> com.google.common.reflect.H:
    801:801:void <init>(java.lang.String,int) -> <init>
    804:805:boolean apply(com.google.common.reflect.TypeToken) -> a
    801:801:boolean apply(java.lang.Object) -> apply
com.google.common.reflect.TypeToken$TypeFilter$2 -> com.google.common.reflect.I:
    808:808:void <init>(java.lang.String,int) -> <init>
    811:811:boolean apply(com.google.common.reflect.TypeToken) -> a
    808:808:boolean apply(java.lang.Object) -> apply
com.google.common.reflect.TypeToken$TypeSet -> com.google.common.reflect.TypeToken$TypeSet:
    com.google.common.collect.ImmutableSet types -> a
    long serialVersionUID -> serialVersionUID
    com.google.common.reflect.TypeToken this$0 -> b
    658:658:void <init>(com.google.common.reflect.TypeToken) -> <init>
    662:662:com.google.common.reflect.TypeToken$TypeSet interfaces() -> interfaces
    667:667:com.google.common.reflect.TypeToken$TypeSet classes() -> classes
    672:683:java.util.Set delegate() -> delegate
    691:693:java.util.Set rawTypes() -> rawTypes
    654:654:java.util.Collection delegate() -> delegate
    654:654:java.lang.Object delegate() -> delegate
com.google.common.reflect.TypeVisitor -> com.google.common.reflect.J:
    java.util.Set visited -> a
    56:58:void <init>() -> <init>
    65:92:void visit(java.lang.reflect.Type[]) -> a
    94:94:void visitClass(java.lang.Class) -> a
    96:96:void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> a
    98:98:void visitParameterizedType(java.lang.reflect.ParameterizedType) -> a
    100:100:void visitTypeVariable(java.lang.reflect.TypeVariable) -> a
    102:102:void visitWildcardType(java.lang.reflect.WildcardType) -> a
com.google.common.reflect.Types -> com.google.common.reflect.K:
    com.google.common.base.Function TYPE_NAME -> a
    com.google.common.base.Joiner COMMA_JOINER -> b
    69:81:java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> a
    90:96:java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[]) -> a
    101:102:java.lang.reflect.ParameterizedType newParameterizedType(java.lang.Class,java.lang.reflect.Type[]) -> a
    149:149:java.lang.reflect.TypeVariable newArtificialTypeVariable(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[]) -> a
    156:156:java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type) -> d
    162:162:java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type) -> e
    171:171:java.lang.String toString(java.lang.reflect.Type) -> b
    175:198:java.lang.reflect.Type getComponentType(java.lang.reflect.Type) -> c
    206:220:java.lang.reflect.Type subtypeOfComponentType(java.lang.reflect.Type[]) -> b
    325:331:java.lang.reflect.TypeVariable newTypeVariableImpl(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[]) -> b
    514:514:java.lang.reflect.Type[] toArray(java.util.Collection) -> b
    518:518:java.lang.Iterable filterUpperBounds(java.lang.Iterable) -> b
    522:528:void disallowPrimitiveType(java.lang.reflect.Type[],java.lang.String) -> b
    535:535:java.lang.Class getArrayClass(java.lang.Class) -> a
    54:54:java.lang.reflect.Type access$100(java.lang.reflect.Type[]) -> a
    54:54:void access$200(java.lang.reflect.Type[],java.lang.String) -> a
    54:54:java.lang.reflect.Type[] access$300(java.util.Collection) -> a
    54:54:com.google.common.base.Function access$400() -> a
    54:54:com.google.common.base.Joiner access$500() -> b
    54:54:java.lang.Iterable access$700(java.lang.Iterable) -> a
    57:65:void <clinit>() -> <clinit>
com.google.common.reflect.Types$1 -> com.google.common.reflect.L:
    58:58:void <init>() -> <init>
    61:61:java.lang.String apply(java.lang.reflect.Type) -> a
    58:58:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.reflect.Types$2 -> com.google.common.reflect.M:
    java.util.concurrent.atomic.AtomicReference val$result -> a
    177:177:void <init>(java.util.concurrent.atomic.AtomicReference) -> <init>
    180:181:void visitTypeVariable(java.lang.reflect.TypeVariable) -> a
    185:186:void visitWildcardType(java.lang.reflect.WildcardType) -> a
    190:191:void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> a
    195:196:void visitClass(java.lang.Class) -> a
com.google.common.reflect.Types$ClassOwnership -> com.google.common.reflect.N:
    com.google.common.reflect.Types$ClassOwnership OWNED_BY_ENCLOSING_CLASS -> b
    com.google.common.reflect.Types$ClassOwnership LOCAL_CLASS_HAS_NO_OWNER -> c
    com.google.common.reflect.Types$ClassOwnership JVM_BEHAVIOR -> a
    com.google.common.reflect.Types$ClassOwnership[] $VALUES -> d
    106:106:com.google.common.reflect.Types$ClassOwnership[] values() -> values
    106:106:com.google.common.reflect.Types$ClassOwnership valueOf(java.lang.String) -> valueOf
    106:106:void <init>(java.lang.String,int) -> <init>
    java.lang.Class getOwnerType(java.lang.Class) -> a
    132:139:com.google.common.reflect.Types$ClassOwnership detectJvmBehavior() -> a
    106:106:void <init>(java.lang.String,int,byte) -> <init>
    106:128:void <clinit>() -> <clinit>
com.google.common.reflect.Types$ClassOwnership$1 -> com.google.common.reflect.O:
    107:107:void <init>(java.lang.String,int) -> <init>
    111:111:java.lang.Class getOwnerType(java.lang.Class) -> a
com.google.common.reflect.Types$ClassOwnership$1LocalClass -> com.google.common.reflect.P:
    131:131:void <init>() -> <init>
com.google.common.reflect.Types$ClassOwnership$2 -> com.google.common.reflect.Q:
    114:114:void <init>(java.lang.String,int) -> <init>
    118:121:java.lang.Class getOwnerType(java.lang.Class) -> a
com.google.common.reflect.Types$ClassOwnership$3 -> com.google.common.reflect.R:
    132:132:void <init>() -> <init>
com.google.common.reflect.Types$GenericArrayTypeImpl -> com.google.common.reflect.S:
    java.lang.reflect.Type componentType -> a
    long serialVersionUID -> serialVersionUID
    227:229:void <init>(java.lang.reflect.Type) -> <init>
    233:233:java.lang.reflect.Type getGenericComponentType() -> getGenericComponentType
    238:238:java.lang.String toString() -> toString
    243:243:int hashCode() -> hashCode
    248:252:boolean equals(java.lang.Object) -> equals
com.google.common.reflect.Types$JavaVersion -> com.google.common.reflect.T:
    com.google.common.reflect.Types$JavaVersion JAVA6 -> d
    com.google.common.reflect.Types$JavaVersion JAVA7 -> a
    com.google.common.reflect.Types$JavaVersion JAVA8 -> b
    com.google.common.reflect.Types$JavaVersion JAVA9 -> e
    com.google.common.reflect.Types$JavaVersion CURRENT -> c
    com.google.common.reflect.Types$JavaVersion[] $VALUES -> f
    539:539:com.google.common.reflect.Types$JavaVersion[] values() -> values
    539:539:com.google.common.reflect.Types$JavaVersion valueOf(java.lang.String) -> valueOf
    539:539:void <init>(java.lang.String,int) -> <init>
    java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> a
    java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> b
    648:652:com.google.common.collect.ImmutableList usedInGenericType(java.lang.reflect.Type[]) -> a
    656:656:java.lang.String typeName(java.lang.reflect.Type) -> c
    660:660:boolean jdkTypeDuplicatesOwnerName() -> a
    539:539:void <init>(java.lang.String,int,byte) -> <init>
    539:641:void <clinit>() -> <clinit>
com.google.common.reflect.Types$JavaVersion$1 -> com.google.common.reflect.U:
    540:540:void <init>(java.lang.String,int) -> <init>
    543:543:java.lang.reflect.GenericArrayType newArrayType(java.lang.reflect.Type) -> d
    548:555:java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> b
    540:540:java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> a
com.google.common.reflect.Types$JavaVersion$2 -> com.google.common.reflect.V:
    558:558:void <init>(java.lang.String,int) -> <init>
    561:564:java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> a
    570:570:java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> b
com.google.common.reflect.Types$JavaVersion$3 -> com.google.common.reflect.W:
    573:573:void <init>(java.lang.String,int) -> <init>
    576:576:java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> a
    581:581:java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> b
    587:599:java.lang.String typeName(java.lang.reflect.Type) -> c
com.google.common.reflect.Types$JavaVersion$4 -> com.google.common.reflect.X:
    603:603:void <init>(java.lang.String,int) -> <init>
    606:606:java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> a
    611:611:java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> b
    616:616:java.lang.String typeName(java.lang.reflect.Type) -> c
    621:621:boolean jdkTypeDuplicatesOwnerName() -> a
com.google.common.reflect.Types$JavaVersion$5 -> com.google.common.reflect.Y:
    629:629:void <init>() -> <init>
com.google.common.reflect.Types$JavaVersion$6 -> com.google.common.reflect.Z:
    636:636:void <init>() -> <init>
com.google.common.reflect.Types$NativeTypeVariableEquals -> com.google.common.reflect.aa:
    boolean NATIVE_TYPE_VARIABLE_ONLY -> a
    674:674:void <init>() -> <init>
    675:677:void <clinit>() -> <clinit>
com.google.common.reflect.Types$ParameterizedTypeImpl -> com.google.common.reflect.ab:
    java.lang.reflect.Type ownerType -> a
    com.google.common.collect.ImmutableList argumentsList -> b
    java.lang.Class rawType -> c
    long serialVersionUID -> serialVersionUID
    264:271:void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[]) -> <init>
    275:275:java.lang.reflect.Type[] getActualTypeArguments() -> getActualTypeArguments
    280:280:java.lang.reflect.Type getRawType() -> getRawType
    285:285:java.lang.reflect.Type getOwnerType() -> getOwnerType
    290:299:java.lang.String toString() -> toString
    304:306:int hashCode() -> hashCode
    311:317:boolean equals(java.lang.Object) -> equals
com.google.common.reflect.Types$TypeVariableImpl -> com.google.common.reflect.ac:
    java.lang.reflect.GenericDeclaration genericDeclaration -> a
    java.lang.String name -> b
    com.google.common.collect.ImmutableList bounds -> c
    401:406:void <init>(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[]) -> <init>
    413:413:java.lang.reflect.GenericDeclaration getGenericDeclaration() -> a
    417:417:java.lang.String getName() -> b
    426:426:java.lang.String toString() -> toString
    431:431:int hashCode() -> hashCode
    436:456:boolean equals(java.lang.Object) -> equals
com.google.common.reflect.Types$TypeVariableInvocationHandler -> com.google.common.reflect.ad:
    com.google.common.collect.ImmutableMap typeVariableMethods -> a
    com.google.common.reflect.Types$TypeVariableImpl typeVariableImpl -> b
    375:377:void <init>(com.google.common.reflect.Types$TypeVariableImpl) -> <init>
    381:389:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    354:354:com.google.common.reflect.Types$TypeVariableImpl access$600(com.google.common.reflect.Types$TypeVariableInvocationHandler) -> a
    358:371:void <clinit>() -> <clinit>
com.google.common.reflect.Types$WildcardTypeImpl -> com.google.common.reflect.ae:
    com.google.common.collect.ImmutableList lowerBounds -> a
    com.google.common.collect.ImmutableList upperBounds -> b
    long serialVersionUID -> serialVersionUID
    466:471:void <init>(java.lang.reflect.Type[],java.lang.reflect.Type[]) -> <init>
    475:475:java.lang.reflect.Type[] getLowerBounds() -> getLowerBounds
    480:480:java.lang.reflect.Type[] getUpperBounds() -> getUpperBounds
    485:490:boolean equals(java.lang.Object) -> equals
    495:495:int hashCode() -> hashCode
    500:507:java.lang.String toString() -> toString
com.google.common.util.concurrent.AbstractCatchingFuture -> com.google.common.util.concurrent.a:
    com.google.common.util.concurrent.ListenableFuture inputFuture -> a
    java.lang.Class exceptionType -> b
    java.lang.Object fallback -> c
    40:42:com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor) -> a
    50:52:com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor) -> a
    64:68:void <init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,java.lang.Object) -> <init>
    72:134:void run() -> run
    138:156:java.lang.String pendingToString() -> pendingToString
    java.lang.Object doFallback(java.lang.Object,java.lang.Throwable) -> a
    void setResult(java.lang.Object) -> a
    169:173:void afterDone() -> afterDone
com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture -> com.google.common.util.concurrent.b:
    186:187:void <init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction) -> <init>
    192:198:com.google.common.util.concurrent.ListenableFuture doFallback(com.google.common.util.concurrent.AsyncFunction,java.lang.Throwable) -> a
    203:204:void setResult(com.google.common.util.concurrent.ListenableFuture) -> b
    179:179:void setResult(java.lang.Object) -> a
    179:179:java.lang.Object doFallback(java.lang.Object,java.lang.Throwable) -> a
com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture -> com.google.common.util.concurrent.c:
    217:218:void <init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function) -> <init>
    223:223:java.lang.Object doFallback(com.google.common.base.Function,java.lang.Throwable) -> a
    228:229:void setResult(java.lang.Object) -> a
    211:211:java.lang.Object doFallback(java.lang.Object,java.lang.Throwable) -> a
com.google.common.util.concurrent.AbstractExecutionThreadService -> com.google.common.util.concurrent.AbstractExecutionThreadService:
    java.util.logging.Logger logger -> a
    com.google.common.util.concurrent.Service delegate -> b
    42:105:void <init>() -> <init>
    112:112:void startUp() -> startUp
    void run() -> run
    137:137:void shutDown() -> shutDown
    144:144:void triggerShutdown() -> triggerShutdown
    157:157:java.util.concurrent.Executor executor() -> executor
    167:167:java.lang.String toString() -> toString
    172:172:boolean isRunning() -> isRunning
    177:177:com.google.common.util.concurrent.Service$State state() -> state
    183:184:void addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor) -> addListener
    189:189:java.lang.Throwable failureCause() -> failureCause
    196:197:com.google.common.util.concurrent.Service startAsync() -> startAsync
    204:205:com.google.common.util.concurrent.Service stopAsync() -> stopAsync
    211:212:void awaitRunning() -> awaitRunning
    217:218:void awaitRunning(long,java.util.concurrent.TimeUnit) -> awaitRunning
    223:224:void awaitTerminated() -> awaitTerminated
    229:230:void awaitTerminated(long,java.util.concurrent.TimeUnit) -> awaitTerminated
    241:241:java.lang.String serviceName() -> serviceName
    37:37:java.util.logging.Logger access$000() -> a
    38:39:void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractExecutionThreadService$1 -> com.google.common.util.concurrent.d:
    com.google.common.util.concurrent.AbstractExecutionThreadService this$0 -> a
    43:43:void <init>(com.google.common.util.concurrent.AbstractExecutionThreadService) -> <init>
    46:91:void doStart() -> doStart
    95:96:void doStop() -> doStop
    100:100:java.lang.String toString() -> toString
com.google.common.util.concurrent.AbstractExecutionThreadService$1$1 -> com.google.common.util.concurrent.e:
    com.google.common.util.concurrent.AbstractExecutionThreadService$1 this$1 -> a
    49:49:void <init>(com.google.common.util.concurrent.AbstractExecutionThreadService$1) -> <init>
    52:52:java.lang.String get() -> a
    49:49:java.lang.Object get() -> get
com.google.common.util.concurrent.AbstractExecutionThreadService$1$2 -> com.google.common.util.concurrent.f:
    com.google.common.util.concurrent.AbstractExecutionThreadService$1 this$1 -> a
    56:56:void <init>(com.google.common.util.concurrent.AbstractExecutionThreadService$1) -> <init>
    60:89:void run() -> run
com.google.common.util.concurrent.AbstractExecutionThreadService$2 -> com.google.common.util.concurrent.g:
    com.google.common.util.concurrent.AbstractExecutionThreadService this$0 -> a
    157:157:void <init>(com.google.common.util.concurrent.AbstractExecutionThreadService) -> <init>
    160:161:void execute(java.lang.Runnable) -> execute
com.google.common.util.concurrent.AbstractFuture -> com.google.common.util.concurrent.AbstractFuture:
    boolean GENERATE_CANCELLATION_CAUSES -> a
    java.util.logging.Logger log -> b
    com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER -> c
    java.lang.Object NULL -> d
    java.lang.Object value -> e
    com.google.common.util.concurrent.AbstractFuture$Listener listeners -> f
    com.google.common.util.concurrent.AbstractFuture$Waiter waiters -> g
    225:250:void removeWaiter(com.google.common.util.concurrent.AbstractFuture$Waiter) -> a
    361:361:void <init>() -> <init>
    401:495:java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    509:543:java.lang.Object get() -> get
    550:559:java.lang.Object getDoneValue(java.lang.Object) -> a
    565:566:boolean isDone() -> isDone
    571:572:boolean isCancelled() -> isCancelled
    591:648:boolean cancel(boolean) -> cancel
    662:662:void interruptTask() -> interruptTask
    671:672:boolean wasInterrupted() -> wasInterrupted
    682:709:void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    725:730:boolean set(java.lang.Object) -> set
    747:752:boolean setException(java.lang.Throwable) -> setException
    783:823:boolean setFuture(com.google.common.util.concurrent.ListenableFuture) -> setFuture
    833:898:java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture) -> b
    907:920:java.lang.Object getUninterruptibly(java.util.concurrent.Future) -> b
    925:963:void complete(com.google.common.util.concurrent.AbstractFuture) -> e
    978:978:void afterDone() -> afterDone
    1004:1010:java.lang.Throwable tryInternalFastPathGetFailure() -> tryInternalFastPathGetFailure
    1018:1021:void maybePropagateCancellationTo(java.util.concurrent.Future) -> a
    1027:1032:void releaseWaiters() -> c
    1047:1056:com.google.common.util.concurrent.AbstractFuture$Listener clearListeners(com.google.common.util.concurrent.AbstractFuture$Listener) -> a
    1062:1070:java.lang.String toString() -> toString
    1081:1086:java.lang.String pendingToString() -> pendingToString
    1092:1122:void addPendingString(java.lang.StringBuilder) -> a
    1126:1137:void addDoneString(java.lang.StringBuilder) -> b
    1146:1156:void appendUserObject(java.lang.StringBuilder,java.lang.Object) -> a
    1164:1174:void executeListener(java.lang.Runnable,java.util.concurrent.Executor) -> a
    1376:1378:java.util.concurrent.CancellationException cancellationExceptionWithCause(java.lang.String,java.lang.Throwable) -> a
    68:68:com.google.common.util.concurrent.AbstractFuture$AtomicHelper access$200() -> a
    68:68:boolean access$300() -> b
    68:68:java.lang.Object access$400(com.google.common.util.concurrent.AbstractFuture) -> a
    68:68:java.lang.Object access$500(com.google.common.util.concurrent.ListenableFuture) -> a
    68:68:void access$600(com.google.common.util.concurrent.AbstractFuture) -> b
    68:68:com.google.common.util.concurrent.AbstractFuture$Waiter access$800(com.google.common.util.concurrent.AbstractFuture) -> c
    68:68:com.google.common.util.concurrent.AbstractFuture$Waiter access$802(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter) -> a
    68:68:com.google.common.util.concurrent.AbstractFuture$Listener access$900(com.google.common.util.concurrent.AbstractFuture) -> d
    68:68:com.google.common.util.concurrent.AbstractFuture$Listener access$902(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener) -> a
    68:68:java.lang.Object access$402(com.google.common.util.concurrent.AbstractFuture,java.lang.Object) -> a
    72:268:void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractFuture$1 -> com.google.common.util.concurrent.h:
    1035:1037:long com.google.common.util.concurrent.Internal.toNanosSaturated(java.time.Duration):35:37 -> a
    2025:2025:boolean com.google.common.util.concurrent.Platform.isInstanceOfThrowableClass(java.lang.Throwable,java.lang.Class):25:25 -> a
com.google.common.util.concurrent.AbstractFuture$AtomicHelper -> com.google.common.util.concurrent.i:
    1176:1176:void <init>() -> <init>
    void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter,java.lang.Thread) -> a
    void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> a
    boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> a
    boolean casListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener,com.google.common.util.concurrent.AbstractFuture$Listener) -> a
    boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object) -> a
    1176:1176:void <init>(byte) -> <init>
com.google.common.util.concurrent.AbstractFuture$Cancellation -> com.google.common.util.concurrent.j:
    com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_INTERRUPTED -> a
    com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_CANCELLED -> b
    boolean wasInterrupted -> c
    java.lang.Throwable cause -> d
    306:309:void <init>(boolean,java.lang.Throwable) -> <init>
    294:301:void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractFuture$Failure -> com.google.common.util.concurrent.k:
    com.google.common.util.concurrent.AbstractFuture$Failure FALLBACK_INSTANCE -> a
    java.lang.Throwable exception -> b
    282:284:void <init>(java.lang.Throwable) -> <init>
    272:272:void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractFuture$Failure$1 -> com.google.common.util.concurrent.l:
    274:274:void <init>(java.lang.String) -> <init>
    277:277:java.lang.Throwable fillInStackTrace() -> fillInStackTrace
com.google.common.util.concurrent.AbstractFuture$Listener -> com.google.common.util.concurrent.m:
    com.google.common.util.concurrent.AbstractFuture$Listener TOMBSTONE -> a
    java.lang.Runnable task -> b
    java.util.concurrent.Executor executor -> c
    com.google.common.util.concurrent.AbstractFuture$Listener next -> d
    261:264:void <init>(java.lang.Runnable,java.util.concurrent.Executor) -> <init>
    254:254:void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper -> com.google.common.util.concurrent.n:
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterThreadUpdater -> a
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterNextUpdater -> b
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater waitersUpdater -> c
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater listenersUpdater -> d
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater valueUpdater -> e
    1289:1295:void <init>(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater) -> <init>
    1299:1300:void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter,java.lang.Thread) -> a
    1304:1305:void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> a
    1309:1309:boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> a
    1314:1314:boolean casListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener,com.google.common.util.concurrent.AbstractFuture$Listener) -> a
    1319:1319:boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object) -> a
com.google.common.util.concurrent.AbstractFuture$SetFuture -> com.google.common.util.concurrent.o:
    com.google.common.util.concurrent.AbstractFuture owner -> a
    com.google.common.util.concurrent.ListenableFuture future -> b
    317:320:void <init>(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.ListenableFuture) -> <init>
    324:332:void run() -> run
com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper -> com.google.common.util.concurrent.p:
    1329:1329:void <init>() -> <init>
    1332:1333:void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter,java.lang.Thread) -> a
    1337:1338:void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> a
    1342:1348:boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> a
    1353:1359:boolean casListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener,com.google.common.util.concurrent.AbstractFuture$Listener) -> a
    1364:1370:boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object) -> a
    1329:1329:void <init>(byte) -> <init>
com.google.common.util.concurrent.AbstractFuture$Trusted -> com.google.common.util.concurrent.q:
com.google.common.util.concurrent.AbstractFuture$TrustedFuture -> com.google.common.util.concurrent.r:
    87:87:void <init>() -> <init>
    91:91:java.lang.Object get() -> get
    98:98:java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    103:103:boolean isDone() -> isDone
    108:108:boolean isCancelled() -> isCancelled
    113:114:void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    119:119:boolean cancel(boolean) -> cancel
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper -> com.google.common.util.concurrent.s:
    sun.misc.Unsafe UNSAFE -> a
    long LISTENERS_OFFSET -> b
    long WAITERS_OFFSET -> c
    long VALUE_OFFSET -> d
    long WAITER_THREAD_OFFSET -> e
    long WAITER_NEXT_OFFSET -> f
    1199:1199:void <init>() -> <init>
    1249:1250:void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter,java.lang.Thread) -> a
    1254:1255:void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> a
    1260:1260:boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> a
    1266:1266:boolean casListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener,com.google.common.util.concurrent.AbstractFuture$Listener) -> a
    1272:1272:boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object) -> a
    1199:1199:void <init>(byte) -> <init>
    1208:1245:void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1 -> com.google.common.util.concurrent.t:
    1215:1215:void <init>() -> <init>
    1218:1226:sun.misc.Unsafe run() -> a
    1215:1215:java.lang.Object run() -> run
com.google.common.util.concurrent.AbstractFuture$Waiter -> com.google.common.util.concurrent.u:
    com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE -> a
    java.lang.Thread thread -> b
    com.google.common.util.concurrent.AbstractFuture$Waiter next -> c
    188:188:void <init>() -> <init>
    190:193:void <init>(byte) -> <init>
    198:199:void setNext(com.google.common.util.concurrent.AbstractFuture$Waiter) -> a
    205:210:void unpark() -> a
    179:179:void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractIdleService -> com.google.common.util.concurrent.AbstractIdleService:
    com.google.common.base.Supplier threadNameSupplier -> a
    com.google.common.util.concurrent.Service delegate -> b
    39:95:void <init>() -> <init>
    void startUp() -> startUp
    void shutDown() -> shutDown
    111:111:java.util.concurrent.Executor executor() -> executor
    121:121:java.lang.String toString() -> toString
    126:126:boolean isRunning() -> isRunning
    131:131:com.google.common.util.concurrent.Service$State state() -> state
    137:138:void addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor) -> addListener
    143:143:java.lang.Throwable failureCause() -> failureCause
    150:151:com.google.common.util.concurrent.Service startAsync() -> startAsync
    158:159:com.google.common.util.concurrent.Service stopAsync() -> stopAsync
    165:166:void awaitRunning() -> awaitRunning
    171:172:void awaitRunning(long,java.util.concurrent.TimeUnit) -> awaitRunning
    177:178:void awaitTerminated() -> awaitTerminated
    183:184:void awaitTerminated(long,java.util.concurrent.TimeUnit) -> awaitTerminated
    193:193:java.lang.String serviceName() -> serviceName
    36:36:com.google.common.base.Supplier access$200(com.google.common.util.concurrent.AbstractIdleService) -> a
com.google.common.util.concurrent.AbstractIdleService$1 -> com.google.common.util.concurrent.v:
    com.google.common.util.concurrent.AbstractIdleService this$0 -> a
    111:111:void <init>(com.google.common.util.concurrent.AbstractIdleService) -> <init>
    114:115:void execute(java.lang.Runnable) -> execute
com.google.common.util.concurrent.AbstractIdleService$DelegateService -> com.google.common.util.concurrent.w:
    com.google.common.util.concurrent.AbstractIdleService this$0 -> a
    53:53:void <init>(com.google.common.util.concurrent.AbstractIdleService) -> <init>
    56:69:void doStart() -> doStart
    73:86:void doStop() -> doStop
    90:90:java.lang.String toString() -> toString
    53:53:void <init>(com.google.common.util.concurrent.AbstractIdleService,byte) -> <init>
com.google.common.util.concurrent.AbstractIdleService$DelegateService$1 -> com.google.common.util.concurrent.x:
    com.google.common.util.concurrent.AbstractIdleService$DelegateService this$1 -> a
    58:58:void <init>(com.google.common.util.concurrent.AbstractIdleService$DelegateService) -> <init>
    62:67:void run() -> run
com.google.common.util.concurrent.AbstractIdleService$DelegateService$2 -> com.google.common.util.concurrent.y:
    com.google.common.util.concurrent.AbstractIdleService$DelegateService this$1 -> a
    75:75:void <init>(com.google.common.util.concurrent.AbstractIdleService$DelegateService) -> <init>
    79:84:void run() -> run
com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier -> com.google.common.util.concurrent.z:
    com.google.common.util.concurrent.AbstractIdleService this$0 -> a
    42:42:void <init>(com.google.common.util.concurrent.AbstractIdleService) -> <init>
    45:45:java.lang.String get() -> a
    41:41:java.lang.Object get() -> get
    42:42:void <init>(com.google.common.util.concurrent.AbstractIdleService,byte) -> <init>
com.google.common.util.concurrent.AbstractListeningExecutorService -> com.google.common.util.concurrent.AbstractListeningExecutorService:
    39:39:void <init>() -> <init>
    45:45:java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object) -> newTaskFor
    51:51:java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable) -> newTaskFor
    56:56:com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable) -> submit
    61:61:com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable,java.lang.Object) -> submit
    66:66:com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable) -> submit
    36:36:java.util.concurrent.Future submit(java.util.concurrent.Callable) -> submit
    36:36:java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object) -> submit
    36:36:java.util.concurrent.Future submit(java.lang.Runnable) -> submit
com.google.common.util.concurrent.AbstractScheduledService -> com.google.common.util.concurrent.AbstractScheduledService:
    java.util.logging.Logger logger -> a
    com.google.common.util.concurrent.AbstractService delegate -> b
    198:313:void <init>() -> <init>
    void runOneIteration() -> runOneIteration
    327:327:void startUp() -> startUp
    334:334:void shutDown() -> shutDown
    com.google.common.util.concurrent.AbstractScheduledService$Scheduler scheduler() -> scheduler
    365:385:java.util.concurrent.ScheduledExecutorService executor() -> executor
    395:395:java.lang.String serviceName() -> serviceName
    400:400:java.lang.String toString() -> toString
    405:405:boolean isRunning() -> isRunning
    410:410:com.google.common.util.concurrent.Service$State state() -> state
    416:417:void addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor) -> addListener
    422:422:java.lang.Throwable failureCause() -> failureCause
    429:430:com.google.common.util.concurrent.Service startAsync() -> startAsync
    437:438:com.google.common.util.concurrent.Service stopAsync() -> stopAsync
    444:445:void awaitRunning() -> awaitRunning
    450:451:void awaitRunning(long,java.util.concurrent.TimeUnit) -> awaitRunning
    456:457:void awaitTerminated() -> awaitTerminated
    462:463:void awaitTerminated(long,java.util.concurrent.TimeUnit) -> awaitTerminated
    102:102:java.util.logging.Logger access$400() -> a
    102:102:com.google.common.util.concurrent.AbstractService access$500(com.google.common.util.concurrent.AbstractScheduledService) -> a
    103:103:void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractScheduledService$1 -> com.google.common.util.concurrent.A:
    java.util.concurrent.ScheduledExecutorService val$executor -> a
    373:373:void <init>(com.google.common.util.concurrent.AbstractScheduledService,java.util.concurrent.ScheduledExecutorService) -> <init>
    376:377:void terminated(com.google.common.util.concurrent.Service$State) -> terminated
    381:382:void failed(com.google.common.util.concurrent.Service$State,java.lang.Throwable) -> failed
com.google.common.util.concurrent.AbstractScheduledService$1ThreadFactoryImpl -> com.google.common.util.concurrent.B:
    com.google.common.util.concurrent.AbstractScheduledService this$0 -> a
    359:359:void <init>(com.google.common.util.concurrent.AbstractScheduledService) -> <init>
    362:362:java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler -> com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler:
    474:474:void <init>() -> <init>
    com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule getNextSchedule() -> getNextSchedule
com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule -> com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule:
    609:612:void <init>(long,java.util.concurrent.TimeUnit) -> <init>
com.google.common.util.concurrent.AbstractScheduledService$Scheduler -> com.google.common.util.concurrent.AbstractScheduledService$Scheduler:
    128:129:com.google.common.util.concurrent.AbstractScheduledService$Scheduler newFixedDelaySchedule(java.time.Duration,java.time.Duration) -> newFixedDelaySchedule
    144:146:com.google.common.util.concurrent.AbstractScheduledService$Scheduler newFixedDelaySchedule(long,long,java.util.concurrent.TimeUnit) -> newFixedDelaySchedule
    164:165:com.google.common.util.concurrent.AbstractScheduledService$Scheduler newFixedRateSchedule(java.time.Duration,java.time.Duration) -> newFixedRateSchedule
    179:181:com.google.common.util.concurrent.AbstractScheduledService$Scheduler newFixedRateSchedule(long,long,java.util.concurrent.TimeUnit) -> newFixedRateSchedule
    java.util.concurrent.Future schedule$6e26a758(java.util.concurrent.ScheduledExecutorService,java.lang.Runnable) -> a
    194:194:void <init>() -> <init>
    117:117:void <init>(byte) -> <init>
com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1 -> com.google.common.util.concurrent.C:
    long val$initialDelay -> a
    long val$delay -> b
    java.util.concurrent.TimeUnit val$unit -> c
    146:146:void <init>(long,long,java.util.concurrent.TimeUnit) -> <init>
    150:150:java.util.concurrent.Future schedule$6e26a758(java.util.concurrent.ScheduledExecutorService,java.lang.Runnable) -> a
com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2 -> com.google.common.util.concurrent.D:
    long val$initialDelay -> a
    long val$period -> b
    java.util.concurrent.TimeUnit val$unit -> c
    181:181:void <init>(long,long,java.util.concurrent.TimeUnit) -> <init>
    185:185:java.util.concurrent.Future schedule$6e26a758(java.util.concurrent.ScheduledExecutorService,java.lang.Runnable) -> a
com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate -> com.google.common.util.concurrent.E:
    java.util.concurrent.Future runningTask -> b
    java.util.concurrent.ScheduledExecutorService executorService -> c
    java.util.concurrent.locks.ReentrantLock lock -> d
    java.lang.Runnable task -> e
    com.google.common.util.concurrent.AbstractScheduledService this$0 -> a
    201:242:void <init>(com.google.common.util.concurrent.AbstractScheduledService) -> <init>
    246:275:void doStart() -> doStart
    279:304:void doStop() -> doStop
    308:308:java.lang.String toString() -> toString
    201:201:void <init>(com.google.common.util.concurrent.AbstractScheduledService,byte) -> <init>
    201:201:java.util.concurrent.locks.ReentrantLock access$200(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> a
    201:201:java.util.concurrent.Future access$300(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> b
    201:201:java.util.concurrent.Future access$302(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate,java.util.concurrent.Future) -> a
    201:201:java.util.concurrent.ScheduledExecutorService access$600(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> c
    201:201:java.lang.Runnable access$700(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> d
com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$1 -> com.google.common.util.concurrent.F:
    com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate this$1 -> a
    249:249:void <init>(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> <init>
    252:252:java.lang.String get() -> a
    249:249:java.lang.Object get() -> get
com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$2 -> com.google.common.util.concurrent.G:
    com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate this$1 -> a
    256:256:void <init>(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> <init>
    259:273:void run() -> run
com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$3 -> com.google.common.util.concurrent.H:
    com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate this$1 -> a
    281:281:void <init>(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> <init>
    285:302:void run() -> run
com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$Task -> com.google.common.util.concurrent.I:
    com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate this$1 -> a
    215:215:void <init>(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> <init>
    218:239:void run() -> run
com.google.common.util.concurrent.AbstractService -> com.google.common.util.concurrent.AbstractService:
    com.google.common.util.concurrent.ListenerCallQueue$Event STARTING_EVENT -> a
    com.google.common.util.concurrent.ListenerCallQueue$Event RUNNING_EVENT -> b
    com.google.common.util.concurrent.ListenerCallQueue$Event STOPPING_FROM_STARTING_EVENT -> c
    com.google.common.util.concurrent.ListenerCallQueue$Event STOPPING_FROM_RUNNING_EVENT -> d
    com.google.common.util.concurrent.ListenerCallQueue$Event TERMINATED_FROM_NEW_EVENT -> e
    com.google.common.util.concurrent.ListenerCallQueue$Event TERMINATED_FROM_STARTING_EVENT -> f
    com.google.common.util.concurrent.ListenerCallQueue$Event TERMINATED_FROM_RUNNING_EVENT -> g
    com.google.common.util.concurrent.ListenerCallQueue$Event TERMINATED_FROM_STOPPING_EVENT -> h
    com.google.common.util.concurrent.Monitor monitor -> i
    com.google.common.util.concurrent.Monitor$Guard isStartable -> j
    com.google.common.util.concurrent.Monitor$Guard isStoppable -> k
    com.google.common.util.concurrent.Monitor$Guard hasReachedRunning -> l
    com.google.common.util.concurrent.Monitor$Guard isStopped -> m
    com.google.common.util.concurrent.ListenerCallQueue listeners -> n
    com.google.common.util.concurrent.AbstractService$StateSnapshot snapshot -> o
    92:92:com.google.common.util.concurrent.ListenerCallQueue$Event terminatedEvent(com.google.common.util.concurrent.Service$State) -> a
    106:106:com.google.common.util.concurrent.ListenerCallQueue$Event stoppingEvent(com.google.common.util.concurrent.Service$State) -> b
    119:192:void <init>() -> <init>
    void doStart() -> doStart
    void doStop() -> doStop
    239:239:void doCancelStart() -> doCancelStart
    244:258:com.google.common.util.concurrent.Service startAsync() -> startAsync
    264:295:com.google.common.util.concurrent.Service stopAsync() -> stopAsync
    300:306:void awaitRunning() -> awaitRunning
    310:323:void awaitRunning(long,java.util.concurrent.TimeUnit) -> awaitRunning
    327:333:void awaitTerminated() -> awaitTerminated
    337:355:void awaitTerminated(long,java.util.concurrent.TimeUnit) -> awaitTerminated
    360:371:void checkCurrentState(com.google.common.util.concurrent.Service$State) -> c
    380:405:void notifyStarted() -> notifyStarted
    416:435:void notifyStopped() -> notifyStopped
    443:466:void notifyFailed(java.lang.Throwable) -> notifyFailed
    470:470:boolean isRunning() -> isRunning
    475:475:com.google.common.util.concurrent.Service$State state() -> state
    481:481:java.lang.Throwable failureCause() -> failureCause
    487:488:void addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor) -> addListener
    492:492:java.lang.String toString() -> toString
    500:503:void dispatchListenerEvents() -> a
    506:507:void enqueueStartingEvent() -> b
    510:511:void enqueueRunningEvent() -> c
    514:521:void enqueueStoppingEvent(com.google.common.util.concurrent.Service$State) -> d
    524:541:void enqueueTerminatedEvent(com.google.common.util.concurrent.Service$State) -> e
    545:557:void enqueueFailedEvent(com.google.common.util.concurrent.Service$State,java.lang.Throwable) -> a
    52:52:com.google.common.util.concurrent.Monitor access$000(com.google.common.util.concurrent.AbstractService) -> a
    53:89:void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractService$1 -> com.google.common.util.concurrent.J:
    54:54:void <init>() -> <init>
    57:58:void call(com.google.common.util.concurrent.Service$Listener) -> a
    62:62:java.lang.String toString() -> toString
    54:54:void call(java.lang.Object) -> a
com.google.common.util.concurrent.AbstractService$2 -> com.google.common.util.concurrent.K:
    66:66:void <init>() -> <init>
    69:70:void call(com.google.common.util.concurrent.Service$Listener) -> a
    74:74:java.lang.String toString() -> toString
    66:66:void call(java.lang.Object) -> a
com.google.common.util.concurrent.AbstractService$3 -> com.google.common.util.concurrent.L:
    com.google.common.util.concurrent.Service$State val$from -> a
    92:92:void <init>(com.google.common.util.concurrent.Service$State) -> <init>
    95:96:void call(com.google.common.util.concurrent.Service$Listener) -> a
    100:100:java.lang.String toString() -> toString
    92:92:void call(java.lang.Object) -> a
com.google.common.util.concurrent.AbstractService$4 -> com.google.common.util.concurrent.M:
    com.google.common.util.concurrent.Service$State val$from -> a
    106:106:void <init>(com.google.common.util.concurrent.Service$State) -> <init>
    109:110:void call(com.google.common.util.concurrent.Service$Listener) -> a
    114:114:java.lang.String toString() -> toString
    106:106:void call(java.lang.Object) -> a
com.google.common.util.concurrent.AbstractService$5 -> com.google.common.util.concurrent.N:
    com.google.common.util.concurrent.Service$State val$from -> a
    java.lang.Throwable val$cause -> b
    546:546:void <init>(com.google.common.util.concurrent.AbstractService,com.google.common.util.concurrent.Service$State,java.lang.Throwable) -> <init>
    549:550:void call(com.google.common.util.concurrent.Service$Listener) -> a
    554:554:java.lang.String toString() -> toString
    546:546:void call(java.lang.Object) -> a
com.google.common.util.concurrent.AbstractService$6 -> com.google.common.util.concurrent.O:
    int[] $SwitchMap$com$google$common$util$concurrent$Service$State -> a
    267:267:void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractService$HasReachedRunningGuard -> com.google.common.util.concurrent.P:
    com.google.common.util.concurrent.AbstractService this$0 -> e
    153:155:void <init>(com.google.common.util.concurrent.AbstractService) -> <init>
    159:159:boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.AbstractService$IsStartableGuard -> com.google.common.util.concurrent.Q:
    com.google.common.util.concurrent.AbstractService this$0 -> e
    125:127:void <init>(com.google.common.util.concurrent.AbstractService) -> <init>
    131:131:boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.AbstractService$IsStoppableGuard -> com.google.common.util.concurrent.R:
    com.google.common.util.concurrent.AbstractService this$0 -> e
    139:141:void <init>(com.google.common.util.concurrent.AbstractService) -> <init>
    145:145:boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.AbstractService$IsStoppedGuard -> com.google.common.util.concurrent.S:
    com.google.common.util.concurrent.AbstractService this$0 -> e
    167:169:void <init>(com.google.common.util.concurrent.AbstractService) -> <init>
    173:173:boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.AbstractService$StateSnapshot -> com.google.common.util.concurrent.T:
    com.google.common.util.concurrent.Service$State state -> a
    boolean shutdownWhenStartupFinishes -> b
    java.lang.Throwable failure -> c
    581:582:void <init>(com.google.common.util.concurrent.Service$State) -> <init>
    585:599:void <init>(com.google.common.util.concurrent.Service$State,boolean,java.lang.Throwable) -> <init>
    603:606:com.google.common.util.concurrent.Service$State externalState() -> a
    612:616:java.lang.Throwable failureCause() -> b
com.google.common.util.concurrent.AbstractTransformFuture -> com.google.common.util.concurrent.U:
    com.google.common.util.concurrent.ListenableFuture inputFuture -> a
    java.lang.Object function -> b
    37:40:com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor) -> a
    45:48:com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor) -> a
    58:61:void <init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Object) -> <init>
    65:164:void run() -> run
    java.lang.Object doTransform(java.lang.Object,java.lang.Object) -> a
    void setResult(java.lang.Object) -> a
    176:179:void afterDone() -> afterDone
    183:195:java.lang.String pendingToString() -> pendingToString
com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture -> com.google.common.util.concurrent.V:
    207:208:void <init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction) -> <init>
    213:219:com.google.common.util.concurrent.ListenableFuture doTransform(com.google.common.util.concurrent.AsyncFunction,java.lang.Object) -> a
    224:225:void setResult(com.google.common.util.concurrent.ListenableFuture) -> b
    202:202:void setResult(java.lang.Object) -> a
    202:202:java.lang.Object doTransform(java.lang.Object,java.lang.Object) -> a
com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture -> com.google.common.util.concurrent.W:
    236:237:void <init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function) -> <init>
    242:242:java.lang.Object doTransform(com.google.common.base.Function,java.lang.Object) -> a
    247:248:void setResult(java.lang.Object) -> a
    232:232:java.lang.Object doTransform(java.lang.Object,java.lang.Object) -> a
com.google.common.util.concurrent.AggregateFuture -> com.google.common.util.concurrent.X:
    java.util.logging.Logger logger -> a
    com.google.common.collect.ImmutableCollection futures -> b
    boolean allMustSucceed -> c
    boolean collectsValues -> d
    64:68:void <init>(com.google.common.collect.ImmutableCollection,boolean,boolean) -> <init>
    72:87:void afterDone() -> afterDone
    91:95:java.lang.String pendingToString() -> pendingToString
    107:183:void init() -> c
    192:223:void handleException(java.lang.Throwable) -> a
    226:231:void log(java.lang.Throwable) -> b
    235:240:void addInitialException(java.util.Set) -> a
    249:255:void collectValueFromNonCancelledFuture(int,java.util.concurrent.Future) -> a
    261:266:void decrementCountAndMaybeComplete(com.google.common.collect.ImmutableCollection) -> a
    272:291:void processCompleted(com.google.common.collect.ImmutableCollection) -> b
    306:314:void releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason) -> a
    void collectOneValue(int,java.lang.Object) -> a
    void handleAllCompleted() -> d
    331:343:boolean addCausalChain(java.util.Set,java.lang.Throwable) -> a
    42:42:com.google.common.collect.ImmutableCollection access$002(com.google.common.util.concurrent.AggregateFuture,com.google.common.collect.ImmutableCollection) -> a
    42:42:void access$100(com.google.common.util.concurrent.AggregateFuture,int,java.util.concurrent.Future) -> a
    42:42:void access$200(com.google.common.util.concurrent.AggregateFuture,com.google.common.collect.ImmutableCollection) -> b
    43:43:void <clinit>() -> <clinit>
com.google.common.util.concurrent.AggregateFuture$1 -> com.google.common.util.concurrent.Y:
    com.google.common.util.concurrent.ListenableFuture val$future -> a
    int val$index -> b
    com.google.common.util.concurrent.AggregateFuture this$0 -> c
    129:129:void <init>(com.google.common.util.concurrent.AggregateFuture,com.google.common.util.concurrent.ListenableFuture,int) -> <init>
    133:149:void run() -> run
com.google.common.util.concurrent.AggregateFuture$2 -> com.google.common.util.concurrent.Z:
    com.google.common.collect.ImmutableCollection val$localFutures -> a
    com.google.common.util.concurrent.AggregateFuture this$0 -> b
    173:173:void <init>(com.google.common.util.concurrent.AggregateFuture,com.google.common.collect.ImmutableCollection) -> <init>
    176:177:void run() -> run
com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason -> com.google.common.util.concurrent.aa:
    com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason OUTPUT_FUTURE_DONE -> a
    com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason ALL_INPUT_FUTURES_PROCESSED -> b
    com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason[] $VALUES -> c
    316:316:com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason[] values() -> values
    316:316:com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason valueOf(java.lang.String) -> valueOf
    316:316:void <init>(java.lang.String,int) -> <init>
    316:318:void <clinit>() -> <clinit>
com.google.common.util.concurrent.AggregateFutureState -> com.google.common.util.concurrent.ab:
    java.util.Set seenExceptions -> a
    int remaining -> b
    com.google.common.util.concurrent.AggregateFutureState$AtomicHelper ATOMIC_HELPER -> c
    java.util.logging.Logger log -> d
    43:77:void <init>(int) -> <init>
    96:130:java.util.Set getOrInitSeenExceptions() -> e
    void addInitialException(java.util.Set) -> a
    137:137:int decrementRemainingAndGet() -> f
    141:142:void clearSeenExceptions() -> g
    40:40:java.util.Set access$200(com.google.common.util.concurrent.AggregateFutureState) -> a
    40:40:java.util.Set access$202(com.google.common.util.concurrent.AggregateFutureState,java.util.Set) -> a
    40:40:int access$306(com.google.common.util.concurrent.AggregateFutureState) -> b
    49:73:void <clinit>() -> <clinit>
com.google.common.util.concurrent.AggregateFutureState$AtomicHelper -> com.google.common.util.concurrent.ac:
    144:144:void <init>() -> <init>
    void compareAndSetSeenExceptions(com.google.common.util.concurrent.AggregateFutureState,java.util.Set,java.util.Set) -> a
    int decrementAndGetRemainingCount(com.google.common.util.concurrent.AggregateFutureState) -> a
    144:144:void <init>(byte) -> <init>
com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper -> com.google.common.util.concurrent.ad:
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater seenExceptionsUpdater -> a
    java.util.concurrent.atomic.AtomicIntegerFieldUpdater remainingCountUpdater -> b
    160:163:void <init>(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicIntegerFieldUpdater) -> <init>
    168:169:void compareAndSetSeenExceptions(com.google.common.util.concurrent.AggregateFutureState,java.util.Set,java.util.Set) -> a
    173:173:int decrementAndGetRemainingCount(com.google.common.util.concurrent.AggregateFutureState) -> a
com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper -> com.google.common.util.concurrent.ae:
    177:177:void <init>() -> <init>
    181:186:void compareAndSetSeenExceptions(com.google.common.util.concurrent.AggregateFutureState,java.util.Set,java.util.Set) -> a
    190:192:int decrementAndGetRemainingCount(com.google.common.util.concurrent.AggregateFutureState) -> a
    177:177:void <init>(byte) -> <init>
com.google.common.util.concurrent.AsyncCallable -> com.google.common.util.concurrent.AsyncCallable:
    com.google.common.util.concurrent.ListenableFuture call() -> call
com.google.common.util.concurrent.AsyncFunction -> com.google.common.util.concurrent.AsyncFunction:
    com.google.common.util.concurrent.ListenableFuture apply(java.lang.Object) -> apply
com.google.common.util.concurrent.AtomicDouble -> com.google.common.util.concurrent.AtomicDouble:
    long serialVersionUID -> serialVersionUID
    long value -> a
    java.util.concurrent.atomic.AtomicLongFieldUpdater updater -> b
    69:71:void <init>(double) -> <init>
    74:76:void <init>() -> <init>
    84:84:double get() -> get
    93:95:void set(double) -> set
    103:105:void lazySet(double) -> lazySet
    114:115:double getAndSet(double) -> getAndSet
    128:128:boolean compareAndSet(double,double) -> compareAndSet
    145:146:boolean weakCompareAndSet(double,double) -> weakCompareAndSet
    158:165:double getAndAdd(double) -> getAndAdd
    177:184:double addAndGet(double) -> addAndGet
    194:194:java.lang.String toString() -> toString
    203:203:int intValue() -> intValue
    212:212:long longValue() -> longValue
    221:221:float floatValue() -> floatValue
    227:227:double doubleValue() -> doubleValue
    236:239:void writeObject(java.io.ObjectOutputStream) -> writeObject
    244:247:void readObject(java.io.ObjectInputStream) -> readObject
    61:62:void <clinit>() -> <clinit>
com.google.common.util.concurrent.AtomicDoubleArray -> com.google.common.util.concurrent.AtomicDoubleArray:
    long serialVersionUID -> serialVersionUID
    java.util.concurrent.atomic.AtomicLongArray longs -> a
    59:61:void <init>(int) -> <init>
    70:77:void <init>(double[]) -> <init>
    85:85:int length() -> length
    95:95:double get(int) -> get
    105:107:void set(int,double) -> set
    116:118:void lazySet(int,double) -> lazySet
    128:129:double getAndSet(int,double) -> getAndSet
    143:143:boolean compareAndSet(int,double,double) -> compareAndSet
    161:161:boolean weakCompareAndSet(int,double,double) -> weakCompareAndSet
    174:181:double getAndAdd(int,double) -> getAndAdd
    194:201:double addAndGet(int,double) -> addAndGet
    211:224:java.lang.String toString() -> toString
    235:245:void writeObject(java.io.ObjectOutputStream) -> writeObject
    250:258:void readObject(java.io.ObjectInputStream) -> readObject
com.google.common.util.concurrent.AtomicLongMap -> com.google.common.util.concurrent.AtomicLongMap:
    java.util.concurrent.ConcurrentHashMap map -> a
    java.util.Map asMap -> b
    61:63:void <init>(java.util.concurrent.ConcurrentHashMap) -> <init>
    67:67:com.google.common.util.concurrent.AtomicLongMap create() -> create
    72:74:com.google.common.util.concurrent.AtomicLongMap create(java.util.Map) -> create
    82:82:long get(java.lang.Object) -> get
    90:90:long incrementAndGet(java.lang.Object) -> incrementAndGet
    98:98:long decrementAndGet(java.lang.Object) -> decrementAndGet
    107:107:long addAndGet(java.lang.Object,long) -> addAndGet
    115:115:long getAndIncrement(java.lang.Object) -> getAndIncrement
    123:123:long getAndDecrement(java.lang.Object) -> getAndDecrement
    132:132:long getAndAdd(java.lang.Object,long) -> getAndAdd
    144:145:long updateAndGet(java.lang.Object,java.util.function.LongUnaryOperator) -> updateAndGet
    158:167:long getAndUpdate(java.lang.Object,java.util.function.LongUnaryOperator) -> getAndUpdate
    180:181:long accumulateAndGet(java.lang.Object,long,java.util.function.LongBinaryOperator) -> accumulateAndGet
    194:195:long getAndAccumulate(java.lang.Object,long,java.util.function.LongBinaryOperator) -> getAndAccumulate
    204:204:long put(java.lang.Object,long) -> put
    214:215:void putAll(java.util.Map) -> putAll
    223:224:long remove(java.lang.Object) -> remove
    232:232:boolean remove(java.lang.Object,long) -> a
    243:243:boolean removeIfZero(java.lang.Object) -> removeIfZero
    253:254:void removeAllZeros() -> removeAllZeros
    262:262:long sum() -> sum
    269:270:java.util.Map asMap() -> asMap
    274:274:java.util.Map createAsMap() -> a
    279:279:boolean containsKey(java.lang.Object) -> containsKey
    287:287:int size() -> size
    292:292:boolean isEmpty() -> isEmpty
    302:303:void clear() -> clear
    307:307:java.lang.String toString() -> toString
    253:253:boolean lambda$removeAllZeros$5(java.lang.Long) -> a
    204:204:long lambda$put$4(long,long) -> a
    195:195:long lambda$getAndAccumulate$3(java.util.function.LongBinaryOperator,long,long) -> a
    181:181:long lambda$accumulateAndGet$2(java.util.function.LongBinaryOperator,long,long) -> b
    163:165:java.lang.Long lambda$getAndUpdate$1(java.util.concurrent.atomic.AtomicLong,java.util.function.LongUnaryOperator,java.lang.Object,java.lang.Long) -> a
    146:146:java.lang.Long lambda$updateAndGet$0(java.util.function.LongUnaryOperator,java.lang.Object,java.lang.Long) -> a
com.google.common.util.concurrent.Atomics -> com.google.common.util.concurrent.Atomics:
    30:30:void <init>() -> <init>
    38:38:java.util.concurrent.atomic.AtomicReference newReference() -> newReference
    48:48:java.util.concurrent.atomic.AtomicReference newReference(java.lang.Object) -> newReference
    58:58:java.util.concurrent.atomic.AtomicReferenceArray newReferenceArray(int) -> newReferenceArray
    69:69:java.util.concurrent.atomic.AtomicReferenceArray newReferenceArray(java.lang.Object[]) -> newReferenceArray
com.google.common.util.concurrent.Callables -> com.google.common.util.concurrent.Callables:
    34:34:void <init>() -> <init>
    38:38:java.util.concurrent.Callable returning(java.lang.Object) -> returning
    58:60:com.google.common.util.concurrent.AsyncCallable asAsyncCallable(java.util.concurrent.Callable,com.google.common.util.concurrent.ListeningExecutorService) -> asAsyncCallable
    80:82:java.util.concurrent.Callable threadRenaming(java.util.concurrent.Callable,com.google.common.base.Supplier) -> a
    110:112:java.lang.Runnable threadRenaming(java.lang.Runnable,com.google.common.base.Supplier) -> a
    137:140:boolean trySetName(java.lang.String,java.lang.Thread) -> b
    33:33:boolean access$000(java.lang.String,java.lang.Thread) -> a
com.google.common.util.concurrent.Callables$1 -> com.google.common.util.concurrent.af:
    java.lang.Object val$value -> a
    38:38:void <init>(java.lang.Object) -> <init>
    41:41:java.lang.Object call() -> call
com.google.common.util.concurrent.Callables$2 -> com.google.common.util.concurrent.ag:
    com.google.common.util.concurrent.ListeningExecutorService val$listeningExecutorService -> a
    java.util.concurrent.Callable val$callable -> b
    60:60:void <init>(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable) -> <init>
    63:63:com.google.common.util.concurrent.ListenableFuture call() -> call
com.google.common.util.concurrent.Callables$3 -> com.google.common.util.concurrent.ah:
    com.google.common.base.Supplier val$nameSupplier -> a
    java.util.concurrent.Callable val$callable -> b
    82:82:void <init>(com.google.common.base.Supplier,java.util.concurrent.Callable) -> <init>
    85:94:java.lang.Object call() -> call
com.google.common.util.concurrent.Callables$4 -> com.google.common.util.concurrent.ai:
    com.google.common.base.Supplier val$nameSupplier -> a
    java.lang.Runnable val$task -> b
    112:112:void <init>(com.google.common.base.Supplier,java.lang.Runnable) -> <init>
    115:125:void run() -> run
com.google.common.util.concurrent.CollectionFuture -> com.google.common.util.concurrent.aj:
    java.util.List values -> a
    36:47:void <init>(com.google.common.collect.ImmutableCollection,boolean) -> <init>
    51:55:void collectOneValue(int,java.lang.Object) -> a
    59:63:void handleAllCompleted() -> d
    67:69:void releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason) -> a
    java.lang.Object combine(java.util.List) -> a
com.google.common.util.concurrent.CollectionFuture$ListFuture -> com.google.common.util.concurrent.ak:
    78:80:void <init>(com.google.common.collect.ImmutableCollection,boolean) -> <init>
    84:88:java.util.List combine(java.util.List) -> b
    74:74:java.lang.Object combine(java.util.List) -> a
com.google.common.util.concurrent.CombinedFuture -> com.google.common.util.concurrent.al:
    com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask task -> a
    40:43:void <init>(com.google.common.collect.ImmutableCollection,boolean,java.util.concurrent.Executor,com.google.common.util.concurrent.AsyncCallable) -> <init>
    50:53:void <init>(com.google.common.collect.ImmutableCollection,boolean,java.util.concurrent.Executor,java.util.concurrent.Callable) -> <init>
    56:56:void collectOneValue(int,java.lang.Object) -> a
    60:64:void handleAllCompleted() -> d
    68:79:void releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason) -> a
    83:87:void interruptTask() -> interruptTask
    32:32:com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask access$002(com.google.common.util.concurrent.CombinedFuture,com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask) -> a
com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask -> com.google.common.util.concurrent.am:
    com.google.common.util.concurrent.AsyncCallable callable -> b
    com.google.common.util.concurrent.CombinedFuture this$0 -> c
    149:152:void <init>(com.google.common.util.concurrent.CombinedFuture,com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor) -> <init>
    156:158:com.google.common.util.concurrent.ListenableFuture runInterruptibly() -> f
    167:168:void setValue(com.google.common.util.concurrent.ListenableFuture) -> a
    172:172:java.lang.String toPendingString() -> a
    144:144:void setValue(java.lang.Object) -> a
    144:144:java.lang.Object runInterruptibly() -> b
com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask -> com.google.common.util.concurrent.an:
    java.util.concurrent.Callable callable -> b
    com.google.common.util.concurrent.CombinedFuture this$0 -> c
    180:183:void <init>(com.google.common.util.concurrent.CombinedFuture,java.util.concurrent.Callable,java.util.concurrent.Executor) -> <init>
    187:188:java.lang.Object runInterruptibly() -> b
    193:194:void setValue(java.lang.Object) -> a
    198:198:java.lang.String toPendingString() -> a
com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask -> com.google.common.util.concurrent.ao:
    java.util.concurrent.Executor listenerExecutor -> b
    boolean thrownByExecute -> a
    com.google.common.util.concurrent.CombinedFuture this$0 -> c
    92:96:void <init>(com.google.common.util.concurrent.CombinedFuture,java.util.concurrent.Executor) -> <init>
    100:100:boolean isDone() -> c
    105:111:void execute() -> d
    126:139:void afterRanInterruptibly(java.lang.Object,java.lang.Throwable) -> a
    void setValue(java.lang.Object) -> a
com.google.common.util.concurrent.CycleDetectingLockFactory -> com.google.common.util.concurrent.CycleDetectingLockFactory:
    java.util.concurrent.ConcurrentMap lockGraphNodesPerType -> b
    java.util.logging.Logger logger -> c
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policy policy -> a
    java.lang.ThreadLocal acquiredLocks -> d
    236:236:com.google.common.util.concurrent.CycleDetectingLockFactory newInstance(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy) -> newInstance
    241:241:java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.String) -> newReentrantLock
    249:249:java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.String,boolean) -> newReentrantLock
    256:256:java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.String) -> newReentrantReadWriteLock
    265:265:java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.String,boolean) -> newReentrantReadWriteLock
    279:283:com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering newInstanceWithExplicitOrdering(java.lang.Class,com.google.common.util.concurrent.CycleDetectingLockFactory$Policy) -> newInstanceWithExplicitOrdering
    287:293:java.util.Map getOrCreateNodes(java.lang.Class) -> a
    304:322:java.util.Map createNodes(java.lang.Class) -> b
    330:330:java.lang.String getLockName(java.lang.Enum) -> a
    449:451:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy) -> <init>
    707:713:void aboutToAcquire(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock) -> b
    721:733:void lockStateChanged(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock) -> c
    165:165:java.util.logging.Logger access$100() -> a
    165:165:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,byte) -> <init>
    165:165:void access$600(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock) -> a
    165:165:void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock) -> a
    272:459:void <clinit>() -> <clinit>
com.google.common.util.concurrent.CycleDetectingLockFactory$1 -> com.google.common.util.concurrent.ap:
    460:460:void <init>() -> <init>
    463:463:java.util.ArrayList initialValue() -> a
    460:460:java.lang.Object initialValue() -> initialValue
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock -> com.google.common.util.concurrent.aq:
    com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode getLockGraphNode() -> a
    boolean isAcquiredByCurrentThread() -> b
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock -> com.google.common.util.concurrent.ar:
    com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode lockGraphNode -> a
    com.google.common.util.concurrent.CycleDetectingLockFactory this$0 -> b
    739:742:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,boolean) -> <init>
    748:748:com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode getLockGraphNode() -> a
    753:753:boolean isAcquiredByCurrentThread() -> b
    760:766:void lock() -> lock
    770:776:void lockInterruptibly() -> lockInterruptibly
    780:785:boolean tryLock() -> tryLock
    790:795:boolean tryLock(long,java.util.concurrent.TimeUnit) -> tryLock
    801:805:void unlock() -> unlock
    735:735:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,boolean,byte) -> <init>
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock -> com.google.common.util.concurrent.as:
    com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock -> a
    com.google.common.util.concurrent.CycleDetectingLockFactory this$0 -> b
    856:859:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock) -> <init>
    863:869:void lock() -> lock
    873:879:void lockInterruptibly() -> lockInterruptibly
    883:888:boolean tryLock() -> tryLock
    893:898:boolean tryLock(long,java.util.concurrent.TimeUnit) -> tryLock
    904:908:void unlock() -> unlock
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock -> com.google.common.util.concurrent.at:
    com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock readLock -> a
    com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock writeLock -> b
    com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode lockGraphNode -> c
    820:825:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,boolean) -> <init>
    831:831:java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock() -> readLock
    836:836:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock() -> writeLock
    843:843:com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode getLockGraphNode() -> a
    848:848:boolean isAcquiredByCurrentThread() -> b
    808:808:java.util.concurrent.locks.Lock writeLock() -> writeLock
    808:808:java.util.concurrent.locks.Lock readLock() -> readLock
    808:808:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,boolean,byte) -> <init>
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock -> com.google.common.util.concurrent.au:
    com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock -> a
    com.google.common.util.concurrent.CycleDetectingLockFactory this$0 -> b
    915:918:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock) -> <init>
    922:928:void lock() -> lock
    932:938:void lockInterruptibly() -> lockInterruptibly
    942:947:boolean tryLock() -> tryLock
    952:957:boolean tryLock(long,java.util.concurrent.TimeUnit) -> tryLock
    963:967:void unlock() -> unlock
com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace -> com.google.common.util.concurrent.av:
    java.lang.StackTraceElement[] EMPTY_STACK_TRACE -> a
    com.google.common.collect.ImmutableSet EXCLUDED_CLASS_NAMES -> b
    491:504:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode) -> <init>
    482:488:void <clinit>() -> <clinit>
com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode -> com.google.common.util.concurrent.aw:
    java.util.Map allowedPriorLocks -> a
    java.util.Map disallowedPriorLocks -> b
    java.lang.String lockName -> c
    581:595:void <init>(java.lang.String) -> <init>
    598:598:java.lang.String getLockName() -> a
    602:605:void checkAcquiredLocks(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,java.util.List) -> a
    623:668:void checkAcquiredLock(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode) -> a
    678:699:com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace findPathTo(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,java.util.Set) -> a
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies -> com.google.common.util.concurrent.CycleDetectingLockFactory$Policies:
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policies THROW -> THROW
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policies WARN -> WARN
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policies DISABLED -> DISABLED
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policies[] $VALUES -> a
    194:194:com.google.common.util.concurrent.CycleDetectingLockFactory$Policies[] values() -> values
    194:194:com.google.common.util.concurrent.CycleDetectingLockFactory$Policies valueOf(java.lang.String) -> valueOf
    195:195:void <init>(java.lang.String,int) -> <init>
    195:195:void <init>(java.lang.String,int,byte) -> <init>
    194:228:void <clinit>() -> <clinit>
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1 -> com.google.common.util.concurrent.ax:
    201:201:void <init>(java.lang.String,int) -> <init>
    204:204:void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException) -> handlePotentialDeadlock
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2 -> com.google.common.util.concurrent.ay:
    213:213:void <init>(java.lang.String,int) -> <init>
    216:217:void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException) -> handlePotentialDeadlock
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3 -> com.google.common.util.concurrent.az:
    228:228:void <init>(java.lang.String,int) -> <init>
    230:230:void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException) -> handlePotentialDeadlock
com.google.common.util.concurrent.CycleDetectingLockFactory$Policy -> com.google.common.util.concurrent.CycleDetectingLockFactory$Policy:
    void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException) -> handlePotentialDeadlock
com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException -> com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException:
    com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace conflictingStackTrace -> a
    534:537:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace) -> <init>
    540:540:com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace getConflictingStackTrace() -> getConflictingStackTrace
    549:553:java.lang.String getMessage() -> getMessage
    528:528:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace,byte) -> <init>
com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering -> com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering:
    java.util.Map lockGraphNodes -> b
    400:402:void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,java.util.Map) -> <init>
    406:406:java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.Enum) -> newReentrantLock
    418:420:java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.Enum,boolean) -> newReentrantLock
    425:425:java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.Enum) -> newReentrantReadWriteLock
    437:439:java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.Enum,boolean) -> newReentrantReadWriteLock
com.google.common.util.concurrent.DirectExecutor -> com.google.common.util.concurrent.aA:
    com.google.common.util.concurrent.DirectExecutor INSTANCE -> a
    com.google.common.util.concurrent.DirectExecutor[] $VALUES -> b
    24:24:com.google.common.util.concurrent.DirectExecutor[] values() -> values
    24:24:com.google.common.util.concurrent.DirectExecutor valueOf(java.lang.String) -> valueOf
    25:25:void <init>(java.lang.String,int) -> <init>
    30:31:void execute(java.lang.Runnable) -> execute
    35:35:java.lang.String toString() -> toString
    24:26:void <clinit>() -> <clinit>
com.google.common.util.concurrent.ExecutionError -> com.google.common.util.concurrent.ExecutionError:
    long serialVersionUID -> serialVersionUID
    33:33:void <init>() -> <init>
    37:38:void <init>(java.lang.String) -> <init>
    42:43:void <init>(java.lang.String,java.lang.Error) -> <init>
    47:48:void <init>(java.lang.Error) -> <init>
com.google.common.util.concurrent.ExecutionList -> com.google.common.util.concurrent.ExecutionList:
    java.util.logging.Logger log -> a
    com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair runnables -> b
    boolean executed -> c
    58:58:void <init>() -> <init>
    71:88:void add(java.lang.Runnable,java.util.concurrent.Executor) -> add
    105:133:void execute() -> execute
    141:151:void executeListener(java.lang.Runnable,java.util.concurrent.Executor) -> a
    45:45:void <clinit>() -> <clinit>
com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair -> com.google.common.util.concurrent.aB:
    java.lang.Runnable runnable -> a
    java.util.concurrent.Executor executor -> b
    com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair next -> c
    158:162:void <init>(java.lang.Runnable,java.util.concurrent.Executor,com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair) -> <init>
com.google.common.util.concurrent.ExecutionSequencer -> com.google.common.util.concurrent.ExecutionSequencer:
    java.util.concurrent.atomic.AtomicReference ref -> a
    44:59:void <init>() -> <init>
    48:48:com.google.common.util.concurrent.ExecutionSequencer create() -> create
    69:70:com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable,java.util.concurrent.Executor) -> submit
    94:165:com.google.common.util.concurrent.ListenableFuture submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor) -> submitAsync
com.google.common.util.concurrent.ExecutionSequencer$1 -> com.google.common.util.concurrent.aC:
    java.util.concurrent.Callable val$callable -> a
    71:71:void <init>(com.google.common.util.concurrent.ExecutionSequencer,java.util.concurrent.Callable) -> <init>
    74:74:com.google.common.util.concurrent.ListenableFuture call() -> call
    79:79:java.lang.String toString() -> toString
com.google.common.util.concurrent.ExecutionSequencer$2 -> com.google.common.util.concurrent.aD:
    java.util.concurrent.atomic.AtomicReference val$runningState -> a
    com.google.common.util.concurrent.AsyncCallable val$callable -> b
    97:97:void <init>(com.google.common.util.concurrent.ExecutionSequencer,java.util.concurrent.atomic.AtomicReference,com.google.common.util.concurrent.AsyncCallable) -> <init>
    100:103:com.google.common.util.concurrent.ListenableFuture call() -> call
    108:108:java.lang.String toString() -> toString
com.google.common.util.concurrent.ExecutionSequencer$3 -> com.google.common.util.concurrent.aE:
    com.google.common.util.concurrent.ListenableFuture val$oldFuture -> a
    java.util.concurrent.Executor val$executor -> b
    130:130:void <init>(com.google.common.util.concurrent.ExecutionSequencer,com.google.common.util.concurrent.ListenableFuture,java.util.concurrent.Executor) -> <init>
    133:134:void execute(java.lang.Runnable) -> execute
com.google.common.util.concurrent.ExecutionSequencer$4 -> com.google.common.util.concurrent.aF:
    com.google.common.util.concurrent.ListenableFuture val$taskFuture -> a
    com.google.common.util.concurrent.ListenableFuture val$outputFuture -> b
    java.util.concurrent.atomic.AtomicReference val$runningState -> c
    com.google.common.util.concurrent.SettableFuture val$newFuture -> d
    com.google.common.util.concurrent.ListenableFuture val$oldFuture -> e
    144:144:void <init>(com.google.common.util.concurrent.ExecutionSequencer,com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.ListenableFuture,java.util.concurrent.atomic.AtomicReference,com.google.common.util.concurrent.SettableFuture,com.google.common.util.concurrent.ListenableFuture) -> <init>
    147:157:void run() -> run
com.google.common.util.concurrent.ExecutionSequencer$RunningState -> com.google.common.util.concurrent.aG:
    com.google.common.util.concurrent.ExecutionSequencer$RunningState NOT_RUN -> a
    com.google.common.util.concurrent.ExecutionSequencer$RunningState CANCELLED -> b
    com.google.common.util.concurrent.ExecutionSequencer$RunningState STARTED -> c
    com.google.common.util.concurrent.ExecutionSequencer$RunningState[] $VALUES -> d
    51:51:com.google.common.util.concurrent.ExecutionSequencer$RunningState[] values() -> values
    51:51:com.google.common.util.concurrent.ExecutionSequencer$RunningState valueOf(java.lang.String) -> valueOf
    51:51:void <init>(java.lang.String,int) -> <init>
    51:54:void <clinit>() -> <clinit>
com.google.common.util.concurrent.FakeTimeLimiter -> com.google.common.util.concurrent.FakeTimeLimiter:
    39:39:void <init>() -> <init>
    43:46:java.lang.Object newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit) -> newProxy
    52:65:java.lang.Object callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> callWithTimeout
    72:72:java.lang.Object callUninterruptiblyWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> callUninterruptiblyWithTimeout
    77:90:void runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> runWithTimeout
    95:96:void runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> runUninterruptiblyWithTimeout
com.google.common.util.concurrent.FluentFuture -> com.google.common.util.concurrent.FluentFuture:
    120:120:void <init>() -> <init>
    130:130:com.google.common.util.concurrent.FluentFuture from(com.google.common.util.concurrent.ListenableFuture) -> from
    143:143:com.google.common.util.concurrent.FluentFuture from(com.google.common.util.concurrent.FluentFuture) -> from
    186:186:com.google.common.util.concurrent.FluentFuture catching(java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor) -> catching
    250:250:com.google.common.util.concurrent.FluentFuture catchingAsync(java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor) -> catchingAsync
    266:266:com.google.common.util.concurrent.FluentFuture withTimeout(java.time.Duration,java.util.concurrent.ScheduledExecutorService) -> withTimeout
    283:283:com.google.common.util.concurrent.FluentFuture withTimeout(long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService) -> withTimeout
    327:327:com.google.common.util.concurrent.FluentFuture transformAsync(com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor) -> transformAsync
    363:363:com.google.common.util.concurrent.FluentFuture transform(com.google.common.base.Function,java.util.concurrent.Executor) -> transform
    404:405:void addCallback(com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor) -> addCallback
com.google.common.util.concurrent.FluentFuture$TrustedFuture -> com.google.common.util.concurrent.aH:
    83:83:void <init>() -> <init>
    88:88:java.lang.Object get() -> get
    95:95:java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    100:100:boolean isDone() -> isDone
    105:105:boolean isCancelled() -> isCancelled
    110:111:void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    116:116:boolean cancel(boolean) -> cancel
com.google.common.util.concurrent.ForwardingBlockingDeque -> com.google.common.util.concurrent.ForwardingBlockingDeque:
    51:51:void <init>() -> <init>
    java.util.concurrent.BlockingDeque delegate() -> delegate
    58:58:int remainingCapacity() -> remainingCapacity
    63:64:void putFirst(java.lang.Object) -> putFirst
    68:69:void putLast(java.lang.Object) -> putLast
    73:73:boolean offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offerFirst
    78:78:boolean offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offerLast
    83:83:java.lang.Object takeFirst() -> takeFirst
    88:88:java.lang.Object takeLast() -> takeLast
    93:93:java.lang.Object pollFirst(long,java.util.concurrent.TimeUnit) -> pollFirst
    98:98:java.lang.Object pollLast(long,java.util.concurrent.TimeUnit) -> pollLast
    103:104:void put(java.lang.Object) -> put
    108:108:boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offer
    113:113:java.lang.Object take() -> take
    118:118:java.lang.Object poll(long,java.util.concurrent.TimeUnit) -> poll
    123:123:int drainTo(java.util.Collection) -> drainTo
    128:128:int drainTo(java.util.Collection,int) -> drainTo
    46:46:java.util.Deque delegate() -> delegate
    46:46:java.util.Queue delegate() -> delegate
    46:46:java.util.Collection delegate() -> delegate
    46:46:java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingBlockingQueue -> com.google.common.util.concurrent.ForwardingBlockingQueue:
    44:44:void <init>() -> <init>
    java.util.concurrent.BlockingQueue delegate() -> delegate
    51:51:int drainTo(java.util.Collection,int) -> drainTo
    56:56:int drainTo(java.util.Collection) -> drainTo
    61:61:boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offer
    66:66:java.lang.Object poll(long,java.util.concurrent.TimeUnit) -> poll
    71:72:void put(java.lang.Object) -> put
    76:76:int remainingCapacity() -> remainingCapacity
    81:81:java.lang.Object take() -> take
    38:38:java.util.Queue delegate() -> delegate
    38:38:java.util.Collection delegate() -> delegate
    38:38:java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingCondition -> com.google.common.util.concurrent.aI:
    22:22:void <init>() -> <init>
    java.util.concurrent.locks.Condition delegate() -> a
    27:28:void await() -> await
    32:32:boolean await(long,java.util.concurrent.TimeUnit) -> await
    37:38:void awaitUninterruptibly() -> awaitUninterruptibly
    42:42:long awaitNanos(long) -> awaitNanos
    47:47:boolean awaitUntil(java.util.Date) -> awaitUntil
    52:53:void signal() -> signal
    57:58:void signalAll() -> signalAll
com.google.common.util.concurrent.ForwardingExecutorService -> com.google.common.util.concurrent.ForwardingExecutorService:
    42:42:void <init>() -> <init>
    java.util.concurrent.ExecutorService delegate() -> delegate
    49:49:boolean awaitTermination(long,java.util.concurrent.TimeUnit) -> awaitTermination
    55:55:java.util.List invokeAll(java.util.Collection) -> invokeAll
    62:62:java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit) -> invokeAll
    68:68:java.lang.Object invokeAny(java.util.Collection) -> invokeAny
    74:74:java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit) -> invokeAny
    79:79:boolean isShutdown() -> isShutdown
    84:84:boolean isTerminated() -> isTerminated
    89:90:void shutdown() -> shutdown
    94:94:java.util.List shutdownNow() -> shutdownNow
    99:100:void execute(java.lang.Runnable) -> execute
    104:104:java.util.concurrent.Future submit(java.util.concurrent.Callable) -> submit
    109:109:java.util.concurrent.Future submit(java.lang.Runnable) -> submit
    114:114:java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object) -> submit
    37:37:java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingFluentFuture -> com.google.common.util.concurrent.aJ:
    com.google.common.util.concurrent.ListenableFuture delegate -> a
    39:41:void <init>(com.google.common.util.concurrent.ListenableFuture) -> <init>
    45:46:void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    50:50:boolean cancel(boolean) -> cancel
    55:55:boolean isCancelled() -> isCancelled
    60:60:boolean isDone() -> isDone
    65:65:java.lang.Object get() -> get
    71:71:java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    76:76:java.lang.String toString() -> toString
com.google.common.util.concurrent.ForwardingFuture -> com.google.common.util.concurrent.ForwardingFuture:
    40:40:void <init>() -> <init>
    java.util.concurrent.Future delegate() -> delegate
    47:47:boolean cancel(boolean) -> cancel
    52:52:boolean isCancelled() -> isCancelled
    57:57:boolean isDone() -> isDone
    62:62:java.lang.Object get() -> get
    68:68:java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    36:36:java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture -> com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture:
    java.util.concurrent.Future delegate -> a
    81:83:void <init>(java.util.concurrent.Future) -> <init>
    87:87:java.util.concurrent.Future delegate() -> delegate
    78:78:java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingListenableFuture -> com.google.common.util.concurrent.ForwardingListenableFuture:
    38:38:void <init>() -> <init>
    com.google.common.util.concurrent.ListenableFuture delegate() -> delegate
    45:46:void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    32:32:java.util.concurrent.Future delegate() -> delegate
    32:32:java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture -> com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture:
    com.google.common.util.concurrent.ListenableFuture delegate -> a
    59:61:void <init>(com.google.common.util.concurrent.ListenableFuture) -> <init>
    65:65:com.google.common.util.concurrent.ListenableFuture delegate() -> delegate
    55:55:java.util.concurrent.Future delegate() -> delegate
    55:55:java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingListeningExecutorService -> com.google.common.util.concurrent.ForwardingListeningExecutorService:
    35:35:void <init>() -> <init>
    com.google.common.util.concurrent.ListeningExecutorService delegate() -> delegate
    42:42:com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable) -> submit
    47:47:com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable) -> submit
    52:52:com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable,java.lang.Object) -> submit
    30:30:java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object) -> submit
    30:30:java.util.concurrent.Future submit(java.lang.Runnable) -> submit
    30:30:java.util.concurrent.Future submit(java.util.concurrent.Callable) -> submit
    30:30:java.util.concurrent.ExecutorService delegate() -> delegate
    30:30:java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingLock -> com.google.common.util.concurrent.aK:
    22:22:void <init>() -> <init>
    java.util.concurrent.locks.Lock delegate() -> a
    27:28:void lock() -> lock
    32:33:void lockInterruptibly() -> lockInterruptibly
    37:37:boolean tryLock() -> tryLock
    42:42:boolean tryLock(long,java.util.concurrent.TimeUnit) -> tryLock
    47:48:void unlock() -> unlock
    52:52:java.util.concurrent.locks.Condition newCondition() -> newCondition
com.google.common.util.concurrent.FutureCallback -> com.google.common.util.concurrent.FutureCallback:
    void onSuccess(java.lang.Object) -> onSuccess
    void onFailure(java.lang.Throwable) -> onFailure
com.google.common.util.concurrent.Futures -> com.google.common.util.concurrent.Futures:
    123:123:void <init>() -> <init>
    131:137:com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object) -> immediateFuture
    148:149:com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable) -> immediateFailedFuture
    159:159:com.google.common.util.concurrent.ListenableFuture immediateCancelledFuture() -> immediateCancelledFuture
    170:172:com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable,java.util.concurrent.Executor) -> submit
    184:186:com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable,java.util.concurrent.Executor) -> submit
    197:199:com.google.common.util.concurrent.ListenableFuture submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor) -> submitAsync
    212:212:com.google.common.util.concurrent.ListenableFuture scheduleAsync(com.google.common.util.concurrent.AsyncCallable,java.time.Duration,java.util.concurrent.ScheduledExecutorService) -> scheduleAsync
    229:240:com.google.common.util.concurrent.ListenableFuture scheduleAsync(com.google.common.util.concurrent.AsyncCallable,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService) -> scheduleAsync
    288:288:com.google.common.util.concurrent.ListenableFuture catching(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor) -> catching
    357:357:com.google.common.util.concurrent.ListenableFuture catchingAsync(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor) -> catchingAsync
    375:375:com.google.common.util.concurrent.ListenableFuture withTimeout(com.google.common.util.concurrent.ListenableFuture,java.time.Duration,java.util.concurrent.ScheduledExecutorService) -> withTimeout
    398:401:com.google.common.util.concurrent.ListenableFuture withTimeout(com.google.common.util.concurrent.ListenableFuture,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService) -> withTimeout
    445:445:com.google.common.util.concurrent.ListenableFuture transformAsync(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor) -> transformAsync
    482:482:com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor) -> transform
    509:511:java.util.concurrent.Future lazyTransform(java.util.concurrent.Future,com.google.common.base.Function) -> lazyTransform
    568:568:com.google.common.util.concurrent.ListenableFuture allAsList(com.google.common.util.concurrent.ListenableFuture[]) -> allAsList
    590:590:com.google.common.util.concurrent.ListenableFuture allAsList(java.lang.Iterable) -> allAsList
    604:604:com.google.common.util.concurrent.Futures$FutureCombiner whenAllComplete(com.google.common.util.concurrent.ListenableFuture[]) -> whenAllComplete
    618:618:com.google.common.util.concurrent.Futures$FutureCombiner whenAllComplete(java.lang.Iterable) -> whenAllComplete
    631:631:com.google.common.util.concurrent.Futures$FutureCombiner whenAllSucceed(com.google.common.util.concurrent.ListenableFuture[]) -> whenAllSucceed
    644:644:com.google.common.util.concurrent.Futures$FutureCombiner whenAllSucceed(java.lang.Iterable) -> whenAllSucceed
    756:761:com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture) -> nonCancellationPropagating
    820:820:com.google.common.util.concurrent.ListenableFuture successfulAsList(com.google.common.util.concurrent.ListenableFuture[]) -> successfulAsList
    844:844:com.google.common.util.concurrent.ListenableFuture successfulAsList(java.lang.Iterable) -> successfulAsList
    873:903:com.google.common.collect.ImmutableList inCompletionOrder(java.lang.Iterable) -> inCompletionOrder
    1044:1046:void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor) -> addCallback
    1120:1121:java.lang.Object getDone(java.util.concurrent.Future) -> getDone
    1171:1171:java.lang.Object getChecked(java.util.concurrent.Future,java.lang.Class) -> getChecked
    1222:1222:java.lang.Object getChecked(java.util.concurrent.Future,java.lang.Class,java.time.Duration) -> getChecked
    1274:1274:java.lang.Object getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit) -> getChecked
    1313:1318:java.lang.Object getUnchecked(java.util.concurrent.Future) -> getUnchecked
    1323:1331:void wrapAndThrowUnchecked(java.lang.Throwable) -> a
com.google.common.util.concurrent.Futures$1 -> com.google.common.util.concurrent.aL:
    java.util.concurrent.Future val$scheduled -> a
    232:232:void <init>(java.util.concurrent.Future) -> <init>
    236:237:void run() -> run
com.google.common.util.concurrent.Futures$2 -> com.google.common.util.concurrent.aM:
    java.util.concurrent.Future val$input -> a
    com.google.common.base.Function val$function -> b
    511:511:void <init>(java.util.concurrent.Future,com.google.common.base.Function) -> <init>
    515:515:boolean cancel(boolean) -> cancel
    520:520:boolean isCancelled() -> isCancelled
    525:525:boolean isDone() -> isDone
    530:530:java.lang.Object get() -> get
    536:536:java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    541:543:java.lang.Object applyTransformation(java.lang.Object) -> a
com.google.common.util.concurrent.Futures$3 -> com.google.common.util.concurrent.aN:
    com.google.common.util.concurrent.Futures$InCompletionOrderState val$state -> a
    com.google.common.collect.ImmutableList val$delegates -> b
    int val$localI -> c
    892:892:void <init>(com.google.common.util.concurrent.Futures$InCompletionOrderState,com.google.common.collect.ImmutableList,int) -> <init>
    895:896:void run() -> run
com.google.common.util.concurrent.Futures$CallbackListener -> com.google.common.util.concurrent.aO:
    java.util.concurrent.Future future -> a
    com.google.common.util.concurrent.FutureCallback callback -> b
    1053:1056:void <init>(java.util.concurrent.Future,com.google.common.util.concurrent.FutureCallback) -> <init>
    1060:1079:void run() -> run
    1083:1083:java.lang.String toString() -> toString
com.google.common.util.concurrent.Futures$FutureCombiner -> com.google.common.util.concurrent.Futures$FutureCombiner:
    boolean allMustSucceed -> a
    com.google.common.collect.ImmutableList futures -> b
    681:684:void <init>(boolean,com.google.common.collect.ImmutableList) -> <init>
    701:701:com.google.common.util.concurrent.ListenableFuture callAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor) -> callAsync
    720:720:com.google.common.util.concurrent.ListenableFuture call(java.util.concurrent.Callable,java.util.concurrent.Executor) -> call
    735:735:com.google.common.util.concurrent.ListenableFuture run(java.lang.Runnable,java.util.concurrent.Executor) -> run
    676:676:void <init>(boolean,com.google.common.collect.ImmutableList,byte) -> <init>
com.google.common.util.concurrent.Futures$FutureCombiner$1 -> com.google.common.util.concurrent.aP:
    java.lang.Runnable val$combiner -> a
    736:736:void <init>(com.google.common.util.concurrent.Futures$FutureCombiner,java.lang.Runnable) -> <init>
    739:740:java.lang.Void call() -> a
    736:736:java.lang.Object call() -> call
com.google.common.util.concurrent.Futures$InCompletionOrderFuture -> com.google.common.util.concurrent.aQ:
    com.google.common.util.concurrent.Futures$InCompletionOrderState state -> a
    912:914:void <init>(com.google.common.util.concurrent.Futures$InCompletionOrderState) -> <init>
    918:923:boolean cancel(boolean) -> cancel
    928:929:void afterDone() -> afterDone
    933:943:java.lang.String pendingToString() -> pendingToString
    909:909:void <init>(com.google.common.util.concurrent.Futures$InCompletionOrderState,byte) -> <init>
com.google.common.util.concurrent.Futures$InCompletionOrderState -> com.google.common.util.concurrent.aR:
    boolean wasCancelled -> a
    boolean shouldInterrupt -> b
    java.util.concurrent.atomic.AtomicInteger incompleteOutputCount -> c
    com.google.common.util.concurrent.ListenableFuture[] inputFutures -> d
    int delegateIndex -> e
    951:960:void <init>(com.google.common.util.concurrent.ListenableFuture[]) -> <init>
    963:970:void recordOutputCancellation(boolean) -> a
    974:989:void recordInputCompletion(com.google.common.collect.ImmutableList,int) -> a
    992:999:void recordCompletion() -> a
    947:947:void <init>(com.google.common.util.concurrent.ListenableFuture[],byte) -> <init>
    947:947:void access$300(com.google.common.util.concurrent.Futures$InCompletionOrderState,com.google.common.collect.ImmutableList,int) -> a
    947:947:void access$400(com.google.common.util.concurrent.Futures$InCompletionOrderState,boolean) -> a
    947:947:com.google.common.util.concurrent.ListenableFuture[] access$500(com.google.common.util.concurrent.Futures$InCompletionOrderState) -> a
    947:947:java.util.concurrent.atomic.AtomicInteger access$600(com.google.common.util.concurrent.Futures$InCompletionOrderState) -> b
com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture -> com.google.common.util.concurrent.aS:
    com.google.common.util.concurrent.ListenableFuture delegate -> a
    769:771:void <init>(com.google.common.util.concurrent.ListenableFuture) -> <init>
    777:781:void run() -> run
    785:789:java.lang.String pendingToString() -> pendingToString
    794:795:void afterDone() -> afterDone
com.google.common.util.concurrent.FuturesGetChecked -> com.google.common.util.concurrent.aT:
    com.google.common.collect.Ordering WITH_STRING_PARAM_FIRST -> a
    45:45:java.lang.Object getChecked(java.util.concurrent.Future,java.lang.Class) -> a
    53:61:java.lang.Object getChecked(com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator,java.util.concurrent.Future,java.lang.Class) -> a
    70:80:java.lang.Object getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit) -> a
    90:90:com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator bestGetCheckedTypeValidator() -> b
    95:95:com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator weakSetValidator() -> a
    199:205:void wrapAndThrowExceptionOrError(java.lang.Throwable,java.lang.Class) -> a
    216:219:boolean hasConstructorUsableByGetChecked(java.lang.Class) -> b
    226:236:java.lang.Exception newWithCause(java.lang.Class,java.lang.Throwable) -> a
    245:245:java.util.List preferringStrings(java.util.List) -> a
    260:278:java.lang.Object newFromConstructor(java.lang.reflect.Constructor,java.lang.Throwable) -> a
    284:284:boolean isCheckedException(java.lang.Class) -> c
    289:298:void checkExceptionClassValidity(java.lang.Class) -> a
    248:257:void <clinit>() -> <clinit>
com.google.common.util.concurrent.FuturesGetChecked$1 -> com.google.common.util.concurrent.aU:
    251:251:void <init>() -> <init>
    254:254:java.lang.Boolean apply(java.lang.reflect.Constructor) -> a
    251:251:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator -> com.google.common.util.concurrent.aV:
    void validateClass(java.lang.Class) -> a
com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder -> com.google.common.util.concurrent.aW:
    java.lang.String CLASS_VALUE_VALIDATOR_NAME -> b
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator BEST_VALIDATOR -> a
    111:111:void <init>() -> <init>
    188:191:com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator getBestValidator() -> a
    112:115:void <clinit>() -> <clinit>
com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator -> com.google.common.util.concurrent.aX:
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator INSTANCE -> a
    java.util.Set validClasses -> b
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator[] $VALUES -> c
    141:141:com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator[] values() -> values
    141:141:com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator valueOf(java.lang.String) -> valueOf
    141:141:void <init>(java.lang.String,int) -> <init>
    157:179:void validateClass(java.lang.Class) -> a
    141:152:void <clinit>() -> <clinit>
com.google.common.util.concurrent.GwtFluentFutureCatchingSpecialization -> com.google.common.util.concurrent.aY:
    25:25:void <init>() -> <init>
com.google.common.util.concurrent.GwtFuturesCatchingSpecialization -> com.google.common.util.concurrent.aZ:
    26:26:void <init>() -> <init>
com.google.common.util.concurrent.ImmediateFuture -> com.google.common.util.concurrent.ba:
    com.google.common.util.concurrent.ListenableFuture NULL -> a
    java.util.logging.Logger log -> b
    java.lang.Object value -> c
    38:40:void <init>(java.lang.Object) -> <init>
    44:56:void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    60:60:boolean cancel(boolean) -> cancel
    66:66:java.lang.Object get() -> get
    71:72:java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    77:77:boolean isCancelled() -> isCancelled
    82:82:boolean isDone() -> isDone
    88:88:java.lang.String toString() -> toString
    32:34:void <clinit>() -> <clinit>
com.google.common.util.concurrent.ImmediateFuture$ImmediateCancelledFuture -> com.google.common.util.concurrent.bb:
    98:100:void <init>() -> <init>
com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedFuture -> com.google.common.util.concurrent.bc:
    92:94:void <init>(java.lang.Throwable) -> <init>
com.google.common.util.concurrent.InterruptibleTask -> com.google.common.util.concurrent.bd:
    java.lang.Runnable DONE -> a
    java.lang.Runnable INTERRUPTING -> b
    java.lang.Runnable PARKED -> c
    30:30:void <init>() -> <init>
    59:136:void run() -> run
    boolean isDone() -> c
    java.lang.Object runInterruptibly() -> b
    void afterRanInterruptibly(java.lang.Object,java.lang.Throwable) -> a
    164:179:void interruptTask() -> e
    183:195:java.lang.String toString() -> toString
    java.lang.String toPendingString() -> a
    35:46:void <clinit>() -> <clinit>
com.google.common.util.concurrent.InterruptibleTask$DoNothingRunnable -> com.google.common.util.concurrent.be:
    38:38:void <init>() -> <init>
    40:40:void run() -> run
    38:38:void <init>(byte) -> <init>
com.google.common.util.concurrent.JdkFutureAdapters -> com.google.common.util.concurrent.JdkFutureAdapters:
    53:56:com.google.common.util.concurrent.ListenableFuture listenInPoolThread(java.util.concurrent.Future) -> listenInPoolThread
    80:84:com.google.common.util.concurrent.ListenableFuture listenInPoolThread(java.util.concurrent.Future,java.util.concurrent.Executor) -> listenInPoolThread
    170:170:void <init>() -> <init>
com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter -> com.google.common.util.concurrent.bf:
    java.util.concurrent.ThreadFactory threadFactory -> a
    java.util.concurrent.Executor defaultAdapterExecutor -> b
    java.util.concurrent.Executor adapterExecutor -> c
    com.google.common.util.concurrent.ExecutionList executionList -> d
    java.util.concurrent.atomic.AtomicBoolean hasListeners -> e
    java.util.concurrent.Future delegate -> f
    120:121:void <init>(java.util.concurrent.Future) -> <init>
    110:126:void <init>(java.util.concurrent.Future,java.util.concurrent.Executor) -> <init>
    130:130:java.util.concurrent.Future delegate() -> delegate
    135:167:void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    96:96:java.lang.Object delegate() -> delegate
    96:96:java.util.concurrent.Future access$000(com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter) -> a
    96:96:com.google.common.util.concurrent.ExecutionList access$100(com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter) -> b
    99:105:void <clinit>() -> <clinit>
com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter$1 -> com.google.common.util.concurrent.bg:
    com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter this$0 -> a
    149:149:void <init>(com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter) -> <init>
    158:164:void run() -> run
com.google.common.util.concurrent.ListenableFuture -> com.google.common.util.concurrent.ListenableFuture:
    void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
com.google.common.util.concurrent.ListenableFutureTask -> com.google.common.util.concurrent.ListenableFutureTask:
    com.google.common.util.concurrent.ExecutionList executionList -> a
    53:53:com.google.common.util.concurrent.ListenableFutureTask create(java.util.concurrent.Callable) -> create
    67:67:com.google.common.util.concurrent.ListenableFutureTask create(java.lang.Runnable,java.lang.Object) -> create
    43:72:void <init>(java.util.concurrent.Callable) -> <init>
    43:76:void <init>(java.lang.Runnable,java.lang.Object) -> <init>
    80:81:void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    86:87:void done() -> done
com.google.common.util.concurrent.ListenableScheduledFuture -> com.google.common.util.concurrent.ListenableScheduledFuture:
com.google.common.util.concurrent.ListenerCallQueue -> com.google.common.util.concurrent.bh:
    java.util.logging.Logger logger -> a
    java.util.List listeners -> b
    56:62:void <init>() -> <init>
    75:78:void addListener(java.lang.Object,java.util.concurrent.Executor) -> a
    89:90:void enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event) -> a
    103:110:void enqueueHelper(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.Object) -> a
    119:122:void dispatch() -> a
    56:56:java.util.logging.Logger access$000() -> b
    58:58:void <clinit>() -> <clinit>
com.google.common.util.concurrent.ListenerCallQueue$Event -> com.google.common.util.concurrent.bi:
    void call(java.lang.Object) -> a
com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue -> com.google.common.util.concurrent.bj:
    java.lang.Object listener -> a
    java.util.concurrent.Executor executor -> b
    java.util.Queue waitQueue -> c
    java.util.Queue labelQueue -> d
    boolean isThreadScheduled -> e
    135:147:void <init>(java.lang.Object,java.util.concurrent.Executor) -> <init>
    151:153:void add(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.Object) -> a
    160:183:void dispatch() -> a
    187:223:void run() -> run
com.google.common.util.concurrent.ListeningExecutorService -> com.google.common.util.concurrent.ListeningExecutorService:
    com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable) -> submit
    com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable) -> submit
    com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable,java.lang.Object) -> submit
    java.util.List invokeAll(java.util.Collection) -> invokeAll
    java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit) -> invokeAll
    35:35:java.util.concurrent.Future submit(java.lang.Runnable) -> submit
    35:35:java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object) -> submit
    35:35:java.util.concurrent.Future submit(java.util.concurrent.Callable) -> submit
com.google.common.util.concurrent.ListeningScheduledExecutorService -> com.google.common.util.concurrent.ListeningScheduledExecutorService:
    com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> schedule
    com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> schedule
    com.google.common.util.concurrent.ListenableScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleAtFixedRate
    com.google.common.util.concurrent.ListenableScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleWithFixedDelay
    31:31:java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleWithFixedDelay
    31:31:java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleAtFixedRate
    31:31:java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> schedule
    31:31:java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> schedule
com.google.common.util.concurrent.Monitor -> com.google.common.util.concurrent.Monitor:
    boolean fair -> a
    java.util.concurrent.locks.ReentrantLock lock -> b
    com.google.common.util.concurrent.Monitor$Guard activeGuards -> c
    351:352:void <init>() -> <init>
    343:363:void <init>(boolean) -> <init>
    373:374:com.google.common.util.concurrent.Monitor$Guard newGuard(java.util.function.BooleanSupplier) -> newGuard
    384:385:void enter() -> enter
    394:394:boolean enter(java.time.Duration) -> enter
    404:424:boolean enter(long,java.util.concurrent.TimeUnit) -> enter
    433:434:void enterInterruptibly() -> enterInterruptibly
    444:444:boolean enterInterruptibly(java.time.Duration) -> enterInterruptibly
    455:455:boolean enterInterruptibly(long,java.util.concurrent.TimeUnit) -> enterInterruptibly
    466:466:boolean tryEnter() -> tryEnter
    475:493:void enterWhen(com.google.common.util.concurrent.Monitor$Guard) -> enterWhen
    505:505:boolean enterWhen(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration) -> enterWhen
    518:565:boolean enterWhen(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit) -> enterWhen
    570:588:void enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard) -> enterWhenUninterruptibly
    598:598:boolean enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration) -> enterWhenUninterruptibly
    609:665:boolean enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit) -> enterWhenUninterruptibly
    675:688:boolean enterIf(com.google.common.util.concurrent.Monitor$Guard) -> enterIf
    699:699:boolean enterIf(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration) -> enterIf
    710:724:boolean enterIf(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit) -> enterIf
    735:748:boolean enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard) -> enterIfInterruptibly
    759:759:boolean enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration) -> enterIfInterruptibly
    771:786:boolean enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit) -> enterIfInterruptibly
    798:813:boolean tryEnterIf(com.google.common.util.concurrent.Monitor$Guard) -> tryEnterIf
    823:829:void waitFor(com.google.common.util.concurrent.Monitor$Guard) -> waitFor
    840:840:boolean waitFor(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration) -> waitFor
    852:862:boolean waitFor(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit) -> waitFor
    870:876:void waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard) -> waitForUninterruptibly
    886:886:boolean waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration) -> waitForUninterruptibly
    897:924:boolean waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit) -> waitForUninterruptibly
    929:938:void leave() -> leave
    942:942:boolean isFair() -> isFair
    950:950:boolean isOccupied() -> isOccupied
    958:958:boolean isOccupiedByCurrentThread() -> isOccupiedByCurrentThread
    966:966:int getOccupiedDepth() -> getOccupiedDepth
    976:976:int getQueueLength() -> getQueueLength
    986:986:boolean hasQueuedThreads() -> hasQueuedThreads
    996:996:boolean hasQueuedThread(java.lang.Thread) -> hasQueuedThread
    1006:1006:boolean hasWaiters(com.google.common.util.concurrent.Monitor$Guard) -> hasWaiters
    1016:1024:int getWaitQueueLength(com.google.common.util.concurrent.Monitor$Guard) -> getWaitQueueLength
    1033:1034:long toSafeNanos(long,java.util.concurrent.TimeUnit) -> a
    1042:1046:long initNanoTime(long) -> a
    1062:1062:long remainingNanos(long,long) -> a
    1091:1097:void signalNextWaiter() -> a
    1124:1127:boolean isSatisfied(com.google.common.util.concurrent.Monitor$Guard) -> a
    1134:1137:void signalAllWaiters() -> b
    1142:1148:void beginWaitingFor(com.google.common.util.concurrent.Monitor$Guard) -> b
    1153:1168:void endWaitingFor(com.google.common.util.concurrent.Monitor$Guard) -> c
    1178:1189:void await(com.google.common.util.concurrent.Monitor$Guard,boolean) -> a
    1193:1204:void awaitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,boolean) -> b
    1210:1230:boolean awaitNanos(com.google.common.util.concurrent.Monitor$Guard,long,boolean) -> a
    206:206:java.util.concurrent.locks.ReentrantLock access$000(com.google.common.util.concurrent.Monitor) -> a
com.google.common.util.concurrent.Monitor$1 -> com.google.common.util.concurrent.bk:
    java.util.function.BooleanSupplier val$isSatisfied -> e
    374:374:void <init>(com.google.common.util.concurrent.Monitor,com.google.common.util.concurrent.Monitor,java.util.function.BooleanSupplier) -> <init>
    377:377:boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.Monitor$Guard -> com.google.common.util.concurrent.Monitor$Guard:
    com.google.common.util.concurrent.Monitor monitor -> a
    java.util.concurrent.locks.Condition condition -> b
    int waiterCount -> c
    com.google.common.util.concurrent.Monitor$Guard next -> d
    312:323:void <init>(com.google.common.util.concurrent.Monitor) -> <init>
    boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.MoreExecutors -> com.google.common.util.concurrent.MoreExecutors:
    67:67:void <init>() -> <init>
    86:87:java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,java.time.Duration) -> getExitingExecutorService
    108:108:java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit) -> getExitingExecutorService
    127:127:java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor) -> getExitingExecutorService
    147:148:java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,java.time.Duration) -> getExitingScheduledExecutorService
    169:170:java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit) -> getExitingScheduledExecutorService
    190:190:java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor) -> getExitingScheduledExecutorService
    207:208:void addDelayedShutdownHook(java.util.concurrent.ExecutorService,java.time.Duration) -> addDelayedShutdownHook
    226:227:void addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit) -> addDelayedShutdownHook
    292:297:void useDaemonThreadFactory(java.util.concurrent.ThreadPoolExecutor) -> b
    429:429:com.google.common.util.concurrent.ListeningExecutorService newDirectExecutorService() -> newDirectExecutorService
    453:453:java.util.concurrent.Executor directExecutor() -> directExecutor
    500:500:java.util.concurrent.Executor newSequentialExecutor(java.util.concurrent.Executor) -> newSequentialExecutor
    520:520:com.google.common.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService) -> listeningDecorator
    546:546:com.google.common.util.concurrent.ListeningScheduledExecutorService listeningDecorator(java.util.concurrent.ScheduledExecutorService) -> listeningDecorator
    827:847:java.util.concurrent.ThreadFactory platformThreadFactory() -> platformThreadFactory
    853:878:boolean isAppEngineWithApiClasses() -> a
    888:896:java.lang.Thread newThread(java.lang.String,java.lang.Runnable) -> a
    916:918:java.util.concurrent.Executor renamingDecorator(java.util.concurrent.Executor,com.google.common.base.Supplier) -> a
    971:973:java.util.concurrent.ScheduledExecutorService renamingDecorator(java.util.concurrent.ScheduledExecutorService,com.google.common.base.Supplier) -> a
    1013:1013:boolean shutdownAndAwaitTermination(java.util.concurrent.ExecutorService,java.time.Duration) -> shutdownAndAwaitTermination
    1046:1063:boolean shutdownAndAwaitTermination(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit) -> shutdownAndAwaitTermination
    1074:1080:java.util.concurrent.Executor rejectionPropagatingExecutor(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture) -> a
    66:66:void access$000(java.util.concurrent.ThreadPoolExecutor) -> a
com.google.common.util.concurrent.MoreExecutors$2 -> com.google.common.util.concurrent.bl:
    java.util.concurrent.Executor val$executor -> a
    com.google.common.base.Supplier val$nameSupplier -> b
    918:918:void <init>(java.util.concurrent.Executor,com.google.common.base.Supplier) -> <init>
    921:922:void execute(java.lang.Runnable) -> execute
com.google.common.util.concurrent.MoreExecutors$4 -> com.google.common.util.concurrent.bm:
    com.google.common.base.Supplier val$nameSupplier -> a
    973:973:void <init>(java.util.concurrent.ScheduledExecutorService,com.google.common.base.Supplier) -> <init>
    976:976:java.util.concurrent.Callable wrapTask(java.util.concurrent.Callable) -> a
    981:981:java.lang.Runnable wrapTask(java.lang.Runnable) -> a
com.google.common.util.concurrent.MoreExecutors$5 -> com.google.common.util.concurrent.bn:
    boolean thrownFromDelegate -> a
    java.util.concurrent.Executor val$delegate -> b
    com.google.common.util.concurrent.AbstractFuture val$future -> c
    1080:1081:void <init>(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture) -> <init>
    1086:1102:void execute(java.lang.Runnable) -> execute
com.google.common.util.concurrent.MoreExecutors$5$1 -> com.google.common.util.concurrent.bo:
    java.lang.Runnable val$command -> a
    com.google.common.util.concurrent.MoreExecutors$5 this$0 -> b
    1087:1087:void <init>(com.google.common.util.concurrent.MoreExecutors$5,java.lang.Runnable) -> <init>
    1090:1092:void run() -> run
com.google.common.util.concurrent.MoreExecutors$Application -> com.google.common.util.concurrent.bp:
    232:232:void <init>() -> <init>
    236:239:java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit) -> a
    243:243:java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor) -> a
    248:251:java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit) -> a
    256:256:java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor) -> a
    261:282:void addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit) -> a
    286:287:void addShutdownHook(java.lang.Thread) -> a
com.google.common.util.concurrent.MoreExecutors$Application$1 -> com.google.common.util.concurrent.bq:
    java.util.concurrent.ExecutorService val$service -> a
    long val$terminationTimeout -> b
    java.util.concurrent.TimeUnit val$timeUnit -> c
    266:266:void <init>(com.google.common.util.concurrent.MoreExecutors$Application,java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit) -> <init>
    275:280:void run() -> run
com.google.common.util.concurrent.MoreExecutors$DirectExecutorService -> com.google.common.util.concurrent.br:
    java.lang.Object lock -> a
    int runningTasks -> b
    boolean shutdown -> c
    301:315:void <init>() -> <init>
    320:326:void execute(java.lang.Runnable) -> execute
    330:332:boolean isShutdown() -> isShutdown
    337:343:void shutdown() -> shutdown
    348:349:java.util.List shutdownNow() -> shutdownNow
    354:356:boolean isTerminated() -> isTerminated
    361:374:boolean awaitTermination(long,java.util.concurrent.TimeUnit) -> awaitTermination
    383:389:void startTask() -> a
    393:399:void endTask() -> b
    301:301:void <init>(byte) -> <init>
com.google.common.util.concurrent.MoreExecutors$ListeningDecorator -> com.google.common.util.concurrent.bs:
    java.util.concurrent.ExecutorService delegate -> a
    555:557:void <init>(java.util.concurrent.ExecutorService) -> <init>
    561:561:boolean awaitTermination(long,java.util.concurrent.TimeUnit) -> awaitTermination
    566:566:boolean isShutdown() -> isShutdown
    571:571:boolean isTerminated() -> isTerminated
    576:577:void shutdown() -> shutdown
    581:581:java.util.List shutdownNow() -> shutdownNow
    586:587:void execute(java.lang.Runnable) -> execute
com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator -> com.google.common.util.concurrent.bt:
    java.util.concurrent.ScheduledExecutorService delegate -> a
    597:599:void <init>(java.util.concurrent.ScheduledExecutorService) -> <init>
    603:605:com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> schedule
    611:613:com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> schedule
    619:621:com.google.common.util.concurrent.ListenableScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleAtFixedRate
    627:630:com.google.common.util.concurrent.ListenableScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleWithFixedDelay
    590:590:java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleWithFixedDelay
    590:590:java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleAtFixedRate
    590:590:java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> schedule
    590:590:java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> schedule
com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask -> com.google.common.util.concurrent.bu:
    java.util.concurrent.ScheduledFuture scheduledDelegate -> a
    640:642:void <init>(com.google.common.util.concurrent.ListenableFuture,java.util.concurrent.ScheduledFuture) -> <init>
    646:653:boolean cancel(boolean) -> cancel
    658:658:long getDelay(java.util.concurrent.TimeUnit) -> getDelay
    663:663:int compareTo(java.util.concurrent.Delayed) -> a
    633:633:int compareTo(java.lang.Object) -> compareTo
com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask -> com.google.common.util.concurrent.bv:
    java.lang.Runnable delegate -> a
    672:674:void <init>(java.lang.Runnable) -> <init>
    679:684:void run() -> run
com.google.common.util.concurrent.RateLimiter -> com.google.common.util.concurrent.RateLimiter:
    com.google.common.util.concurrent.RateLimiter$SleepingStopwatch stopwatch -> a
    java.lang.Object mutexDoNotUseDirectly -> b
    129:129:com.google.common.util.concurrent.RateLimiter create(double) -> create
    134:136:com.google.common.util.concurrent.RateLimiter create(double,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch) -> a
    164:164:com.google.common.util.concurrent.RateLimiter create(double,java.time.Duration) -> create
    193:195:com.google.common.util.concurrent.RateLimiter create(double,long,java.util.concurrent.TimeUnit) -> create
    205:207:com.google.common.util.concurrent.RateLimiter create(double,long,java.util.concurrent.TimeUnit,double,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch) -> a
    220:229:java.lang.Object mutex() -> c
    232:234:void <init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch) -> <init>
    255:260:void setRate(double) -> setRate
    void doSetRate(double,long) -> a
    271:273:double getRate() -> getRate
    double doGetRate() -> a
    289:289:double acquire() -> acquire
    303:305:double acquire(int) -> acquire
    315:318:long reserve(int) -> a
    334:334:boolean tryAcquire(java.time.Duration) -> tryAcquire
    351:351:boolean tryAcquire(long,java.util.concurrent.TimeUnit) -> tryAcquire
    365:365:boolean tryAcquire(int) -> tryAcquire
    378:378:boolean tryAcquire() -> tryAcquire
    393:393:boolean tryAcquire(int,java.time.Duration) -> tryAcquire
    409:421:boolean tryAcquire(int,long,java.util.concurrent.TimeUnit) -> tryAcquire
    425:425:boolean canAcquire(long,long) -> a
    434:435:long reserveAndGetWaitLength(int,long) -> b
    long queryEarliestAvailable$1349e3() -> b
    long reserveEarliestAvailable(int,long) -> a
    457:457:java.lang.String toString() -> toString
    493:494:void checkPermits(int) -> b
com.google.common.util.concurrent.RateLimiter$SleepingStopwatch -> com.google.common.util.concurrent.bw:
    462:462:void <init>() -> <init>
    long readMicros() -> a
    void sleepMicrosUninterruptibly(long) -> a
    474:474:com.google.common.util.concurrent.RateLimiter$SleepingStopwatch createFromSystemTimer() -> b
com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1 -> com.google.common.util.concurrent.bx:
    com.google.common.base.Stopwatch stopwatch -> a
    474:475:void <init>() -> <init>
    479:479:long readMicros() -> a
    484:487:void sleepMicrosUninterruptibly(long) -> a
com.google.common.util.concurrent.Runnables -> com.google.common.util.concurrent.Runnables:
    java.lang.Runnable EMPTY_RUNNABLE -> a
    37:37:java.lang.Runnable doNothing() -> doNothing
    40:40:void <init>() -> <init>
    29:29:void <clinit>() -> <clinit>
com.google.common.util.concurrent.Runnables$1 -> com.google.common.util.concurrent.by:
    30:30:void <init>() -> <init>
    32:32:void run() -> run
com.google.common.util.concurrent.SequentialExecutor -> com.google.common.util.concurrent.bz:
    java.util.logging.Logger log -> a
    java.util.concurrent.Executor executor -> b
    java.util.Deque queue -> c
    int workerRunningState$1b68aecc -> d
    long workerRunCount -> e
    com.google.common.util.concurrent.SequentialExecutor$QueueWorker worker -> f
    65:87:void <init>(java.util.concurrent.Executor) -> <init>
    97:163:void execute(java.lang.Runnable) -> execute
    49:49:java.util.Deque access$100(com.google.common.util.concurrent.SequentialExecutor) -> a
    49:49:int access$202$16d08d51(com.google.common.util.concurrent.SequentialExecutor,int) -> a
    49:49:int access$200$4c3b89c1(com.google.common.util.concurrent.SequentialExecutor) -> b
    49:49:long access$308(com.google.common.util.concurrent.SequentialExecutor) -> c
    49:49:java.util.logging.Logger access$400() -> a
    50:50:void <clinit>() -> <clinit>
com.google.common.util.concurrent.SequentialExecutor$1 -> com.google.common.util.concurrent.bA:
    java.lang.Runnable val$task -> a
    117:117:void <init>(com.google.common.util.concurrent.SequentialExecutor,java.lang.Runnable) -> <init>
    120:121:void run() -> run
com.google.common.util.concurrent.SequentialExecutor$QueueWorker -> com.google.common.util.concurrent.bB:
    com.google.common.util.concurrent.SequentialExecutor this$0 -> a
    167:167:void <init>(com.google.common.util.concurrent.SequentialExecutor) -> <init>
    171:181:void run() -> run
    195:239:void workOnQueue() -> a
    167:167:void <init>(com.google.common.util.concurrent.SequentialExecutor,byte) -> <init>
com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState -> com.google.common.util.concurrent.bC:
    int IDLE$1b68aecc -> a
    int QUEUING$1b68aecc -> b
    int QUEUED$1b68aecc -> c
    int RUNNING$1b68aecc -> d
    int[] $VALUES$7e6ec32f -> e
    52:59:void <clinit>() -> <clinit>
com.google.common.util.concurrent.Service -> com.google.common.util.concurrent.Service:
    com.google.common.util.concurrent.Service startAsync() -> startAsync
    boolean isRunning() -> isRunning
    com.google.common.util.concurrent.Service$State state() -> state
    com.google.common.util.concurrent.Service stopAsync() -> stopAsync
    void awaitRunning() -> awaitRunning
    114:115:void awaitRunning(java.time.Duration) -> awaitRunning
    void awaitRunning(long,java.util.concurrent.TimeUnit) -> awaitRunning
    void awaitTerminated() -> awaitTerminated
    150:151:void awaitTerminated(java.time.Duration) -> awaitTerminated
    void awaitTerminated(long,java.util.concurrent.TimeUnit) -> awaitTerminated
    java.lang.Throwable failureCause() -> failureCause
    void addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor) -> addListener
com.google.common.util.concurrent.Service$Listener -> com.google.common.util.concurrent.Service$Listener:
    278:278:void <init>() -> <init>
    284:284:void starting() -> starting
    290:290:void running() -> running
    299:299:void stopping(com.google.common.util.concurrent.Service$State) -> stopping
    311:311:void terminated(com.google.common.util.concurrent.Service$State) -> terminated
    323:323:void failed(com.google.common.util.concurrent.Service$State,java.lang.Throwable) -> failed
com.google.common.util.concurrent.Service$State -> com.google.common.util.concurrent.Service$State:
    com.google.common.util.concurrent.Service$State NEW -> NEW
    com.google.common.util.concurrent.Service$State STARTING -> STARTING
    com.google.common.util.concurrent.Service$State RUNNING -> RUNNING
    com.google.common.util.concurrent.Service$State STOPPING -> STOPPING
    com.google.common.util.concurrent.Service$State TERMINATED -> TERMINATED
    com.google.common.util.concurrent.Service$State FAILED -> FAILED
    com.google.common.util.concurrent.Service$State[] $VALUES -> a
    209:209:com.google.common.util.concurrent.Service$State[] values() -> values
    209:209:com.google.common.util.concurrent.Service$State valueOf(java.lang.String) -> valueOf
    210:210:void <init>(java.lang.String,int) -> <init>
    boolean isTerminal() -> a
    210:210:void <init>(java.lang.String,int,byte) -> <init>
    209:258:void <clinit>() -> <clinit>
com.google.common.util.concurrent.Service$State$1 -> com.google.common.util.concurrent.bD:
    212:212:void <init>(java.lang.String,int) -> <init>
    215:215:boolean isTerminal() -> a
com.google.common.util.concurrent.Service$State$2 -> com.google.common.util.concurrent.bE:
    220:220:void <init>(java.lang.String,int) -> <init>
    223:223:boolean isTerminal() -> a
com.google.common.util.concurrent.Service$State$3 -> com.google.common.util.concurrent.bF:
    228:228:void <init>(java.lang.String,int) -> <init>
    231:231:boolean isTerminal() -> a
com.google.common.util.concurrent.Service$State$4 -> com.google.common.util.concurrent.bG:
    236:236:void <init>(java.lang.String,int) -> <init>
    239:239:boolean isTerminal() -> a
com.google.common.util.concurrent.Service$State$5 -> com.google.common.util.concurrent.bH:
    247:247:void <init>(java.lang.String,int) -> <init>
    250:250:boolean isTerminal() -> a
com.google.common.util.concurrent.Service$State$6 -> com.google.common.util.concurrent.bI:
    258:258:void <init>(java.lang.String,int) -> <init>
    261:261:boolean isTerminal() -> a
com.google.common.util.concurrent.ServiceManager -> com.google.common.util.concurrent.ServiceManager:
    java.util.logging.Logger logger -> a
    com.google.common.util.concurrent.ListenerCallQueue$Event HEALTHY_EVENT -> b
    com.google.common.util.concurrent.ListenerCallQueue$Event STOPPED_EVENT -> c
    com.google.common.util.concurrent.ServiceManager$ServiceManagerState state -> d
    com.google.common.collect.ImmutableList services -> e
    206:229:void <init>(java.lang.Iterable) -> <init>
    255:256:void addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor) -> addListener
    275:276:void addListener(com.google.common.util.concurrent.ServiceManager$Listener) -> addListener
    288:304:com.google.common.util.concurrent.ServiceManager startAsync() -> startAsync
    316:317:void awaitHealthy() -> awaitHealthy
    331:332:void awaitHealthy(java.time.Duration) -> awaitHealthy
    347:348:void awaitHealthy(long,java.util.concurrent.TimeUnit) -> awaitHealthy
    358:361:com.google.common.util.concurrent.ServiceManager stopAsync() -> stopAsync
    370:371:void awaitStopped() -> awaitStopped
    383:384:void awaitStopped(java.time.Duration) -> awaitStopped
    397:398:void awaitStopped(long,java.util.concurrent.TimeUnit) -> awaitStopped
    407:412:boolean isHealthy() -> isHealthy
    422:422:com.google.common.collect.ImmutableMultimap servicesByState() -> servicesByState
    433:433:com.google.common.collect.ImmutableMap startupTimes() -> startupTimes
    438:440:java.lang.String toString() -> toString
    126:126:java.util.logging.Logger access$200() -> a
    126:126:com.google.common.util.concurrent.ListenerCallQueue$Event access$300() -> b
    126:126:com.google.common.util.concurrent.ListenerCallQueue$Event access$400() -> c
    127:140:void <clinit>() -> <clinit>
com.google.common.util.concurrent.ServiceManager$1 -> com.google.common.util.concurrent.bJ:
    129:129:void <init>() -> <init>
    132:133:void call(com.google.common.util.concurrent.ServiceManager$Listener) -> a
    137:137:java.lang.String toString() -> toString
    129:129:void call(java.lang.Object) -> a
com.google.common.util.concurrent.ServiceManager$2 -> com.google.common.util.concurrent.bK:
    141:141:void <init>() -> <init>
    144:145:void call(com.google.common.util.concurrent.ServiceManager$Listener) -> a
    149:149:java.lang.String toString() -> toString
    141:141:void call(java.lang.Object) -> a
com.google.common.util.concurrent.ServiceManager$EmptyServiceManagerWarning -> com.google.common.util.concurrent.bL:
    883:883:void <init>() -> <init>
    883:883:void <init>(byte) -> <init>
com.google.common.util.concurrent.ServiceManager$FailedService -> com.google.common.util.concurrent.bM:
    887:892:void <init>(com.google.common.util.concurrent.Service) -> <init>
com.google.common.util.concurrent.ServiceManager$Listener -> com.google.common.util.concurrent.ServiceManager$Listener:
    163:163:void <init>() -> <init>
    172:172:void healthy() -> healthy
    178:178:void stopped() -> stopped
    185:185:void failure(com.google.common.util.concurrent.Service) -> failure
com.google.common.util.concurrent.ServiceManager$NoOpService -> com.google.common.util.concurrent.bN:
    870:870:void <init>() -> <init>
    873:874:void doStart() -> doStart
    878:879:void doStop() -> doStop
    870:870:void <init>(byte) -> <init>
com.google.common.util.concurrent.ServiceManager$ServiceListener -> com.google.common.util.concurrent.bO:
    com.google.common.util.concurrent.Service service -> a
    java.lang.ref.WeakReference state -> b
    793:796:void <init>(com.google.common.util.concurrent.Service,java.lang.ref.WeakReference) -> <init>
    800:807:void starting() -> starting
    811:815:void running() -> running
    819:823:void stopping(com.google.common.util.concurrent.Service$State) -> stopping
    827:837:void terminated(com.google.common.util.concurrent.Service$State) -> terminated
    841:859:void failed(com.google.common.util.concurrent.Service$State,java.lang.Throwable) -> failed
com.google.common.util.concurrent.ServiceManager$ServiceManagerState -> com.google.common.util.concurrent.bP:
    com.google.common.util.concurrent.Monitor monitor -> a
    com.google.common.collect.SetMultimap servicesByState -> d
    com.google.common.collect.Multiset states -> b
    java.util.Map startupTimers -> e
    boolean ready -> f
    boolean transitioned -> g
    int numberOfServices -> c
    com.google.common.util.concurrent.Monitor$Guard awaitHealthGuard -> h
    com.google.common.util.concurrent.Monitor$Guard stoppedGuard -> i
    com.google.common.util.concurrent.ListenerCallQueue listeners -> j
    448:532:void <init>(com.google.common.collect.ImmutableCollection) -> <init>
    539:548:void tryStartTiming(com.google.common.util.concurrent.Service) -> a
    555:576:void markReady() -> a
    579:580:void addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor) -> a
    583:589:void awaitHealthy() -> b
    592:604:void awaitHealthy(long,java.util.concurrent.TimeUnit) -> a
    607:609:void awaitStopped() -> c
    612:623:void awaitStopped(long,java.util.concurrent.TimeUnit) -> b
    626:637:com.google.common.collect.ImmutableMultimap servicesByState() -> d
    642:666:com.google.common.collect.ImmutableMap startupTimes() -> e
    682:734:void transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State) -> a
    737:738:void enqueueStoppedEvent() -> f
    741:742:void enqueueHealthyEvent() -> g
    745:757:void enqueueFailedEvent(com.google.common.util.concurrent.Service) -> b
    761:765:void dispatchListenerEvents() -> h
    769:779:void checkHealthy() -> i
com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1 -> com.google.common.util.concurrent.bQ:
    660:660:void <init>(com.google.common.util.concurrent.ServiceManager$ServiceManagerState) -> <init>
    663:663:java.lang.Long apply(java.util.Map$Entry) -> a
    660:660:java.lang.Object apply(java.lang.Object) -> apply
com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2 -> com.google.common.util.concurrent.bR:
    com.google.common.util.concurrent.Service val$service -> a
    746:746:void <init>(com.google.common.util.concurrent.ServiceManager$ServiceManagerState,com.google.common.util.concurrent.Service) -> <init>
    749:750:void call(com.google.common.util.concurrent.ServiceManager$Listener) -> a
    754:754:java.lang.String toString() -> toString
    746:746:void call(java.lang.Object) -> a
com.google.common.util.concurrent.ServiceManager$ServiceManagerState$AwaitHealthGuard -> com.google.common.util.concurrent.bS:
    com.google.common.util.concurrent.ServiceManager$ServiceManagerState this$0 -> e
    489:491:void <init>(com.google.common.util.concurrent.ServiceManager$ServiceManagerState) -> <init>
    497:500:boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.ServiceManager$ServiceManagerState$StoppedGuard -> com.google.common.util.concurrent.bT:
    com.google.common.util.concurrent.ServiceManager$ServiceManagerState this$0 -> e
    509:511:void <init>(com.google.common.util.concurrent.ServiceManager$ServiceManagerState) -> <init>
    516:516:boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.SettableFuture -> com.google.common.util.concurrent.SettableFuture:
    41:41:com.google.common.util.concurrent.SettableFuture create() -> create
    47:47:boolean set(java.lang.Object) -> set
    53:53:boolean setException(java.lang.Throwable) -> setException
    59:59:boolean setFuture(com.google.common.util.concurrent.ListenableFuture) -> setFuture
    62:62:void <init>() -> <init>
com.google.common.util.concurrent.SimpleTimeLimiter -> com.google.common.util.concurrent.SimpleTimeLimiter:
    java.util.concurrent.ExecutorService executor -> a
    52:54:void <init>(java.util.concurrent.ExecutorService) -> <init>
    68:68:com.google.common.util.concurrent.SimpleTimeLimiter create(java.util.concurrent.ExecutorService) -> create
    77:105:java.lang.Object newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit) -> newProxy
    110:113:java.lang.Object newProxy(java.lang.Class,java.lang.reflect.InvocationHandler) -> a
    119:140:java.lang.Object callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit,boolean) -> a
    148:161:java.lang.Object callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> callWithTimeout
    170:183:java.lang.Object callUninterruptiblyWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> callUninterruptiblyWithTimeout
    190:205:void runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> runWithTimeout
    210:225:void runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> runUninterruptiblyWithTimeout
    228:244:java.lang.Exception throwCause(java.lang.Exception,boolean) -> b
    248:254:java.util.Set findInterruptibleMethods(java.lang.Class) -> a
    258:264:boolean declaresInterruptedEx(java.lang.reflect.Method) -> a
    268:273:void wrapAndThrowExecutionExceptionOrError(java.lang.Throwable) -> a
    278:281:void wrapAndThrowRuntimeExecutionExceptionOrError(java.lang.Throwable) -> b
    286:287:void checkPositiveTimeout(long) -> a
    48:48:java.lang.Exception access$000(java.lang.Exception,boolean) -> a
    48:48:java.lang.Object access$100(com.google.common.util.concurrent.SimpleTimeLimiter,java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit,boolean) -> a
com.google.common.util.concurrent.SimpleTimeLimiter$1 -> com.google.common.util.concurrent.bU:
    java.lang.Object val$target -> a
    long val$timeoutDuration -> b
    java.util.concurrent.TimeUnit val$timeoutUnit -> c
    java.util.Set val$interruptibleMethods -> d
    com.google.common.util.concurrent.SimpleTimeLimiter this$0 -> e
    86:86:void <init>(com.google.common.util.concurrent.SimpleTimeLimiter,java.lang.Object,long,java.util.concurrent.TimeUnit,java.util.Set) -> <init>
    90:102:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
com.google.common.util.concurrent.SimpleTimeLimiter$1$1 -> com.google.common.util.concurrent.bV:
    java.lang.reflect.Method val$method -> a
    java.lang.Object[] val$args -> b
    com.google.common.util.concurrent.SimpleTimeLimiter$1 this$1 -> c
    91:91:void <init>(com.google.common.util.concurrent.SimpleTimeLimiter$1,java.lang.reflect.Method,java.lang.Object[]) -> <init>
    95:97:java.lang.Object call() -> call
com.google.common.util.concurrent.SmoothRateLimiter -> com.google.common.util.concurrent.bW:
    double storedPermits -> a
    double maxPermits -> b
    double stableIntervalMicros -> c
    long nextFreeTicketMicros -> d
    327:331:void <init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch) -> <init>
    335:339:void doSetRate(double,long) -> a
    void doSetRate(double,double) -> a
    345:345:double doGetRate() -> a
    350:350:long queryEarliestAvailable$1349e3() -> b
    355:365:long reserveEarliestAvailable(int,long) -> a
    long storedPermitsToWaitTime(double,double) -> b
    double coolDownIntervalMicros() -> c
    385:390:void resync(long) -> a
    25:25:void <init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,byte) -> <init>
com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty -> com.google.common.util.concurrent.bX:
    double maxBurstSeconds -> d
    281:283:void <init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,double) -> <init>
    287:298:void doSetRate(double,double) -> a
    302:302:long storedPermitsToWaitTime(double,double) -> b
    307:307:double coolDownIntervalMicros() -> c
com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp -> com.google.common.util.concurrent.bY:
    long warmupPeriodMicros -> d
    double slope -> e
    double thresholdPermits -> f
    double coldFactor -> g
    217:220:void <init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,long,java.util.concurrent.TimeUnit,double) -> <init>
    224:239:void doSetRate(double,double) -> a
    243:257:long storedPermitsToWaitTime(double,double) -> b
    261:261:double permitsToTime(double) -> a
    266:266:double coolDownIntervalMicros() -> c
com.google.common.util.concurrent.Striped -> com.google.common.util.concurrent.Striped:
    com.google.common.base.Supplier READ_WRITE_LOCK_SUPPLIER -> a
    com.google.common.base.Supplier WEAK_SAFE_READ_WRITE_LOCK_SUPPLIER -> b
    93:93:void <init>() -> <init>
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getAt(int) -> getAt
    int indexFor(java.lang.Object) -> a
    int size() -> size
    141:181:java.lang.Iterable bulkGet(java.lang.Iterable) -> bulkGet
    195:195:com.google.common.util.concurrent.Striped custom(int,com.google.common.base.Supplier) -> a
    206:206:com.google.common.util.concurrent.Striped lock(int) -> lock
    224:224:com.google.common.util.concurrent.Striped lazyWeakLock(int) -> lazyWeakLock
    235:235:com.google.common.util.concurrent.Striped lazy(int,com.google.common.base.Supplier) -> b
    249:249:com.google.common.util.concurrent.Striped semaphore(int,int) -> semaphore
    268:268:com.google.common.util.concurrent.Striped lazyWeakSemaphore(int,int) -> lazyWeakSemaphore
    286:286:com.google.common.util.concurrent.Striped readWriteLock(int) -> readWriteLock
    297:297:com.google.common.util.concurrent.Striped lazyWeakReadWriteLock(int) -> lazyWeakReadWriteLock
    545:545:int ceilToPowerOfTwo(int) -> c
    558:559:int smear(int) -> d
    85:85:void <init>(byte) -> <init>
    85:85:int access$200(int) -> a
    85:85:int access$300(int) -> b
    300:308:void <clinit>() -> <clinit>
com.google.common.util.concurrent.Striped$1 -> com.google.common.util.concurrent.bZ:
    208:208:void <init>() -> <init>
    211:211:java.util.concurrent.locks.Lock get() -> a
    208:208:java.lang.Object get() -> get
com.google.common.util.concurrent.Striped$2 -> com.google.common.util.concurrent.ca:
    226:226:void <init>() -> <init>
    229:229:java.util.concurrent.locks.Lock get() -> a
    226:226:java.lang.Object get() -> get
com.google.common.util.concurrent.Striped$3 -> com.google.common.util.concurrent.cb:
    int val$permits -> a
    251:251:void <init>(int) -> <init>
    254:254:java.util.concurrent.Semaphore get() -> a
    251:251:java.lang.Object get() -> get
com.google.common.util.concurrent.Striped$4 -> com.google.common.util.concurrent.cc:
    int val$permits -> a
    270:270:void <init>(int) -> <init>
    273:273:java.util.concurrent.Semaphore get() -> a
    270:270:java.lang.Object get() -> get
com.google.common.util.concurrent.Striped$5 -> com.google.common.util.concurrent.cd:
    301:301:void <init>() -> <init>
    304:304:java.util.concurrent.locks.ReadWriteLock get() -> a
    301:301:java.lang.Object get() -> get
com.google.common.util.concurrent.Striped$6 -> com.google.common.util.concurrent.ce:
    309:309:void <init>() -> <init>
    312:312:java.util.concurrent.locks.ReadWriteLock get() -> a
    309:309:java.lang.Object get() -> get
com.google.common.util.concurrent.Striped$CompactStriped -> com.google.common.util.concurrent.cf:
    java.lang.Object[] array -> b
    410:417:void <init>(int,com.google.common.base.Supplier) -> <init>
    422:422:java.lang.Object getAt(int) -> getAt
    427:427:int size() -> size
    405:405:void <init>(int,com.google.common.base.Supplier,byte) -> <init>
com.google.common.util.concurrent.Striped$LargeLazyStriped -> com.google.common.util.concurrent.cg:
    java.util.concurrent.ConcurrentMap locks -> b
    com.google.common.base.Supplier supplier -> c
    int size -> d
    515:519:void <init>(int,com.google.common.base.Supplier) -> <init>
    523:532:java.lang.Object getAt(int) -> getAt
    537:537:int size() -> size
com.google.common.util.concurrent.Striped$PaddedLock -> com.google.common.util.concurrent.ch:
    573:574:void <init>() -> <init>
com.google.common.util.concurrent.Striped$PaddedSemaphore -> com.google.common.util.concurrent.ci:
    584:585:void <init>(int) -> <init>
com.google.common.util.concurrent.Striped$PowerOfTwoStriped -> com.google.common.util.concurrent.cj:
    int mask -> a
    384:387:void <init>(int) -> <init>
    391:392:int indexFor(java.lang.Object) -> a
    397:397:java.lang.Object get(java.lang.Object) -> get
com.google.common.util.concurrent.Striped$SmallLazyStriped -> com.google.common.util.concurrent.ck:
    java.util.concurrent.atomic.AtomicReferenceArray locks -> b
    com.google.common.base.Supplier supplier -> c
    int size -> d
    java.lang.ref.ReferenceQueue queue -> e
    441:448:void <init>(int,com.google.common.base.Supplier) -> <init>
    452:471:java.lang.Object getAt(int) -> getAt
    479:486:void drainQueue() -> a
    490:490:int size() -> size
com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference -> com.google.common.util.concurrent.cl:
    int index -> a
    497:499:void <init>(java.lang.Object,int,java.lang.ref.ReferenceQueue) -> <init>
com.google.common.util.concurrent.Striped$WeakSafeCondition -> com.google.common.util.concurrent.cm:
    java.util.concurrent.locks.Condition delegate -> a
    369:372:void <init>(java.util.concurrent.locks.Condition,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock) -> <init>
    376:376:java.util.concurrent.locks.Condition delegate() -> a
com.google.common.util.concurrent.Striped$WeakSafeLock -> com.google.common.util.concurrent.cn:
    java.util.concurrent.locks.Lock delegate -> a
    com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock strongReference -> b
    346:349:void <init>(java.util.concurrent.locks.Lock,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock) -> <init>
    353:353:java.util.concurrent.locks.Lock delegate() -> a
    358:358:java.util.concurrent.locks.Condition newCondition() -> newCondition
com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock -> com.google.common.util.concurrent.co:
    java.util.concurrent.locks.ReadWriteLock delegate -> a
    324:326:void <init>() -> <init>
    330:330:java.util.concurrent.locks.Lock readLock() -> readLock
    335:335:java.util.concurrent.locks.Lock writeLock() -> writeLock
com.google.common.util.concurrent.ThreadFactoryBuilder -> com.google.common.util.concurrent.ThreadFactoryBuilder:
    java.lang.String nameFormat -> a
    java.lang.Boolean daemon -> b
    java.lang.Integer priority -> c
    java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler -> d
    java.util.concurrent.ThreadFactory backingThreadFactory -> e
    49:56:void <init>() -> <init>
    70:72:com.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String) -> setNameFormat
    82:83:com.google.common.util.concurrent.ThreadFactoryBuilder setDaemon(boolean) -> setDaemon
    95:106:com.google.common.util.concurrent.ThreadFactoryBuilder setPriority(int) -> setPriority
    118:119:com.google.common.util.concurrent.ThreadFactoryBuilder setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler) -> setUncaughtExceptionHandler
    132:133:com.google.common.util.concurrent.ThreadFactoryBuilder setThreadFactory(java.util.concurrent.ThreadFactory) -> setThreadFactory
    145:145:java.util.concurrent.ThreadFactory build() -> build
    151:160:java.util.concurrent.ThreadFactory doBuild(com.google.common.util.concurrent.ThreadFactoryBuilder) -> a
    182:182:java.lang.String format(java.lang.String,java.lang.Object[]) -> b
    48:48:java.lang.String access$000(java.lang.String,java.lang.Object[]) -> a
com.google.common.util.concurrent.ThreadFactoryBuilder$1 -> com.google.common.util.concurrent.cp:
    java.util.concurrent.ThreadFactory val$backingThreadFactory -> a
    java.lang.String val$nameFormat -> b
    java.util.concurrent.atomic.AtomicLong val$count -> c
    java.lang.Boolean val$daemon -> d
    java.lang.Integer val$priority -> e
    java.lang.Thread$UncaughtExceptionHandler val$uncaughtExceptionHandler -> f
    160:160:void <init>(java.util.concurrent.ThreadFactory,java.lang.String,java.util.concurrent.atomic.AtomicLong,java.lang.Boolean,java.lang.Integer,java.lang.Thread$UncaughtExceptionHandler) -> <init>
    163:176:java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.google.common.util.concurrent.TimeLimiter -> com.google.common.util.concurrent.TimeLimiter:
    java.lang.Object newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit) -> newProxy
    125:125:java.lang.Object newProxy(java.lang.Object,java.lang.Class,java.time.Duration) -> newProxy
    java.lang.Object callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> callWithTimeout
    169:169:java.lang.Object callWithTimeout(java.util.concurrent.Callable,java.time.Duration) -> callWithTimeout
    java.lang.Object callUninterruptiblyWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> callUninterruptiblyWithTimeout
    218:219:java.lang.Object callUninterruptiblyWithTimeout(java.util.concurrent.Callable,java.time.Duration) -> callUninterruptiblyWithTimeout
    void runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> runWithTimeout
    257:258:void runWithTimeout(java.lang.Runnable,java.time.Duration) -> runWithTimeout
    void runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> runUninterruptiblyWithTimeout
    299:300:void runUninterruptiblyWithTimeout(java.lang.Runnable,java.time.Duration) -> runUninterruptiblyWithTimeout
com.google.common.util.concurrent.TimeoutFuture -> com.google.common.util.concurrent.cq:
    com.google.common.util.concurrent.ListenableFuture delegateRef -> a
    java.util.concurrent.ScheduledFuture timer -> b
    43:47:com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService) -> a
    77:79:void <init>(com.google.common.util.concurrent.ListenableFuture) -> <init>
    156:169:java.lang.String pendingToString() -> pendingToString
    174:186:void afterDone() -> afterDone
    37:37:com.google.common.util.concurrent.ListenableFuture access$000(com.google.common.util.concurrent.TimeoutFuture) -> a
    37:37:java.util.concurrent.ScheduledFuture access$100(com.google.common.util.concurrent.TimeoutFuture) -> b
    37:37:java.util.concurrent.ScheduledFuture access$102(com.google.common.util.concurrent.TimeoutFuture,java.util.concurrent.ScheduledFuture) -> a
com.google.common.util.concurrent.TimeoutFuture$Fire -> com.google.common.util.concurrent.cr:
    com.google.common.util.concurrent.TimeoutFuture timeoutFutureRef -> a
    85:87:void <init>(com.google.common.util.concurrent.TimeoutFuture) -> <init>
    93:139:void run() -> run
com.google.common.util.concurrent.TimeoutFuture$TimeoutFutureException -> com.google.common.util.concurrent.cs:
    144:145:void <init>(java.lang.String) -> <init>
    149:150:java.lang.Throwable fillInStackTrace() -> fillInStackTrace
    142:142:void <init>(java.lang.String,byte) -> <init>
com.google.common.util.concurrent.TrustedListenableFutureTask -> com.google.common.util.concurrent.ct:
    com.google.common.util.concurrent.InterruptibleTask task -> a
    37:37:com.google.common.util.concurrent.TrustedListenableFutureTask create(com.google.common.util.concurrent.AsyncCallable) -> a
    41:41:com.google.common.util.concurrent.TrustedListenableFutureTask create(java.util.concurrent.Callable) -> a
    54:54:com.google.common.util.concurrent.TrustedListenableFutureTask create(java.lang.Runnable,java.lang.Object) -> a
    66:68:void <init>(java.util.concurrent.Callable) -> <init>
    70:72:void <init>(com.google.common.util.concurrent.AsyncCallable) -> <init>
    76:85:void run() -> run
    89:99:void afterDone() -> afterDone
    103:107:java.lang.String pendingToString() -> pendingToString
com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask -> com.google.common.util.concurrent.cu:
    com.google.common.util.concurrent.AsyncCallable callable -> a
    com.google.common.util.concurrent.TrustedListenableFutureTask this$0 -> b
    148:150:void <init>(com.google.common.util.concurrent.TrustedListenableFutureTask,com.google.common.util.concurrent.AsyncCallable) -> <init>
    154:154:boolean isDone() -> c
    159:160:com.google.common.util.concurrent.ListenableFuture runInterruptibly() -> d
    168:173:void afterRanInterruptibly(com.google.common.util.concurrent.ListenableFuture,java.lang.Throwable) -> a
    177:177:java.lang.String toPendingString() -> a
    143:143:void afterRanInterruptibly(java.lang.Object,java.lang.Throwable) -> a
    143:143:java.lang.Object runInterruptibly() -> b
com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask -> com.google.common.util.concurrent.cv:
    java.util.concurrent.Callable callable -> a
    com.google.common.util.concurrent.TrustedListenableFutureTask this$0 -> b
    114:116:void <init>(com.google.common.util.concurrent.TrustedListenableFutureTask,java.util.concurrent.Callable) -> <init>
    120:120:boolean isDone() -> c
    125:125:java.lang.Object runInterruptibly() -> b
    130:135:void afterRanInterruptibly(java.lang.Object,java.lang.Throwable) -> a
    139:139:java.lang.String toPendingString() -> a
com.google.common.util.concurrent.UncaughtExceptionHandlers -> com.google.common.util.concurrent.UncaughtExceptionHandlers:
    33:33:void <init>() -> <init>
    52:52:java.lang.Thread$UncaughtExceptionHandler systemExit() -> systemExit
com.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter -> com.google.common.util.concurrent.cw:
    java.util.logging.Logger logger -> a
    java.lang.Runtime runtime -> b
    61:63:void <init>(java.lang.Runtime) -> <init>
    69:79:void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
    57:57:void <clinit>() -> <clinit>
com.google.common.util.concurrent.UncheckedExecutionException -> com.google.common.util.concurrent.UncheckedExecutionException:
    long serialVersionUID -> serialVersionUID
    38:38:void <init>() -> <init>
    42:43:void <init>(java.lang.String) -> <init>
    47:48:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    52:53:void <init>(java.lang.Throwable) -> <init>
com.google.common.util.concurrent.UncheckedTimeoutException -> com.google.common.util.concurrent.UncheckedTimeoutException:
    long serialVersionUID -> serialVersionUID
    28:28:void <init>() -> <init>
    31:32:void <init>(java.lang.String) -> <init>
    35:36:void <init>(java.lang.Throwable) -> <init>
    39:40:void <init>(java.lang.String,java.lang.Throwable) -> <init>
com.google.common.util.concurrent.Uninterruptibles -> com.google.common.util.concurrent.Uninterruptibles:
    53:67:void awaitUninterruptibly(java.util.concurrent.CountDownLatch) -> awaitUninterruptibly
    80:80:boolean awaitUninterruptibly(java.util.concurrent.CountDownLatch,java.time.Duration) -> awaitUninterruptibly
    91:109:boolean awaitUninterruptibly(java.util.concurrent.CountDownLatch,long,java.util.concurrent.TimeUnit) -> awaitUninterruptibly
    121:121:boolean awaitUninterruptibly(java.util.concurrent.locks.Condition,java.time.Duration) -> awaitUninterruptibly
    133:150:boolean awaitUninterruptibly(java.util.concurrent.locks.Condition,long,java.util.concurrent.TimeUnit) -> awaitUninterruptibly
    156:170:void joinUninterruptibly(java.lang.Thread) -> joinUninterruptibly
    182:183:void joinUninterruptibly(java.lang.Thread,java.time.Duration) -> joinUninterruptibly
    192:211:void joinUninterruptibly(java.lang.Thread,long,java.util.concurrent.TimeUnit) -> joinUninterruptibly
    233:246:java.lang.Object getUninterruptibly(java.util.concurrent.Future) -> getUninterruptibly
    273:273:java.lang.Object getUninterruptibly(java.util.concurrent.Future,java.time.Duration) -> getUninterruptibly
    299:317:java.lang.Object getUninterruptibly(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit) -> getUninterruptibly
    323:336:java.lang.Object takeUninterruptibly(java.util.concurrent.BlockingQueue) -> takeUninterruptibly
    349:363:void putUninterruptibly(java.util.concurrent.BlockingQueue,java.lang.Object) -> putUninterruptibly
    375:376:void sleepUninterruptibly(java.time.Duration) -> sleepUninterruptibly
    383:401:void sleepUninterruptibly(long,java.util.concurrent.TimeUnit) -> sleepUninterruptibly
    413:413:boolean tryAcquireUninterruptibly(java.util.concurrent.Semaphore,java.time.Duration) -> tryAcquireUninterruptibly
    426:426:boolean tryAcquireUninterruptibly(java.util.concurrent.Semaphore,long,java.util.concurrent.TimeUnit) -> tryAcquireUninterruptibly
    439:440:boolean tryAcquireUninterruptibly(java.util.concurrent.Semaphore,int,java.time.Duration) -> tryAcquireUninterruptibly
    453:471:boolean tryAcquireUninterruptibly(java.util.concurrent.Semaphore,int,long,java.util.concurrent.TimeUnit) -> tryAcquireUninterruptibly
    476:476:void <init>() -> <init>
com.google.common.util.concurrent.WrappingExecutorService -> com.google.common.util.concurrent.cx:
    java.util.concurrent.ExecutorService delegate -> a
    48:50:void <init>(java.util.concurrent.ExecutorService) -> <init>
    java.util.concurrent.Callable wrapTask(java.util.concurrent.Callable) -> a
    63:64:java.lang.Runnable wrapTask(java.lang.Runnable) -> a
    83:87:com.google.common.collect.ImmutableList wrapTasks(java.util.Collection) -> a
    93:94:void execute(java.lang.Runnable) -> execute
    98:98:java.util.concurrent.Future submit(java.util.concurrent.Callable) -> submit
    103:103:java.util.concurrent.Future submit(java.lang.Runnable) -> submit
    108:108:java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object) -> submit
    114:114:java.util.List invokeAll(java.util.Collection) -> invokeAll
    121:121:java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit) -> invokeAll
    127:127:java.lang.Object invokeAny(java.util.Collection) -> invokeAny
    133:133:java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit) -> invokeAny
    140:141:void shutdown() -> shutdown
    145:145:java.util.List shutdownNow() -> shutdownNow
    150:150:boolean isShutdown() -> isShutdown
    155:155:boolean isTerminated() -> isTerminated
    160:160:boolean awaitTermination(long,java.util.concurrent.TimeUnit) -> awaitTermination
com.google.common.util.concurrent.WrappingExecutorService$1 -> com.google.common.util.concurrent.cy:
    java.util.concurrent.Callable val$wrapped -> a
    64:64:void <init>(com.google.common.util.concurrent.WrappingExecutorService,java.util.concurrent.Callable) -> <init>
    68:73:void run() -> run
com.google.common.util.concurrent.WrappingScheduledExecutorService -> com.google.common.util.concurrent.cz:
    java.util.concurrent.ScheduledExecutorService delegate -> a
    39:41:void <init>(java.util.concurrent.ScheduledExecutorService) -> <init>
    45:45:java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> schedule
    50:50:java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> schedule
    56:56:java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleAtFixedRate
    62:62:java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleWithFixedDelay
com.google.common.util.concurrent.internal.InternalFutureFailureAccess -> com.google.common.util.concurrent.internal.InternalFutureFailureAccess:
    31:31:void <init>() -> <init>
    java.lang.Throwable tryInternalFastPathGetFailure() -> tryInternalFastPathGetFailure
com.google.common.util.concurrent.internal.InternalFutures -> com.google.common.util.concurrent.internal.InternalFutures:
    41:41:java.lang.Throwable tryInternalFastPathGetFailure(com.google.common.util.concurrent.internal.InternalFutureFailureAccess) -> tryInternalFastPathGetFailure
    44:44:void <init>() -> <init>
com.google.common.xml.XmlEscapers -> com.google.common.xml.XmlEscapers:
    com.google.common.escape.Escaper XML_CONTENT_ESCAPER -> a
    com.google.common.escape.Escaper XML_ATTRIBUTE_ESCAPER -> b
    45:45:void <init>() -> <init>
    76:76:com.google.common.escape.Escaper xmlContentEscaper() -> xmlContentEscaper
    100:100:com.google.common.escape.Escaper xmlAttributeEscaper() -> xmlAttributeEscaper
    108:144:void <clinit>() -> <clinit>
com.google.errorprone.annotations.CanIgnoreReturnValue -> com.google.errorprone.annotations.CanIgnoreReturnValue:
com.google.errorprone.annotations.CheckReturnValue -> com.google.errorprone.annotations.CheckReturnValue:
com.google.errorprone.annotations.CompatibleWith -> com.google.errorprone.annotations.CompatibleWith:
    java.lang.String value() -> value
com.google.errorprone.annotations.CompileTimeConstant -> com.google.errorprone.annotations.CompileTimeConstant:
com.google.errorprone.annotations.DoNotCall -> com.google.errorprone.annotations.DoNotCall:
    java.lang.String value() -> value
com.google.errorprone.annotations.DoNotMock -> com.google.errorprone.annotations.DoNotMock:
    java.lang.String value() -> value
com.google.errorprone.annotations.ForOverride -> com.google.errorprone.annotations.ForOverride:
com.google.errorprone.annotations.FormatMethod -> com.google.errorprone.annotations.FormatMethod:
com.google.errorprone.annotations.FormatString -> com.google.errorprone.annotations.FormatString:
com.google.errorprone.annotations.Immutable -> com.google.errorprone.annotations.Immutable:
    java.lang.String[] containerOf() -> containerOf
com.google.errorprone.annotations.IncompatibleModifiers -> com.google.errorprone.annotations.IncompatibleModifiers:
    javax.lang.model.element.Modifier[] value() -> value
com.google.errorprone.annotations.MustBeClosed -> com.google.errorprone.annotations.MustBeClosed:
com.google.errorprone.annotations.NoAllocation -> com.google.errorprone.annotations.NoAllocation:
com.google.errorprone.annotations.OverridingMethodsMustInvokeSuper -> com.google.errorprone.annotations.OverridingMethodsMustInvokeSuper:
com.google.errorprone.annotations.RequiredModifiers -> com.google.errorprone.annotations.RequiredModifiers:
    javax.lang.model.element.Modifier[] value() -> value
com.google.errorprone.annotations.RestrictedApi -> com.google.errorprone.annotations.RestrictedApi:
    java.lang.String checkerName() -> checkerName
    java.lang.String explanation() -> explanation
    java.lang.String link() -> link
    java.lang.String allowedOnPath() -> allowedOnPath
    java.lang.Class[] whitelistAnnotations() -> whitelistAnnotations
    java.lang.Class[] whitelistWithWarningAnnotations() -> whitelistWithWarningAnnotations
com.google.errorprone.annotations.SuppressPackageLocation -> com.google.errorprone.annotations.SuppressPackageLocation:
com.google.errorprone.annotations.Var -> com.google.errorprone.annotations.Var:
com.google.errorprone.annotations.concurrent.GuardedBy -> com.google.errorprone.annotations.concurrent.GuardedBy:
    java.lang.String value() -> value
com.google.errorprone.annotations.concurrent.LazyInit -> com.google.errorprone.annotations.concurrent.LazyInit:
com.google.errorprone.annotations.concurrent.LockMethod -> com.google.errorprone.annotations.concurrent.LockMethod:
    java.lang.String[] value() -> value
com.google.errorprone.annotations.concurrent.UnlockMethod -> com.google.errorprone.annotations.concurrent.UnlockMethod:
    java.lang.String[] value() -> value
com.google.j2objc.annotations.AutoreleasePool -> com.google.j2objc.annotations.AutoreleasePool:
com.google.j2objc.annotations.J2ObjCIncompatible -> com.google.j2objc.annotations.J2ObjCIncompatible:
com.google.j2objc.annotations.LoopTranslation -> com.google.j2objc.annotations.LoopTranslation:
    com.google.j2objc.annotations.LoopTranslation$LoopStyle value() -> value
com.google.j2objc.annotations.LoopTranslation$LoopStyle -> com.google.j2objc.annotations.LoopTranslation$LoopStyle:
    com.google.j2objc.annotations.LoopTranslation$LoopStyle JAVA_ITERATOR -> JAVA_ITERATOR
    com.google.j2objc.annotations.LoopTranslation$LoopStyle FAST_ENUMERATION -> FAST_ENUMERATION
    com.google.j2objc.annotations.LoopTranslation$LoopStyle[] $VALUES -> a
    36:36:com.google.j2objc.annotations.LoopTranslation$LoopStyle[] values() -> values
    36:36:com.google.j2objc.annotations.LoopTranslation$LoopStyle valueOf(java.lang.String) -> valueOf
    36:36:void <init>(java.lang.String,int) -> <init>
    36:50:void <clinit>() -> <clinit>
com.google.j2objc.annotations.ObjectiveCName -> com.google.j2objc.annotations.ObjectiveCName:
    java.lang.String value() -> value
com.google.j2objc.annotations.Property -> com.google.j2objc.annotations.Property:
    java.lang.String value() -> value
com.google.j2objc.annotations.ReflectionSupport -> com.google.j2objc.annotations.ReflectionSupport:
    com.google.j2objc.annotations.ReflectionSupport$Level value() -> value
com.google.j2objc.annotations.ReflectionSupport$Level -> com.google.j2objc.annotations.ReflectionSupport$Level:
    com.google.j2objc.annotations.ReflectionSupport$Level NATIVE_ONLY -> NATIVE_ONLY
    com.google.j2objc.annotations.ReflectionSupport$Level FULL -> FULL
    com.google.j2objc.annotations.ReflectionSupport$Level[] $VALUES -> a
    35:35:com.google.j2objc.annotations.ReflectionSupport$Level[] values() -> values
    35:35:com.google.j2objc.annotations.ReflectionSupport$Level valueOf(java.lang.String) -> valueOf
    35:35:void <init>(java.lang.String,int) -> <init>
    35:44:void <clinit>() -> <clinit>
com.google.j2objc.annotations.RetainedLocalRef -> com.google.j2objc.annotations.RetainedLocalRef:
com.google.j2objc.annotations.RetainedWith -> com.google.j2objc.annotations.RetainedWith:
com.google.j2objc.annotations.Weak -> com.google.j2objc.annotations.Weak:
com.google.j2objc.annotations.WeakOuter -> com.google.j2objc.annotations.WeakOuter:
com.google.thirdparty.publicsuffix.PublicSuffixPatterns -> com.google.thirdparty.publicsuffix.PublicSuffixPatterns:
    com.google.common.collect.ImmutableMap EXACT -> EXACT
    com.google.common.collect.ImmutableMap UNDER -> UNDER
    com.google.common.collect.ImmutableMap EXCLUDED -> EXCLUDED
    41:41:void <init>() -> <init>
    44:62:void <clinit>() -> <clinit>
com.google.thirdparty.publicsuffix.PublicSuffixType -> com.google.thirdparty.publicsuffix.PublicSuffixType:
    com.google.thirdparty.publicsuffix.PublicSuffixType PRIVATE -> PRIVATE
    com.google.thirdparty.publicsuffix.PublicSuffixType REGISTRY -> REGISTRY
    char innerNodeCode -> a
    char leafNodeCode -> b
    com.google.thirdparty.publicsuffix.PublicSuffixType[] $VALUES -> c
    28:28:com.google.thirdparty.publicsuffix.PublicSuffixType[] values() -> values
    28:28:com.google.thirdparty.publicsuffix.PublicSuffixType valueOf(java.lang.String) -> valueOf
    43:46:void <init>(java.lang.String,int,char,char) -> <init>
    49:49:char getLeafNodeCode() -> a
    53:53:char getInnerNodeCode() -> b
    58:63:com.google.thirdparty.publicsuffix.PublicSuffixType fromCode(char) -> a
    28:35:void <clinit>() -> <clinit>
com.google.thirdparty.publicsuffix.TrieParser -> com.google.thirdparty.publicsuffix.a:
    com.google.common.base.Joiner PREFIX_JOINER -> a
    33:39:com.google.common.collect.ImmutableMap parseTrie(java.lang.CharSequence) -> a
    58:96:int doParseTrieToBuilder(java.util.List,java.lang.CharSequence,int,com.google.common.collect.ImmutableMap$Builder) -> a
    100:100:java.lang.CharSequence reverse(java.lang.CharSequence) -> b
    26:26:void <clinit>() -> <clinit>
javax.annotation.CheckForNull -> javax.annotation.CheckForNull:
javax.annotation.CheckForSigned -> javax.annotation.CheckForSigned:
javax.annotation.CheckReturnValue -> javax.annotation.CheckReturnValue:
    javax.annotation.meta.When when() -> when
javax.annotation.Detainted -> javax.annotation.Detainted:
javax.annotation.MatchesPattern -> javax.annotation.MatchesPattern:
    java.lang.String value() -> value
    int flags() -> flags
javax.annotation.MatchesPattern$Checker -> javax.annotation.MatchesPattern$Checker:
    26:26:void <init>() -> <init>
    28:31:javax.annotation.meta.When forConstantValue(javax.annotation.MatchesPattern,java.lang.Object) -> forConstantValue
    26:26:javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object) -> forConstantValue
javax.annotation.Nonnegative -> javax.annotation.Nonnegative:
    javax.annotation.meta.When when() -> when
javax.annotation.Nonnegative$Checker -> javax.annotation.Nonnegative$Checker:
    22:22:void <init>() -> <init>
    25:41:javax.annotation.meta.When forConstantValue(javax.annotation.Nonnegative,java.lang.Object) -> forConstantValue
    22:22:javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object) -> forConstantValue
javax.annotation.Nonnull -> javax.annotation.Nonnull:
    javax.annotation.meta.When when() -> when
javax.annotation.Nonnull$Checker -> javax.annotation.Nonnull$Checker:
    24:24:void <init>() -> <init>
    27:29:javax.annotation.meta.When forConstantValue(javax.annotation.Nonnull,java.lang.Object) -> forConstantValue
    24:24:javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object) -> forConstantValue
javax.annotation.Nullable -> javax.annotation.Nullable:
javax.annotation.OverridingMethodsMustInvokeSuper -> javax.annotation.OverridingMethodsMustInvokeSuper:
javax.annotation.ParametersAreNonnullByDefault -> javax.annotation.ParametersAreNonnullByDefault:
javax.annotation.ParametersAreNullableByDefault -> javax.annotation.ParametersAreNullableByDefault:
javax.annotation.PropertyKey -> javax.annotation.PropertyKey:
    javax.annotation.meta.When when() -> when
javax.annotation.RegEx -> javax.annotation.RegEx:
    javax.annotation.meta.When when() -> when
javax.annotation.RegEx$Checker -> javax.annotation.RegEx$Checker:
    26:26:void <init>() -> <init>
    29:37:javax.annotation.meta.When forConstantValue(javax.annotation.RegEx,java.lang.Object) -> forConstantValue
    26:26:javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object) -> forConstantValue
javax.annotation.Signed -> javax.annotation.Signed:
javax.annotation.Syntax -> javax.annotation.Syntax:
    java.lang.String value() -> value
    javax.annotation.meta.When when() -> when
javax.annotation.Tainted -> javax.annotation.Tainted:
javax.annotation.Untainted -> javax.annotation.Untainted:
    javax.annotation.meta.When when() -> when
javax.annotation.WillClose -> javax.annotation.WillClose:
javax.annotation.WillCloseWhenClosed -> javax.annotation.WillCloseWhenClosed:
javax.annotation.WillNotClose -> javax.annotation.WillNotClose:
javax.annotation.concurrent.GuardedBy -> javax.annotation.concurrent.GuardedBy:
    java.lang.String value() -> value
javax.annotation.concurrent.Immutable -> javax.annotation.concurrent.Immutable:
javax.annotation.concurrent.NotThreadSafe -> javax.annotation.concurrent.NotThreadSafe:
javax.annotation.concurrent.ThreadSafe -> javax.annotation.concurrent.ThreadSafe:
javax.annotation.meta.Exclusive -> javax.annotation.meta.Exclusive:
javax.annotation.meta.Exhaustive -> javax.annotation.meta.Exhaustive:
javax.annotation.meta.TypeQualifier -> javax.annotation.meta.TypeQualifier:
    java.lang.Class applicableTo() -> applicableTo
javax.annotation.meta.TypeQualifierDefault -> javax.annotation.meta.TypeQualifierDefault:
    java.lang.annotation.ElementType[] value() -> value
javax.annotation.meta.TypeQualifierNickname -> javax.annotation.meta.TypeQualifierNickname:
javax.annotation.meta.TypeQualifierValidator -> javax.annotation.meta.TypeQualifierValidator:
    javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object) -> forConstantValue
javax.annotation.meta.When -> javax.annotation.meta.When:
    javax.annotation.meta.When ALWAYS -> ALWAYS
    javax.annotation.meta.When UNKNOWN -> UNKNOWN
    javax.annotation.meta.When MAYBE -> MAYBE
    javax.annotation.meta.When NEVER -> NEVER
    javax.annotation.meta.When[] $VALUES -> a
    13:13:javax.annotation.meta.When[] values() -> values
    13:13:javax.annotation.meta.When valueOf(java.lang.String) -> valueOf
    13:13:void <init>(java.lang.String,int) -> <init>
    13:21:void <clinit>() -> <clinit>
org.checkerframework.checker.compilermsgs.qual.CompilerMessageKey -> org.checkerframework.checker.compilermsgs.qual.CompilerMessageKey:
org.checkerframework.checker.compilermsgs.qual.CompilerMessageKeyBottom -> org.checkerframework.checker.compilermsgs.qual.CompilerMessageKeyBottom:
org.checkerframework.checker.compilermsgs.qual.UnknownCompilerMessageKey -> org.checkerframework.checker.compilermsgs.qual.UnknownCompilerMessageKey:
org.checkerframework.checker.fenum.qual.AwtAlphaCompositingRule -> org.checkerframework.checker.fenum.qual.AwtAlphaCompositingRule:
org.checkerframework.checker.fenum.qual.AwtColorSpace -> org.checkerframework.checker.fenum.qual.AwtColorSpace:
org.checkerframework.checker.fenum.qual.AwtCursorType -> org.checkerframework.checker.fenum.qual.AwtCursorType:
org.checkerframework.checker.fenum.qual.AwtFlowLayout -> org.checkerframework.checker.fenum.qual.AwtFlowLayout:
org.checkerframework.checker.fenum.qual.Fenum -> org.checkerframework.checker.fenum.qual.Fenum:
    java.lang.String value() -> value
org.checkerframework.checker.fenum.qual.FenumBottom -> org.checkerframework.checker.fenum.qual.FenumBottom:
org.checkerframework.checker.fenum.qual.FenumTop -> org.checkerframework.checker.fenum.qual.FenumTop:
org.checkerframework.checker.fenum.qual.FenumUnqualified -> org.checkerframework.checker.fenum.qual.FenumUnqualified:
org.checkerframework.checker.fenum.qual.PolyFenum -> org.checkerframework.checker.fenum.qual.PolyFenum:
org.checkerframework.checker.fenum.qual.SwingBoxOrientation -> org.checkerframework.checker.fenum.qual.SwingBoxOrientation:
org.checkerframework.checker.fenum.qual.SwingCompassDirection -> org.checkerframework.checker.fenum.qual.SwingCompassDirection:
org.checkerframework.checker.fenum.qual.SwingElementOrientation -> org.checkerframework.checker.fenum.qual.SwingElementOrientation:
org.checkerframework.checker.fenum.qual.SwingHorizontalOrientation -> org.checkerframework.checker.fenum.qual.SwingHorizontalOrientation:
org.checkerframework.checker.fenum.qual.SwingSplitPaneOrientation -> org.checkerframework.checker.fenum.qual.SwingSplitPaneOrientation:
org.checkerframework.checker.fenum.qual.SwingTextOrientation -> org.checkerframework.checker.fenum.qual.SwingTextOrientation:
org.checkerframework.checker.fenum.qual.SwingTitleJustification -> org.checkerframework.checker.fenum.qual.SwingTitleJustification:
org.checkerframework.checker.fenum.qual.SwingTitlePosition -> org.checkerframework.checker.fenum.qual.SwingTitlePosition:
org.checkerframework.checker.fenum.qual.SwingVerticalOrientation -> org.checkerframework.checker.fenum.qual.SwingVerticalOrientation:
org.checkerframework.checker.formatter.FormatUtil -> org.checkerframework.checker.formatter.FormatUtil:
    java.util.regex.Pattern fsPattern -> a
    15:15:void <init>() -> <init>
    43:54:java.lang.String asFormat(java.lang.String,org.checkerframework.checker.formatter.qual.ConversionCategory[]) -> asFormat
    60:61:void tryFormatSatisfiability(java.lang.String) -> tryFormatSatisfiability
    70:104:org.checkerframework.checker.formatter.qual.ConversionCategory[] formatParameterCategories(java.lang.String) -> formatParameterCategories
    115:125:int indexFromFormat(java.util.regex.Matcher) -> a
    129:133:char conversionCharFromFormat(java.util.regex.Matcher) -> b
    138:150:org.checkerframework.checker.formatter.FormatUtil$Conversion[] parse(java.lang.String) -> a
    111:111:void <clinit>() -> <clinit>
org.checkerframework.checker.formatter.FormatUtil$Conversion -> org.checkerframework.checker.formatter.a:
    int index -> a
    org.checkerframework.checker.formatter.qual.ConversionCategory cath -> b
    20:23:void <init>(char,int) -> <init>
    26:26:int index() -> a
    30:30:org.checkerframework.checker.formatter.qual.ConversionCategory category() -> b
org.checkerframework.checker.formatter.FormatUtil$ExcessiveOrMissingFormatArgumentException -> org.checkerframework.checker.formatter.FormatUtil$ExcessiveOrMissingFormatArgumentException:
    long serialVersionUID -> serialVersionUID
    int expected -> a
    int found -> b
    165:168:void <init>(int,int) -> <init>
    171:171:int getExpected() -> getExpected
    175:175:int getFound() -> getFound
    180:180:java.lang.String getMessage() -> getMessage
org.checkerframework.checker.formatter.FormatUtil$IllegalFormatConversionCategoryException -> org.checkerframework.checker.formatter.FormatUtil$IllegalFormatConversionCategoryException:
    long serialVersionUID -> serialVersionUID
    org.checkerframework.checker.formatter.qual.ConversionCategory expected -> a
    org.checkerframework.checker.formatter.qual.ConversionCategory found -> b
    196:201:void <init>(org.checkerframework.checker.formatter.qual.ConversionCategory,org.checkerframework.checker.formatter.qual.ConversionCategory) -> <init>
    204:204:org.checkerframework.checker.formatter.qual.ConversionCategory getExpected() -> getExpected
    208:208:org.checkerframework.checker.formatter.qual.ConversionCategory getFound() -> getFound
    213:213:java.lang.String getMessage() -> getMessage
org.checkerframework.checker.formatter.qual.ConversionCategory -> org.checkerframework.checker.formatter.qual.ConversionCategory:
    org.checkerframework.checker.formatter.qual.ConversionCategory GENERAL -> GENERAL
    org.checkerframework.checker.formatter.qual.ConversionCategory CHAR -> CHAR
    org.checkerframework.checker.formatter.qual.ConversionCategory INT -> INT
    org.checkerframework.checker.formatter.qual.ConversionCategory FLOAT -> FLOAT
    org.checkerframework.checker.formatter.qual.ConversionCategory TIME -> TIME
    org.checkerframework.checker.formatter.qual.ConversionCategory CHAR_AND_INT -> CHAR_AND_INT
    org.checkerframework.checker.formatter.qual.ConversionCategory INT_AND_TIME -> INT_AND_TIME
    org.checkerframework.checker.formatter.qual.ConversionCategory NULL -> NULL
    org.checkerframework.checker.formatter.qual.ConversionCategory UNUSED -> UNUSED
    java.lang.Class[] types -> types
    java.lang.String chars -> chars
    org.checkerframework.checker.formatter.qual.ConversionCategory[] $VALUES -> a
    31:31:org.checkerframework.checker.formatter.qual.ConversionCategory[] values() -> values
    31:31:org.checkerframework.checker.formatter.qual.ConversionCategory valueOf(java.lang.String) -> valueOf
    109:112:void <init>(java.lang.String,int,java.lang.Class[],java.lang.String) -> <init>
    131:136:org.checkerframework.checker.formatter.qual.ConversionCategory fromConversionChar(char) -> fromConversionChar
    140:140:java.util.Set arrayToSet(java.lang.Object[]) -> a
    144:144:boolean isSubsetOf(org.checkerframework.checker.formatter.qual.ConversionCategory,org.checkerframework.checker.formatter.qual.ConversionCategory) -> isSubsetOf
    163:188:org.checkerframework.checker.formatter.qual.ConversionCategory intersect(org.checkerframework.checker.formatter.qual.ConversionCategory,org.checkerframework.checker.formatter.qual.ConversionCategory) -> intersect
    207:233:org.checkerframework.checker.formatter.qual.ConversionCategory union(org.checkerframework.checker.formatter.qual.ConversionCategory,org.checkerframework.checker.formatter.qual.ConversionCategory) -> union
    237:261:java.lang.String className(java.lang.Class) -> a
    268:279:java.lang.String toString() -> toString
    31:107:void <clinit>() -> <clinit>
org.checkerframework.checker.formatter.qual.Format -> org.checkerframework.checker.formatter.qual.Format:
    org.checkerframework.checker.formatter.qual.ConversionCategory[] value() -> value
org.checkerframework.checker.formatter.qual.FormatBottom -> org.checkerframework.checker.formatter.qual.FormatBottom:
org.checkerframework.checker.formatter.qual.FormatMethod -> org.checkerframework.checker.formatter.qual.FormatMethod:
org.checkerframework.checker.formatter.qual.InvalidFormat -> org.checkerframework.checker.formatter.qual.InvalidFormat:
    java.lang.String value() -> value
org.checkerframework.checker.formatter.qual.ReturnsFormat -> org.checkerframework.checker.formatter.qual.ReturnsFormat:
org.checkerframework.checker.formatter.qual.UnknownFormat -> org.checkerframework.checker.formatter.qual.UnknownFormat:
org.checkerframework.checker.guieffect.qual.AlwaysSafe -> org.checkerframework.checker.guieffect.qual.AlwaysSafe:
org.checkerframework.checker.guieffect.qual.PolyUI -> org.checkerframework.checker.guieffect.qual.PolyUI:
org.checkerframework.checker.guieffect.qual.PolyUIEffect -> org.checkerframework.checker.guieffect.qual.PolyUIEffect:
org.checkerframework.checker.guieffect.qual.PolyUIType -> org.checkerframework.checker.guieffect.qual.PolyUIType:
org.checkerframework.checker.guieffect.qual.SafeEffect -> org.checkerframework.checker.guieffect.qual.SafeEffect:
org.checkerframework.checker.guieffect.qual.SafeType -> org.checkerframework.checker.guieffect.qual.SafeType:
org.checkerframework.checker.guieffect.qual.UI -> org.checkerframework.checker.guieffect.qual.UI:
org.checkerframework.checker.guieffect.qual.UIEffect -> org.checkerframework.checker.guieffect.qual.UIEffect:
org.checkerframework.checker.guieffect.qual.UIPackage -> org.checkerframework.checker.guieffect.qual.UIPackage:
org.checkerframework.checker.guieffect.qual.UIType -> org.checkerframework.checker.guieffect.qual.UIType:
org.checkerframework.checker.i18n.qual.LocalizableKey -> org.checkerframework.checker.i18n.qual.LocalizableKey:
org.checkerframework.checker.i18n.qual.LocalizableKeyBottom -> org.checkerframework.checker.i18n.qual.LocalizableKeyBottom:
org.checkerframework.checker.i18n.qual.Localized -> org.checkerframework.checker.i18n.qual.Localized:
org.checkerframework.checker.i18n.qual.UnknownLocalizableKey -> org.checkerframework.checker.i18n.qual.UnknownLocalizableKey:
org.checkerframework.checker.i18n.qual.UnknownLocalized -> org.checkerframework.checker.i18n.qual.UnknownLocalized:
org.checkerframework.checker.i18nformatter.I18nFormatUtil -> org.checkerframework.checker.i18nformatter.I18nFormatUtil:
    23:23:void <init>() -> <init>
    31:32:void tryFormatSatisfiability(java.lang.String) -> tryFormatSatisfiability
    42:64:org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] formatParameterCategories(java.lang.String) -> formatParameterCategories
    78:88:boolean hasFormat(java.lang.String,org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[]) -> hasFormat
    94:98:boolean isFormat(java.lang.String) -> isFormat
org.checkerframework.checker.i18nformatter.I18nFormatUtil$I18nConversion -> org.checkerframework.checker.i18nformatter.a:
    int index -> a
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory category -> b
    105:108:void <init>(int,org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory) -> <init>
    112:112:java.lang.String toString() -> toString
org.checkerframework.checker.i18nformatter.I18nFormatUtil$MessageFormatParser -> org.checkerframework.checker.i18nformatter.b:
    int maxOffset -> a
    java.util.Locale locale -> b
    java.util.List categories -> c
    java.util.List argumentIndices -> d
    int numFormat -> e
    java.lang.String[] TYPE_KEYWORDS -> f
    java.lang.String[] NUMBER_MODIFIER_KEYWORDS -> g
    java.lang.String[] DATE_TIME_MODIFIER_KEYWORDS -> h
    165:174:org.checkerframework.checker.i18nformatter.I18nFormatUtil$I18nConversion[] parse(java.lang.String) -> a
    178:262:void applyPattern(java.lang.String) -> b
    266:361:void makeFormat(int,java.lang.StringBuilder[]) -> a
    368:383:int findKeyword(java.lang.String,java.lang.String[]) -> a
    148:160:void <clinit>() -> <clinit>
org.checkerframework.checker.i18nformatter.qual.I18nChecksFormat -> org.checkerframework.checker.i18nformatter.qual.I18nChecksFormat:
org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory -> org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory:
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory UNUSED -> UNUSED
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory GENERAL -> GENERAL
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory DATE -> DATE
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory NUMBER -> NUMBER
    java.lang.Class[] types -> types
    java.lang.String[] strings -> strings
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] namedCategories -> a
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] $VALUES -> b
    26:26:org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] values() -> values
    26:26:org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory valueOf(java.lang.String) -> valueOf
    62:65:void <init>(java.lang.String,int,java.lang.Class[],java.lang.String[]) -> <init>
    80:88:org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory stringToI18nConversionCategory(java.lang.String) -> stringToI18nConversionCategory
    92:92:java.util.Set arrayToSet(java.lang.Object[]) -> a
    97:97:boolean isSubsetOf(org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory,org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory) -> isSubsetOf
    113:135:org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory intersect(org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory,org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory) -> intersect
    146:155:org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory union(org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory,org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory) -> union
    161:176:java.lang.String toString() -> toString
    26:68:void <clinit>() -> <clinit>
org.checkerframework.checker.i18nformatter.qual.I18nFormat -> org.checkerframework.checker.i18nformatter.qual.I18nFormat:
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] value() -> value
org.checkerframework.checker.i18nformatter.qual.I18nFormatBottom -> org.checkerframework.checker.i18nformatter.qual.I18nFormatBottom:
org.checkerframework.checker.i18nformatter.qual.I18nFormatFor -> org.checkerframework.checker.i18nformatter.qual.I18nFormatFor:
    java.lang.String value() -> value
org.checkerframework.checker.i18nformatter.qual.I18nInvalidFormat -> org.checkerframework.checker.i18nformatter.qual.I18nInvalidFormat:
    java.lang.String value() -> value
org.checkerframework.checker.i18nformatter.qual.I18nMakeFormat -> org.checkerframework.checker.i18nformatter.qual.I18nMakeFormat:
org.checkerframework.checker.i18nformatter.qual.I18nUnknownFormat -> org.checkerframework.checker.i18nformatter.qual.I18nUnknownFormat:
org.checkerframework.checker.i18nformatter.qual.I18nValidFormat -> org.checkerframework.checker.i18nformatter.qual.I18nValidFormat:
org.checkerframework.checker.index.qual.EnsuresLTLengthOf -> org.checkerframework.checker.index.qual.EnsuresLTLengthOf:
    java.lang.String[] value() -> value
    java.lang.String[] targetValue() -> targetValue
    java.lang.String[] offset() -> offset
org.checkerframework.checker.index.qual.EnsuresLTLengthOfIf -> org.checkerframework.checker.index.qual.EnsuresLTLengthOfIf:
    java.lang.String[] expression() -> expression
    boolean result() -> result
    java.lang.String[] targetValue() -> targetValue
    java.lang.String[] offset() -> offset
org.checkerframework.checker.index.qual.GTENegativeOne -> org.checkerframework.checker.index.qual.GTENegativeOne:
org.checkerframework.checker.index.qual.HasSubsequence -> org.checkerframework.checker.index.qual.HasSubsequence:
    java.lang.String subsequence() -> subsequence
    java.lang.String from() -> from
    java.lang.String to() -> to
org.checkerframework.checker.index.qual.IndexFor -> org.checkerframework.checker.index.qual.IndexFor:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.IndexOrHigh -> org.checkerframework.checker.index.qual.IndexOrHigh:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.IndexOrLow -> org.checkerframework.checker.index.qual.IndexOrLow:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.LTEqLengthOf -> org.checkerframework.checker.index.qual.LTEqLengthOf:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.LTLengthOf -> org.checkerframework.checker.index.qual.LTLengthOf:
    java.lang.String[] value() -> value
    java.lang.String[] offset() -> offset
org.checkerframework.checker.index.qual.LTOMLengthOf -> org.checkerframework.checker.index.qual.LTOMLengthOf:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.LengthOf -> org.checkerframework.checker.index.qual.LengthOf:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.LessThan -> org.checkerframework.checker.index.qual.LessThan:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.LessThanBottom -> org.checkerframework.checker.index.qual.LessThanBottom:
org.checkerframework.checker.index.qual.LessThanUnknown -> org.checkerframework.checker.index.qual.LessThanUnknown:
org.checkerframework.checker.index.qual.LowerBoundBottom -> org.checkerframework.checker.index.qual.LowerBoundBottom:
org.checkerframework.checker.index.qual.LowerBoundUnknown -> org.checkerframework.checker.index.qual.LowerBoundUnknown:
org.checkerframework.checker.index.qual.NegativeIndexFor -> org.checkerframework.checker.index.qual.NegativeIndexFor:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.NonNegative -> org.checkerframework.checker.index.qual.NonNegative:
org.checkerframework.checker.index.qual.PolyIndex -> org.checkerframework.checker.index.qual.PolyIndex:
org.checkerframework.checker.index.qual.PolyLength -> org.checkerframework.checker.index.qual.PolyLength:
org.checkerframework.checker.index.qual.PolyLowerBound -> org.checkerframework.checker.index.qual.PolyLowerBound:
org.checkerframework.checker.index.qual.PolySameLen -> org.checkerframework.checker.index.qual.PolySameLen:
org.checkerframework.checker.index.qual.PolyUpperBound -> org.checkerframework.checker.index.qual.PolyUpperBound:
org.checkerframework.checker.index.qual.Positive -> org.checkerframework.checker.index.qual.Positive:
org.checkerframework.checker.index.qual.SameLen -> org.checkerframework.checker.index.qual.SameLen:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.SameLenBottom -> org.checkerframework.checker.index.qual.SameLenBottom:
org.checkerframework.checker.index.qual.SameLenUnknown -> org.checkerframework.checker.index.qual.SameLenUnknown:
org.checkerframework.checker.index.qual.SearchIndexBottom -> org.checkerframework.checker.index.qual.SearchIndexBottom:
org.checkerframework.checker.index.qual.SearchIndexFor -> org.checkerframework.checker.index.qual.SearchIndexFor:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.SearchIndexUnknown -> org.checkerframework.checker.index.qual.SearchIndexUnknown:
org.checkerframework.checker.index.qual.SubstringIndexBottom -> org.checkerframework.checker.index.qual.SubstringIndexBottom:
org.checkerframework.checker.index.qual.SubstringIndexFor -> org.checkerframework.checker.index.qual.SubstringIndexFor:
    java.lang.String[] value() -> value
    java.lang.String[] offset() -> offset
org.checkerframework.checker.index.qual.SubstringIndexUnknown -> org.checkerframework.checker.index.qual.SubstringIndexUnknown:
org.checkerframework.checker.index.qual.UpperBoundBottom -> org.checkerframework.checker.index.qual.UpperBoundBottom:
org.checkerframework.checker.index.qual.UpperBoundUnknown -> org.checkerframework.checker.index.qual.UpperBoundUnknown:
org.checkerframework.checker.initialization.qual.FBCBottom -> org.checkerframework.checker.initialization.qual.FBCBottom:
org.checkerframework.checker.initialization.qual.Initialized -> org.checkerframework.checker.initialization.qual.Initialized:
org.checkerframework.checker.initialization.qual.NotOnlyInitialized -> org.checkerframework.checker.initialization.qual.NotOnlyInitialized:
org.checkerframework.checker.initialization.qual.UnderInitialization -> org.checkerframework.checker.initialization.qual.UnderInitialization:
    java.lang.Class value() -> value
org.checkerframework.checker.initialization.qual.UnknownInitialization -> org.checkerframework.checker.initialization.qual.UnknownInitialization:
    java.lang.Class value() -> value
org.checkerframework.checker.interning.qual.InternMethod -> org.checkerframework.checker.interning.qual.InternMethod:
org.checkerframework.checker.interning.qual.Interned -> org.checkerframework.checker.interning.qual.Interned:
org.checkerframework.checker.interning.qual.InternedDistinct -> org.checkerframework.checker.interning.qual.InternedDistinct:
org.checkerframework.checker.interning.qual.PolyInterned -> org.checkerframework.checker.interning.qual.PolyInterned:
org.checkerframework.checker.interning.qual.UnknownInterned -> org.checkerframework.checker.interning.qual.UnknownInterned:
org.checkerframework.checker.interning.qual.UsesObjectEquals -> org.checkerframework.checker.interning.qual.UsesObjectEquals:
org.checkerframework.checker.lock.qual.EnsuresLockHeld -> org.checkerframework.checker.lock.qual.EnsuresLockHeld:
    java.lang.String[] value() -> value
org.checkerframework.checker.lock.qual.EnsuresLockHeldIf -> org.checkerframework.checker.lock.qual.EnsuresLockHeldIf:
    java.lang.String[] expression() -> expression
    boolean result() -> result
org.checkerframework.checker.lock.qual.GuardSatisfied -> org.checkerframework.checker.lock.qual.GuardSatisfied:
    int value() -> value
org.checkerframework.checker.lock.qual.GuardedBy -> org.checkerframework.checker.lock.qual.GuardedBy:
    java.lang.String[] value() -> value
org.checkerframework.checker.lock.qual.GuardedByBottom -> org.checkerframework.checker.lock.qual.GuardedByBottom:
org.checkerframework.checker.lock.qual.GuardedByUnknown -> org.checkerframework.checker.lock.qual.GuardedByUnknown:
org.checkerframework.checker.lock.qual.Holding -> org.checkerframework.checker.lock.qual.Holding:
    java.lang.String[] value() -> value
org.checkerframework.checker.lock.qual.LockHeld -> org.checkerframework.checker.lock.qual.LockHeld:
org.checkerframework.checker.lock.qual.LockPossiblyHeld -> org.checkerframework.checker.lock.qual.LockPossiblyHeld:
org.checkerframework.checker.lock.qual.LockingFree -> org.checkerframework.checker.lock.qual.LockingFree:
org.checkerframework.checker.lock.qual.MayReleaseLocks -> org.checkerframework.checker.lock.qual.MayReleaseLocks:
org.checkerframework.checker.lock.qual.ReleasesNoLocks -> org.checkerframework.checker.lock.qual.ReleasesNoLocks:
org.checkerframework.checker.nullness.NullnessUtil -> org.checkerframework.checker.nullness.NullnessUtil:
    boolean $assertionsDisabled -> a
    31:32:void <init>() -> <init>
    71:72:java.lang.Object castNonNull(java.lang.Object) -> castNonNull
    84:84:java.lang.Object[] castNonNullDeep(java.lang.Object[]) -> castNonNullDeep
    96:96:java.lang.Object[][] castNonNullDeep(java.lang.Object[][]) -> castNonNullDeep
    108:108:java.lang.Object[][][] castNonNullDeep(java.lang.Object[][][]) -> castNonNullDeep
    121:121:java.lang.Object[][][][] castNonNullDeep(java.lang.Object[][][][]) -> castNonNullDeep
    134:134:java.lang.Object[][][][][] castNonNullDeep(java.lang.Object[][][][][]) -> castNonNullDeep
    139:144:java.lang.Object[] castNonNullArray(java.lang.Object[]) -> a
    148:159:void checkIfArray(java.lang.Object) -> a
    25:25:void <clinit>() -> <clinit>
org.checkerframework.checker.nullness.Opt -> org.checkerframework.checker.nullness.Opt:
    36:37:void <init>() -> <init>
    50:53:java.lang.Object get(java.lang.Object) -> get
    63:63:boolean isPresent(java.lang.Object) -> isPresent
    72:75:void ifPresent(java.lang.Object,java.util.function.Consumer) -> ifPresent
    85:88:java.lang.Object filter(java.lang.Object,java.util.function.Predicate) -> filter
    100:103:java.lang.Object map(java.lang.Object,java.util.function.Function) -> map
    115:115:java.lang.Object orElse(java.lang.Object,java.lang.Object) -> orElse
    125:125:java.lang.Object orElseGet(java.lang.Object,java.util.function.Supplier) -> orElseGet
    137:140:java.lang.Object orElseThrow(java.lang.Object,java.util.function.Supplier) -> orElseThrow
org.checkerframework.checker.nullness.qual.AssertNonNullIfNonNull -> org.checkerframework.checker.nullness.qual.AssertNonNullIfNonNull:
    java.lang.String[] value() -> value
org.checkerframework.checker.nullness.qual.EnsuresKeyFor -> org.checkerframework.checker.nullness.qual.EnsuresKeyFor:
    java.lang.String[] value() -> value
    java.lang.String[] map() -> map
org.checkerframework.checker.nullness.qual.EnsuresKeyForIf -> org.checkerframework.checker.nullness.qual.EnsuresKeyForIf:
    boolean result() -> result
    java.lang.String[] expression() -> expression
    java.lang.String[] map() -> map
org.checkerframework.checker.nullness.qual.EnsuresNonNull -> org.checkerframework.checker.nullness.qual.EnsuresNonNull:
    java.lang.String[] value() -> value
org.checkerframework.checker.nullness.qual.EnsuresNonNullIf -> org.checkerframework.checker.nullness.qual.EnsuresNonNullIf:
    java.lang.String[] expression() -> expression
    boolean result() -> result
org.checkerframework.checker.nullness.qual.KeyFor -> org.checkerframework.checker.nullness.qual.KeyFor:
    java.lang.String[] value() -> value
org.checkerframework.checker.nullness.qual.KeyForBottom -> org.checkerframework.checker.nullness.qual.KeyForBottom:
org.checkerframework.checker.nullness.qual.MonotonicNonNull -> org.checkerframework.checker.nullness.qual.MonotonicNonNull:
org.checkerframework.checker.nullness.qual.NonNull -> org.checkerframework.checker.nullness.qual.NonNull:
org.checkerframework.checker.nullness.qual.Nullable -> org.checkerframework.checker.nullness.qual.Nullable:
org.checkerframework.checker.nullness.qual.PolyKeyFor -> org.checkerframework.checker.nullness.qual.PolyKeyFor:
org.checkerframework.checker.nullness.qual.PolyNull -> org.checkerframework.checker.nullness.qual.PolyNull:
org.checkerframework.checker.nullness.qual.RequiresNonNull -> org.checkerframework.checker.nullness.qual.RequiresNonNull:
    java.lang.String[] value() -> value
org.checkerframework.checker.nullness.qual.UnknownKeyFor -> org.checkerframework.checker.nullness.qual.UnknownKeyFor:
org.checkerframework.checker.optional.qual.MaybePresent -> org.checkerframework.checker.optional.qual.MaybePresent:
org.checkerframework.checker.optional.qual.PolyPresent -> org.checkerframework.checker.optional.qual.PolyPresent:
org.checkerframework.checker.optional.qual.Present -> org.checkerframework.checker.optional.qual.Present:
org.checkerframework.checker.propkey.qual.PropertyKey -> org.checkerframework.checker.propkey.qual.PropertyKey:
org.checkerframework.checker.propkey.qual.PropertyKeyBottom -> org.checkerframework.checker.propkey.qual.PropertyKeyBottom:
org.checkerframework.checker.propkey.qual.UnknownPropertyKey -> org.checkerframework.checker.propkey.qual.UnknownPropertyKey:
org.checkerframework.checker.regex.RegexUtil -> org.checkerframework.checker.regex.RegexUtil:
    33:34:void <init>() -> <init>
    147:147:boolean isRegex(java.lang.String) -> isRegex
    166:170:boolean isRegex(java.lang.String,int) -> isRegex
    187:187:boolean isRegex(char) -> isRegex
    199:199:java.lang.String regexError(java.lang.String) -> regexError
    215:223:java.lang.String regexError(java.lang.String,int) -> regexError
    235:235:java.util.regex.PatternSyntaxException regexException(java.lang.String) -> regexException
    251:260:java.util.regex.PatternSyntaxException regexException(java.lang.String,int) -> regexException
    275:275:java.lang.String asRegex(java.lang.String) -> asRegex
    294:301:java.lang.String asRegex(java.lang.String,int) -> asRegex
    316:316:java.lang.String regexErrorMessage(java.lang.String,int,int) -> a
    334:334:int getGroupCount(java.util.regex.Pattern) -> a
org.checkerframework.checker.regex.RegexUtil$CheckedPatternSyntaxException -> org.checkerframework.checker.regex.RegexUtil$CheckedPatternSyntaxException:
    long serialVersionUID -> serialVersionUID
    java.util.regex.PatternSyntaxException pse -> a
    80:82:void <init>(java.util.regex.PatternSyntaxException) -> <init>
    93:94:void <init>(java.lang.String,java.lang.String,int) -> <init>
    102:102:java.lang.String getDescription() -> getDescription
    112:112:int getIndex() -> getIndex
    125:125:java.lang.String getMessage() -> getMessage
    134:134:java.lang.String getPattern() -> getPattern
org.checkerframework.checker.regex.qual.PartialRegex -> org.checkerframework.checker.regex.qual.PartialRegex:
    java.lang.String value() -> value
org.checkerframework.checker.regex.qual.PolyRegex -> org.checkerframework.checker.regex.qual.PolyRegex:
org.checkerframework.checker.regex.qual.Regex -> org.checkerframework.checker.regex.qual.Regex:
    int value() -> value
org.checkerframework.checker.regex.qual.RegexBottom -> org.checkerframework.checker.regex.qual.RegexBottom:
org.checkerframework.checker.regex.qual.UnknownRegex -> org.checkerframework.checker.regex.qual.UnknownRegex:
org.checkerframework.checker.signature.qual.BinaryName -> org.checkerframework.checker.signature.qual.BinaryName:
org.checkerframework.checker.signature.qual.BinaryNameInUnnamedPackage -> org.checkerframework.checker.signature.qual.BinaryNameInUnnamedPackage:
org.checkerframework.checker.signature.qual.ClassGetName -> org.checkerframework.checker.signature.qual.ClassGetName:
org.checkerframework.checker.signature.qual.ClassGetSimpleName -> org.checkerframework.checker.signature.qual.ClassGetSimpleName:
org.checkerframework.checker.signature.qual.DotSeparatedIdentifiers -> org.checkerframework.checker.signature.qual.DotSeparatedIdentifiers:
org.checkerframework.checker.signature.qual.FieldDescriptor -> org.checkerframework.checker.signature.qual.FieldDescriptor:
org.checkerframework.checker.signature.qual.FieldDescriptorForPrimitive -> org.checkerframework.checker.signature.qual.FieldDescriptorForPrimitive:
org.checkerframework.checker.signature.qual.FieldDescriptorForPrimitiveOrArrayInUnnamedPackage -> org.checkerframework.checker.signature.qual.FieldDescriptorForPrimitiveOrArrayInUnnamedPackage:
org.checkerframework.checker.signature.qual.FqBinaryName -> org.checkerframework.checker.signature.qual.FqBinaryName:
org.checkerframework.checker.signature.qual.FullyQualifiedName -> org.checkerframework.checker.signature.qual.FullyQualifiedName:
org.checkerframework.checker.signature.qual.Identifier -> org.checkerframework.checker.signature.qual.Identifier:
org.checkerframework.checker.signature.qual.IdentifierOrArray -> org.checkerframework.checker.signature.qual.IdentifierOrArray:
org.checkerframework.checker.signature.qual.InternalForm -> org.checkerframework.checker.signature.qual.InternalForm:
org.checkerframework.checker.signature.qual.MethodDescriptor -> org.checkerframework.checker.signature.qual.MethodDescriptor:
org.checkerframework.checker.signature.qual.PolySignature -> org.checkerframework.checker.signature.qual.PolySignature:
org.checkerframework.checker.signature.qual.SignatureBottom -> org.checkerframework.checker.signature.qual.SignatureBottom:
org.checkerframework.checker.signature.qual.SignatureUnknown -> org.checkerframework.checker.signature.qual.SignatureUnknown:
org.checkerframework.checker.signedness.SignednessUtil -> org.checkerframework.checker.signedness.SignednessUtil:
    boolean $assertionsDisabled -> a
    20:21:void <init>() -> <init>
    31:31:java.nio.ByteBuffer wrapUnsigned(byte[]) -> wrapUnsigned
    41:41:java.nio.ByteBuffer wrapUnsigned(byte[],int,int) -> wrapUnsigned
    51:51:int getUnsignedInt(java.nio.ByteBuffer) -> getUnsignedInt
    61:61:short getUnsignedShort(java.nio.ByteBuffer) -> getUnsignedShort
    71:71:byte getUnsigned(java.nio.ByteBuffer) -> getUnsigned
    81:81:byte getUnsigned(java.nio.ByteBuffer,int) -> getUnsigned
    91:91:java.nio.ByteBuffer getUnsigned(java.nio.ByteBuffer,byte[],int,int) -> getUnsigned
    101:101:java.nio.ByteBuffer putUnsigned(java.nio.ByteBuffer,byte) -> putUnsigned
    111:111:java.nio.ByteBuffer putUnsigned(java.nio.ByteBuffer,int,byte) -> putUnsigned
    121:121:java.nio.IntBuffer putUnsigned(java.nio.IntBuffer,int) -> putUnsigned
    131:131:java.nio.IntBuffer putUnsigned(java.nio.IntBuffer,int,int) -> putUnsigned
    141:141:java.nio.IntBuffer putUnsigned(java.nio.IntBuffer,int[]) -> putUnsigned
    151:151:java.nio.IntBuffer putUnsigned(java.nio.IntBuffer,int[],int,int) -> putUnsigned
    161:161:int getUnsigned(java.nio.IntBuffer,int) -> getUnsigned
    171:171:java.nio.ByteBuffer putUnsignedShort(java.nio.ByteBuffer,short) -> putUnsignedShort
    181:181:java.nio.ByteBuffer putUnsignedShort(java.nio.ByteBuffer,int,short) -> putUnsignedShort
    191:191:java.nio.ByteBuffer putUnsignedInt(java.nio.ByteBuffer,int) -> putUnsignedInt
    201:201:java.nio.ByteBuffer putUnsignedInt(java.nio.ByteBuffer,int,int) -> putUnsignedInt
    211:211:java.nio.ByteBuffer putUnsignedLong(java.nio.ByteBuffer,int,long) -> putUnsignedLong
    224:224:byte readUnsignedByte(java.io.RandomAccessFile) -> readUnsignedByte
    234:234:char readUnsignedChar(java.io.RandomAccessFile) -> readUnsignedChar
    247:247:short readUnsignedShort(java.io.RandomAccessFile) -> readUnsignedShort
    257:257:int readUnsignedInt(java.io.RandomAccessFile) -> readUnsignedInt
    267:267:long readUnsignedLong(java.io.RandomAccessFile) -> readUnsignedLong
    278:278:int readUnsigned(java.io.RandomAccessFile,byte[],int,int) -> readUnsigned
    289:290:void readFullyUnsigned(java.io.RandomAccessFile,byte[]) -> readFullyUnsigned
    300:301:void writeUnsigned(java.io.RandomAccessFile,byte[],int,int) -> writeUnsigned
    310:311:void writeUnsignedByte(java.io.RandomAccessFile,byte) -> writeUnsignedByte
    320:321:void writeUnsignedChar(java.io.RandomAccessFile,char) -> writeUnsignedChar
    331:332:void writeUnsignedShort(java.io.RandomAccessFile,short) -> writeUnsignedShort
    341:342:void writeUnsignedInt(java.io.RandomAccessFile,int) -> writeUnsignedInt
    351:352:void writeUnsignedLong(java.io.RandomAccessFile,long) -> writeUnsignedLong
    361:362:void getUnsigned(java.nio.ByteBuffer,byte[]) -> getUnsigned
    377:377:int compareUnsigned(long,long) -> compareUnsigned
    393:393:int compareUnsigned(int,int) -> compareUnsigned
    406:406:int compareUnsigned(short,short) -> compareUnsigned
    419:419:int compareUnsigned(byte,byte) -> compareUnsigned
    433:433:java.lang.String toUnsignedString(long) -> toUnsignedString
    447:447:java.lang.String toUnsignedString(long,int) -> toUnsignedString
    461:461:java.lang.String toUnsignedString(int) -> toUnsignedString
    475:475:java.lang.String toUnsignedString(int,int) -> toUnsignedString
    482:482:java.lang.String toUnsignedString(short) -> toUnsignedString
    489:489:java.lang.String toUnsignedString(short,int) -> toUnsignedString
    496:496:java.lang.String toUnsignedString(byte) -> toUnsignedString
    503:503:java.lang.String toUnsignedString(byte,int) -> toUnsignedString
    515:524:java.math.BigInteger toUnsignedBigInteger(long) -> a
    538:538:long toUnsignedLong(int) -> toUnsignedLong
    550:550:long toUnsignedLong(short) -> toUnsignedLong
    562:562:int toUnsignedInt(short) -> toUnsignedInt
    574:574:long toUnsignedLong(byte) -> toUnsignedLong
    586:586:int toUnsignedInt(byte) -> toUnsignedInt
    591:591:short toUnsignedShort(byte) -> toUnsignedShort
    596:596:long toUnsignedLong(char) -> toUnsignedLong
    601:601:int toUnsignedInt(char) -> toUnsignedInt
    606:606:short toUnsignedShort(char) -> toUnsignedShort
    611:611:float toFloat(byte) -> toFloat
    616:616:float toFloat(short) -> toFloat
    621:621:float toFloat(int) -> toFloat
    626:626:float toFloat(long) -> toFloat
    631:631:double toDouble(byte) -> toDouble
    636:636:double toDouble(short) -> toDouble
    641:641:double toDouble(int) -> toDouble
    646:646:double toDouble(long) -> toDouble
    652:653:byte byteFromFloat(float) -> byteFromFloat
    659:660:short shortFromFloat(float) -> shortFromFloat
    666:667:int intFromFloat(float) -> intFromFloat
    673:674:long longFromFloat(float) -> longFromFloat
    680:681:byte byteFromDouble(double) -> byteFromDouble
    687:688:short shortFromDouble(double) -> shortFromDouble
    694:695:int intFromDouble(double) -> intFromDouble
    701:702:long longFromDouble(double) -> longFromDouble
    18:18:void <clinit>() -> <clinit>
org.checkerframework.checker.signedness.qual.PolySigned -> org.checkerframework.checker.signedness.qual.PolySigned:
org.checkerframework.checker.signedness.qual.Signed -> org.checkerframework.checker.signedness.qual.Signed:
org.checkerframework.checker.signedness.qual.SignedPositive -> org.checkerframework.checker.signedness.qual.SignedPositive:
org.checkerframework.checker.signedness.qual.SignednessBottom -> org.checkerframework.checker.signedness.qual.SignednessBottom:
org.checkerframework.checker.signedness.qual.SignednessGlb -> org.checkerframework.checker.signedness.qual.SignednessGlb:
org.checkerframework.checker.signedness.qual.UnknownSignedness -> org.checkerframework.checker.signedness.qual.UnknownSignedness:
org.checkerframework.checker.signedness.qual.Unsigned -> org.checkerframework.checker.signedness.qual.Unsigned:
org.checkerframework.checker.tainting.qual.PolyTainted -> org.checkerframework.checker.tainting.qual.PolyTainted:
org.checkerframework.checker.tainting.qual.Tainted -> org.checkerframework.checker.tainting.qual.Tainted:
org.checkerframework.checker.tainting.qual.Untainted -> org.checkerframework.checker.tainting.qual.Untainted:
org.checkerframework.checker.units.UnitsTools -> org.checkerframework.checker.units.UnitsTools:
    int mPERs2 -> mPERs2
    double rad -> rad
    double deg -> deg
    int mm2 -> mm2
    int m2 -> m2
    int km2 -> km2
    int A -> A
    int cd -> cd
    int mm -> mm
    int m -> m
    int km -> km
    int g -> g
    int kg -> kg
    int mPERs -> mPERs
    int kmPERh -> kmPERh
    int mol -> mol
    int K -> K
    int C -> C
    int s -> s
    int min -> min
    int h -> h
    28:28:void <init>() -> <init>
    37:37:double toRadians(double) -> toRadians
    41:41:double toDegrees(double) -> toDegrees
    61:61:int fromMilliMeterToMeter(int) -> fromMilliMeterToMeter
    65:65:int fromMeterToMilliMeter(int) -> fromMeterToMilliMeter
    69:69:int fromMeterToKiloMeter(int) -> fromMeterToKiloMeter
    73:73:int fromKiloMeterToMeter(int) -> fromKiloMeterToMeter
    81:81:int fromGramToKiloGram(int) -> fromGramToKiloGram
    85:85:int fromKiloGramToGram(int) -> fromKiloGramToGram
    93:93:double fromMeterPerSecondToKiloMeterPerHour(double) -> fromMeterPerSecondToKiloMeterPerHour
    97:97:double fromKiloMeterPerHourToMeterPerSecond(double) -> fromKiloMeterPerHourToMeterPerSecond
    108:108:int fromKelvinToCelsius(int) -> fromKelvinToCelsius
    112:112:int fromCelsiusToKelvin(int) -> fromCelsiusToKelvin
    121:121:int fromSecondToMinute(int) -> fromSecondToMinute
    125:125:int fromMinuteToSecond(int) -> fromMinuteToSecond
    129:129:int fromMinuteToHour(int) -> fromMinuteToHour
    133:133:int fromHourToMinute(int) -> fromHourToMinute
org.checkerframework.checker.units.qual.A -> org.checkerframework.checker.units.qual.A:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.Acceleration -> org.checkerframework.checker.units.qual.Acceleration:
org.checkerframework.checker.units.qual.Angle -> org.checkerframework.checker.units.qual.Angle:
org.checkerframework.checker.units.qual.Area -> org.checkerframework.checker.units.qual.Area:
org.checkerframework.checker.units.qual.C -> org.checkerframework.checker.units.qual.C:
org.checkerframework.checker.units.qual.Current -> org.checkerframework.checker.units.qual.Current:
org.checkerframework.checker.units.qual.K -> org.checkerframework.checker.units.qual.K:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.Length -> org.checkerframework.checker.units.qual.Length:
org.checkerframework.checker.units.qual.Luminance -> org.checkerframework.checker.units.qual.Luminance:
org.checkerframework.checker.units.qual.Mass -> org.checkerframework.checker.units.qual.Mass:
org.checkerframework.checker.units.qual.MixedUnits -> org.checkerframework.checker.units.qual.MixedUnits:
org.checkerframework.checker.units.qual.PolyUnit -> org.checkerframework.checker.units.qual.PolyUnit:
org.checkerframework.checker.units.qual.Prefix -> org.checkerframework.checker.units.qual.Prefix:
    org.checkerframework.checker.units.qual.Prefix yotta -> yotta
    org.checkerframework.checker.units.qual.Prefix zetta -> zetta
    org.checkerframework.checker.units.qual.Prefix exa -> exa
    org.checkerframework.checker.units.qual.Prefix peta -> peta
    org.checkerframework.checker.units.qual.Prefix tera -> tera
    org.checkerframework.checker.units.qual.Prefix giga -> giga
    org.checkerframework.checker.units.qual.Prefix mega -> mega
    org.checkerframework.checker.units.qual.Prefix kilo -> kilo
    org.checkerframework.checker.units.qual.Prefix hecto -> hecto
    org.checkerframework.checker.units.qual.Prefix deca -> deca
    org.checkerframework.checker.units.qual.Prefix one -> one
    org.checkerframework.checker.units.qual.Prefix deci -> deci
    org.checkerframework.checker.units.qual.Prefix centi -> centi
    org.checkerframework.checker.units.qual.Prefix milli -> milli
    org.checkerframework.checker.units.qual.Prefix micro -> micro
    org.checkerframework.checker.units.qual.Prefix nano -> nano
    org.checkerframework.checker.units.qual.Prefix pico -> pico
    org.checkerframework.checker.units.qual.Prefix femto -> femto
    org.checkerframework.checker.units.qual.Prefix atto -> atto
    org.checkerframework.checker.units.qual.Prefix zepto -> zepto
    org.checkerframework.checker.units.qual.Prefix yocto -> yocto
    org.checkerframework.checker.units.qual.Prefix[] $VALUES -> a
    35:35:org.checkerframework.checker.units.qual.Prefix[] values() -> values
    35:35:org.checkerframework.checker.units.qual.Prefix valueOf(java.lang.String) -> valueOf
    35:35:void <init>(java.lang.String,int) -> <init>
    35:77:void <clinit>() -> <clinit>
org.checkerframework.checker.units.qual.Speed -> org.checkerframework.checker.units.qual.Speed:
org.checkerframework.checker.units.qual.Substance -> org.checkerframework.checker.units.qual.Substance:
org.checkerframework.checker.units.qual.Temperature -> org.checkerframework.checker.units.qual.Temperature:
org.checkerframework.checker.units.qual.Time -> org.checkerframework.checker.units.qual.Time:
org.checkerframework.checker.units.qual.UnitsBottom -> org.checkerframework.checker.units.qual.UnitsBottom:
org.checkerframework.checker.units.qual.UnitsMultiple -> org.checkerframework.checker.units.qual.UnitsMultiple:
    java.lang.Class quantity() -> quantity
    org.checkerframework.checker.units.qual.Prefix prefix() -> prefix
org.checkerframework.checker.units.qual.UnitsRelations -> org.checkerframework.checker.units.qual.UnitsRelations:
    java.lang.Class value() -> value
org.checkerframework.checker.units.qual.UnknownUnits -> org.checkerframework.checker.units.qual.UnknownUnits:
org.checkerframework.checker.units.qual.cd -> org.checkerframework.checker.units.qual.cd:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.degrees -> org.checkerframework.checker.units.qual.degrees:
org.checkerframework.checker.units.qual.g -> org.checkerframework.checker.units.qual.g:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.h -> org.checkerframework.checker.units.qual.h:
org.checkerframework.checker.units.qual.kg -> org.checkerframework.checker.units.qual.kg:
org.checkerframework.checker.units.qual.km -> org.checkerframework.checker.units.qual.km:
org.checkerframework.checker.units.qual.km2 -> org.checkerframework.checker.units.qual.km2:
org.checkerframework.checker.units.qual.kmPERh -> org.checkerframework.checker.units.qual.kmPERh:
org.checkerframework.checker.units.qual.m -> org.checkerframework.checker.units.qual.m:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.m2 -> org.checkerframework.checker.units.qual.m2:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.mPERs -> org.checkerframework.checker.units.qual.mPERs:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.mPERs2 -> org.checkerframework.checker.units.qual.mPERs2:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.min -> org.checkerframework.checker.units.qual.min:
org.checkerframework.checker.units.qual.mm -> org.checkerframework.checker.units.qual.mm:
org.checkerframework.checker.units.qual.mm2 -> org.checkerframework.checker.units.qual.mm2:
org.checkerframework.checker.units.qual.mol -> org.checkerframework.checker.units.qual.mol:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.radians -> org.checkerframework.checker.units.qual.radians:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.s -> org.checkerframework.checker.units.qual.s:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.common.aliasing.qual.LeakedToResult -> org.checkerframework.common.aliasing.qual.LeakedToResult:
org.checkerframework.common.aliasing.qual.MaybeAliased -> org.checkerframework.common.aliasing.qual.MaybeAliased:
org.checkerframework.common.aliasing.qual.MaybeLeaked -> org.checkerframework.common.aliasing.qual.MaybeLeaked:
org.checkerframework.common.aliasing.qual.NonLeaked -> org.checkerframework.common.aliasing.qual.NonLeaked:
org.checkerframework.common.aliasing.qual.Unique -> org.checkerframework.common.aliasing.qual.Unique:
org.checkerframework.common.reflection.qual.ClassBound -> org.checkerframework.common.reflection.qual.ClassBound:
    java.lang.String[] value() -> value
org.checkerframework.common.reflection.qual.ClassVal -> org.checkerframework.common.reflection.qual.ClassVal:
    java.lang.String[] value() -> value
org.checkerframework.common.reflection.qual.ClassValBottom -> org.checkerframework.common.reflection.qual.ClassValBottom:
org.checkerframework.common.reflection.qual.ForName -> org.checkerframework.common.reflection.qual.ForName:
org.checkerframework.common.reflection.qual.GetClass -> org.checkerframework.common.reflection.qual.GetClass:
org.checkerframework.common.reflection.qual.GetConstructor -> org.checkerframework.common.reflection.qual.GetConstructor:
org.checkerframework.common.reflection.qual.GetMethod -> org.checkerframework.common.reflection.qual.GetMethod:
org.checkerframework.common.reflection.qual.Invoke -> org.checkerframework.common.reflection.qual.Invoke:
org.checkerframework.common.reflection.qual.MethodVal -> org.checkerframework.common.reflection.qual.MethodVal:
    java.lang.String[] className() -> className
    java.lang.String[] methodName() -> methodName
    int[] params() -> params
org.checkerframework.common.reflection.qual.MethodValBottom -> org.checkerframework.common.reflection.qual.MethodValBottom:
org.checkerframework.common.reflection.qual.NewInstance -> org.checkerframework.common.reflection.qual.NewInstance:
org.checkerframework.common.reflection.qual.UnknownClass -> org.checkerframework.common.reflection.qual.UnknownClass:
org.checkerframework.common.reflection.qual.UnknownMethod -> org.checkerframework.common.reflection.qual.UnknownMethod:
org.checkerframework.common.subtyping.qual.Bottom -> org.checkerframework.common.subtyping.qual.Bottom:
org.checkerframework.common.subtyping.qual.Unqualified -> org.checkerframework.common.subtyping.qual.Unqualified:
org.checkerframework.common.util.report.qual.ReportCall -> org.checkerframework.common.util.report.qual.ReportCall:
org.checkerframework.common.util.report.qual.ReportCreation -> org.checkerframework.common.util.report.qual.ReportCreation:
org.checkerframework.common.util.report.qual.ReportInherit -> org.checkerframework.common.util.report.qual.ReportInherit:
org.checkerframework.common.util.report.qual.ReportOverride -> org.checkerframework.common.util.report.qual.ReportOverride:
org.checkerframework.common.util.report.qual.ReportReadWrite -> org.checkerframework.common.util.report.qual.ReportReadWrite:
org.checkerframework.common.util.report.qual.ReportUnqualified -> org.checkerframework.common.util.report.qual.ReportUnqualified:
org.checkerframework.common.util.report.qual.ReportUse -> org.checkerframework.common.util.report.qual.ReportUse:
org.checkerframework.common.util.report.qual.ReportWrite -> org.checkerframework.common.util.report.qual.ReportWrite:
org.checkerframework.common.value.qual.ArrayLen -> org.checkerframework.common.value.qual.ArrayLen:
    int[] value() -> value
org.checkerframework.common.value.qual.ArrayLenRange -> org.checkerframework.common.value.qual.ArrayLenRange:
    int from() -> from
    int to() -> to
org.checkerframework.common.value.qual.BoolVal -> org.checkerframework.common.value.qual.BoolVal:
    boolean[] value() -> value
org.checkerframework.common.value.qual.BottomVal -> org.checkerframework.common.value.qual.BottomVal:
org.checkerframework.common.value.qual.DoubleVal -> org.checkerframework.common.value.qual.DoubleVal:
    double[] value() -> value
org.checkerframework.common.value.qual.EnsuresMinLenIf -> org.checkerframework.common.value.qual.EnsuresMinLenIf:
    java.lang.String[] expression() -> expression
    boolean result() -> result
    int targetValue() -> targetValue
org.checkerframework.common.value.qual.IntRange -> org.checkerframework.common.value.qual.IntRange:
    long from() -> from
    long to() -> to
org.checkerframework.common.value.qual.IntRangeFromGTENegativeOne -> org.checkerframework.common.value.qual.IntRangeFromGTENegativeOne:
org.checkerframework.common.value.qual.IntRangeFromNonNegative -> org.checkerframework.common.value.qual.IntRangeFromNonNegative:
org.checkerframework.common.value.qual.IntRangeFromPositive -> org.checkerframework.common.value.qual.IntRangeFromPositive:
org.checkerframework.common.value.qual.IntVal -> org.checkerframework.common.value.qual.IntVal:
    long[] value() -> value
org.checkerframework.common.value.qual.MinLen -> org.checkerframework.common.value.qual.MinLen:
    int value() -> value
org.checkerframework.common.value.qual.MinLenFieldInvariant -> org.checkerframework.common.value.qual.MinLenFieldInvariant:
    int[] minLen() -> minLen
    java.lang.String[] field() -> field
org.checkerframework.common.value.qual.PolyValue -> org.checkerframework.common.value.qual.PolyValue:
org.checkerframework.common.value.qual.StaticallyExecutable -> org.checkerframework.common.value.qual.StaticallyExecutable:
org.checkerframework.common.value.qual.StringVal -> org.checkerframework.common.value.qual.StringVal:
    java.lang.String[] value() -> value
org.checkerframework.common.value.qual.UnknownVal -> org.checkerframework.common.value.qual.UnknownVal:
org.checkerframework.dataflow.qual.Deterministic -> org.checkerframework.dataflow.qual.Deterministic:
org.checkerframework.dataflow.qual.Pure -> org.checkerframework.dataflow.qual.Pure:
org.checkerframework.dataflow.qual.Pure$Kind -> org.checkerframework.dataflow.qual.Pure$Kind:
    org.checkerframework.dataflow.qual.Pure$Kind SIDE_EFFECT_FREE -> SIDE_EFFECT_FREE
    org.checkerframework.dataflow.qual.Pure$Kind DETERMINISTIC -> DETERMINISTIC
    org.checkerframework.dataflow.qual.Pure$Kind[] $VALUES -> a
    22:22:org.checkerframework.dataflow.qual.Pure$Kind[] values() -> values
    22:22:org.checkerframework.dataflow.qual.Pure$Kind valueOf(java.lang.String) -> valueOf
    22:22:void <init>(java.lang.String,int) -> <init>
    22:27:void <clinit>() -> <clinit>
org.checkerframework.dataflow.qual.SideEffectFree -> org.checkerframework.dataflow.qual.SideEffectFree:
org.checkerframework.dataflow.qual.TerminatesExecution -> org.checkerframework.dataflow.qual.TerminatesExecution:
org.checkerframework.framework.qual.AnnotatedFor -> org.checkerframework.framework.qual.AnnotatedFor:
    java.lang.String[] value() -> value
org.checkerframework.framework.qual.CFComment -> org.checkerframework.framework.qual.CFComment:
    java.lang.String[] value() -> value
org.checkerframework.framework.qual.ConditionalPostconditionAnnotation -> org.checkerframework.framework.qual.ConditionalPostconditionAnnotation:
    java.lang.Class qualifier() -> qualifier
org.checkerframework.framework.qual.Covariant -> org.checkerframework.framework.qual.Covariant:
    int[] value() -> value
org.checkerframework.framework.qual.DefaultFor -> org.checkerframework.framework.qual.DefaultFor:
    org.checkerframework.framework.qual.TypeUseLocation[] value() -> value
    org.checkerframework.framework.qual.TypeKind[] typeKinds() -> typeKinds
    java.lang.Class[] types() -> types
org.checkerframework.framework.qual.DefaultInUncheckedCodeFor -> org.checkerframework.framework.qual.DefaultInUncheckedCodeFor:
    org.checkerframework.framework.qual.TypeUseLocation[] value() -> value
org.checkerframework.framework.qual.DefaultQualifier -> org.checkerframework.framework.qual.DefaultQualifier:
    java.lang.Class value() -> value
    org.checkerframework.framework.qual.TypeUseLocation[] locations() -> locations
org.checkerframework.framework.qual.DefaultQualifierForUse -> org.checkerframework.framework.qual.DefaultQualifierForUse:
    java.lang.Class[] value() -> value
org.checkerframework.framework.qual.DefaultQualifierInHierarchy -> org.checkerframework.framework.qual.DefaultQualifierInHierarchy:
org.checkerframework.framework.qual.DefaultQualifierInHierarchyInUncheckedCode -> org.checkerframework.framework.qual.DefaultQualifierInHierarchyInUncheckedCode:
org.checkerframework.framework.qual.DefaultQualifiers -> org.checkerframework.framework.qual.DefaultQualifiers:
    org.checkerframework.framework.qual.DefaultQualifier[] value() -> value
org.checkerframework.framework.qual.EnsuresQualifier -> org.checkerframework.framework.qual.EnsuresQualifier:
    java.lang.String[] expression() -> expression
    java.lang.Class qualifier() -> qualifier
org.checkerframework.framework.qual.EnsuresQualifierIf -> org.checkerframework.framework.qual.EnsuresQualifierIf:
    java.lang.String[] expression() -> expression
    java.lang.Class qualifier() -> qualifier
    boolean result() -> result
org.checkerframework.framework.qual.EnsuresQualifiers -> org.checkerframework.framework.qual.EnsuresQualifiers:
    org.checkerframework.framework.qual.EnsuresQualifier[] value() -> value
org.checkerframework.framework.qual.EnsuresQualifiersIf -> org.checkerframework.framework.qual.EnsuresQualifiersIf:
    org.checkerframework.framework.qual.EnsuresQualifierIf[] value() -> value
org.checkerframework.framework.qual.FieldInvariant -> org.checkerframework.framework.qual.FieldInvariant:
    java.lang.Class[] qualifier() -> qualifier
    java.lang.String[] field() -> field
org.checkerframework.framework.qual.FromByteCode -> org.checkerframework.framework.qual.FromByteCode:
org.checkerframework.framework.qual.FromStubFile -> org.checkerframework.framework.qual.FromStubFile:
org.checkerframework.framework.qual.IgnoreInWholeProgramInference -> org.checkerframework.framework.qual.IgnoreInWholeProgramInference:
org.checkerframework.framework.qual.InheritedAnnotation -> org.checkerframework.framework.qual.InheritedAnnotation:
org.checkerframework.framework.qual.InvisibleQualifier -> org.checkerframework.framework.qual.InvisibleQualifier:
org.checkerframework.framework.qual.JavaExpression -> org.checkerframework.framework.qual.JavaExpression:
org.checkerframework.framework.qual.LiteralKind -> org.checkerframework.framework.qual.LiteralKind:
    org.checkerframework.framework.qual.LiteralKind NULL -> NULL
    org.checkerframework.framework.qual.LiteralKind INT -> INT
    org.checkerframework.framework.qual.LiteralKind LONG -> LONG
    org.checkerframework.framework.qual.LiteralKind FLOAT -> FLOAT
    org.checkerframework.framework.qual.LiteralKind DOUBLE -> DOUBLE
    org.checkerframework.framework.qual.LiteralKind BOOLEAN -> BOOLEAN
    org.checkerframework.framework.qual.LiteralKind CHAR -> CHAR
    org.checkerframework.framework.qual.LiteralKind STRING -> STRING
    org.checkerframework.framework.qual.LiteralKind ALL -> ALL
    org.checkerframework.framework.qual.LiteralKind PRIMITIVE -> PRIMITIVE
    org.checkerframework.framework.qual.LiteralKind[] $VALUES -> a
    15:15:org.checkerframework.framework.qual.LiteralKind[] values() -> values
    15:15:org.checkerframework.framework.qual.LiteralKind valueOf(java.lang.String) -> valueOf
    15:15:void <init>(java.lang.String,int) -> <init>
    46:49:java.util.List allLiteralKinds() -> allLiteralKinds
    60:60:java.util.List primitiveLiteralKinds() -> primitiveLiteralKinds
    15:37:void <clinit>() -> <clinit>
org.checkerframework.framework.qual.MonotonicQualifier -> org.checkerframework.framework.qual.MonotonicQualifier:
    java.lang.Class value() -> value
org.checkerframework.framework.qual.NoDefaultQualifierForUse -> org.checkerframework.framework.qual.NoDefaultQualifierForUse:
    java.lang.Class[] value() -> value
org.checkerframework.framework.qual.PolyAll -> org.checkerframework.framework.qual.PolyAll:
org.checkerframework.framework.qual.PolymorphicQualifier -> org.checkerframework.framework.qual.PolymorphicQualifier:
    java.lang.Class value() -> value
org.checkerframework.framework.qual.PostconditionAnnotation -> org.checkerframework.framework.qual.PostconditionAnnotation:
    java.lang.Class qualifier() -> qualifier
org.checkerframework.framework.qual.PreconditionAnnotation -> org.checkerframework.framework.qual.PreconditionAnnotation:
    java.lang.Class qualifier() -> qualifier
org.checkerframework.framework.qual.QualifierArgument -> org.checkerframework.framework.qual.QualifierArgument:
    java.lang.String value() -> value
org.checkerframework.framework.qual.QualifierForLiterals -> org.checkerframework.framework.qual.QualifierForLiterals:
    org.checkerframework.framework.qual.LiteralKind[] value() -> value
    java.lang.String[] stringPatterns() -> stringPatterns
org.checkerframework.framework.qual.RelevantJavaTypes -> org.checkerframework.framework.qual.RelevantJavaTypes:
    java.lang.Class[] value() -> value
org.checkerframework.framework.qual.RequiresQualifier -> org.checkerframework.framework.qual.RequiresQualifier:
    java.lang.String[] expression() -> expression
    java.lang.Class qualifier() -> qualifier
org.checkerframework.framework.qual.RequiresQualifiers -> org.checkerframework.framework.qual.RequiresQualifiers:
    org.checkerframework.framework.qual.RequiresQualifier[] value() -> value
org.checkerframework.framework.qual.StubFiles -> org.checkerframework.framework.qual.StubFiles:
    java.lang.String[] value() -> value
org.checkerframework.framework.qual.SubtypeOf -> org.checkerframework.framework.qual.SubtypeOf:
    java.lang.Class[] value() -> value
org.checkerframework.framework.qual.TargetLocations -> org.checkerframework.framework.qual.TargetLocations:
    org.checkerframework.framework.qual.TypeUseLocation[] value() -> value
org.checkerframework.framework.qual.TypeKind -> org.checkerframework.framework.qual.TypeKind:
    org.checkerframework.framework.qual.TypeKind BOOLEAN -> BOOLEAN
    org.checkerframework.framework.qual.TypeKind BYTE -> BYTE
    org.checkerframework.framework.qual.TypeKind SHORT -> SHORT
    org.checkerframework.framework.qual.TypeKind INT -> INT
    org.checkerframework.framework.qual.TypeKind LONG -> LONG
    org.checkerframework.framework.qual.TypeKind CHAR -> CHAR
    org.checkerframework.framework.qual.TypeKind FLOAT -> FLOAT
    org.checkerframework.framework.qual.TypeKind DOUBLE -> DOUBLE
    org.checkerframework.framework.qual.TypeKind VOID -> VOID
    org.checkerframework.framework.qual.TypeKind NONE -> NONE
    org.checkerframework.framework.qual.TypeKind NULL -> NULL
    org.checkerframework.framework.qual.TypeKind ARRAY -> ARRAY
    org.checkerframework.framework.qual.TypeKind DECLARED -> DECLARED
    org.checkerframework.framework.qual.TypeKind ERROR -> ERROR
    org.checkerframework.framework.qual.TypeKind TYPEVAR -> TYPEVAR
    org.checkerframework.framework.qual.TypeKind WILDCARD -> WILDCARD
    org.checkerframework.framework.qual.TypeKind PACKAGE -> PACKAGE
    org.checkerframework.framework.qual.TypeKind EXECUTABLE -> EXECUTABLE
    org.checkerframework.framework.qual.TypeKind OTHER -> OTHER
    org.checkerframework.framework.qual.TypeKind UNION -> UNION
    org.checkerframework.framework.qual.TypeKind INTERSECTION -> INTERSECTION
    org.checkerframework.framework.qual.TypeKind[] $VALUES -> a
    12:12:org.checkerframework.framework.qual.TypeKind[] values() -> values
    12:12:org.checkerframework.framework.qual.TypeKind valueOf(java.lang.String) -> valueOf
    12:12:void <init>(java.lang.String,int) -> <init>
    12:74:void <clinit>() -> <clinit>
org.checkerframework.framework.qual.TypeUseLocation -> org.checkerframework.framework.qual.TypeUseLocation:
    org.checkerframework.framework.qual.TypeUseLocation FIELD -> FIELD
    org.checkerframework.framework.qual.TypeUseLocation LOCAL_VARIABLE -> LOCAL_VARIABLE
    org.checkerframework.framework.qual.TypeUseLocation RESOURCE_VARIABLE -> RESOURCE_VARIABLE
    org.checkerframework.framework.qual.TypeUseLocation EXCEPTION_PARAMETER -> EXCEPTION_PARAMETER
    org.checkerframework.framework.qual.TypeUseLocation RECEIVER -> RECEIVER
    org.checkerframework.framework.qual.TypeUseLocation PARAMETER -> PARAMETER
    org.checkerframework.framework.qual.TypeUseLocation RETURN -> RETURN
    org.checkerframework.framework.qual.TypeUseLocation CONSTRUCTOR_RESULT -> CONSTRUCTOR_RESULT
    org.checkerframework.framework.qual.TypeUseLocation LOWER_BOUND -> LOWER_BOUND
    org.checkerframework.framework.qual.TypeUseLocation EXPLICIT_LOWER_BOUND -> EXPLICIT_LOWER_BOUND
    org.checkerframework.framework.qual.TypeUseLocation IMPLICIT_LOWER_BOUND -> IMPLICIT_LOWER_BOUND
    org.checkerframework.framework.qual.TypeUseLocation UPPER_BOUND -> UPPER_BOUND
    org.checkerframework.framework.qual.TypeUseLocation EXPLICIT_UPPER_BOUND -> EXPLICIT_UPPER_BOUND
    org.checkerframework.framework.qual.TypeUseLocation IMPLICIT_UPPER_BOUND -> IMPLICIT_UPPER_BOUND
    org.checkerframework.framework.qual.TypeUseLocation OTHERWISE -> OTHERWISE
    org.checkerframework.framework.qual.TypeUseLocation ALL -> ALL
    org.checkerframework.framework.qual.TypeUseLocation[] $VALUES -> a
    12:12:org.checkerframework.framework.qual.TypeUseLocation[] values() -> values
    12:12:org.checkerframework.framework.qual.TypeUseLocation valueOf(java.lang.String) -> valueOf
    12:12:void <init>(java.lang.String,int) -> <init>
    12:94:void <clinit>() -> <clinit>
org.checkerframework.framework.qual.Unused -> org.checkerframework.framework.qual.Unused:
    java.lang.Class when() -> when
org.checkerframework.framework.qual.UpperBoundFor -> org.checkerframework.framework.qual.UpperBoundFor:
    org.checkerframework.framework.qual.TypeKind[] typeKinds() -> typeKinds
    java.lang.Class[] types() -> types
org.checkerframework.framework.util.PurityUnqualified -> org.checkerframework.framework.util.PurityUnqualified:
org.example.l011.Main -> org.example.l011.Main:
    6:6:void <init>() -> <init>
    10:20:void main(java.lang.String[]) -> main
    23:29:void calcTime(java.lang.Runnable) -> a
    19:19:void lambda$main$0(java.util.List,java.util.Collection) -> a
